"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletConnectSigner = void 0;
const ethUtil = __importStar(require("ethereumjs-util"));
const types_1 = require("./types");
/**
 * Implements the signer interface on top of the WalletConnect interface.
 */
class WalletConnectSigner {
    /**
     * Construct a new instance of a WalletConnectSigner
     */
    constructor(client, session, account, chainId) {
        this.client = client;
        this.session = session;
        this.account = account;
        this.chainId = chainId;
        this.getNativeKey = () => this.account;
    }
    signTransaction() {
        throw new Error('signTransaction unimplemented; use signRawTransaction');
    }
    request(method, params) {
        return this.client.request({
            topic: this.session.topic,
            chainId: `eip155:${this.chainId}`,
            request: {
                method,
                params,
            },
        });
    }
    // is this misnamed its not raw ? https://docs.walletconnect.com/2.0/advanced/rpc-reference/ethereum-rpc#eth_sendrawtransaction
    signRawTransaction(tx) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.request(types_1.SupportedMethods.signTransaction, [tx]);
            // Note: this change was added because wallets can either return an
            // EncodedTransaction object or just the raw signed tx.
            // Both should work.
            if (typeof result === 'string') {
                return { raw: result };
            }
            return result;
        });
    }
    signTypedData(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.request(types_1.SupportedMethods.signTypedData, [
                this.account,
                JSON.stringify(data),
            ]);
            return ethUtil.fromRpcSig(result);
        });
    }
    signPersonalMessage(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.request(types_1.SupportedMethods.personalSign, [
                data,
                this.account,
            ]);
            return ethUtil.fromRpcSig(result);
        });
    }
    decrypt(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.request(types_1.SupportedMethods.decrypt, [
                this.account,
                data,
            ]);
            return Buffer.from(result, 'hex');
        });
    }
    computeSharedSecret(publicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.request(types_1.SupportedMethods.computeSharedSecret, [this.account, publicKey]);
            return Buffer.from(result, 'hex');
        });
    }
}
exports.WalletConnectSigner = WalletConnectSigner;
//# sourceMappingURL=wc-signer.js.map