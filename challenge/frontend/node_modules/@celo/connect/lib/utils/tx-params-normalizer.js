"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxParamsNormalizer = void 0;
var bignumber_js_1 = __importDefault(require("bignumber.js"));
function isEmpty(value) {
    return (value === undefined ||
        value === null ||
        value === '0' ||
        value.toLowerCase() === '0x' ||
        value.toLowerCase() === '0x0');
}
function isPresent(value) {
    return !isEmpty(value);
}
var TxParamsNormalizer = /** @class */ (function () {
    function TxParamsNormalizer(connection) {
        this.connection = connection;
        this.chainId = null;
        this.gatewayFeeRecipient = null;
    }
    TxParamsNormalizer.prototype.populate = function (celoTxParams) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var txParams, _e, chainId, nonce, gas, maxFeePerGas, clientMaxPriorityFeePerGas;
            var _this = this;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        txParams = __assign({}, celoTxParams);
                        if (isPresent(txParams.gatewayFeeRecipient) || isPresent(txParams.gatewayFee)) {
                            console.warn('Gateway fee has been deprecated and will be removed see: https://github.com/celo-org/celo-proposals/blob/master/CIPs/cip-0057.md');
                        }
                        return [4 /*yield*/, Promise.all([
                                function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        if (txParams.chainId == null) {
                                            return [2 /*return*/, this.getChainId()];
                                        }
                                        return [2 /*return*/, txParams.chainId];
                                    });
                                }); },
                                function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        if (txParams.nonce == null) {
                                            return [2 /*return*/, this.connection.nonce(txParams.from.toString())];
                                        }
                                        return [2 /*return*/, txParams.nonce];
                                    });
                                }); },
                                function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        if (!txParams.gas || isEmpty(txParams.gas.toString())) {
                                            return [2 /*return*/, this.connection.estimateGas(txParams)];
                                        }
                                        return [2 /*return*/, txParams.gas];
                                    });
                                }); },
                                function () { return __awaiter(_this, void 0, void 0, function () {
                                    var suggestedPrice, priceWithRoom;
                                    var _a, _b;
                                    return __generator(this, function (_c) {
                                        switch (_c.label) {
                                            case 0:
                                                if (!(isEmpty((_a = txParams.gasPrice) === null || _a === void 0 ? void 0 : _a.toString()) &&
                                                    isEmpty((_b = txParams.maxFeePerGas) === null || _b === void 0 ? void 0 : _b.toString()))) return [3 /*break*/, 2];
                                                return [4 /*yield*/, this.connection.gasPrice(txParams.feeCurrency)
                                                    // add small buffer to suggested price like other libraries do
                                                ];
                                            case 1:
                                                suggestedPrice = _c.sent();
                                                priceWithRoom = new bignumber_js_1.default(suggestedPrice)
                                                    .times(120)
                                                    .dividedBy(100)
                                                    .integerValue()
                                                    .toString(16);
                                                return [2 /*return*/, "0x".concat(priceWithRoom)];
                                            case 2: return [2 /*return*/, txParams.maxFeePerGas];
                                        }
                                    });
                                }); },
                            ].map(function (fn) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                return [2 /*return*/, fn()];
                            }); }); }))];
                    case 1:
                        _e = _f.sent(), chainId = _e[0], nonce = _e[1], gas = _e[2], maxFeePerGas = _e[3];
                        txParams.chainId = chainId;
                        txParams.nonce = nonce;
                        txParams.gas = gas;
                        txParams.maxFeePerGas = maxFeePerGas;
                        if (!(isPresent((_a = txParams.maxFeePerGas) === null || _a === void 0 ? void 0 : _a.toString()) &&
                            isEmpty((_b = txParams.maxPriorityFeePerGas) === null || _b === void 0 ? void 0 : _b.toString()))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.connection.rpcCaller.call('eth_maxPriorityFeePerGas', [])];
                    case 2:
                        clientMaxPriorityFeePerGas = _f.sent();
                        txParams.maxPriorityFeePerGas = clientMaxPriorityFeePerGas.result;
                        _f.label = 3;
                    case 3:
                        // remove gasPrice if maxFeePerGas is set
                        if (isPresent((_c = txParams.gasPrice) === null || _c === void 0 ? void 0 : _c.toString()) && isPresent((_d = txParams.maxFeePerGas) === null || _d === void 0 ? void 0 : _d.toString())) {
                            txParams.gasPrice = undefined;
                            delete txParams.gasPrice;
                        }
                        return [2 /*return*/, txParams];
                }
            });
        });
    };
    TxParamsNormalizer.prototype.getChainId = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.chainId === null)) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.connection.chainId()];
                    case 1:
                        _a.chainId = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/, this.chainId];
                }
            });
        });
    };
    // Right now, Forno does not expose a node's coinbase so we can't
    // set the gatewayFeeRecipient. Once that is fixed, we can reenable
    // this.
    // @ts-ignore - see comment above
    TxParamsNormalizer.prototype.getCoinbase = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.gatewayFeeRecipient === null)) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.connection.coinbase()];
                    case 1:
                        _a.gatewayFeeRecipient = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (this.gatewayFeeRecipient == null) {
                            throw new Error('missing-tx-params-populator@getCoinbase: Coinbase is null, we are not connected to a full ' +
                                'node, cannot sign transactions locally');
                        }
                        return [2 /*return*/, this.gatewayFeeRecipient];
                }
            });
        });
    };
    return TxParamsNormalizer;
}());
exports.TxParamsNormalizer = TxParamsNormalizer;
//# sourceMappingURL=tx-params-normalizer.js.map