"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractKitProvider = exports.CeloProvider = exports.ContextProvider = exports.useReactCeloContext = void 0;
const base_1 = require("@celo/contractkit/lib/base");
const react_1 = __importStar(require("react"));
const ios_viewport_fix_1 = __importDefault(require("./components/ios-viewport-fix"));
const constants_1 = require("./constants");
const modals_1 = require("./modals");
const react_celo_provider_state_1 = require("./react-celo-provider-state");
const use_celo_methods_1 = require("./use-celo-methods");
const logger_1 = require("./utils/logger");
_a = __read(createReactCeloContext(), 2), exports.useReactCeloContext = _a[0], exports.ContextProvider = _a[1];
// This makes it so we don't have to provide defaults for our context
// and also so that if our hooks are used outside of the Provider it
// will throw an error.
function createReactCeloContext() {
    const contractKitContext = react_1.default.createContext(undefined);
    const useCtx = () => {
        const c = react_1.default.useContext(contractKitContext);
        if (!c)
            throw new Error('Components using the react-celo hook must be a child of a CeloProvider');
        return c;
    };
    return [useCtx, contractKitContext.Provider];
}
const CeloProvider = ({ children, connectModal, actionModal, dapp, manualNetworkMode, network, // TODO:#246 remove when network prop is removed
defaultNetwork = constants_1.Mainnet.name, theme, networks = constants_1.DEFAULT_NETWORKS, feeCurrency = base_1.CeloContract.GoldToken, buildContractsCache, logger, }) => {
    if (logger) {
        (0, logger_1.setApplicationLogger)(logger);
    }
    const [state, dispatch] = (0, react_celo_provider_state_1.useCeloState)({
        dapp,
        manualNetworkMode,
        network,
        defaultNetwork,
        theme,
        networks,
        feeCurrency,
    });
    const methods = (0, use_celo_methods_1.useCeloMethods)(state, dispatch, buildContractsCache);
    // what happens when i disconnect, need to be able to switch chains still.
    // need to init Unauthenticated connector both at startup and when last chain was disconnected or Replace the null object pattern
    // benefit is that you might still want to just passively watch a chain
    // downside is there are some sementics that get weird
    (0, react_1.useEffect)(() => {
        (0, logger_1.getApplicationLogger)().debug('onLoad Initialisation of', state.connector.type, 'Connector');
        methods
            .initConnector(state.connector, state.address)
            .catch((e) => __awaiter(void 0, void 0, void 0, function* () {
            (0, logger_1.getApplicationLogger)().error('onLoad Initialisation Failed', state.connector.type, e);
            // If the connector fails to initialise on mount then we reset.
            yield methods.disconnect();
        }));
        // We only want this to run on mount so the deps array is empty.
        /* eslint-disable-next-line */
    }, []);
    return (react_1.default.createElement(exports.ContextProvider, { value: [state, dispatch, methods] },
        react_1.default.createElement(ios_viewport_fix_1.default, null),
        react_1.default.createElement(modals_1.ConnectModal, Object.assign({}, connectModal)),
        react_1.default.createElement(modals_1.ActionModal, Object.assign({}, actionModal)),
        children));
};
exports.CeloProvider = CeloProvider;
/**
 *
 * @deprecated Use the alias {@link CeloProvider} Component instead.
 */
exports.ContractKitProvider = exports.CeloProvider;
//# sourceMappingURL=react-celo-provider.js.map