"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const wallet_walletconnect_1 = require("@celo/wallet-walletconnect");
const react_1 = require("react");
const connectors_1 = require("../connectors");
const common_1 = require("../connectors/common");
const use_celo_1 = require("../use-celo");
const logger_1 = require("../utils/logger");
const use_wallet_version_1 = require("./use-wallet-version");
function useWalletConnectConnector(onSubmit, autoOpen, walletId, getDeeplinkUrl) {
    const { dapp, network, feeCurrency, initConnector, resetInitError, initError, disconnect, manualNetworkMode, } = (0, use_celo_1.useCeloInternal)();
    const [uri, setUri] = (0, react_1.useState)(null);
    const [loading, setLoading] = (0, react_1.useState)(false);
    const [error, setError] = (0, react_1.useState)(null);
    const version = (0, use_wallet_version_1.useWalletVersion)(walletId);
    const [retryValue, setRetry] = (0, react_1.useState)(0);
    const retry = (0, react_1.useCallback)(() => {
        setUri(null);
        setError(null);
        resetInitError();
        disconnect;
        setLoading(false);
        setRetry((x) => x + 1);
    }, [disconnect, resetInitError]);
    (0, react_1.useEffect)(() => {
        let mounted = true;
        let connector;
        void (() => __awaiter(this, void 0, void 0, function* () {
            if (version == null) {
                (0, logger_1.getApplicationLogger)().debug('[useWalletConnectConnector]', 'Initialization awaiting for registry');
                return;
            }
            if (!dapp.walletConnectProjectId) {
                const err = 'Missing WalletConnect Project Id, create one here: https://docs.walletconnect.com/2.0/cloud/relay';
                (0, logger_1.getApplicationLogger)().debug('[useWalletConnectConnector]', err);
                setError(err);
                return;
            }
            connector = new connectors_1.WalletConnectConnector(network, manualNetworkMode, feeCurrency, {
                projectId: dapp.walletConnectProjectId,
                chainId: network.chainId,
                init: {
                    metadata: Object.assign(Object.assign({}, dapp), { icons: [dapp.icon] }),
                },
            }, autoOpen, getDeeplinkUrl, version, walletId);
            connector.on(common_1.ConnectorEvents.WC_URI_RECEIVED, (nextURI) => {
                (0, logger_1.getApplicationLogger)().debug('[useWalletConnectConnector]', 'Generated WC URI', nextURI);
                if (mounted) {
                    setUri(nextURI);
                }
            });
            connector.on(common_1.ConnectorEvents.DISCONNECTED, () => {
                (0, logger_1.getApplicationLogger)().debug('[useWalletConnectConnector]', 'Lost connection to WC servers');
                setError('Connection with wallet was closed.');
                setUri(null);
            });
            try {
                yield initConnector(connector);
                onSubmit(connector);
            }
            catch (reason) {
                if (reason === wallet_walletconnect_1.CANCELED) {
                    (0, logger_1.getApplicationLogger)().debug('[useWalletConnectConnector]', 'User canceled connection');
                    // disconnect so we dont have open connectors all over the place
                    return disconnect();
                }
                (0, logger_1.getApplicationLogger)().debug('[useWalletConnectConnector]', 'WC error', reason);
                setError(reason.message);
            }
        }))();
        return () => {
            // This will be called when unmounting the component rendering the qrcode
            // if initialised is false, it means the connection was canceled or errored.
            // We should cleanup the state
            if (!(connector === null || connector === void 0 ? void 0 : connector.initialised)) {
                // disconnect so we dont have open connectors all over the place
                void disconnect();
            }
            setUri(null);
            mounted = false;
        };
        // adding all deps here causes an infinite loop.
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [walletId, network.chainId, retryValue]);
    return { uri, error: error || (initError === null || initError === void 0 ? void 0 : initError.message), loading, retry };
}
exports.default = useWalletConnectConnector;
//# sourceMappingURL=use-wallet-connect-connector.js.map