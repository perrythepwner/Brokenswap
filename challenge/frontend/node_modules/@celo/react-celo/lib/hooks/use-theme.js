"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const default_1 = __importDefault(require("../theme/default"));
const types_1 = require("../types");
const use_celo_1 = require("../use-celo");
class ModeState {
    constructor() {
        this._mode = types_1.Mode.Light;
        this.listeners = [];
    }
    set mode(mode) {
        if (this._mode === mode)
            return;
        this._mode = mode;
        this.listeners.forEach((cb) => cb(this._mode));
    }
    get mode() {
        return this._mode;
    }
    addEventListener(listener) {
        this.listeners.push(listener);
    }
    removeEventListener(listener) {
        this.listeners = this.listeners.filter((x) => x !== listener);
    }
    removeEventListeners() {
        this.listeners = [];
    }
}
const state = new ModeState();
// const COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';
const DARK_CLASSES = ['dark', 'tw-dark'];
function hasDarkClasses(elem) {
    // const hasDarkMedia = window.matchMedia(COLOR_SCHEME_QUERY).matches;
    return DARK_CLASSES.some((cls) => elem.classList.contains(cls));
}
if (typeof MutationObserver !== 'undefined') {
    const body = document.getElementsByTagName('body');
    const html = document.getElementsByTagName('html');
    const elems = [...body, ...html];
    const mutationCallback = () => {
        const isDark = elems.some(hasDarkClasses);
        state.mode = isDark ? types_1.Mode.Dark : types_1.Mode.Light;
    };
    const observer = new MutationObserver(mutationCallback);
    mutationCallback();
    elems.forEach((elem) => {
        observer.observe(elem, {
            subtree: false,
            childList: false,
            attributeFilter: ['class'],
        });
    });
}
function useTheme() {
    const { theme } = (0, use_celo_1.useCeloInternal)();
    const [mode, setMode] = (0, react_1.useState)(state.mode);
    (0, react_1.useEffect)(() => {
        const cb = (m) => setMode(m);
        state.addEventListener(cb);
        return () => {
            state.removeEventListener(cb);
        };
    }, []);
    return theme || default_1.default[mode];
}
exports.default = useTheme;
//# sourceMappingURL=use-theme.js.map