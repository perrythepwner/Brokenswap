"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectModal = exports.styles = void 0;
const react_1 = __importStar(require("react"));
const react_device_detect_1 = require("react-device-detect");
const react_modal_1 = __importDefault(require("react-modal"));
const modal_container_1 = __importDefault(require("../components/modal-container"));
const tray_1 = __importDefault(require("../components/tray"));
const constants_1 = require("../constants");
const use_providers_1 = __importStar(require("../hooks/use-providers"));
const use_theme_1 = __importDefault(require("../hooks/use-theme"));
const screens_1 = require("../screens");
const placeholder_1 = __importDefault(require("../screens/placeholder"));
const wallet_connect_1 = require("../screens/wallet-connect");
const use_celo_1 = require("../use-celo");
const colors_1 = require("../utils/colors");
const sort_1 = require("../utils/sort");
const tailwind_1 = __importDefault(require("../utils/tailwind"));
exports.styles = (0, tailwind_1.default)({
    overlay: `tw-z-40
      tw-fixed
      tw-inset-0`,
    modal: react_device_detect_1.isMobile
        ? `
      tw-h-screen
      tw-w-screen`
        : `
      tw-overflow-hidden
      tw-absolute
      tw-top-1/2
      tw-right-auto
      tw-bottom-auto
      tw-left-1/2
      tw--translate-x-1/2
      tw--translate-y-1/2
      tw-border-none
      tw-padding-0
      tw-rounded-lg
      tw-drop-shadow
      dark:tw-drop-shadow`,
    portal: `
    tw-overflow-hidden`,
});
function walletToScreen(wallet) {
    const WalletConnectCustomWrapper = ({ onSubmit, }) => (react_1.default.createElement(wallet_connect_1.WalletConnect, { onSubmit: onSubmit, provider: (0, use_providers_1.walletToProvider)(wallet) }));
    return WalletConnectCustomWrapper;
}
const ConnectModal = ({ reactModalProps, screens = screens_1.defaultScreens, title = 'Connect a wallet', providersOptions = {}, }) => {
    var _a;
    const theme = (0, use_theme_1.default)();
    const { connectionCallback, resetInitError } = (0, use_celo_1.useCeloInternal)();
    const [search, setSearch] = (0, react_1.useState)('');
    const [adding, setAdding] = (0, react_1.useState)(null);
    const onClickProvider = (provider) => {
        resetInitError();
        setAdding(provider);
    };
    const back = (0, react_1.useCallback)(() => {
        resetInitError();
        setSearch('');
        setAdding(null);
    }, [resetInitError, setSearch, setAdding]);
    const close = (0, react_1.useCallback)(() => {
        back();
        connectionCallback === null || connectionCallback === void 0 ? void 0 : connectionCallback(false);
    }, [back, connectionCallback]);
    const onSubmit = (0, react_1.useCallback)((connector) => {
        connectionCallback === null || connectionCallback === void 0 ? void 0 : connectionCallback(connector);
        back();
    }, [back, connectionCallback]);
    const { hideFromDefaults, additionalWCWallets, sort = sort_1.defaultProviderSort, searchable = true, } = providersOptions;
    const { wallets, allScreens, includedDefaultProviders } = (0, react_1.useMemo)(() => {
        let _screens;
        const _wallets = additionalWCWallets || [];
        if (hideFromDefaults) {
            if (hideFromDefaults === true) {
                _screens = {};
            }
            else {
                _screens = Object.keys(screens)
                    .filter((x) => !hideFromDefaults.includes(x))
                    .reduce((acc, provider) => (Object.assign(Object.assign({}, acc), { [provider]: screens[provider] })), {});
            }
        }
        else {
            _screens = screens;
        }
        return {
            includedDefaultProviders: Object.keys(_screens),
            wallets: _wallets,
            allScreens: _wallets.reduce((acc, wallet) => {
                acc[wallet.id] = walletToScreen(wallet);
                return acc;
            }, _screens),
        };
    }, [screens, hideFromDefaults, additionalWCWallets]);
    const providers = (0, use_providers_1.default)(wallets, includedDefaultProviders, sort, search);
    const ProviderElement = adding && (allScreens === null || allScreens === void 0 ? void 0 : allScreens[adding]);
    const content = ProviderElement ? (react_1.default.createElement(ProviderElement, { onSubmit: onSubmit, provider: constants_1.PROVIDERS[adding] })) : (react_1.default.createElement(placeholder_1.default, null));
    return (react_1.default.createElement(react_modal_1.default, Object.assign({ portalClassName: exports.styles.portal, htmlOpenClassName: 'react-celo-modal-open-html', bodyOpenClassName: 'react-celo-modal-open-body', isOpen: !!connectionCallback, className: exports.styles.modal, overlayClassName: exports.styles.overlay }, reactModalProps, { onRequestClose: close, style: {
            content: {
                background: theme.background,
            },
            overlay: Object.assign({ background: (0, colors_1.hexToRGB)(theme.background, 0.75) }, (_a = reactModalProps === null || reactModalProps === void 0 ? void 0 : reactModalProps.style) === null || _a === void 0 ? void 0 : _a.overlay),
        }, shouldCloseOnOverlayClick: !react_device_detect_1.isMobile, ariaHideApp: false }),
        react_1.default.createElement(modal_container_1.default, { onClose: close, onBack: back, selectedProvider: adding, tray: react_1.default.createElement(tray_1.default, Object.assign({ providers: providers, title: title, onClickProvider: onClickProvider, selectedProvider: adding }, (searchable && {
                search: search,
                onSearch: (str) => setSearch(str),
            }))), content: content })));
};
exports.ConnectModal = ConnectModal;
//# sourceMappingURL=connect.js.map