"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractConnector = exports.ConnectorEvents = exports.updateFeeCurrency = exports.UnsupportedChainIdError = void 0;
const base_1 = require("@celo/contractkit/lib/base");
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const logger_1 = require("../utils/logger");
class UnsupportedChainIdError extends Error {
    constructor(chainID) {
        super(`Unsupported chain ID: ${chainID}`);
        this.chainID = chainID;
        this.name = UnsupportedChainIdError.NAME;
    }
}
exports.UnsupportedChainIdError = UnsupportedChainIdError;
UnsupportedChainIdError.NAME = 'UnsupportedChainIdError';
function updateFeeCurrency(feeContract) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!this.supportsFeeCurrency()) {
            return;
        }
        this.feeCurrency = feeContract;
        const address = feeContract === base_1.CeloContract.GoldToken
            ? undefined
            : yield this.kit.registry.addressFor(feeContract);
        this.kit.connection.defaultFeeCurrency = address;
    });
}
exports.updateFeeCurrency = updateFeeCurrency;
var ConnectorEvents;
(function (ConnectorEvents) {
    ConnectorEvents["CONNECTED"] = "CONNECTED";
    ConnectorEvents["DISCONNECTED"] = "DISCONNECTED";
    ConnectorEvents["ADDRESS_CHANGED"] = "ADDRESS_CHANGED";
    ConnectorEvents["NETWORK_CHANGED"] = "NETWORK_CHANGED";
    ConnectorEvents["NETWORK_CHANGE_FAILED"] = "NETWORK_CHANGE_FAILED";
    ConnectorEvents["WALLET_CHAIN_CHANGED"] = "WALLET_CHAIN_CHANGED";
    ConnectorEvents["WC_URI_RECEIVED"] = "WC_URI_RECEIVED";
    ConnectorEvents["WC_INITIALISED"] = "WC_INITIALISED";
    ConnectorEvents["WC_ERROR"] = "WC_ERROR";
})(ConnectorEvents = exports.ConnectorEvents || (exports.ConnectorEvents = {}));
class AbstractConnector {
    constructor() {
        this.emitter = new eventemitter3_1.default();
        this.on = (event, fn) => {
            this.emitter.on(event, fn);
        };
        this.emit = (event, data) => {
            (0, logger_1.getApplicationLogger)().debug('[CONNECTOR EMIT]', this.type, event, data !== null && data !== void 0 ? data : '');
            this.emitter.emit(event, data);
        };
    }
    get account() {
        var _a, _b;
        return (_b = (_a = this.kit) === null || _a === void 0 ? void 0 : _a.connection) === null || _b === void 0 ? void 0 : _b.defaultAccount;
    }
    set account(address) {
        this.kit.connection.defaultAccount = address;
    }
    supportsFeeCurrency() {
        return false;
    }
    disconnect() {
        this.emit(ConnectorEvents.DISCONNECTED);
        this.emitter.removeAllListeners();
    }
}
exports.AbstractConnector = AbstractConnector;
//# sourceMappingURL=common.js.map