"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mini_kit_1 = require("@celo/contractkit/lib/mini-kit");
const constants_1 = require("../constants");
const common_1 = require("./common");
class CeloExtensionWalletConnector extends common_1.AbstractConnector {
    constructor(network, feeCurrency) {
        super();
        this.network = network;
        this.feeCurrency = feeCurrency;
        this.initialised = false;
        this.type = constants_1.WalletTypes.CeloExtensionWallet;
        this.kit = (0, mini_kit_1.newKit)(network.rpcUrl);
    }
    initialise() {
        return __awaiter(this, void 0, void 0, function* () {
            const { default: Web3 } = yield Promise.resolve().then(() => __importStar(require('web3')));
            const celo = window.celo;
            if (!celo) {
                throw new Error('Celo Extension Wallet not installed');
            }
            const web3 = new Web3(celo);
            yield celo.enable();
            web3.currentProvider.publicConfigStore.on('update', ({ networkVersion }) => {
                if (networkVersion !== this.network.chainId) {
                    this.emit(common_1.ConnectorEvents.WALLET_CHAIN_CHANGED, networkVersion);
                }
            });
            this.kit = (0, mini_kit_1.newKitFromWeb3)(web3);
            const [defaultAccount] = yield this.kit.connection.web3.eth.getAccounts();
            this.kit.connection.defaultAccount = defaultAccount;
            this.initialised = true;
            const walletChainId = (yield celo.request({
                method: 'eth_chainId',
            }));
            this.emit(common_1.ConnectorEvents.CONNECTED, {
                walletChainId: parseInt(walletChainId, 16),
                walletType: constants_1.WalletTypes.CeloExtensionWallet,
                address: defaultAccount,
                networkName: this.network.name,
            });
            return this;
        });
    }
    continueNetworkUpdateFromWallet(network) {
        this.network = network; // must set to prevent loop
        const web3 = this.kit.connection.web3;
        this.newKit(web3, this.account); // kit caches things so it need to be recreated
        this.emit(common_1.ConnectorEvents.NETWORK_CHANGED, network.name);
    }
    startNetworkChangeFromApp() {
        throw new Error('Celo Extension wallet does not support changing network from app');
    }
    supportsFeeCurrency() {
        return false;
    }
    newKit(web3, defaultAccount) {
        this.kit = (0, mini_kit_1.newKitFromWeb3)(web3);
        this.kit.connection.defaultAccount = defaultAccount;
    }
    close() {
        try {
            this.kit.connection.stop();
        }
        finally {
            this.disconnect();
        }
    }
}
exports.default = CeloExtensionWalletConnector;
//# sourceMappingURL=celo-extension-wallet.js.map