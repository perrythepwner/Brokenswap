"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mini_kit_1 = require("@celo/contractkit/lib/mini-kit");
const wallet_ledger_1 = require("@celo/wallet-ledger");
const hw_transport_webusb_1 = __importDefault(require("@ledgerhq/hw-transport-webusb"));
const constants_1 = require("../constants");
const common_1 = require("./common");
class LedgerConnector extends common_1.AbstractConnector {
    constructor(network, index, feeCurrency) {
        super();
        this.network = network;
        this.index = index;
        this.feeCurrency = feeCurrency;
        this.initialised = false;
        this.type = constants_1.WalletTypes.Ledger;
        this.updateFeeCurrency = common_1.updateFeeCurrency.bind(this);
        this.kit = (0, mini_kit_1.newKit)(network.rpcUrl);
    }
    getWallet() {
        return this.wallet;
    }
    createWallet(index) {
        return __awaiter(this, void 0, void 0, function* () {
            const transport = yield hw_transport_webusb_1.default.create();
            this.wallet = yield (0, wallet_ledger_1.newLedgerWalletWithSetup)(transport, [index]);
            return this.wallet;
        });
    }
    createKit(wallet, network) {
        return __awaiter(this, void 0, void 0, function* () {
            this.kit = (0, mini_kit_1.newKit)(network.rpcUrl, wallet);
            this.kit.connection.defaultAccount = wallet.getAccounts()[0];
            if (this.feeCurrency) {
                yield this.updateFeeCurrency(this.feeCurrency);
            }
        });
    }
    initialise() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.initialised) {
                return this;
            }
            const wallet = yield this.createWallet(this.index);
            yield this.createKit(wallet, this.network);
            this.initialised = true;
            this.emit(common_1.ConnectorEvents.CONNECTED, {
                walletChainId: null,
                walletType: this.type,
                address: this.kit.connection.defaultAccount,
                index: this.index,
                networkName: this.network.name,
            });
            return this;
        });
    }
    supportsFeeCurrency() {
        return true;
    }
    startNetworkChangeFromApp(network) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.createKit(this.getWallet(), network);
            this.emit(common_1.ConnectorEvents.NETWORK_CHANGED, network.name);
        });
    }
    close() {
        try {
            this.kit.connection.stop();
        }
        finally {
            this.disconnect();
        }
    }
}
exports.default = LedgerConnector;
//# sourceMappingURL=ledger.js.map