"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CeloExtensionWallet = void 0;
const react_1 = __importStar(require("react"));
const connector_screen_1 = __importDefault(require("../components/connector-screen"));
const spinner_1 = __importDefault(require("../components/spinner"));
const connectors_1 = require("../connectors");
const constants_1 = require("../constants");
const use_theme_1 = __importDefault(require("../hooks/use-theme"));
const use_celo_1 = require("../use-celo");
const tailwind_1 = __importDefault(require("../utils/tailwind"));
const styles = (0, tailwind_1.default)({
    container: `
    tw-my-8
    tw-flex
    tw-flex-col
    tw-items-center
    tw-justify-center
    grid tw-gap-8
    tw-flex-grow`,
    error: `
    tw-text-md
    tw-pb-4`,
    spinnerContainer: `
    tw-relative
    tw-gap-2
    tw-items-center
    tw-flex
    tw-flex-col`,
    disclaimer: `
    tw-text-center
    tw-text-sm`,
});
const provider = constants_1.PROVIDERS['Celo Extension Wallet'];
const CeloExtensionWallet = ({ onSubmit }) => {
    const theme = (0, use_theme_1.default)();
    const { network, initConnector, initError: error, feeCurrency, } = (0, use_celo_1.useCeloInternal)();
    const initialiseConnection = (0, react_1.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
        const connector = new connectors_1.CeloExtensionWalletConnector(network, feeCurrency);
        yield initConnector(connector);
        void onSubmit(connector);
    }), [initConnector, network, onSubmit, feeCurrency]);
    (0, react_1.useEffect)(() => {
        if (provider.canConnect()) {
            void initialiseConnection();
        }
    }, [initialiseConnection]);
    return (react_1.default.createElement(connector_screen_1.default, { title: "Connect your Celo Extension Wallet", content: react_1.default.createElement("div", { className: styles.container }, error ? (react_1.default.createElement("p", { className: styles.error, style: { color: theme.error } }, error.message)) : provider.canConnect() ? (react_1.default.createElement("div", { className: styles.spinnerContainer },
            react_1.default.createElement(spinner_1.default, null),
            react_1.default.createElement("p", { className: styles.disclaimer }, "No pop-up? Check your if your MetaMask extension is unlocked."))) : (react_1.default.createElement("div", null,
            react_1.default.createElement("p", { className: styles.disclaimer, style: { color: theme.textSecondary } },
                provider.name,
                " not detected.",
                react_1.default.createElement("br", null),
                "Are you sure it is installed in this browser?")))), footer: {
            name: 'Celo Extension Wallet',
            url: provider.installURL,
        } }));
};
exports.CeloExtensionWallet = CeloExtensionWallet;
//# sourceMappingURL=cew.js.map