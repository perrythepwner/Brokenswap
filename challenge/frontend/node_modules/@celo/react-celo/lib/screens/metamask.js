"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetaMaskOrInjectedWallet = void 0;
const react_1 = __importDefault(require("react"));
const react_device_detect_1 = require("react-device-detect");
const button_1 = __importDefault(require("../components/button"));
const connector_screen_1 = __importDefault(require("../components/connector-screen"));
const spinner_1 = __importDefault(require("../components/spinner"));
const constants_1 = require("../constants");
const use_injected_connector_1 = require("../hooks/use-injected-connector");
const use_theme_1 = __importDefault(require("../hooks/use-theme"));
const ethereum_1 = require("../utils/ethereum");
const tailwind_1 = __importDefault(require("../utils/tailwind"));
const styles = (0, tailwind_1.default)({
    container: `
    tw-my-8
    tw-flex
    tw-flex-col
    tw-items-center
    tw-justify-center
    grid
    tw-gap-8
    tw-flex-grow`,
    error: `
    tw-text-md
    tw-pb-4`,
    spinnerContainer: `
    tw-relative
    tw-gap-2
    tw-items-center
    tw-flex
    tw-flex-col`,
    disclaimer: `
    tw-text-center
    tw-text-sm`,
    button: `
    tw-mt-6
    tw-px-4
    tw-py-2`,
});
const provider = constants_1.PROVIDERS['MetaMask'];
const MetaMaskOrInjectedWallet = ({ onSubmit }) => {
    const theme = (0, use_theme_1.default)();
    const isMetaMask = (0, ethereum_1.isEthereumFromMetamask)();
    const { error } = (0, use_injected_connector_1.useInjectedConnector)(onSubmit, isMetaMask);
    let content;
    if (react_device_detect_1.isMobile) {
        content = (react_1.default.createElement(button_1.default, { as: "a", href: provider.installURL, target: "_blank", rel: "noreferrer", className: styles.button }, provider.description));
    }
    else {
        if (error) {
            content = (react_1.default.createElement("p", { className: styles.error, style: { color: theme.error } }, error.message));
        }
        else if (provider.canConnect()) {
            content = (react_1.default.createElement("div", { className: styles.spinnerContainer },
                react_1.default.createElement(spinner_1.default, null),
                react_1.default.createElement("p", { className: styles.disclaimer }, "No pop-up? Check if your MetaMask extension is unlocked.")));
        }
        else {
            content = (react_1.default.createElement("div", null,
                react_1.default.createElement("p", { className: styles.disclaimer, style: { color: theme.textSecondary } },
                    provider.name,
                    " not detected.",
                    react_1.default.createElement("br", null),
                    "Are you sure it is installed in this browser?")));
        }
    }
    return (react_1.default.createElement(connector_screen_1.default, { title: "Connect your MetaMask wallet", content: react_1.default.createElement("div", { className: styles.container }, content), footer: { name: 'MetaMask', url: provider.installURL } }));
};
exports.MetaMaskOrInjectedWallet = MetaMaskOrInjectedWallet;
//# sourceMappingURL=metamask.js.map