"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RampInstantSDK = exports.RampInstantEventTypes = void 0;
var body_scroll_lock_1 = require("body-scroll-lock");
var init_helpers_1 = require("./init-helpers");
var init_helpers_2 = require("./init-helpers");
var types_1 = require("./types");
var utils_1 = require("./utils");
var types_2 = require("./types");
Object.defineProperty(exports, "RampInstantEventTypes", { enumerable: true, get: function () { return types_2.WidgetEventTypes; } });
var RampInstantSDK = /** @class */ (function () {
    function RampInstantSDK(config) {
        this._listeners = (0, utils_1.initEventListenersDict)();
        this._isVisible = false;
        (0, init_helpers_2.importFonts)();
        this.unsubscribe = this.unsubscribe.bind(this);
        this.on = this.on.bind(this);
        this.show = this.show.bind(this);
        this._handleEscapeClick = this._handleEscapeClick.bind(this);
        this._dispatchEvent = this._dispatchEvent.bind(this);
        this._subscribeToWidgetEvents = this._subscribeToWidgetEvents.bind(this);
        this._on = this._on.bind(this);
        this._registerSdkEventHandlers = this._registerSdkEventHandlers.bind(this);
        this._subscribeToWidgetEvents = this._subscribeToWidgetEvents.bind(this);
        this._rawNormalizedConfig = (0, utils_1.normalizeConfigAndLogErrorsOnInvalidFields)(__assign({ variant: 'desktop' }, config));
        var widgetVariant = (0, utils_1.determineWidgetVariant)(this._rawNormalizedConfig);
        this._config = __assign(__assign({}, this._rawNormalizedConfig), { variant: widgetVariant, widgetInstanceId: (0, utils_1.getRandomIntString)() });
    }
    RampInstantSDK.prototype.show = function () {
        if (this._isVisible) {
            throw new Error('Widget is already visible - you can only call this once per instance');
        }
        if (document.activeElement && (0, utils_1.isHtmlElement)(document.activeElement)) {
            document.activeElement.blur();
        }
        this._registerSdkEventHandlers();
        window.addEventListener('message', this._subscribeToWidgetEvents);
        if (this._isConfiguredAsHosted()) {
            this._showUsingHostedMode();
        }
        else if (this._isConfiguredAsEmbedded()) {
            this._showUsingEmbeddedMode();
        }
        else if (this._isConfiguredWithOverlay()) {
            this._showUsingOverlayMode();
        }
        window.addEventListener('keydown', this._handleEscapeClick, true);
        return this;
    };
    RampInstantSDK.prototype.on = function (type, callback) {
        this._on(type, callback, false);
        return this;
    };
    RampInstantSDK.prototype.unsubscribe = function (type, callback) {
        var _this = this;
        if (type === '*') {
            var allTypes = Object.entries(this._listeners);
            allTypes.forEach(function (_a) {
                var key = _a[0], eventHandlers = _a[1];
                var filteredHandlers = eventHandlers.filter(function (l) { return l.callback !== callback; });
                _this._listeners[key] = filteredHandlers;
            });
        }
        else {
            this._listeners[type] = this._listeners[type].filter(function (l) { return l.callback !== callback; });
        }
        return this;
    };
    RampInstantSDK.prototype._on = function (type, callback, internal) {
        if (type !== '*' && !this._listeners[type]) {
            // tslint:disable-next-line:no-console
            console.warn("Unknown / unsupported event name - '".concat(type, "'. This listener will have no effect."));
        }
        if (type === '*') {
            var allTypes = Object.values(this._listeners);
            allTypes.forEach(function (eventHandlers) { return eventHandlers.push({ callback: callback, internal: internal }); });
        }
        else {
            this._listeners[type].push({ callback: callback, internal: internal });
        }
    };
    RampInstantSDK.prototype.close = function () {
        this._dispatchEvent({
            type: types_1.WidgetEventTypes.WIDGET_CLOSE,
            payload: null,
            widgetInstanceId: this._config.widgetInstanceId,
        });
        return this;
    };
    RampInstantSDK.prototype.onRequestCryptoAccount = function (callback) {
        var _this = this;
        var onRequestCryptoAccount = function (event) { return __awaiter(_this, void 0, void 0, function () {
            var result, e_1, errorMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, callback(event.payload.type, event.payload.assetSymbol)];
                    case 1:
                        result = _a.sent();
                        if (!result.address) {
                            throw new Error('Missing address in the callback result');
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _a.sent();
                        errorMessage = void 0;
                        if (typeof e_1 === 'string') {
                            errorMessage = e_1;
                        }
                        else if (e_1 instanceof Error) {
                            errorMessage = e_1.message;
                        }
                        this._sendEventToWidget({
                            type: types_1.InternalSdkEventTypes.REQUEST_CRYPTO_ACCOUNT_RESULT,
                            payload: {
                                error: errorMessage,
                            },
                        });
                        return [2 /*return*/];
                    case 3:
                        this._sendEventToWidget({
                            type: types_1.InternalSdkEventTypes.REQUEST_CRYPTO_ACCOUNT_RESULT,
                            payload: {
                                address: result.address,
                                type: result.type,
                                name: result.name,
                                assetSymbol: result.assetSymbol,
                            },
                        });
                        return [2 /*return*/];
                }
            });
        }); };
        this._on(types_1.InternalEventTypes.REQUEST_CRYPTO_ACCOUNT, onRequestCryptoAccount, true);
        return this;
    };
    RampInstantSDK.prototype._subscribeToWidgetEvents = function (event) {
        if (!event.data) {
            return;
        }
        if (!(0, init_helpers_2.areUrlsEqual)(event.origin, (0, init_helpers_1.getBaseUrl)(this._config).origin)) {
            return;
        }
        var eventData = event.data;
        if (!eventData.widgetInstanceId ||
            eventData.widgetInstanceId !== this._config.widgetInstanceId) {
            return;
        }
        this._dispatchEvent(eventData);
    };
    RampInstantSDK.prototype._registerSdkEventHandlers = function () {
        var _this = this;
        this._on(types_1.WidgetEventTypes.WIDGET_CLOSE, function (_event) {
            var _a, _b;
            if (_this._isConfiguredAsHosted()) {
                try {
                    (_a = _this.widgetWindow) === null || _a === void 0 ? void 0 : _a.close();
                }
                catch (e) {
                    throw new Error('Could not close the widget window');
                }
            }
            else {
                (_b = _this.domNodes) === null || _b === void 0 ? void 0 : _b.shadowHost.remove();
                (0, body_scroll_lock_1.clearAllBodyScrollLocks)();
            }
            _this._teardownEventSubscriptions();
        }, true);
        var onConfigEvent = function () {
            var _a, _b;
            if (_this._isConfiguredAsHosted()) {
                return;
            }
            (_a = _this.domNodes) === null || _a === void 0 ? void 0 : _a.iframe.classList.add('visible');
            var loader = (_b = _this.domNodes) === null || _b === void 0 ? void 0 : _b.shadow.querySelector('.loader-container');
            if (loader) {
                loader.remove();
            }
        };
        this._on(types_1.WidgetEventTypes.WIDGET_CONFIG_DONE, onConfigEvent, true);
        this._on(types_1.WidgetEventTypes.WIDGET_CONFIG_FAILED, onConfigEvent, true);
        this._on(types_1.InternalEventTypes.WIDGET_CLOSE_REQUEST, function (_event) {
            if (_this._isConfiguredAsHosted() || _this._isConfiguredAsEmbedded()) {
                return;
            }
            if (_this._config.variant === 'mobile' || (0, init_helpers_2.isCloseModalAlreadyOpen)(_this.domNodes.overlay)) {
                return;
            }
            _this.domNodes.overlay.appendChild((0, init_helpers_2.prepareCloseModalNode)(_this._dispatchEvent));
        }, true);
        this._on(types_1.InternalEventTypes.WIDGET_CLOSE_REQUEST_CONFIRMED, function (_event) {
            _this._dispatchEvent({
                type: types_1.WidgetEventTypes.WIDGET_CLOSE,
                payload: null,
                widgetInstanceId: _this._config.widgetInstanceId,
            });
        }, true);
        this._on(types_1.InternalEventTypes.WIDGET_CLOSE_REQUEST_CANCELLED, function (_event) {
            if (_this._isConfiguredAsHosted() || _this._isConfiguredAsEmbedded()) {
                return;
            }
            var modal = _this.domNodes.overlay.querySelector('.close-modal');
            if (modal) {
                modal.remove();
            }
        }, true);
    };
    RampInstantSDK.prototype._sendEventToWidget = function (event) {
        var _a, _b, _c;
        if (!this._isVisible) {
            throw new Error("Widget is not visible couldn't send the event");
        }
        try {
            (_c = ((_a = this.widgetWindow) !== null && _a !== void 0 ? _a : (_b = this.domNodes) === null || _b === void 0 ? void 0 : _b.iframe.contentWindow)) === null || _c === void 0 ? void 0 : _c.postMessage(event, (0, init_helpers_1.getBaseUrl)(this._config).origin);
            // tslint:disable-next-line:no-empty
        }
        catch (_d) { }
    };
    RampInstantSDK.prototype._dispatchEvent = function (event) {
        var type = event.type;
        this._listeners[type].forEach(function (handler) { return handler.callback(event); });
    };
    RampInstantSDK.prototype._handleEscapeClick = function (event) {
        var escKeyCode = 27;
        if (event.key === 'Escape' || event.key === 'Esc' || event.keyCode === escKeyCode) {
            this._dispatchEvent({
                type: types_1.InternalEventTypes.WIDGET_CLOSE_REQUEST,
                payload: null,
                internal: true,
            });
        }
    };
    // Event subscriptions aren't cleared so that host can receive a PAYMENT_SUCCESSFUL event
    // even after the widget has been closed
    RampInstantSDK.prototype._teardownEventSubscriptions = function () {
        window.removeEventListener('keydown', this._handleEscapeClick, true);
        window.removeEventListener('message', this._subscribeToWidgetEvents);
    };
    RampInstantSDK.prototype._showUsingEmbeddedMode = function () {
        var _a, _b;
        var widgetUrl = (0, init_helpers_2.initWidgetIframeUrl)(this._config);
        this.domNodes = (0, init_helpers_2.initDOMNodeWithoutOverlay)(widgetUrl, this._dispatchEvent, this._config);
        if (!((_a = this.domNodes) === null || _a === void 0 ? void 0 : _a.body)) {
            throw new Error("Couldn't find <body> element.");
        }
        (_b = this._config.containerNode) === null || _b === void 0 ? void 0 : _b.appendChild(this.domNodes.shadowHost);
        this._isVisible = true;
    };
    RampInstantSDK.prototype._showUsingOverlayMode = function () {
        var _a;
        var widgetUrl = (0, init_helpers_2.initWidgetIframeUrl)(this._config);
        this.domNodes = (0, init_helpers_2.initDOMNodeWithOverlay)(widgetUrl, this._dispatchEvent, this._config);
        if (!((_a = this.domNodes) === null || _a === void 0 ? void 0 : _a.body)) {
            throw new Error("Couldn't find <body> element.");
        }
        this.domNodes.body.appendChild(this.domNodes.shadowHost);
        this._isVisible = true;
        (0, body_scroll_lock_1.disableBodyScroll)(this.domNodes.iframe);
        var widgetMode = (0, utils_1.determineWidgetVariant)(this._config);
        if (widgetMode !== 'desktop' && widgetMode !== 'embedded-desktop') {
            (0, init_helpers_1.hideWebsiteBelow)(this.domNodes.shadow);
        }
    };
    RampInstantSDK.prototype._showUsingHostedMode = function () {
        var _a;
        var widgetUrl = (0, init_helpers_2.initWidgetIframeUrl)(this._config);
        this.widgetWindow = (_a = window.open(widgetUrl)) !== null && _a !== void 0 ? _a : undefined;
    };
    RampInstantSDK.prototype._isConfiguredWithOverlay = function () {
        return ['desktop', 'mobile'].includes(this._config.variant);
    };
    RampInstantSDK.prototype._isConfiguredAsHosted = function () {
        return ['hosted-desktop', 'hosted-mobile'].includes(this._config.variant);
    };
    RampInstantSDK.prototype._isConfiguredAsEmbedded = function () {
        return ['embedded-desktop', 'embedded-mobile'].includes(this._rawNormalizedConfig.variant);
    };
    return RampInstantSDK;
}());
exports.RampInstantSDK = RampInstantSDK;
//# sourceMappingURL=ramp-instant-sdk.js.map