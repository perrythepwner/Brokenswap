{"ast":null,"code":"\"use strict\";\n\nvar _wrapRegExp = require(\"/app/node_modules/@babel/runtime/helpers/wrapRegExp.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeStringParameter = exports.signatureToAbiDefinition = exports.parseDecodedParams = exports.getAbiByName = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\n/** @internal */\nvar getAbiByName = function getAbiByName(abi, methodName) {\n  return abi.find(function (entry) {\n    return entry.name === methodName;\n  });\n};\nexports.getAbiByName = getAbiByName;\n/** @internal */\nvar parseDecodedParams = function parseDecodedParams(params) {\n  var args = new Array(params.__length__);\n  Object.keys(params).forEach(function (key) {\n    if (key === '__length__') {\n      return;\n    }\n    var argIndex = parseInt(key, 10);\n    if (argIndex >= 0) {\n      args[argIndex] = params[key];\n      delete params[key];\n    }\n  });\n  return {\n    args: args,\n    params: params\n  };\n};\nexports.parseDecodedParams = parseDecodedParams;\n/** @internal */\nvar signatureToAbiDefinition = function signatureToAbiDefinition(fnSignature) {\n  var matches = /*#__PURE__*/_wrapRegExp(/([^\\(]+)\\((.*)\\)/, {\n    method: 1,\n    args: 2\n  }).exec(fnSignature);\n  if (matches == null) {\n    throw new Error(\"\".concat(fnSignature, \" is malformed\"));\n  }\n  var method = matches.groups.method;\n  var args = matches.groups.args.split(',');\n  return {\n    name: method,\n    signature: fnSignature,\n    type: 'function',\n    inputs: args.map(function (type, index) {\n      var parts = type.trim().split(' ').map(function (p) {\n        return p.trim();\n      });\n      if (parts.length > 2) {\n        throw new Error(\"\".concat(fnSignature, \" is malformed\"));\n      }\n      return {\n        name: parts.length > 1 ? parts[1] : \"a\".concat(index),\n        type: parts[0]\n      };\n    })\n  };\n};\nexports.signatureToAbiDefinition = signatureToAbiDefinition;\n/** @internal */\nvar decodeStringParameter = function decodeStringParameter(ethAbi, str) {\n  return ethAbi.decodeParameter('string', (0, address_1.ensureLeading0x)(str));\n};\nexports.decodeStringParameter = decodeStringParameter;","map":null,"metadata":{},"sourceType":"script"}