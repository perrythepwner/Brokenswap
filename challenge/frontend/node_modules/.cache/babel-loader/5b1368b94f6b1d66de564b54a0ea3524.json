{"ast":null,"code":"import { isAddress } from '../../utils';\nexport function filterTokens(tokens, search) {\n  if (search.length === 0) return tokens;\n  const searchingAddress = isAddress(search);\n  if (searchingAddress) {\n    return tokens.filter(token => token.address === searchingAddress);\n  }\n  const lowerSearchParts = search.toLowerCase().split(/\\s+/).filter(s => s.length > 0);\n  if (lowerSearchParts.length === 0) {\n    return tokens;\n  }\n  const matchesSearch = s => {\n    const sParts = s.toLowerCase().split(/\\s+/).filter(s => s.length > 0);\n    return lowerSearchParts.every(p => p.length === 0 || sParts.some(sp => sp.startsWith(p) || sp.endsWith(p)));\n  };\n  return tokens.filter(token => {\n    const {\n      symbol,\n      name\n    } = token;\n    return symbol && matchesSearch(symbol) || name && matchesSearch(name);\n  });\n  // .sort((t0: Token, t1: Token) => {\n  //   if (t0.symbol && matchesSearch(t0.symbol) && t1.symbol && !matchesSearch(t1.symbol)) {\n  //     return -1\n  //   }\n  //   if (t0.symbol && !matchesSearch(t0.symbol) && t1.symbol && matchesSearch(t1.symbol)) {\n  //     return 1\n  //   }\n  //   return 0\n  // })\n}","map":{"version":3,"names":["isAddress","filterTokens","tokens","search","length","searchingAddress","filter","token","address","lowerSearchParts","toLowerCase","split","s","matchesSearch","sParts","every","p","some","sp","startsWith","endsWith","symbol","name"],"sources":["/app/src/components/SearchModal/filtering.ts"],"sourcesContent":["import { Token } from '@ubeswap/sdk'\n\nimport { isAddress } from '../../utils'\n\nexport function filterTokens(tokens: Token[], search: string): Token[] {\n  if (search.length === 0) return tokens\n\n  const searchingAddress = isAddress(search)\n\n  if (searchingAddress) {\n    return tokens.filter((token) => token.address === searchingAddress)\n  }\n\n  const lowerSearchParts = search\n    .toLowerCase()\n    .split(/\\s+/)\n    .filter((s) => s.length > 0)\n\n  if (lowerSearchParts.length === 0) {\n    return tokens\n  }\n\n  const matchesSearch = (s: string): boolean => {\n    const sParts = s\n      .toLowerCase()\n      .split(/\\s+/)\n      .filter((s) => s.length > 0)\n\n    return lowerSearchParts.every((p) => p.length === 0 || sParts.some((sp) => sp.startsWith(p) || sp.endsWith(p)))\n  }\n\n  return tokens.filter((token) => {\n    const { symbol, name } = token\n    return (symbol && matchesSearch(symbol)) || (name && matchesSearch(name))\n  })\n  // .sort((t0: Token, t1: Token) => {\n  //   if (t0.symbol && matchesSearch(t0.symbol) && t1.symbol && !matchesSearch(t1.symbol)) {\n  //     return -1\n  //   }\n  //   if (t0.symbol && !matchesSearch(t0.symbol) && t1.symbol && matchesSearch(t1.symbol)) {\n  //     return 1\n  //   }\n  //   return 0\n  // })\n}\n"],"mappings":"AAEA,SAASA,SAAS,QAAQ,aAAa;AAEvC,OAAO,SAASC,YAAYA,CAACC,MAAe,EAAEC,MAAc,EAAW;EACrE,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE,OAAOF,MAAM;EAEtC,MAAMG,gBAAgB,GAAGL,SAAS,CAACG,MAAM,CAAC;EAE1C,IAAIE,gBAAgB,EAAE;IACpB,OAAOH,MAAM,CAACI,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,OAAO,KAAKH,gBAAgB,CAAC;EACrE;EAEA,MAAMI,gBAAgB,GAAGN,MAAM,CAC5BO,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,KAAK,CAAC,CACZL,MAAM,CAAEM,CAAC,IAAKA,CAAC,CAACR,MAAM,GAAG,CAAC,CAAC;EAE9B,IAAIK,gBAAgB,CAACL,MAAM,KAAK,CAAC,EAAE;IACjC,OAAOF,MAAM;EACf;EAEA,MAAMW,aAAa,GAAID,CAAS,IAAc;IAC5C,MAAME,MAAM,GAAGF,CAAC,CACbF,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,KAAK,CAAC,CACZL,MAAM,CAAEM,CAAC,IAAKA,CAAC,CAACR,MAAM,GAAG,CAAC,CAAC;IAE9B,OAAOK,gBAAgB,CAACM,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAACZ,MAAM,KAAK,CAAC,IAAIU,MAAM,CAACG,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACC,UAAU,CAACH,CAAC,CAAC,IAAIE,EAAE,CAACE,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC;EACjH,CAAC;EAED,OAAOd,MAAM,CAACI,MAAM,CAAEC,KAAK,IAAK;IAC9B,MAAM;MAAEc,MAAM;MAAEC;IAAK,CAAC,GAAGf,KAAK;IAC9B,OAAQc,MAAM,IAAIR,aAAa,CAACQ,MAAM,CAAC,IAAMC,IAAI,IAAIT,aAAa,CAACS,IAAI,CAAE;EAC3E,CAAC,CAAC;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF"},"metadata":{},"sourceType":"module"}