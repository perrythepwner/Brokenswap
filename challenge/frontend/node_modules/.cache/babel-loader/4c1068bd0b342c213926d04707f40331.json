{"ast":null,"code":"var _asyncToGenerator = require(\"/app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Mutex = require('async-mutex').Mutex;\nconst {\n  createAsyncMiddleware,\n  createScaffoldMiddleware\n} = require('json-rpc-engine');\nconst LogFilter = require('./log-filter.js');\nconst BlockFilter = require('./block-filter.js');\nconst TxFilter = require('./tx-filter.js');\nconst {\n  intToHex,\n  hexToInt\n} = require('./hexUtils');\nmodule.exports = createEthFilterMiddleware;\nfunction createEthFilterMiddleware(_ref) {\n  let {\n    blockTracker,\n    provider\n  } = _ref;\n  // create filter collection\n  let filterIndex = 0;\n  let filters = {};\n  // create update mutex\n  const mutex = new Mutex();\n  const waitForFree = mutexMiddlewareWrapper({\n    mutex\n  });\n  const middleware = createScaffoldMiddleware({\n    // install filters\n    eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))\n  });\n\n  // setup filter updating and destroy handler\n  const filterUpdater = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* (_ref2) {\n      let {\n        oldBlock,\n        newBlock\n      } = _ref2;\n      if (filters.length === 0) return;\n      // lock update reads\n      const releaseLock = yield mutex.acquire();\n      try {\n        // process all filters in parallel\n        yield Promise.all(objValues(filters).map( /*#__PURE__*/function () {\n          var _ref4 = _asyncToGenerator(function* (filter) {\n            try {\n              yield filter.update({\n                oldBlock,\n                newBlock\n              });\n            } catch (err) {\n              // handle each error individually so filter update errors don't affect other filters\n              console.error(err);\n            }\n          });\n          return function (_x2) {\n            return _ref4.apply(this, arguments);\n          };\n        }()));\n      } catch (err) {\n        // log error so we don't skip the releaseLock\n        console.error(err);\n      }\n      // unlock update reads\n      releaseLock();\n    });\n    return function filterUpdater(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter;\n  middleware.newBlockFilter = newBlockFilter;\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter;\n  middleware.uninstallFilter = uninstallFilterHandler;\n  middleware.getFilterChanges = getFilterChanges;\n  middleware.getFilterLogs = getFilterLogs;\n\n  // expose destroy method for cleanup\n  middleware.destroy = () => {\n    uninstallAllFilters();\n  };\n  return middleware;\n\n  //\n  // new filters\n  //\n  function newLogFilter(_x3) {\n    return _newLogFilter.apply(this, arguments);\n  }\n  function _newLogFilter() {\n    _newLogFilter = _asyncToGenerator(function* (params) {\n      const filter = new LogFilter({\n        provider,\n        params\n      });\n      const filterIndex = yield installFilter(filter);\n      return filter;\n    });\n    return _newLogFilter.apply(this, arguments);\n  }\n  function newBlockFilter() {\n    return _newBlockFilter.apply(this, arguments);\n  }\n  function _newBlockFilter() {\n    _newBlockFilter = _asyncToGenerator(function* () {\n      const filter = new BlockFilter({\n        provider\n      });\n      const filterIndex = yield installFilter(filter);\n      return filter;\n    });\n    return _newBlockFilter.apply(this, arguments);\n  }\n  function newPendingTransactionFilter() {\n    return _newPendingTransactionFilter.apply(this, arguments);\n  } //\n  // get filter changes\n  //\n  function _newPendingTransactionFilter() {\n    _newPendingTransactionFilter = _asyncToGenerator(function* () {\n      const filter = new TxFilter({\n        provider\n      });\n      const filterIndex = yield installFilter(filter);\n      return filter;\n    });\n    return _newPendingTransactionFilter.apply(this, arguments);\n  }\n  function getFilterChanges(_x4) {\n    return _getFilterChanges.apply(this, arguments);\n  }\n  function _getFilterChanges() {\n    _getFilterChanges = _asyncToGenerator(function* (filterIndexHex) {\n      const filterIndex = hexToInt(filterIndexHex);\n      const filter = filters[filterIndex];\n      if (!filter) {\n        throw new Error(\"No filter for index \\\"\".concat(filterIndex, \"\\\"\"));\n      }\n      const results = filter.getChangesAndClear();\n      return results;\n    });\n    return _getFilterChanges.apply(this, arguments);\n  }\n  function getFilterLogs(_x5) {\n    return _getFilterLogs.apply(this, arguments);\n  } //\n  // remove filters\n  //\n  function _getFilterLogs() {\n    _getFilterLogs = _asyncToGenerator(function* (filterIndexHex) {\n      const filterIndex = hexToInt(filterIndexHex);\n      const filter = filters[filterIndex];\n      if (!filter) {\n        throw new Error(\"No filter for index \\\"\".concat(filterIndex, \"\\\"\"));\n      }\n      // only return results for log filters\n      let results = [];\n      if (filter.type === 'log') {\n        results = filter.getAllResults();\n      }\n      return results;\n    });\n    return _getFilterLogs.apply(this, arguments);\n  }\n  function uninstallFilterHandler(_x6) {\n    return _uninstallFilterHandler.apply(this, arguments);\n  } //\n  // utils\n  //\n  function _uninstallFilterHandler() {\n    _uninstallFilterHandler = _asyncToGenerator(function* (filterIndexHex) {\n      // check filter exists\n      const filterIndex = hexToInt(filterIndexHex);\n      const filter = filters[filterIndex];\n      const result = Boolean(filter);\n      // uninstall filter\n      if (result) {\n        yield uninstallFilter(filterIndex);\n      }\n      return result;\n    });\n    return _uninstallFilterHandler.apply(this, arguments);\n  }\n  function installFilter(_x7) {\n    return _installFilter.apply(this, arguments);\n  }\n  function _installFilter() {\n    _installFilter = _asyncToGenerator(function* (filter) {\n      const prevFilterCount = objValues(filters).length;\n      // install filter\n      const currentBlock = yield blockTracker.getLatestBlock();\n      yield filter.initialize({\n        currentBlock\n      });\n      filterIndex++;\n      filters[filterIndex] = filter;\n      filter.id = filterIndex;\n      filter.idHex = intToHex(filterIndex);\n      // update block tracker subs\n      const newFilterCount = objValues(filters).length;\n      updateBlockTrackerSubs({\n        prevFilterCount,\n        newFilterCount\n      });\n      return filterIndex;\n    });\n    return _installFilter.apply(this, arguments);\n  }\n  function uninstallFilter(_x8) {\n    return _uninstallFilter.apply(this, arguments);\n  }\n  function _uninstallFilter() {\n    _uninstallFilter = _asyncToGenerator(function* (filterIndex) {\n      const prevFilterCount = objValues(filters).length;\n      delete filters[filterIndex];\n      // update block tracker subs\n      const newFilterCount = objValues(filters).length;\n      updateBlockTrackerSubs({\n        prevFilterCount,\n        newFilterCount\n      });\n    });\n    return _uninstallFilter.apply(this, arguments);\n  }\n  function uninstallAllFilters() {\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n  function _uninstallAllFilters() {\n    _uninstallAllFilters = _asyncToGenerator(function* () {\n      const prevFilterCount = objValues(filters).length;\n      filters = {};\n      // update block tracker subs\n      updateBlockTrackerSubs({\n        prevFilterCount,\n        newFilterCount: 0\n      });\n    });\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n  function updateBlockTrackerSubs(_ref5) {\n    let {\n      prevFilterCount,\n      newFilterCount\n    } = _ref5;\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater);\n      return;\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater);\n      return;\n    }\n  }\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware( /*#__PURE__*/_asyncToGenerator(function* () {\n    const filter = yield createFilterFn(...arguments);\n    const result = intToHex(filter.id);\n    return result;\n  }));\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware( /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator(function* (req, res) {\n      const result = yield asyncFn.apply(null, req.params);\n      res.result = result;\n    });\n    return function (_x9, _x10) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n}\nfunction mutexMiddlewareWrapper(_ref8) {\n  let {\n    mutex\n  } = _ref8;\n  return middleware => {\n    return /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator(function* (req, res, next, end) {\n        // wait for mutex available\n        // we can release immediately because\n        // we just need to make sure updates aren't active\n        const releaseLock = yield mutex.acquire();\n        releaseLock();\n        middleware(req, res, next, end);\n      });\n      return function (_x11, _x12, _x13, _x14) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n  };\n}\nfunction objValues(obj, fn) {\n  const values = [];\n  for (let key in obj) {\n    values.push(obj[key]);\n  }\n  return values;\n}","map":null,"metadata":{},"sourceType":"script"}