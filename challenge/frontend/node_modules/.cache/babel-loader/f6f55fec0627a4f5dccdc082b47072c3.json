{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setApplicationLogger = exports.getApplicationLogger = exports.Logger = exports.Level = void 0;\nvar Level;\n(function (Level) {\n  Level[Level[\"Silent\"] = 0] = \"Silent\";\n  Level[Level[\"Debug\"] = 1] = \"Debug\";\n  Level[Level[\"Default\"] = 2] = \"Default\";\n  Level[Level[\"Warning\"] = 3] = \"Warning\";\n  Level[Level[\"Error\"] = 4] = \"Error\";\n})(Level = exports.Level || (exports.Level = {}));\n/**\n * @internal Used the defined the default applicationLogger\n */\nclass Logger {\n  constructor() {\n    let level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '[react-celo]';\n    this.namespace = namespace;\n    if (!level) {\n      if (process.env.DEBUG === 'true' || process.env.NODE_ENV !== 'production') {\n        this.level = Level.Debug;\n      } else {\n        this.level = Level.Error;\n      }\n    } else {\n      this.level = level;\n    }\n  }\n  debug() {\n    if (this.level > Level.Debug) return;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    console.info(this.namespace, ...args);\n  }\n  log() {\n    if (this.level > Level.Default) return;\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    console.log(this.namespace, ...args);\n  }\n  warn() {\n    if (this.level > Level.Warning) return;\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    console.warn(this.namespace, ...args);\n  }\n  error() {\n    if (this.level > Level.Error) return;\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    console.error(this.namespace, ...args);\n  }\n}\nexports.Logger = Logger;\nlet applicationLogger = new Logger();\nfunction setApplicationLogger(logger) {\n  applicationLogger = logger;\n}\nexports.setApplicationLogger = setApplicationLogger;\nfunction getApplicationLogger() {\n  return applicationLogger;\n}\nexports.getApplicationLogger = getApplicationLogger;","map":null,"metadata":{},"sourceType":"script"}