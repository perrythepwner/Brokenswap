{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractConnector = exports.ConnectorEvents = exports.updateFeeCurrency = exports.UnsupportedChainIdError = void 0;\nconst base_1 = require(\"@celo/contractkit/lib/base\");\nconst eventemitter3_1 = __importDefault(require(\"eventemitter3\"));\nconst logger_1 = require(\"../utils/logger\");\nclass UnsupportedChainIdError extends Error {\n  constructor(chainID) {\n    super(\"Unsupported chain ID: \".concat(chainID));\n    this.chainID = chainID;\n    this.name = UnsupportedChainIdError.NAME;\n  }\n}\nexports.UnsupportedChainIdError = UnsupportedChainIdError;\nUnsupportedChainIdError.NAME = 'UnsupportedChainIdError';\nfunction updateFeeCurrency(feeContract) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!this.supportsFeeCurrency()) {\n      return;\n    }\n    this.feeCurrency = feeContract;\n    const address = feeContract === base_1.CeloContract.GoldToken ? undefined : yield this.kit.registry.addressFor(feeContract);\n    this.kit.connection.defaultFeeCurrency = address;\n  });\n}\nexports.updateFeeCurrency = updateFeeCurrency;\nvar ConnectorEvents;\n(function (ConnectorEvents) {\n  ConnectorEvents[\"CONNECTED\"] = \"CONNECTED\";\n  ConnectorEvents[\"DISCONNECTED\"] = \"DISCONNECTED\";\n  ConnectorEvents[\"ADDRESS_CHANGED\"] = \"ADDRESS_CHANGED\";\n  ConnectorEvents[\"NETWORK_CHANGED\"] = \"NETWORK_CHANGED\";\n  ConnectorEvents[\"NETWORK_CHANGE_FAILED\"] = \"NETWORK_CHANGE_FAILED\";\n  ConnectorEvents[\"WALLET_CHAIN_CHANGED\"] = \"WALLET_CHAIN_CHANGED\";\n  ConnectorEvents[\"WC_URI_RECEIVED\"] = \"WC_URI_RECEIVED\";\n  ConnectorEvents[\"WC_INITIALISED\"] = \"WC_INITIALISED\";\n  ConnectorEvents[\"WC_ERROR\"] = \"WC_ERROR\";\n})(ConnectorEvents = exports.ConnectorEvents || (exports.ConnectorEvents = {}));\nclass AbstractConnector {\n  constructor() {\n    this.emitter = new eventemitter3_1.default();\n    this.on = (event, fn) => {\n      this.emitter.on(event, fn);\n    };\n    this.emit = (event, data) => {\n      (0, logger_1.getApplicationLogger)().debug('[CONNECTOR EMIT]', this.type, event, data !== null && data !== void 0 ? data : '');\n      this.emitter.emit(event, data);\n    };\n  }\n  get account() {\n    var _a, _b;\n    return (_b = (_a = this.kit) === null || _a === void 0 ? void 0 : _a.connection) === null || _b === void 0 ? void 0 : _b.defaultAccount;\n  }\n  set account(address) {\n    this.kit.connection.defaultAccount = address;\n  }\n  supportsFeeCurrency() {\n    return false;\n  }\n  disconnect() {\n    this.emit(ConnectorEvents.DISCONNECTED);\n    this.emitter.removeAllListeners();\n  }\n}\nexports.AbstractConnector = AbstractConnector;","map":null,"metadata":{},"sourceType":"script"}