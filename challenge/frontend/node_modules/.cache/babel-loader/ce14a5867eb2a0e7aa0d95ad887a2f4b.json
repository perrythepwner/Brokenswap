{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCeloInternal = exports.useContractKit = exports.useCelo = void 0;\nconst react_celo_provider_1 = require(\"./react-celo-provider\");\nfunction useCelo() {\n  const [reducerState, _dispatch, celoMethods] = (0, react_celo_provider_1.useReactCeloContext)();\n  const {\n    dapp,\n    address,\n    network,\n    walletChainId,\n    feeCurrency,\n    connectorInitError,\n    networks,\n    connector\n  } = reducerState;\n  const {\n    destroy,\n    disconnect,\n    updateNetwork,\n    connect,\n    getConnectedKit,\n    performActions,\n    updateFeeCurrency,\n    contractsCache,\n    updateTheme\n  } = celoMethods;\n  return {\n    dapp,\n    address,\n    network,\n    walletChainId,\n    feeCurrency,\n    initError: connectorInitError,\n    // Copy to ensure any accidental mutations dont affect global state\n    networks: networks.map(net => Object.assign({}, net)),\n    kit: connector.kit,\n    // the wallet address from Account.getWalletAddress => The address at which the account expects to receive transfers.\n    // If it's empty/0x0, the account indicates that an address exchange should be initiated with the dataEncryptionKey\n    /*\n     * @deprecated this will likely be removed in favor of just address\n     */\n    account: connector.kit.connection.defaultAccount,\n    initialised: connector.initialised,\n    walletType: connector.type,\n    supportsFeeCurrency: connector.supportsFeeCurrency(),\n    destroy,\n    disconnect,\n    updateNetwork,\n    connect,\n    getConnectedKit,\n    performActions,\n    updateFeeCurrency,\n    contractsCache: contractsCache,\n    updateTheme\n  };\n}\nexports.useCelo = useCelo;\n/**\n * @deprecated Use the alias {@link useCelo} hook instead.\n */\nexports.useContractKit = useCelo;\n/**\n * @internal useCelo with internal methods exposed. Package use only.\n */\nconst useCeloInternal = () => {\n  const [{\n    pendingActionCount,\n    connectionCallback,\n    theme,\n    manualNetworkMode\n  }, _dispatch, {\n    initConnector,\n    resetInitError\n  }] = (0, react_celo_provider_1.useReactCeloContext)();\n  return Object.assign(Object.assign({}, useCelo()), {\n    manualNetworkMode,\n    connectionCallback,\n    initConnector,\n    pendingActionCount,\n    theme,\n    resetInitError\n  });\n};\nexports.useCeloInternal = useCeloInternal;","map":null,"metadata":{},"sourceType":"script"}