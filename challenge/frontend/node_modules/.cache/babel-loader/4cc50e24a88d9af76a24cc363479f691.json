{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst common_1 = require(\"../connectors/common\");\nconst constants_1 = require(\"../constants\");\nconst local_storage_1 = require(\"./local-storage\");\nconst persistor = connector => {\n  connector.on(common_1.ConnectorEvents.ADDRESS_CHANGED, address => {\n    (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedAddress, address);\n  });\n  // This might not be needed since we tend to just recreated connectors when network switches\n  connector.on(common_1.ConnectorEvents.NETWORK_CHANGED, networkName => {\n    (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedNetwork, networkName);\n  });\n  connector.on(common_1.ConnectorEvents.CONNECTED, params => {\n    (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedNetwork, params.networkName);\n    (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedWalletType, params.walletType);\n    (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedAddress, params.address);\n    if (params.index) {\n      (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedIndex, params.index);\n    }\n    if (params.walletId) {\n      (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedWalletId, params.walletId);\n    }\n    (0, local_storage_1.rememberWallet)(params.walletType, params.walletId);\n  });\n  connector.on(common_1.ConnectorEvents.DISCONNECTED, () => {\n    (0, local_storage_1.clearPreviousConfig)();\n  });\n};\nexports.default = persistor;","map":null,"metadata":{},"sourceType":"script"}