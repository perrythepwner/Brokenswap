{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useInjectedConnector = void 0;\nconst react_1 = require(\"react\");\nconst connectors_1 = require(\"../connectors\");\nconst use_celo_1 = require(\"../use-celo\");\nconst logger_1 = require(\"../utils/logger\");\nfunction useInjectedConnector(onSubmit, isMetaMask) {\n  const {\n    network,\n    manualNetworkMode,\n    feeCurrency,\n    initConnector,\n    initError: error,\n    dapp,\n    kit\n  } = (0, use_celo_1.useCeloInternal)();\n  (0, react_1.useEffect)(() => {\n    let stale;\n    void (() => __awaiter(this, void 0, void 0, function* () {\n      const connector = isMetaMask ? new connectors_1.MetaMaskConnector(network, manualNetworkMode, feeCurrency) : new connectors_1.InjectedConnector(network, manualNetworkMode, feeCurrency);\n      try {\n        yield initConnector(connector);\n        if (!stale) {\n          onSubmit(connector);\n        }\n      } catch (e) {\n        (0, logger_1.getApplicationLogger)().error('[useMetaMaskConnector]', e);\n      }\n    }))();\n    return () => {\n      stale = true;\n    };\n  }, [initConnector, network, onSubmit, isMetaMask, feeCurrency, manualNetworkMode]);\n  const getTokens = (0, react_1.useCallback)(() => __awaiter(this, void 0, void 0, function* () {\n    return kit.celoTokens.getWrappers();\n  }), [kit]);\n  return {\n    error,\n    dapp,\n    network,\n    getTokens\n  };\n}\nexports.useInjectedConnector = useInjectedConnector;","map":null,"metadata":{},"sourceType":"script"}