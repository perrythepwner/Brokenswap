{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayCompositeTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst abstract_1 = require(\"./abstract\");\nclass ArrayCompositeTreeViewDU extends abstract_1.TreeViewDU {\n  constructor(type, _rootNode, cache) {\n    super();\n    this.type = type;\n    this._rootNode = _rootNode;\n    this.viewsChanged = new Map();\n    // TODO: Consider these properties are not accessible in the cache object persisted in the parent's cache.\n    // nodes, caches, _length, and nodesPopulated are mutated. Consider having them in a _cache object such that\n    // mutations affect the cache already found in the parent object\n    this.dirtyLength = false;\n    if (cache) {\n      this.nodes = cache.nodes;\n      this.caches = cache.caches;\n      this._length = cache.length;\n      this.nodesPopulated = cache.nodesPopulated;\n    } else {\n      this.nodes = [];\n      this.caches = [];\n      this._length = this.type.tree_getLength(_rootNode);\n      // If there are exactly 0 nodes, nodesPopulated = true because 0 / 0 are in the nodes array\n      this.nodesPopulated = this._length === 0;\n    }\n  }\n  /**\n   * Number of elements in the array. Equal to un-commited length of the array\n   */\n  get length() {\n    return this._length;\n  }\n  get node() {\n    return this._rootNode;\n  }\n  get cache() {\n    return {\n      nodes: this.nodes,\n      caches: this.caches,\n      length: this._length,\n      nodesPopulated: this.nodesPopulated\n    };\n  }\n  /**\n   * Get element at `index`. Returns a view of the Composite element type.\n   *\n   * NOTE: Assumes that any view created here will change and will call .commit() on it.\n   * .get() should be used only for cases when something may mutate. To get all items without\n   * triggering a .commit() in all them use .getAllReadOnly().\n   */\n  get(index) {\n    const viewChanged = this.viewsChanged.get(index);\n    if (viewChanged) {\n      return viewChanged;\n    }\n    let node = this.nodes[index];\n    if (node === undefined) {\n      node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n      this.nodes[index] = node;\n    }\n    // Keep a reference to the new view to call .commit on it latter, only if mutable\n    const view = this.type.elementType.getViewDU(node, this.caches[index]);\n    if (this.type.elementType.isViewMutable) {\n      this.viewsChanged.set(index, view);\n    }\n    // No need to persist the child's view cache since a second get returns this view instance.\n    // The cache is only persisted on commit where the viewsChanged map is dropped.\n    return view;\n  }\n  /**\n   * Get element at `index`. Returns a view of the Composite element type.\n   * DOES NOT PROPAGATE CHANGES: use only for reads and to skip parent references.\n   */\n  getReadonly(index) {\n    const viewChanged = this.viewsChanged.get(index);\n    if (viewChanged) {\n      return viewChanged;\n    }\n    let node = this.nodes[index];\n    if (node === undefined) {\n      node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n      this.nodes[index] = node;\n    }\n    return this.type.elementType.getViewDU(node, this.caches[index]);\n  }\n  // Did not implemented\n  // `getReadonlyValue(index: number): ValueOf<ElementType>`\n  // because it can break in unexpected ways if there are pending changes in this.viewsChanged.\n  // This function could first check if `this.viewsChanged` has a view for `index` and commit it,\n  // but that would be pretty slow, and the same result can be achieved with\n  // `this.getReadonly(index).toValue()`\n  /**\n   * Set Composite element type `view` at `index`\n   */\n  set(index, view) {\n    if (index >= this._length) {\n      throw Error(\"Error setting index over length \".concat(index, \" > \").concat(this._length));\n    }\n    // When setting a view:\n    // - Not necessary to commit node\n    // - Not necessary to persist cache\n    // Just keeping a reference to the view in this.viewsChanged ensures consistency\n    this.viewsChanged.set(index, view);\n  }\n  /**\n   * WARNING: Returns all commited changes, if there are any pending changes commit them beforehand\n   */\n  getAllReadonly() {\n    this.populateAllNodes();\n    const views = new Array(this._length);\n    for (let i = 0; i < this._length; i++) {\n      views[i] = this.type.elementType.getViewDU(this.nodes[i], this.caches[i]);\n    }\n    return views;\n  }\n  /**\n   * WARNING: Returns all commited changes, if there are any pending changes commit them beforehand\n   */\n  getAllReadonlyValues() {\n    this.populateAllNodes();\n    const values = new Array(this._length);\n    for (let i = 0; i < this._length; i++) {\n      values[i] = this.type.elementType.tree_toValue(this.nodes[i]);\n    }\n    return values;\n  }\n  commit() {\n    if (this.viewsChanged.size === 0) {\n      return;\n    }\n    const nodesChanged = [];\n    for (const [index, view] of this.viewsChanged) {\n      const node = this.type.elementType.commitViewDU(view);\n      // Set new node in nodes array to ensure data represented in the tree and fast nodes access is equal\n      this.nodes[index] = node;\n      nodesChanged.push({\n        index,\n        node\n      });\n      // Cache the view's caches to preserve it's data after 'this.viewsChanged.clear()'\n      const cache = this.type.elementType.cacheOfViewDU(view);\n      if (cache) this.caches[index] = cache;\n    }\n    // TODO: Optimize to loop only once, Numerical sort ascending\n    const nodesChangedSorted = nodesChanged.sort((a, b) => a.index - b.index);\n    const indexes = nodesChangedSorted.map(entry => entry.index);\n    const nodes = nodesChangedSorted.map(entry => entry.node);\n    const chunksNode = this.type.tree_getChunksNode(this._rootNode);\n    // TODO: Ensure fast setNodesAtDepth() method is correct\n    const newChunksNode = persistent_merkle_tree_1.setNodesAtDepth(chunksNode, this.type.chunkDepth, indexes, nodes);\n    this._rootNode = this.type.tree_setChunksNode(this._rootNode, newChunksNode, this.dirtyLength ? this._length : undefined);\n    this.viewsChanged.clear();\n    this.dirtyLength = false;\n  }\n  clearCache() {\n    this.nodes = [];\n    this.caches = [];\n    this.nodesPopulated = false;\n    // It's not necessary to clear this.viewsChanged since they have no effect on the cache.\n    // However preserving _SOME_ caches results in a very unpredictable experience.\n    this.viewsChanged.clear();\n    // Reset cached length only if it has been mutated\n    if (this.dirtyLength) {\n      this._length = this.type.tree_getLength(this._rootNode);\n      this.dirtyLength = false;\n    }\n  }\n  populateAllNodes() {\n    // If there's uncommited changes it may break.\n    // this.length can be increased but this._rootNode doesn't have that item\n    if (this.viewsChanged.size > 0) {\n      throw Error(\"Must commit changes before reading all nodes\");\n    }\n    if (!this.nodesPopulated) {\n      this.nodes = persistent_merkle_tree_1.getNodesAtDepth(this._rootNode, this.type.depth, 0, this.length);\n      this.nodesPopulated = true;\n    }\n  }\n}\nexports.ArrayCompositeTreeViewDU = ArrayCompositeTreeViewDU;","map":null,"metadata":{},"sourceType":"script"}