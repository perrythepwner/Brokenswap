{"ast":null,"code":"/*! Case - v1.6.2 - 2020-03-24\n* Copyright (c) 2020 Nathan Bubna; Licensed MIT, GPL */\n(function () {\n  \"use strict\";\n\n  var unicodes = function unicodes(s, prefix) {\n      prefix = prefix || '';\n      return s.replace(/(^|-)/g, '$1\\\\u' + prefix).replace(/,/g, '\\\\u' + prefix);\n    },\n    basicSymbols = unicodes('20-26,28-2F,3A-40,5B-60,7B-7E,A0-BF,D7,F7', '00'),\n    baseLowerCase = 'a-z' + unicodes('DF-F6,F8-FF', '00'),\n    baseUpperCase = 'A-Z' + unicodes('C0-D6,D8-DE', '00'),\n    improperInTitle = 'A|An|And|As|At|But|By|En|For|If|In|Of|On|Or|The|To|Vs?\\\\.?|Via',\n    regexps = function regexps(symbols, lowers, uppers, impropers) {\n      symbols = symbols || basicSymbols;\n      lowers = lowers || baseLowerCase;\n      uppers = uppers || baseUpperCase;\n      impropers = impropers || improperInTitle;\n      return {\n        capitalize: new RegExp('(^|[' + symbols + '])([' + lowers + '])', 'g'),\n        pascal: new RegExp('(^|[' + symbols + '])+([' + lowers + uppers + '])', 'g'),\n        fill: new RegExp('[' + symbols + ']+(.|$)', 'g'),\n        sentence: new RegExp('(^\\\\s*|[\\\\?\\\\!\\\\.]+\"?\\\\s+\"?|,\\\\s+\")([' + lowers + '])', 'g'),\n        improper: new RegExp('\\\\b(' + impropers + ')\\\\b', 'g'),\n        relax: new RegExp('([^' + uppers + '])([' + uppers + ']*)([' + uppers + '])(?=[^' + uppers + ']|$)', 'g'),\n        upper: new RegExp('^[^' + lowers + ']+$'),\n        hole: /[^\\s]\\s[^\\s]/,\n        apostrophe: /'/g,\n        room: new RegExp('[' + symbols + ']')\n      };\n    },\n    re = regexps(),\n    _ = {\n      re: re,\n      unicodes: unicodes,\n      regexps: regexps,\n      types: [],\n      up: String.prototype.toUpperCase,\n      low: String.prototype.toLowerCase,\n      cap: function cap(s) {\n        return _.up.call(s.charAt(0)) + s.slice(1);\n      },\n      decap: function decap(s) {\n        return _.low.call(s.charAt(0)) + s.slice(1);\n      },\n      deapostrophe: function deapostrophe(s) {\n        return s.replace(re.apostrophe, '');\n      },\n      fill: function fill(s, _fill, deapostrophe) {\n        if (_fill != null) {\n          s = s.replace(re.fill, function (m, next) {\n            return next ? _fill + next : '';\n          });\n        }\n        if (deapostrophe) {\n          s = _.deapostrophe(s);\n        }\n        return s;\n      },\n      prep: function prep(s, fill, pascal, upper) {\n        s = s == null ? '' : s + ''; // force to string\n        if (!upper && re.upper.test(s)) {\n          s = _.low.call(s);\n        }\n        if (!fill && !re.hole.test(s)) {\n          var holey = _.fill(s, ' ');\n          if (re.hole.test(holey)) {\n            s = holey;\n          }\n        }\n        if (!pascal && !re.room.test(s)) {\n          s = s.replace(re.relax, _.relax);\n        }\n        return s;\n      },\n      relax: function relax(m, before, acronym, caps) {\n        return before + ' ' + (acronym ? acronym + ' ' : '') + caps;\n      }\n    },\n    Case = {\n      _: _,\n      of: function of(s) {\n        for (var i = 0, m = _.types.length; i < m; i++) {\n          if (Case[_.types[i]].apply(Case, arguments) === s) {\n            return _.types[i];\n          }\n        }\n      },\n      flip: function flip(s) {\n        return s.replace(/\\w/g, function (l) {\n          return (l == _.up.call(l) ? _.low : _.up).call(l);\n        });\n      },\n      random: function random(s) {\n        return s.replace(/\\w/g, function (l) {\n          return (Math.round(Math.random()) ? _.up : _.low).call(l);\n        });\n      },\n      type: function type(_type, fn) {\n        Case[_type] = fn;\n        _.types.push(_type);\n      }\n    },\n    types = {\n      lower: function lower(s, fill, deapostrophe) {\n        return _.fill(_.low.call(_.prep(s, fill)), fill, deapostrophe);\n      },\n      snake: function snake(s) {\n        return Case.lower(s, '_', true);\n      },\n      constant: function constant(s) {\n        return Case.upper(s, '_', true);\n      },\n      camel: function camel(s) {\n        return _.decap(Case.pascal(s));\n      },\n      kebab: function kebab(s) {\n        return Case.lower(s, '-', true);\n      },\n      upper: function upper(s, fill, deapostrophe) {\n        return _.fill(_.up.call(_.prep(s, fill, false, true)), fill, deapostrophe);\n      },\n      capital: function capital(s, fill, deapostrophe) {\n        return _.fill(_.prep(s).replace(re.capitalize, function (m, border, letter) {\n          return border + _.up.call(letter);\n        }), fill, deapostrophe);\n      },\n      header: function header(s) {\n        return Case.capital(s, '-', true);\n      },\n      pascal: function pascal(s) {\n        return _.fill(_.prep(s, false, true).replace(re.pascal, function (m, border, letter) {\n          return _.up.call(letter);\n        }), '', true);\n      },\n      title: function title(s) {\n        return Case.capital(s).replace(re.improper, function (small, p, i, s) {\n          return i > 0 && i < s.lastIndexOf(' ') ? _.low.call(small) : small;\n        });\n      },\n      sentence: function sentence(s, names, abbreviations) {\n        s = Case.lower(s).replace(re.sentence, function (m, prelude, letter) {\n          return prelude + _.up.call(letter);\n        });\n        if (names) {\n          names.forEach(function (name) {\n            s = s.replace(new RegExp('\\\\b' + Case.lower(name) + '\\\\b', \"g\"), _.cap);\n          });\n        }\n        if (abbreviations) {\n          abbreviations.forEach(function (abbr) {\n            s = s.replace(new RegExp('(\\\\b' + Case.lower(abbr) + '\\\\. +)(\\\\w)'), function (m, abbrAndSpace, letter) {\n              return abbrAndSpace + _.low.call(letter);\n            });\n          });\n        }\n        return s;\n      }\n    };\n\n  // TODO: Remove \"squish\" in a future breaking release.\n  types.squish = types.pascal;\n\n  // Allow import default\n  Case.default = Case;\n  for (var type in types) {\n    Case.type(type, types[type]);\n  }\n  // export Case (AMD, commonjs, or global)\n  var define = typeof define === \"function\" ? define : function () {};\n  define(typeof module === \"object\" && module.exports ? module.exports = Case : this.Case = Case);\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}