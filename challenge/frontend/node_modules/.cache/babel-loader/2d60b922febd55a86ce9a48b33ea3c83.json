{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ByteArrayType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst byteArray_1 = require(\"../util/byteArray\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst composite_1 = require(\"./composite\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * ByteArray: ordered array collection of byte values\n * - Value: `Uint8Array`\n * - View: `Uint8Array`\n * - ViewDU: `Uint8Array`\n *\n * ByteArray is an immutable value which is represented by a Uint8Array for memory efficiency and performance.\n * Note: Consumers of this type MUST never mutate the `Uint8Array` representation of a ByteArray.\n */\nclass ByteArrayType extends composite_1.CompositeType {\n  constructor() {\n    super(...arguments);\n    this.isViewMutable = false;\n  }\n  defaultValue() {\n    // Since it's a byte array the minSize is bytes is the default size\n    return new Uint8Array(this.minSize);\n  }\n  getView(tree) {\n    return this.getViewDU(tree.rootNode);\n  }\n  getViewDU(node) {\n    return this.tree_toValue(node);\n  }\n  commitView(view) {\n    return this.commitViewDU(view);\n  }\n  commitViewDU(view) {\n    const uint8Array = new Uint8Array(this.value_serializedSize(view));\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    this.value_serializeToBytes({\n      uint8Array,\n      dataView\n    }, 0, view);\n    return this.tree_deserializeFromBytes({\n      uint8Array,\n      dataView\n    }, 0, uint8Array.length);\n  }\n  cacheOfViewDU() {\n    return;\n  }\n  // Over-write to prevent serialize + deserialize\n  toView(value) {\n    return value;\n  }\n  toViewDU(value) {\n    return value;\n  }\n  // Serialization + deserialization (only value is generic)\n  value_serializeToBytes(output, offset, value) {\n    output.uint8Array.set(value, offset);\n    return offset + value.length;\n  }\n  value_deserializeFromBytes(data, start, end) {\n    this.assertValidSize(end - start);\n    return Uint8Array.prototype.slice.call(data.uint8Array, start, end);\n  }\n  // Merkleization\n  getRoots(value) {\n    return merkleize_1.splitIntoRootChunks(value);\n  }\n  // Proofs\n  getPropertyGindex() {\n    // Stop navigating below this type. Must only request complete data\n    return null;\n  }\n  getPropertyType() {\n    throw Error(\"Must only request ByteArray complete data\");\n  }\n  getIndexProperty() {\n    throw Error(\"Must only request ByteArray complete data\");\n  }\n  tree_fromProofNode(node) {\n    return {\n      node,\n      done: true\n    };\n  }\n  tree_getLeafGindices(rootGindex, rootNode) {\n    const byteLen = this.tree_getByteLen(rootNode);\n    const chunkCount = Math.ceil(byteLen / 32);\n    const startIndex = persistent_merkle_tree_1.concatGindices([rootGindex, persistent_merkle_tree_1.toGindex(this.depth, BigInt(0))]);\n    const gindices = new Array(chunkCount);\n    for (let i = 0, gindex = startIndex; i < chunkCount; i++, gindex++) {\n      gindices[i] = gindex;\n    }\n    // include the length chunk\n    if (this.isList) {\n      gindices.push(persistent_merkle_tree_1.concatGindices([rootGindex, composite_1.LENGTH_GINDEX]));\n    }\n    return gindices;\n  }\n  // JSON\n  fromJson(json) {\n    const value = byteArray_1.fromHexString(json);\n    this.assertValidSize(value.length);\n    return value;\n  }\n  toJson(value) {\n    return byteArray_1.toHexString(value);\n  }\n  // ByteArray is immutable\n  clone(value) {\n    return value;\n  }\n  equals(a, b) {\n    return byteArray_1.byteArrayEquals(a, b);\n  }\n}\nexports.ByteArrayType = ByteArrayType;","map":null,"metadata":{},"sourceType":"script"}