{"ast":null,"code":"/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst varint = require('varint');\nconst intTable = require('./int-table');\nconst codecNameToCodeVarint = require('./varint-table');\nconst util = require('./util');\nexports = module.exports;\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {string|number} multicodecStrOrCode\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.addPrefix = (multicodecStrOrCode, data) => {\n  let prefix;\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\n    prefix = util.varintBufferEncode(multicodecStrOrCode);\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n  return Buffer.concat([prefix, data]);\n};\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.rmPrefix = data => {\n  varint.decode(data);\n  return data.slice(varint.decode.bytes);\n};\n\n/**\n * Get the codec of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {string}\n */\nexports.getCodec = prefixedData => {\n  const code = varint.decode(prefixedData);\n  const codecName = intTable.get(code);\n  if (codecName === undefined) {\n    throw new Error(\"Code \".concat(code, \" not found\"));\n  }\n  return codecName;\n};\n\n/**\n * Get the name of the codec.\n * @param {number} codec\n * @returns {string}\n */\nexports.getName = codec => {\n  return intTable.get(codec);\n};\n\n/**\n * Get the code of the codec\n * @param {string} name\n * @returns {number}\n */\nexports.getNumber = name => {\n  const code = codecNameToCodeVarint[name];\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found');\n  }\n  return util.varintBufferDecode(code)[0];\n};\n\n/**\n * Get the code of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {number}\n */\nexports.getCode = prefixedData => {\n  return varint.decode(prefixedData);\n};\n\n/**\n * Get the code as varint of a codec name.\n * @param {string} codecName\n * @returns {Buffer}\n */\nexports.getCodeVarint = codecName => {\n  const code = codecNameToCodeVarint[codecName];\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found');\n  }\n  return code;\n};\n\n/**\n * Get the varint of a code.\n * @param {Number} code\n * @returns {Array.<number>}\n */\nexports.getVarint = code => {\n  return varint.encode(code);\n};\n\n// Make the constants top-level constants\nconst constants = require('./constants');\nObject.assign(exports, constants);\n\n// Human friendly names for printing, e.g. in error messages\nexports.print = require('./print');","map":null,"metadata":{},"sourceType":"script"}