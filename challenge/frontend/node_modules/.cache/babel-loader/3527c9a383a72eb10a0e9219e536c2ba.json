{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.localStorageAvailable = exports.wipeStorage = exports.clearPreviousConfig = exports.setTypedStorageKey = exports.getTypedStorageKey = exports.getRecentWallets = exports.rememberWallet = void 0;\nconst constants_1 = require(\"../constants\");\nclass MockedLocalStorage {\n  constructor() {\n    this.storage = new Map();\n  }\n  getItem(key) {\n    if (this.storage.has(key)) {\n      this.storage.get(key);\n    }\n    return null;\n  }\n  key(index) {\n    if (index < 0 || index >= this.length) {\n      return null;\n    }\n    let i = 0;\n    for (const value of this.storage.values()) {\n      if (i === index) {\n        return value;\n      }\n      i += 1;\n    }\n    return null;\n  }\n  setItem(key, value) {\n    this.storage.set(key, value);\n  }\n  removeItem(key) {\n    this.storage.delete(key);\n  }\n  clear() {\n    this.storage.clear();\n  }\n  get length() {\n    return this.storage.size;\n  }\n}\nconst localStorage = typeof window === 'undefined' ? new MockedLocalStorage() : window.localStorage;\nconst MAX_WALLETS = 3;\n// adds wallet to top of stack\n// if stack already has wallet pull to top\nfunction rememberWallet(type, id) {\n  const unifiedID = id ? \"\".concat(type, \":\").concat(id) : type;\n  const stack = getRecentWallets();\n  const index = stack.indexOf(unifiedID);\n  if (index > -1) {\n    stack.splice(index, 1);\n  }\n  const newLength = stack.unshift(unifiedID);\n  if (newLength > MAX_WALLETS) {\n    // remove oldest\n    stack.pop();\n  }\n  const serialized = JSON.stringify(stack);\n  localStorage.setItem(constants_1.localStorageKeys.lastUsedWallets, serialized);\n}\nexports.rememberWallet = rememberWallet;\nfunction getRecentWallets() {\n  const raw = localStorage.getItem(constants_1.localStorageKeys.lastUsedWallets);\n  if (!raw) {\n    return [];\n  }\n  const stack = JSON.parse(raw);\n  return stack;\n}\nexports.getRecentWallets = getRecentWallets;\nfunction getTypedStorageKey(key) {\n  const item = localStorage.getItem(key);\n  if (key === constants_1.localStorageKeys.lastUsedIndex && item) {\n    return Number(item);\n  }\n  if (item) {\n    return item;\n  }\n  return null;\n}\nexports.getTypedStorageKey = getTypedStorageKey;\nfunction setTypedStorageKey(key, value) {\n  localStorage.setItem(key, value.toString());\n}\nexports.setTypedStorageKey = setTypedStorageKey;\nfunction clearPreviousConfig() {\n  Object.values(constants_1.localStorageKeys).forEach(val => {\n    if (val === constants_1.localStorageKeys.lastUsedWalletId) return;\n    if (val === constants_1.localStorageKeys.lastUsedWalletType) return;\n    if (val === constants_1.localStorageKeys.lastUsedWallets) return;\n    localStorage.removeItem(val);\n  });\n}\nexports.clearPreviousConfig = clearPreviousConfig;\nfunction wipeStorage() {\n  localStorage.clear();\n}\nexports.wipeStorage = wipeStorage;\nfunction localStorageAvailable() {\n  return typeof localStorage !== 'undefined';\n}\nexports.localStorageAvailable = localStorageAvailable;","map":null,"metadata":{},"sourceType":"script"}