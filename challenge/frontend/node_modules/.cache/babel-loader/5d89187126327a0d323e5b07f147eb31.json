{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRecent = exports.walletToProvider = void 0;\nconst react_1 = require(\"react\");\nconst react_device_detect_1 = require(\"react-device-detect\");\nconst constants_1 = require(\"../constants\");\nconst local_storage_1 = require(\"../utils/local-storage\");\nconst sort_1 = require(\"../utils/sort\");\nfunction walletToProvider(wallet) {\n  return {\n    name: wallet.name,\n    walletConnectId: wallet.id,\n    type: constants_1.WalletTypes.WalletConnect,\n    description: wallet.description || 'Missing description in registry',\n    icon: wallet.logos.md,\n    canConnect: () => true,\n    showInList: () => react_device_detect_1.isMobile ? Object.values(wallet.mobile).some(Boolean) : true,\n    listPriority: () => constants_1.Priorities.Default,\n    installURL: wallet.homepage,\n    supportedPlatforms: [constants_1.Platform.Mobile]\n  };\n}\nexports.walletToProvider = walletToProvider;\nfunction getRecent() {\n  const listOfRecentWalletTypeIds = (0, local_storage_1.getRecentWallets)();\n  // create mapping by the identifier we saved so its easy to get the recent provider from the id\n  const providersByTypeId = Object.values(constants_1.PROVIDERS).reduce((collection, current) => {\n    const unifiedID = current.type === constants_1.WalletTypes.WalletConnect ? \"\".concat(current.type, \":\").concat(current.walletConnectId) : current.type;\n    collection.set(unifiedID, current);\n    return collection;\n  }, new Map());\n  // map over type-ids and get the actual provider\n  const recentProviders = listOfRecentWalletTypeIds.map(unifiedID => {\n    const provider = providersByTypeId.get(unifiedID);\n    return provider;\n  }).filter(p => p !== undefined);\n  return {\n    providers: recentProviders,\n    // return as a set to make it easy to filter these out of the default list\n    ids: new Set(listOfRecentWalletTypeIds)\n  };\n}\nexports.getRecent = getRecent;\nfunction useProviders() {\n  let wallets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let includedDefaultProviders = arguments.length > 1 ? arguments[1] : undefined;\n  let sort = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : sort_1.defaultProviderSort;\n  let search = arguments.length > 3 ? arguments[3] : undefined;\n  const record = (0, react_1.useMemo)(() => Object.assign(Object.assign({}, includedDefaultProviders.reduce((all, current) => {\n    all[current] = constants_1.PROVIDERS[current];\n    return all;\n  }, {})), wallets.reduce((acc, wallet) => {\n    acc[wallet.id] = walletToProvider(wallet);\n    return acc;\n  }, {})), [wallets, includedDefaultProviders]);\n  const providers = (0, react_1.useMemo)(() => {\n    return Object.entries(record).filter(_ref => {\n      let [providerKey, provider] = _ref;\n      return provider.showInList() && (!search || providerKey.toLowerCase().includes(search.toLowerCase()));\n    }).sort((_ref2, _ref3) => {\n      let [, a] = _ref2;\n      let [, b] = _ref3;\n      return sort(a, b);\n    });\n  }, [record, sort, search]);\n  if (!providers.length) {\n    return [];\n  }\n  const recentlyUsedProviders = getRecent();\n  if (recentlyUsedProviders.ids.size !== 0) {\n    const recent = recentlyUsedProviders.providers.map(provider => {\n      return [provider.name, provider];\n    });\n    const rest = providers.filter(_ref4 => {\n      let [_, provider] = _ref4;\n      const unifiedID = provider.type === constants_1.WalletTypes.WalletConnect ? \"\".concat(provider.type, \":\").concat(provider.walletConnectId) : provider.type;\n      return !recentlyUsedProviders.ids.has(unifiedID);\n    });\n    return [[constants_1.Priorities.Recent, recent], [constants_1.Priorities.Default, rest]];\n  }\n  return [[constants_1.Priorities.Default, providers]];\n}\nexports.default = useProviders;","map":null,"metadata":{},"sourceType":"script"}