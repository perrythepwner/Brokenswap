{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getErrorCode = exports.serializeError = exports.standardErrors = exports.standardErrorMessage = exports.standardErrorCodes = void 0;\n// eslint-disable-next-line no-restricted-imports\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst Web3Response_1 = require(\"./relay/Web3Response\");\nconst version_1 = require(\"./version\");\nexports.standardErrorCodes = Object.freeze(Object.assign(Object.assign({}, eth_rpc_errors_1.errorCodes), {\n  provider: Object.freeze(Object.assign(Object.assign({}, eth_rpc_errors_1.errorCodes.provider), {\n    unsupportedChain: 4902\n  }))\n}));\nfunction standardErrorMessage(code) {\n  return code !== undefined ? (0, eth_rpc_errors_1.getMessageFromCode)(code) : \"Unknown error\";\n}\nexports.standardErrorMessage = standardErrorMessage;\nexports.standardErrors = Object.freeze(Object.assign(Object.assign({}, eth_rpc_errors_1.ethErrors), {\n  provider: Object.freeze(Object.assign(Object.assign({}, eth_rpc_errors_1.ethErrors.provider), {\n    unsupportedChain: function unsupportedChain() {\n      let chainId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      return eth_rpc_errors_1.ethErrors.provider.custom({\n        code: exports.standardErrorCodes.provider.unsupportedChain,\n        message: \"Unrecognized chain ID \".concat(chainId, \". Try adding the chain using wallet_addEthereumChain first.\")\n      });\n    }\n  }))\n}));\n/**\n * Serializes an error to a format that is compatible with the Ethereum JSON RPC error format.\n * See https://docs.cloud.coinbase.com/wallet-sdk/docs/errors\n * for more information.\n */\nfunction serializeError(error, requestOrMethod) {\n  const serialized = (0, eth_rpc_errors_1.serializeError)(getErrorObject(error), {\n    shouldIncludeStack: true\n  });\n  const docUrl = new URL(\"https://docs.cloud.coinbase.com/wallet-sdk/docs/errors\");\n  docUrl.searchParams.set(\"version\", version_1.LIB_VERSION);\n  docUrl.searchParams.set(\"code\", serialized.code.toString());\n  const method = getMethod(serialized.data, requestOrMethod);\n  if (method) {\n    docUrl.searchParams.set(\"method\", method);\n  }\n  docUrl.searchParams.set(\"message\", serialized.message);\n  return Object.assign(Object.assign({}, serialized), {\n    docUrl: docUrl.href\n  });\n}\nexports.serializeError = serializeError;\n/**\n * Converts an error to a serializable object.\n */\nfunction getErrorObject(error) {\n  if (typeof error === \"string\") {\n    return {\n      message: error,\n      code: exports.standardErrorCodes.rpc.internal\n    };\n  } else if ((0, Web3Response_1.isErrorResponse)(error)) {\n    return Object.assign(Object.assign({}, error), {\n      message: error.errorMessage,\n      code: error.errorCode,\n      data: {\n        method: error.method,\n        result: error.result\n      }\n    });\n  } else {\n    return error;\n  }\n}\n/**\n * Gets the method name from the serialized data or the request.\n */\nfunction getMethod(serializedData, request) {\n  var _a;\n  const methodInData = (_a = serializedData) === null || _a === void 0 ? void 0 : _a.method;\n  if (methodInData) {\n    return methodInData;\n  }\n  if (request === undefined) {\n    return undefined;\n  } else if (typeof request === \"string\") {\n    return request;\n  } else if (!Array.isArray(request)) {\n    return request.method;\n  } else if (request.length > 0) {\n    return request[0].method;\n  } else {\n    return undefined;\n  }\n}\n// ----------------- getErrorCode -----------------\n/**\n * Returns the error code from an error object.\n */\nfunction getErrorCode(error) {\n  var _a;\n  if (typeof error === \"number\") {\n    return error;\n  } else if (isErrorWithCode(error)) {\n    return (_a = error.code) !== null && _a !== void 0 ? _a : error.errorCode;\n  }\n  return undefined;\n}\nexports.getErrorCode = getErrorCode;\nfunction isErrorWithCode(error) {\n  return typeof error === \"object\" && error !== null && (typeof error.code === \"number\" || typeof error.errorCode === \"number\");\n}","map":null,"metadata":{},"sourceType":"script"}