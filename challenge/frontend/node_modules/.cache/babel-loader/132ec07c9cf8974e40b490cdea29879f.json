{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst wasm_1 = require(\"./wasm\");\n/**\n * Class based SHA256\n */\nclass SHA256 {\n  constructor() {\n    this.ctx = wasm_1.newInstance();\n    this.wasmInputValue = this.ctx.input.value;\n    this.wasmOutputValue = this.ctx.output.value;\n    this.uint8InputArray = new Uint8Array(this.ctx.memory.buffer, this.wasmInputValue, this.ctx.INPUT_LENGTH);\n    this.uint8OutputArray = new Uint8Array(this.ctx.memory.buffer, this.wasmOutputValue, 32);\n  }\n  init() {\n    this.ctx.init();\n    return this;\n  }\n  update(data) {\n    const INPUT_LENGTH = this.ctx.INPUT_LENGTH;\n    if (data.length > INPUT_LENGTH) {\n      for (let i = 0; i < data.length; i += INPUT_LENGTH) {\n        const sliced = data.slice(i, i + INPUT_LENGTH);\n        this.uint8InputArray.set(sliced);\n        this.ctx.update(this.wasmInputValue, sliced.length);\n      }\n    } else {\n      this.uint8InputArray.set(data);\n      this.ctx.update(this.wasmInputValue, data.length);\n    }\n    return this;\n  }\n  final() {\n    this.ctx.final(this.wasmOutputValue);\n    const output = new Uint8Array(32);\n    output.set(this.uint8OutputArray);\n    return output;\n  }\n}\nexports.default = SHA256;","map":null,"metadata":{},"sourceType":"script"}