{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { BaseClient, SDK_VERSION } from '@sentry/core';\nimport { getGlobalObject, logger } from '@sentry/utils';\nimport { BrowserBackend } from './backend';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { injectReportDialog } from './helpers';\nimport { Breadcrumbs } from './integrations';\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nvar BrowserClient = /** @class */function (_super) {\n  __extends(BrowserClient, _super);\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  function BrowserClient(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = this;\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [{\n        name: 'npm:@sentry/browser',\n        version: SDK_VERSION\n      }],\n      version: SDK_VERSION\n    };\n    _this = _super.call(this, BrowserBackend, options) || this;\n    return _this;\n  }\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  BrowserClient.prototype.showReportDialog = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n    // doesn't work without a document (React Native)\n    var document = getGlobalObject().document;\n    if (!document) {\n      return;\n    }\n    if (!this._isEnabled()) {\n      IS_DEBUG_BUILD && logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n    injectReportDialog(__assign(__assign({}, options), {\n      dsn: options.dsn || this.getDsn()\n    }));\n  };\n  /**\n   * @inheritDoc\n   */\n  BrowserClient.prototype._prepareEvent = function (event, scope, hint) {\n    event.platform = event.platform || 'javascript';\n    return _super.prototype._prepareEvent.call(this, event, scope, hint);\n  };\n  /**\n   * @inheritDoc\n   */\n  BrowserClient.prototype._sendEvent = function (event) {\n    var integration = this.getIntegration(Breadcrumbs);\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n    _super.prototype._sendEvent.call(this, event);\n  };\n  return BrowserClient;\n}(BaseClient);\nexport { BrowserClient };","map":null,"metadata":{},"sourceType":"module"}