{"ast":null,"code":"import{createReducer}from'@reduxjs/toolkit';import{addMulticallListeners,errorFetchingMulticallResults,fetchingMulticallResults,removeMulticallListeners,toCallKey,updateMulticallResults}from'./actions';const initialState={callResults:{}};export default createReducer(initialState,builder=>builder.addCase(addMulticallListeners,(state,_ref)=>{var _listeners$chainId;let{payload:{calls,chainId,options:{blocksPerFetch=1}={}}}=_ref;const listeners=state.callListeners?state.callListeners:state.callListeners={};listeners[chainId]=(_listeners$chainId=listeners[chainId])!==null&&_listeners$chainId!==void 0?_listeners$chainId:{};calls.forEach(call=>{var _listeners$chainId$ca,_listeners$chainId$ca2;const callKey=toCallKey(call);listeners[chainId][callKey]=(_listeners$chainId$ca=listeners[chainId][callKey])!==null&&_listeners$chainId$ca!==void 0?_listeners$chainId$ca:{};listeners[chainId][callKey][blocksPerFetch]=((_listeners$chainId$ca2=listeners[chainId][callKey][blocksPerFetch])!==null&&_listeners$chainId$ca2!==void 0?_listeners$chainId$ca2:0)+1;});}).addCase(removeMulticallListeners,(state,_ref2)=>{let{payload:{chainId,calls,options:{blocksPerFetch=1}={}}}=_ref2;const listeners=state.callListeners?state.callListeners:state.callListeners={};if(!listeners[chainId])return;calls.forEach(call=>{const callKey=toCallKey(call);if(!listeners[chainId][callKey])return;if(!listeners[chainId][callKey][blocksPerFetch])return;if(listeners[chainId][callKey][blocksPerFetch]===1){delete listeners[chainId][callKey][blocksPerFetch];}else{listeners[chainId][callKey][blocksPerFetch]--;}});}).addCase(fetchingMulticallResults,(state,_ref3)=>{var _state$callResults$ch;let{payload:{chainId,fetchingBlockNumber,calls}}=_ref3;state.callResults[chainId]=(_state$callResults$ch=state.callResults[chainId])!==null&&_state$callResults$ch!==void 0?_state$callResults$ch:{};calls.forEach(call=>{const callKey=toCallKey(call);const current=state.callResults[chainId][callKey];if(!current){state.callResults[chainId][callKey]={fetchingBlockNumber};}else{var _current$fetchingBloc;if(((_current$fetchingBloc=current.fetchingBlockNumber)!==null&&_current$fetchingBloc!==void 0?_current$fetchingBloc:0)>=fetchingBlockNumber)return;state.callResults[chainId][callKey].fetchingBlockNumber=fetchingBlockNumber;}});}).addCase(errorFetchingMulticallResults,(state,_ref4)=>{var _state$callResults$ch2;let{payload:{fetchingBlockNumber,chainId,calls}}=_ref4;state.callResults[chainId]=(_state$callResults$ch2=state.callResults[chainId])!==null&&_state$callResults$ch2!==void 0?_state$callResults$ch2:{};calls.forEach(call=>{const callKey=toCallKey(call);const current=state.callResults[chainId][callKey];if(!current)return;// only should be dispatched if we are already fetching\nif(current.fetchingBlockNumber===fetchingBlockNumber){delete current.fetchingBlockNumber;current.data=null;current.blockNumber=fetchingBlockNumber;}});}).addCase(updateMulticallResults,(state,_ref5)=>{var _state$callResults$ch3;let{payload:{chainId,results,blockNumber}}=_ref5;state.callResults[chainId]=(_state$callResults$ch3=state.callResults[chainId])!==null&&_state$callResults$ch3!==void 0?_state$callResults$ch3:{};Object.keys(results).forEach(callKey=>{var _current$blockNumber;const current=state.callResults[chainId][callKey];if(((_current$blockNumber=current===null||current===void 0?void 0:current.blockNumber)!==null&&_current$blockNumber!==void 0?_current$blockNumber:0)>blockNumber)return;state.callResults[chainId][callKey]={data:results[callKey],blockNumber};});}));","map":null,"metadata":{},"sourceType":"module"}