{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidAddress = exports.isValidPrivateKey = exports.publicKeyToAddress = exports.privateKeyToPublicKey = exports.privateKeyToAddress = exports.toChecksumAddress = exports.isValidChecksumAddress = exports.trimLeading0x = exports.NULL_ADDRESS = exports.normalizeAddressWith0x = exports.normalizeAddress = exports.mapAddressListOnto = exports.mapAddressListDataOnto = exports.isHexString = exports.hexToBuffer = exports.getAddressChunks = exports.findAddressIndex = exports.eqAddress = exports.ensureLeading0x = exports.bufferToHex = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n// Exports moved to @celo/base, forwarding them\n// here for backwards compatibility\nvar address_2 = require(\"@celo/base/lib/address\");\nObject.defineProperty(exports, \"bufferToHex\", {\n  enumerable: true,\n  get: function get() {\n    return address_2.bufferToHex;\n  }\n});\nObject.defineProperty(exports, \"ensureLeading0x\", {\n  enumerable: true,\n  get: function get() {\n    return address_2.ensureLeading0x;\n  }\n});\nObject.defineProperty(exports, \"eqAddress\", {\n  enumerable: true,\n  get: function get() {\n    return address_2.eqAddress;\n  }\n});\nObject.defineProperty(exports, \"findAddressIndex\", {\n  enumerable: true,\n  get: function get() {\n    return address_2.findAddressIndex;\n  }\n});\nObject.defineProperty(exports, \"getAddressChunks\", {\n  enumerable: true,\n  get: function get() {\n    return address_2.getAddressChunks;\n  }\n});\nObject.defineProperty(exports, \"hexToBuffer\", {\n  enumerable: true,\n  get: function get() {\n    return address_2.hexToBuffer;\n  }\n});\nObject.defineProperty(exports, \"isHexString\", {\n  enumerable: true,\n  get: function get() {\n    return address_2.isHexString;\n  }\n});\nObject.defineProperty(exports, \"mapAddressListDataOnto\", {\n  enumerable: true,\n  get: function get() {\n    return address_2.mapAddressListDataOnto;\n  }\n});\nObject.defineProperty(exports, \"mapAddressListOnto\", {\n  enumerable: true,\n  get: function get() {\n    return address_2.mapAddressListOnto;\n  }\n});\nObject.defineProperty(exports, \"normalizeAddress\", {\n  enumerable: true,\n  get: function get() {\n    return address_2.normalizeAddress;\n  }\n});\nObject.defineProperty(exports, \"normalizeAddressWith0x\", {\n  enumerable: true,\n  get: function get() {\n    return address_2.normalizeAddressWith0x;\n  }\n});\nObject.defineProperty(exports, \"NULL_ADDRESS\", {\n  enumerable: true,\n  get: function get() {\n    return address_2.NULL_ADDRESS;\n  }\n});\nObject.defineProperty(exports, \"trimLeading0x\", {\n  enumerable: true,\n  get: function get() {\n    return address_2.trimLeading0x;\n  }\n});\nvar ethereumjs_util_2 = require(\"ethereumjs-util\");\nObject.defineProperty(exports, \"isValidChecksumAddress\", {\n  enumerable: true,\n  get: function get() {\n    return ethereumjs_util_2.isValidChecksumAddress;\n  }\n});\nObject.defineProperty(exports, \"toChecksumAddress\", {\n  enumerable: true,\n  get: function get() {\n    return ethereumjs_util_2.toChecksumAddress;\n  }\n});\nvar privateKeyToAddress = function privateKeyToAddress(privateKey) {\n  return (0, ethereumjs_util_1.toChecksumAddress)((0, address_1.ensureLeading0x)((0, ethereumjs_util_1.privateToAddress)((0, address_1.hexToBuffer)(privateKey)).toString('hex')));\n};\nexports.privateKeyToAddress = privateKeyToAddress;\nvar privateKeyToPublicKey = function privateKeyToPublicKey(privateKey) {\n  return (0, ethereumjs_util_1.toChecksumAddress)((0, address_1.ensureLeading0x)((0, ethereumjs_util_1.privateToPublic)((0, address_1.hexToBuffer)(privateKey)).toString('hex')));\n};\nexports.privateKeyToPublicKey = privateKeyToPublicKey;\nvar publicKeyToAddress = function publicKeyToAddress(publicKey) {\n  return (0, ethereumjs_util_1.toChecksumAddress)((0, address_1.ensureLeading0x)((0, ethereumjs_util_1.pubToAddress)((0, ethereumjs_util_1.toBuffer)((0, address_1.ensureLeading0x)(publicKey)), true).toString('hex')));\n};\nexports.publicKeyToAddress = publicKeyToAddress;\nvar isValidPrivateKey = function isValidPrivateKey(privateKey) {\n  return privateKey.startsWith('0x') && (0, ethereumjs_util_1.isValidPrivate)((0, address_1.hexToBuffer)(privateKey));\n};\nexports.isValidPrivateKey = isValidPrivateKey;\nvar isValidAddress = function isValidAddress(input) {\n  if ('string' !== typeof input) {\n    return false;\n  }\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(input)) {\n    return false;\n  }\n  if (/^(0x|0X)?[0-9A-F]{40}$/.test(input.toUpperCase())) {\n    return true;\n  }\n  if ((0, ethereumjs_util_1.toChecksumAddress)(input) === input) {\n    return true;\n  }\n  return false;\n};\nexports.isValidAddress = isValidAddress;","map":null,"metadata":{},"sourceType":"script"}