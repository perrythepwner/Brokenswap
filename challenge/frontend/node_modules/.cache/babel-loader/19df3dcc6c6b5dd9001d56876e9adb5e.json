{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CeloTokenWrapper = void 0;\n// NOTE: removing this import results in `yarn build` failures in Dockerfiles\n// after the move to node 10. This allows types to be inferred without\n// referencing '@celo/utils/node_modules/bignumber.js'\nrequire(\"bignumber.js\");\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\nvar Erc20Wrapper_1 = require(\"./Erc20Wrapper\");\n/**\n * Contract for Celo native currency that adheres to the ICeloToken and IERC20 interfaces.\n */\nvar CeloTokenWrapper = /** @class */function (_super) {\n  __extends(CeloTokenWrapper, _super);\n  function CeloTokenWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Returns the name of the token.\n     * @returns Name of the token.\n     */\n    _this.name = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.name);\n    /**\n     * Returns the three letter symbol of the token.\n     * @returns Symbol of the token.\n     */\n    _this.symbol = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.symbol);\n    /**\n     * Returns the number of decimals used in the token.\n     * @returns Number of decimals.\n     */\n    _this.decimals = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.decimals, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * Transfers the token from one address to another with a comment.\n     * @param to The address to transfer the token to.\n     * @param value The amount of the token to transfer.\n     * @param comment The transfer comment\n     * @return True if the transaction succeeds.\n     */\n    _this.transferWithComment = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.transferWithComment);\n    return _this;\n  }\n  return CeloTokenWrapper;\n}(Erc20Wrapper_1.Erc20Wrapper);\nexports.CeloTokenWrapper = CeloTokenWrapper;","map":null,"metadata":{},"sourceType":"script"}