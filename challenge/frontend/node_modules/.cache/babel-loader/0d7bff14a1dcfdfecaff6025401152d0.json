{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitVectorType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst bitArray_1 = require(\"../value/bitArray\");\nconst bitArray_2 = require(\"./bitArray\");\n/**\n * BitVector: ordered fixed-length collection of boolean values, with N bits\n * - Notation: `Bitvector[N]`\n * - Value: `BitArray`, @see BitArray for a justification of its memory efficiency and performance\n * - View: `BitArrayTreeView`\n * - ViewDU: `BitArrayTreeViewDU`\n */\nclass BitVectorType extends bitArray_2.BitArrayType {\n  constructor(lengthBits, opts) {\n    var _opts$typeName;\n    super();\n    this.lengthBits = lengthBits;\n    this.isList = false;\n    if (lengthBits === 0) throw Error(\"Vector length must be > 0\");\n    this.typeName = (_opts$typeName = opts === null || opts === void 0 ? void 0 : opts.typeName) !== null && _opts$typeName !== void 0 ? _opts$typeName : \"BitVector[\".concat(lengthBits, \"]\");\n    this.chunkCount = Math.ceil(this.lengthBits / 8 / 32);\n    this.maxChunkCount = this.chunkCount;\n    this.depth = merkleize_1.maxChunksToDepth(this.chunkCount);\n    this.fixedSize = Math.ceil(this.lengthBits / 8);\n    this.minSize = this.fixedSize;\n    this.maxSize = this.fixedSize;\n    // To cache mask for trailing zero bits validation\n    this.zeroBitsMask = lengthBits % 8 === 0 ? 0 : 0xff & 0xff << lengthBits % 8;\n  }\n  static named(limitBits, opts) {\n    return new (named_1.namedClass(BitVectorType, opts.typeName))(limitBits, opts);\n  }\n  defaultValue() {\n    return bitArray_1.BitArray.fromBitLen(this.lengthBits);\n  }\n  // Views: inherited from BitArrayType\n  // Serialization + deserialization\n  value_serializedSize() {\n    return this.fixedSize;\n  }\n  value_serializeToBytes(output, offset, value) {\n    output.uint8Array.set(value.uint8Array, offset);\n    return offset + this.fixedSize;\n  }\n  value_deserializeFromBytes(data, start, end) {\n    this.assertValidLength(data.uint8Array, start, end);\n    // Buffer.prototype.slice does not copy memory, Enforce Uint8Array usage https://github.com/nodejs/node/issues/28087\n    return new bitArray_1.BitArray(Uint8Array.prototype.slice.call(data.uint8Array, start, end), this.lengthBits);\n  }\n  tree_serializedSize() {\n    return this.fixedSize;\n  }\n  tree_serializeToBytes(output, offset, node) {\n    const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, this.depth, 0, this.chunkCount);\n    persistent_merkle_tree_1.packedNodeRootsToBytes(output.dataView, offset, this.fixedSize, nodes);\n    return offset + this.fixedSize;\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    this.assertValidLength(data.uint8Array, start, end);\n    return persistent_merkle_tree_1.packedRootsBytesToNode(this.depth, data.dataView, start, end);\n  }\n  tree_getByteLen() {\n    return this.fixedSize;\n  }\n  // Merkleization: inherited from BitArrayType\n  // Proofs: inherited from BitArrayType\n  // JSON: inherited from BitArrayType\n  // Deserializer helpers\n  assertValidLength(data, start, end) {\n    const size = end - start;\n    if (end - start !== this.fixedSize) {\n      throw Error(\"Invalid BitVector size \".concat(size, \" != \").concat(this.fixedSize));\n    }\n    // If lengthBits is not aligned to bytes, ensure trailing bits are zeroed\n    if (\n    // If zeroBitsMask == 0, then the BitVector uses full bytes only\n    this.zeroBitsMask > 0 &&\n    // if the last byte is partial, retrieve it and use the cached mask to check if trailing bits are zeroed\n    (data[end - 1] & this.zeroBitsMask) > 0) {\n      throw Error(\"BitVector: nonzero bits past length\");\n    }\n  }\n}\nexports.BitVectorType = BitVectorType;","map":null,"metadata":{},"sourceType":"script"}