{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trimUncompressedPrefix = exports.ensureUncompressed = exports.ensureCompressed = exports.isCompressed = exports.computeSharedSecret = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar crypto_1 = require(\"crypto\");\nfunction computeSharedSecret(privateKey, publicKey) {\n  var ecdh = (0, crypto_1.createECDH)('secp256k1');\n  ecdh.setPrivateKey(Buffer.from((0, address_1.trimLeading0x)(privateKey), 'hex'));\n  return ecdh.computeSecret(Buffer.from(ensureCompressed(publicKey), 'hex'));\n}\nexports.computeSharedSecret = computeSharedSecret;\nfunction isCompressed(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n  if (noLeading0x.length === 64) {\n    return true;\n  }\n  return noLeading0x.length === 66 && (noLeading0x.startsWith('02') || noLeading0x.startsWith('03'));\n}\nexports.isCompressed = isCompressed;\nfunction ensureCompressed(publicKey) {\n  // NOTE: elliptic is disabled elsewhere in this library to prevent\n  // accidental signing of truncated messages.\n  // tslint:disable-next-line:import-blacklist\n  var EC = require('elliptic').ec;\n  var ec = new EC('secp256k1');\n  return ec.keyFromPublic(ensureUncompressedPrefix(publicKey), 'hex').getPublic(true, 'hex');\n}\nexports.ensureCompressed = ensureCompressed;\nfunction ensureUncompressed(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n  // NOTE: elliptic is disabled elsewhere in this library to prevent\n  // accidental signing of truncated messages.\n  // tslint:disable-next-line:import-blacklist\n  var EC = require('elliptic').ec;\n  var ec = new EC('secp256k1');\n  var uncompressed = ec.keyFromPublic(ensureUncompressedPrefix(noLeading0x), 'hex').getPublic(false, 'hex');\n  return uncompressed;\n}\nexports.ensureUncompressed = ensureUncompressed;\nfunction trimUncompressedPrefix(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n  if (noLeading0x.length === 130 && noLeading0x.startsWith('04')) {\n    return noLeading0x.slice(2);\n  }\n  return noLeading0x;\n}\nexports.trimUncompressedPrefix = trimUncompressedPrefix;\nfunction ensureUncompressedPrefix(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n  if (noLeading0x.length === 128) {\n    return \"04\".concat(noLeading0x);\n  }\n  return noLeading0x;\n}","map":null,"metadata":{},"sourceType":"script"}