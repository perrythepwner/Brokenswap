{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListCompositeType = void 0;\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nconst listComposite_1 = require(\"../view/listComposite\");\nconst listComposite_2 = require(\"../viewDU/listComposite\");\nconst array_1 = require(\"./array\");\n/**\n * List: ordered variable-length homogeneous collection, limited to N values\n *\n * Array of Composite type:\n * - Composite types always take at least one chunk\n * - Composite types are always returned as views\n */\nclass ListCompositeType extends array_1.ArrayType {\n  constructor(elementType, limit, opts) {\n    var _opts$typeName;\n    super(elementType);\n    this.elementType = elementType;\n    this.limit = limit;\n    this.itemsPerChunk = 1;\n    this.fixedSize = null;\n    this.isList = true;\n    this.isViewMutable = true;\n    this.defaultLen = 0;\n    if (elementType.isBasic) throw Error(\"elementType must not be basic\");\n    if (limit === 0) throw Error(\"List limit must be > 0\");\n    this.typeName = (_opts$typeName = opts === null || opts === void 0 ? void 0 : opts.typeName) !== null && _opts$typeName !== void 0 ? _opts$typeName : \"List[\".concat(elementType.typeName, \", \").concat(limit, \"]\");\n    this.maxChunkCount = this.limit;\n    this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n    // Depth includes the extra level for the length node\n    this.depth = this.chunkDepth + 1;\n    this.minSize = 0;\n    this.maxSize = arrayComposite_1.maxSizeArrayComposite(elementType, this.limit);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static named(elementType, limit, opts) {\n    return new (named_1.namedClass(ListCompositeType, opts.typeName))(elementType, limit, opts);\n  }\n  getView(tree) {\n    return new listComposite_1.ListCompositeTreeView(this, tree);\n  }\n  getViewDU(node, cache) {\n    // cache type should be validated (if applicate) in the view\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new listComposite_2.ListCompositeTreeViewDU(this, node, cache);\n  }\n  commitView(view) {\n    return view.node;\n  }\n  commitViewDU(view) {\n    view.commit();\n    return view.node;\n  }\n  cacheOfViewDU(view) {\n    return view.cache;\n  }\n  // Serialization + deserialization\n  value_serializedSize(value) {\n    return arrayComposite_1.value_serializedSizeArrayComposite(this.elementType, value.length, value);\n  }\n  value_serializeToBytes(output, offset, value) {\n    return arrayComposite_1.value_serializeToBytesArrayComposite(this.elementType, value.length, output, offset, value);\n  }\n  value_deserializeFromBytes(data, start, end) {\n    return arrayComposite_1.value_deserializeFromBytesArrayComposite(this.elementType, data, start, end, this);\n  }\n  tree_serializedSize(node) {\n    const chunksNode = this.tree_getChunksNode(node);\n    const length = this.tree_getLength(node);\n    return arrayComposite_1.tree_serializedSizeArrayComposite(this.elementType, length, this.chunkDepth, chunksNode);\n  }\n  tree_serializeToBytes(output, offset, node) {\n    const chunksNode = this.tree_getChunksNode(node);\n    const length = this.tree_getLength(node);\n    return arrayComposite_1.tree_serializeToBytesArrayComposite(this.elementType, length, this.chunkDepth, chunksNode, output, offset);\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    return arrayComposite_1.tree_deserializeFromBytesArrayComposite(this.elementType, this.chunkDepth, data, start, end, this);\n  }\n  // Helpers for TreeView\n  tree_getLength(node) {\n    return arrayBasic_1.getLengthFromRootNode(node);\n  }\n  tree_setLength(tree, length) {\n    tree.rootNode = arrayBasic_1.addLengthNode(tree.rootNode.left, length);\n  }\n  tree_getChunksNode(node) {\n    return node.left;\n  }\n  tree_setChunksNode(rootNode, chunksNode, newLength) {\n    return arrayBasic_1.setChunksNode(rootNode, chunksNode, newLength);\n  }\n  // Merkleization\n  hashTreeRoot(value) {\n    return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n  }\n  getRoots(value) {\n    return arrayComposite_1.value_getRootsArrayComposite(this.elementType, value.length, value);\n  }\n}\nexports.ListCompositeType = ListCompositeType;","map":null,"metadata":{},"sourceType":"script"}