{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeSig = exports.verifySignatureWithoutPrefix = exports.verifyEIP712TypedDataSigner = exports.recoverMessageSigner = exports.getSignerFromTxEIP2718TX = exports.recoverTransaction = exports.extractSignature = exports.encodeTransaction = exports.isPriceToLow = exports.rlpEncodedTx = exports.stringNumberOrBNToHex = exports.getHashFromEncoded = exports.chainIdTransformationForSigning = exports.thirtyTwo = exports.sixtyFour = exports.publicKeyPrefix = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar connect_1 = require(\"@celo/connect\");\nvar formatter_1 = require(\"@celo/connect/lib/utils/formatter\");\nvar sign_typed_data_utils_1 = require(\"@celo/utils/lib/sign-typed-data-utils\");\nvar signatureUtils_1 = require(\"@celo/utils/lib/signatureUtils\");\nvar util_1 = require(\"@ethereumjs/util\");\nvar debug_1 = __importDefault(require(\"debug\"));\n// @ts-ignore-next-line eth-lib types not found\nvar eth_lib_1 = require(\"eth-lib\");\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\nvar utils_js_1 = require(\"ethereum-cryptography/utils.js\");\nvar web3_1 = __importDefault(require(\"web3\")); // TODO try to do this without web3 direct\nvar web3_eth_accounts_1 = __importDefault(require(\"web3-eth-accounts\"));\nvar debug = (0, debug_1.default)('wallet-base:tx:sign');\n// Original code taken from\n// https://github.com/ethereum/web3.js/blob/1.x/packages/web3-eth-accounts/src/index.js\n// 0x04 prefix indicates that the key is not compressed\n// https://tools.ietf.org/html/rfc5480#section-2.2\nexports.publicKeyPrefix = 0x04;\nexports.sixtyFour = 64;\nexports.thirtyTwo = 32;\nvar Y_PARITY_EIP_2098 = 27;\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\n// Simple replay attack protection\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md\nfunction chainIdTransformationForSigning(chainId) {\n  return chainId * 2 + 35;\n}\nexports.chainIdTransformationForSigning = chainIdTransformationForSigning;\nfunction getHashFromEncoded(rlpEncode) {\n  return eth_lib_1.hash.keccak256(rlpEncode);\n}\nexports.getHashFromEncoded = getHashFromEncoded;\nfunction trimLeadingZero(hex) {\n  while (hex && hex.startsWith('0x0')) {\n    hex = (0, address_1.ensureLeading0x)(hex.slice(3));\n  }\n  return hex;\n}\nfunction makeEven(hex) {\n  if (hex.length % 2 === 1) {\n    hex = hex.replace('0x', '0x0');\n  }\n  return hex;\n}\nfunction signatureFormatter(signature, type) {\n  var v = signature.v;\n  if (type !== 'celo-legacy') {\n    v = signature.v === Y_PARITY_EIP_2098 ? 0 : 1;\n  }\n  return {\n    v: stringNumberToHex(v),\n    r: makeEven(trimLeadingZero((0, address_1.ensureLeading0x)(signature.r.toString('hex')))),\n    s: makeEven(trimLeadingZero((0, address_1.ensureLeading0x)(signature.s.toString('hex'))))\n  };\n}\nfunction stringNumberOrBNToHex(num) {\n  if (typeof num === 'string' || typeof num === 'number' || num === undefined) {\n    return stringNumberToHex(num);\n  } else {\n    return makeEven(\"0x\" + num.toString(16));\n  }\n}\nexports.stringNumberOrBNToHex = stringNumberOrBNToHex;\nfunction stringNumberToHex(num) {\n  var auxNumber = Number(num);\n  if (num === '0x' || num === undefined || auxNumber === 0) {\n    return '0x';\n  }\n  return makeEven(web3_1.default.utils.numberToHex(num));\n}\nfunction rlpEncodedTx(tx) {\n  assertSerializableTX(tx);\n  var transaction = (0, formatter_1.inputCeloTxFormatter)(tx);\n  transaction.to = eth_lib_1.bytes.fromNat(tx.to || '0x').toLowerCase();\n  transaction.nonce = Number((tx.nonce !== '0x' ? tx.nonce : 0) || 0);\n  transaction.data = eth_lib_1.bytes.fromNat(tx.data || '0x').toLowerCase();\n  transaction.value = stringNumberOrBNToHex(tx.value);\n  transaction.gas = stringNumberOrBNToHex(tx.gas);\n  transaction.chainId = tx.chainId || 1;\n  // Celo Specific\n  transaction.feeCurrency = eth_lib_1.bytes.fromNat(tx.feeCurrency || '0x').toLowerCase();\n  transaction.gatewayFeeRecipient = eth_lib_1.bytes.fromNat(tx.gatewayFeeRecipient || '0x').toLowerCase();\n  transaction.gatewayFee = stringNumberOrBNToHex(tx.gatewayFee);\n  // Legacy\n  transaction.gasPrice = stringNumberOrBNToHex(tx.gasPrice);\n  // EIP1559 / CIP42\n  transaction.maxFeePerGas = stringNumberOrBNToHex(tx.maxFeePerGas);\n  transaction.maxPriorityFeePerGas = stringNumberOrBNToHex(tx.maxPriorityFeePerGas);\n  var rlpEncode;\n  if (isCIP64(tx)) {\n    // https://github.com/celo-org/celo-proposals/blob/master/CIPs/cip-0064.md\n    // 0x7b || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, feeCurrency, signatureYParity, signatureR, signatureS]).\n    rlpEncode = eth_lib_1.RLP.encode([stringNumberToHex(transaction.chainId), stringNumberToHex(transaction.nonce), transaction.maxPriorityFeePerGas || '0x', transaction.maxFeePerGas || '0x', transaction.gas || '0x', transaction.to || '0x', transaction.value || '0x', transaction.data || '0x', transaction.accessList || [], transaction.feeCurrency || '0x']);\n    delete transaction.gatewayFee;\n    delete transaction.gatewayFeeRecipient;\n    delete transaction.gasPrice;\n    return {\n      transaction: transaction,\n      rlpEncode: concatHex([TxTypeToPrefix.cip64, rlpEncode]),\n      type: 'cip64'\n    };\n  } else if (isCIP42(tx)) {\n    // There shall be a typed transaction with the code 0x7c that has the following format:\n    // 0x7c || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, feecurrency, gatewayFeeRecipient, gatewayfee, destination, amount, data, access_list, signature_y_parity, signature_r, signature_s]).\n    // This will be in addition to the type 0x02 transaction as specified in EIP-1559.\n    rlpEncode = eth_lib_1.RLP.encode([stringNumberToHex(transaction.chainId), stringNumberToHex(transaction.nonce), transaction.maxPriorityFeePerGas || '0x', transaction.maxFeePerGas || '0x', transaction.gas || '0x', transaction.feeCurrency || '0x', transaction.gatewayFeeRecipient || '0x', transaction.gatewayFee || '0x', transaction.to || '0x', transaction.value || '0x', transaction.data || '0x', transaction.accessList || []]);\n    delete transaction.gasPrice;\n    return {\n      transaction: transaction,\n      rlpEncode: concatHex([TxTypeToPrefix.cip42, rlpEncode]),\n      type: 'cip42'\n    };\n  } else if (isEIP1559(tx)) {\n    // https://eips.ethereum.org/EIPS/eip-1559\n    // 0x02 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, amount, data, access_list, signature_y_parity, signature_r, signature_s]).\n    rlpEncode = eth_lib_1.RLP.encode([stringNumberToHex(transaction.chainId), stringNumberToHex(transaction.nonce), transaction.maxPriorityFeePerGas || '0x', transaction.maxFeePerGas || '0x', transaction.gas || '0x', transaction.to || '0x', transaction.value || '0x', transaction.data || '0x', transaction.accessList || []]);\n    delete transaction.feeCurrency;\n    delete transaction.gatewayFee;\n    delete transaction.gatewayFeeRecipient;\n    delete transaction.gasPrice;\n    return {\n      transaction: transaction,\n      rlpEncode: concatHex([TxTypeToPrefix.eip1559, rlpEncode]),\n      type: 'eip1559'\n    };\n  } else {\n    // This order should match the order in Geth.\n    // https://github.com/celo-org/celo-blockchain/blob/027dba2e4584936cc5a8e8993e4e27d28d5247b8/core/types/transaction.go#L65\n    rlpEncode = eth_lib_1.RLP.encode([stringNumberToHex(transaction.nonce), transaction.gasPrice, transaction.gas, transaction.feeCurrency, transaction.gatewayFeeRecipient, transaction.gatewayFee, transaction.to, transaction.value, transaction.data, stringNumberToHex(transaction.chainId), '0x', '0x']);\n    return {\n      transaction: transaction,\n      rlpEncode: rlpEncode,\n      type: 'celo-legacy'\n    };\n  }\n}\nexports.rlpEncodedTx = rlpEncodedTx;\nvar TxTypeToPrefix;\n(function (TxTypeToPrefix) {\n  TxTypeToPrefix[\"celo-legacy\"] = \"\";\n  TxTypeToPrefix[\"cip42\"] = \"0x7c\";\n  TxTypeToPrefix[\"cip64\"] = \"0x7b\";\n  TxTypeToPrefix[\"eip1559\"] = \"0x02\";\n})(TxTypeToPrefix || (TxTypeToPrefix = {}));\nfunction concatTypePrefixHex(rawTransaction, txType) {\n  var prefix = TxTypeToPrefix[txType];\n  if (prefix) {\n    return concatHex([prefix, rawTransaction]);\n  }\n  return rawTransaction;\n}\nfunction assertSerializableTX(tx) {\n  if (!tx.gas) {\n    throw new Error('\"gas\" is missing');\n  }\n  // ensure at least gasPrice or maxFeePerGas and maxPriorityFeePerGas are set\n  if (!(0, connect_1.isPresent)(tx.gasPrice) && (!(0, connect_1.isPresent)(tx.maxFeePerGas) || !(0, connect_1.isPresent)(tx.maxPriorityFeePerGas))) {\n    throw new Error('\"gasPrice\" or \"maxFeePerGas\" and \"maxPriorityFeePerGas\" are missing');\n  }\n  // ensure that gasPrice and maxFeePerGas are not set at the same time\n  if ((0, connect_1.isPresent)(tx.gasPrice) && ((0, connect_1.isPresent)(tx.maxFeePerGas) || (0, connect_1.isPresent)(tx.maxPriorityFeePerGas))) {\n    throw new Error('when \"maxFeePerGas\" or \"maxPriorityFeePerGas\" are set, \"gasPrice\" must not be set');\n  }\n  if (isNullOrUndefined(tx.nonce) || isNullOrUndefined(tx.chainId)) {\n    throw new Error('One of the values \"chainId\" or \"nonce\" couldn\\'t be fetched: ' + JSON.stringify({\n      chainId: tx.chainId,\n      nonce: tx.nonce\n    }));\n  }\n  if (isLessThanZero(tx.nonce) || isLessThanZero(tx.gas) || isLessThanZero(tx.chainId)) {\n    throw new Error('Gas, nonce or chainId is less than than 0');\n  }\n  isPriceToLow(tx);\n}\nfunction isPriceToLow(tx) {\n  var prices = [tx.gasPrice, tx.maxFeePerGas, tx.maxPriorityFeePerGas].filter(function (price) {\n    return price !== undefined;\n  });\n  var isLow = false;\n  for (var _i = 0, prices_1 = prices; _i < prices_1.length; _i++) {\n    var price = prices_1[_i];\n    if (isLessThanZero(price)) {\n      throw new Error('GasPrice or maxFeePerGas or maxPriorityFeePerGas is less than than 0');\n    }\n  }\n  return isLow;\n}\nexports.isPriceToLow = isPriceToLow;\nfunction isEIP1559(tx) {\n  return (0, connect_1.isPresent)(tx.maxFeePerGas) && (0, connect_1.isPresent)(tx.maxPriorityFeePerGas);\n}\nfunction isCIP64(tx) {\n  return isEIP1559(tx) && (0, connect_1.isPresent)(tx.feeCurrency) && !(0, connect_1.isPresent)(tx.gatewayFeeRecipient) && !(0, connect_1.isPresent)(tx.gatewayFeeRecipient);\n}\nfunction isCIP42(tx) {\n  return isEIP1559(tx) && ((0, connect_1.isPresent)(tx.feeCurrency) || (0, connect_1.isPresent)(tx.gatewayFeeRecipient) || (0, connect_1.isPresent)(tx.gatewayFee));\n}\nfunction concatHex(values) {\n  return \"0x\".concat(values.reduce(function (acc, x) {\n    return acc + x.replace('0x', '');\n  }, ''));\n}\nfunction isLessThanZero(value) {\n  if (isNullOrUndefined(value)) {\n    return true;\n  }\n  switch (typeof value) {\n    case 'string':\n    case 'number':\n      return Number(value) < 0;\n    default:\n      return (value === null || value === void 0 ? void 0 : value.lt(web3_1.default.utils.toBN(0))) || false;\n  }\n}\nfunction encodeTransaction(rlpEncoded, signature) {\n  return __awaiter(this, void 0, void 0, function () {\n    var sanitizedSignature, v, r, s, decodedTX, rawTx, rawTransaction, hash, baseTX, tx, result;\n    return __generator(this, function (_a) {\n      sanitizedSignature = signatureFormatter(signature, rlpEncoded.type);\n      v = sanitizedSignature.v;\n      r = sanitizedSignature.r;\n      s = sanitizedSignature.s;\n      decodedTX = prefixAwareRLPDecode(rlpEncoded.rlpEncode, rlpEncoded.type);\n      rawTx = (rlpEncoded.type === 'celo-legacy' ? decodedTX.slice(0, 9) : decodedTX).concat([v, r, s]);\n      rawTransaction = concatTypePrefixHex(eth_lib_1.RLP.encode(rawTx), rlpEncoded.type);\n      hash = getHashFromEncoded(rawTransaction);\n      baseTX = {\n        nonce: rlpEncoded.transaction.nonce.toString(),\n        gas: rlpEncoded.transaction.gas.toString(),\n        to: rlpEncoded.transaction.to.toString(),\n        value: rlpEncoded.transaction.value.toString(),\n        input: rlpEncoded.transaction.data,\n        v: v,\n        r: r,\n        s: s,\n        hash: hash\n      };\n      tx = baseTX;\n      if (rlpEncoded.type === 'eip1559' || rlpEncoded.type === 'cip42') {\n        tx = __assign(__assign({}, tx), {\n          // @ts-expect-error -- just a matter of how  this tx is built\n          maxFeePerGas: rlpEncoded.transaction.maxFeePerGas.toString(),\n          maxPriorityFeePerGas: rlpEncoded.transaction.maxPriorityFeePerGas.toString(),\n          accessList: (0, formatter_1.parseAccessList)(rlpEncoded.transaction.accessList || [])\n        });\n      }\n      if (rlpEncoded.type === 'cip42' || rlpEncoded.type === 'celo-legacy') {\n        tx = __assign(__assign({}, tx), {\n          // @ts-expect-error -- just a matter of how  this tx is built\n          feeCurrency: rlpEncoded.transaction.feeCurrency.toString(),\n          gatewayFeeRecipient: rlpEncoded.transaction.gatewayFeeRecipient.toString(),\n          gatewayFee: rlpEncoded.transaction.gatewayFee.toString()\n        });\n      }\n      if (rlpEncoded.type === 'celo-legacy') {\n        tx = __assign(__assign({}, tx), {\n          // @ts-expect-error -- just a matter of how  this tx is built\n          gasPrice: rlpEncoded.transaction.gasPrice.toString()\n        });\n      }\n      result = {\n        tx: tx,\n        raw: rawTransaction,\n        type: rlpEncoded.type\n      };\n      return [2 /*return*/, result];\n    });\n  });\n}\nexports.encodeTransaction = encodeTransaction;\n// new types have prefix but legacy does not\nfunction prefixAwareRLPDecode(rlpEncode, type) {\n  return type === 'celo-legacy' ? eth_lib_1.RLP.decode(rlpEncode) : eth_lib_1.RLP.decode(\"0x\".concat(rlpEncode.slice(4)));\n}\nfunction correctLengthOf(type, includeSig) {\n  if (includeSig === void 0) {\n    includeSig = true;\n  }\n  switch (type) {\n    case 'cip64':\n      {\n        return includeSig ? 13 : 10;\n      }\n    case 'cip42':\n      return includeSig ? 15 : 12;\n    case 'celo-legacy':\n    case 'eip1559':\n      return 12;\n  }\n}\n// Based on the return type of ensureLeading0x this was not a Buffer\nfunction extractSignature(rawTx) {\n  var type = determineTXType(rawTx);\n  var rawValues = prefixAwareRLPDecode(rawTx, type);\n  var length = rawValues.length;\n  if (correctLengthOf(type) !== length) {\n    throw new Error(\"@extractSignature: provided transaction has \".concat(length, \" elements but \").concat(type, \" txs with a signature have \").concat(correctLengthOf(type), \" \").concat(JSON.stringify(rawValues)));\n  }\n  return extractSignatureFromDecoded(rawValues);\n}\nexports.extractSignature = extractSignature;\nfunction extractSignatureFromDecoded(rawValues) {\n  // signature is always (for the tx we support so far) the last three elements of the array in order v, r, s,\n  var v = rawValues.at(-3);\n  var r = rawValues.at(-2);\n  var s = rawValues.at(-1);\n  // https://github.com/wagmi-dev/viem/blob/993321689b3e2220976504e7e170fe47731297ce/src/utils/transaction/parseTransaction.ts#L281\n  // Account.recover cannot handle canonicalized signatures\n  // A canonicalized signature may have the first byte removed if its value is 0\n  r = (0, address_1.ensureLeading0x)((0, address_1.trimLeading0x)(r).padStart(64, '0'));\n  s = (0, address_1.ensureLeading0x)((0, address_1.trimLeading0x)(s).padStart(64, '0'));\n  return {\n    v: v,\n    r: r,\n    s: s\n  };\n}\n// Recover transaction and sender address from a raw transaction.\n// This is used for testing.\nfunction recoverTransaction(rawTx) {\n  if (!rawTx.startsWith('0x')) {\n    throw new Error('rawTx must start with 0x');\n  }\n  switch (determineTXType(rawTx)) {\n    case 'cip64':\n      return recoverTransactionCIP64(rawTx);\n    case 'cip42':\n      return recoverTransactionCIP42(rawTx);\n    case 'eip1559':\n      return recoverTransactionEIP1559(rawTx);\n    default:\n      var rawValues = eth_lib_1.RLP.decode(rawTx);\n      debug('signing-utils@recoverTransaction: values are %s', rawValues);\n      var recovery = eth_lib_1.bytes.toNumber(rawValues[9]);\n      // tslint:disable-next-line:no-bitwise\n      var chainId = eth_lib_1.bytes.fromNumber(recovery - 35 >> 1);\n      var celoTx = {\n        type: 'celo-legacy',\n        nonce: rawValues[0].toLowerCase() === '0x' ? 0 : parseInt(rawValues[0], 16),\n        gasPrice: rawValues[1].toLowerCase() === '0x' ? 0 : parseInt(rawValues[1], 16),\n        gas: rawValues[2].toLowerCase() === '0x' ? 0 : parseInt(rawValues[2], 16),\n        feeCurrency: rawValues[3],\n        gatewayFeeRecipient: rawValues[4],\n        gatewayFee: rawValues[5],\n        to: rawValues[6],\n        value: rawValues[7],\n        data: rawValues[8],\n        chainId: chainId\n      };\n      var _a = extractSignatureFromDecoded(rawValues),\n        r = _a.r,\n        v = _a.v,\n        s = _a.s;\n      var signature = eth_lib_1.account.encodeSignature([v, r, s]);\n      var extraData = recovery < 35 ? [] : [chainId, '0x', '0x'];\n      var signingData = rawValues.slice(0, 9).concat(extraData);\n      var signingDataHex = eth_lib_1.RLP.encode(signingData);\n      var signer = eth_lib_1.account.recover(getHashFromEncoded(signingDataHex), signature);\n      return [celoTx, signer];\n  }\n}\nexports.recoverTransaction = recoverTransaction;\n// inspired by @ethereumjs/tx\nfunction getPublicKeyofSignerFromTx(transactionArray, type) {\n  // this needs to be 10 for cip64, 12 for cip42 and eip1559\n  var base = transactionArray.slice(0, correctLengthOf(type, false));\n  var message = concatHex([TxTypeToPrefix[type], eth_lib_1.RLP.encode(base).slice(2)]);\n  var msgHash = (0, keccak_1.keccak256)((0, utils_js_1.hexToBytes)(message));\n  var _a = extractSignatureFromDecoded(transactionArray),\n    v = _a.v,\n    r = _a.r,\n    s = _a.s;\n  try {\n    return (0, util_1.ecrecover)((0, util_1.toBuffer)(msgHash), v === '0x' || v === undefined ? BigInt(0) : BigInt(1), (0, util_1.toBuffer)(r), (0, util_1.toBuffer)(s));\n  } catch (e) {\n    throw new Error(e);\n  }\n}\nfunction getSignerFromTxEIP2718TX(serializedTransaction) {\n  var transactionArray = eth_lib_1.RLP.decode(\"0x\".concat(serializedTransaction.slice(4)));\n  var signer = getPublicKeyofSignerFromTx(transactionArray, determineTXType(serializedTransaction));\n  return (0, util_1.toChecksumAddress)(util_1.Address.fromPublicKey(signer).toString());\n}\nexports.getSignerFromTxEIP2718TX = getSignerFromTxEIP2718TX;\nfunction determineTXType(serializedTransaction) {\n  var prefix = serializedTransaction.slice(0, 4);\n  if (prefix === TxTypeToPrefix.eip1559) {\n    return 'eip1559';\n  } else if (prefix === TxTypeToPrefix.cip42) {\n    return 'cip42';\n  } else if (prefix === TxTypeToPrefix.cip64) {\n    return 'cip64';\n  }\n  return 'celo-legacy';\n}\nfunction vrsForRecovery(vRaw, r, s) {\n  var v = vRaw === '0x' || (0, formatter_1.hexToNumber)(vRaw) === 0 ? Y_PARITY_EIP_2098 : Y_PARITY_EIP_2098 + 1;\n  return {\n    v: v,\n    r: r,\n    s: s,\n    yParity: v === Y_PARITY_EIP_2098 ? 0 : 1\n  };\n}\nfunction recoverTransactionCIP42(serializedTransaction) {\n  var transactionArray = prefixAwareRLPDecode(serializedTransaction, 'cip42');\n  debug('signing-utils@recoverTransactionCIP42: values are %s', transactionArray);\n  if (transactionArray.length !== 15 && transactionArray.length !== 12) {\n    throw new Error(\"Invalid transaction length for type CIP42: \".concat(transactionArray.length, \" instead of 15 or 12. array: \").concat(transactionArray));\n  }\n  var chainId = transactionArray[0],\n    nonce = transactionArray[1],\n    maxPriorityFeePerGas = transactionArray[2],\n    maxFeePerGas = transactionArray[3],\n    gas = transactionArray[4],\n    feeCurrency = transactionArray[5],\n    gatewayFeeRecipient = transactionArray[6],\n    gatewayFee = transactionArray[7],\n    to = transactionArray[8],\n    value = transactionArray[9],\n    data = transactionArray[10],\n    accessList = transactionArray[11],\n    vRaw = transactionArray[12],\n    r = transactionArray[13],\n    s = transactionArray[14];\n  var celoTX = __assign({\n    type: 'cip42',\n    nonce: nonce.toLowerCase() === '0x' ? 0 : parseInt(nonce, 16),\n    maxPriorityFeePerGas: maxPriorityFeePerGas.toLowerCase() === '0x' ? 0 : parseInt(maxPriorityFeePerGas, 16),\n    maxFeePerGas: maxFeePerGas.toLowerCase() === '0x' ? 0 : parseInt(maxFeePerGas, 16),\n    gas: gas.toLowerCase() === '0x' ? 0 : parseInt(gas, 16),\n    feeCurrency: feeCurrency,\n    gatewayFeeRecipient: gatewayFeeRecipient,\n    gatewayFee: gatewayFee,\n    to: to,\n    value: value.toLowerCase() === '0x' ? 0 : parseInt(value, 16),\n    data: data,\n    chainId: chainId.toLowerCase() === '0x' ? 0 : parseInt(chainId, 16),\n    accessList: (0, formatter_1.parseAccessList)(accessList)\n  }, vrsForRecovery(vRaw, r, s));\n  var signer = transactionArray.length === 15 ? getSignerFromTxEIP2718TX(serializedTransaction) : 'unsigned';\n  return [celoTX, signer];\n}\nfunction recoverTransactionCIP64(serializedTransaction) {\n  var transactionArray = prefixAwareRLPDecode(serializedTransaction, 'cip64');\n  debug('signing-utils@recoverTransactionCIP64: values are %s', transactionArray);\n  if (transactionArray.length !== 13 && transactionArray.length !== 10) {\n    throw new Error(\"Invalid transaction length for type CIP64: \".concat(transactionArray.length, \" instead of 13 or 10. array: \").concat(transactionArray));\n  }\n  var chainId = transactionArray[0],\n    nonce = transactionArray[1],\n    maxPriorityFeePerGas = transactionArray[2],\n    maxFeePerGas = transactionArray[3],\n    gas = transactionArray[4],\n    to = transactionArray[5],\n    value = transactionArray[6],\n    data = transactionArray[7],\n    accessList = transactionArray[8],\n    feeCurrency = transactionArray[9],\n    vRaw = transactionArray[10],\n    r = transactionArray[11],\n    s = transactionArray[12];\n  var celoTX = __assign({\n    type: 'cip64',\n    nonce: nonce.toLowerCase() === '0x' ? 0 : parseInt(nonce, 16),\n    maxPriorityFeePerGas: maxPriorityFeePerGas.toLowerCase() === '0x' ? 0 : parseInt(maxPriorityFeePerGas, 16),\n    maxFeePerGas: maxFeePerGas.toLowerCase() === '0x' ? 0 : parseInt(maxFeePerGas, 16),\n    gas: gas.toLowerCase() === '0x' ? 0 : parseInt(gas, 16),\n    feeCurrency: feeCurrency,\n    to: to,\n    value: value.toLowerCase() === '0x' ? 0 : parseInt(value, 16),\n    data: data,\n    chainId: chainId.toLowerCase() === '0x' ? 0 : parseInt(chainId, 16),\n    accessList: (0, formatter_1.parseAccessList)(accessList)\n  }, vrsForRecovery(vRaw, r, s));\n  var signer = transactionArray.length === 13 ? getSignerFromTxEIP2718TX(serializedTransaction) : 'unsigned';\n  return [celoTX, signer];\n}\nfunction recoverTransactionEIP1559(serializedTransaction) {\n  var transactionArray = prefixAwareRLPDecode(serializedTransaction, 'eip1559');\n  debug('signing-utils@recoverTransactionEIP1559: values are %s', transactionArray);\n  var chainId = transactionArray[0],\n    nonce = transactionArray[1],\n    maxPriorityFeePerGas = transactionArray[2],\n    maxFeePerGas = transactionArray[3],\n    gas = transactionArray[4],\n    to = transactionArray[5],\n    value = transactionArray[6],\n    data = transactionArray[7],\n    accessList = transactionArray[8],\n    vRaw = transactionArray[9],\n    r = transactionArray[10],\n    s = transactionArray[11];\n  var celoTx = __assign({\n    type: 'eip1559',\n    nonce: nonce.toLowerCase() === '0x' ? 0 : parseInt(nonce, 16),\n    gas: gas.toLowerCase() === '0x' ? 0 : parseInt(gas, 16),\n    maxPriorityFeePerGas: maxPriorityFeePerGas.toLowerCase() === '0x' ? 0 : parseInt(maxPriorityFeePerGas, 16),\n    maxFeePerGas: maxFeePerGas.toLowerCase() === '0x' ? 0 : parseInt(maxFeePerGas, 16),\n    to: to,\n    value: value.toLowerCase() === '0x' ? 0 : parseInt(value, 16),\n    data: data,\n    chainId: chainId.toLowerCase() === '0x' ? 0 : parseInt(chainId, 16),\n    accessList: (0, formatter_1.parseAccessList)(accessList)\n  }, vrsForRecovery(vRaw, r, s));\n  var web3Account = new web3_eth_accounts_1.default();\n  var signer = web3Account.recoverTransaction(serializedTransaction);\n  return [celoTx, signer];\n}\nfunction recoverMessageSigner(signingDataHex, signedData) {\n  var dataBuff = (0, util_1.toBuffer)(signingDataHex);\n  var msgHashBuff = (0, util_1.hashPersonalMessage)(dataBuff);\n  var signature = (0, util_1.fromRpcSig)(signedData);\n  var publicKey = (0, util_1.ecrecover)(msgHashBuff, signature.v, signature.r, signature.s);\n  var address = (0, util_1.pubToAddress)(publicKey, true);\n  return (0, address_1.ensureLeading0x)(address.toString('hex'));\n}\nexports.recoverMessageSigner = recoverMessageSigner;\nfunction verifyEIP712TypedDataSigner(typedData, signedData, expectedAddress) {\n  var dataHex = (0, util_1.bufferToHex)((0, sign_typed_data_utils_1.generateTypedDataHash)(typedData));\n  return verifySignatureWithoutPrefix(dataHex, signedData, expectedAddress);\n}\nexports.verifyEIP712TypedDataSigner = verifyEIP712TypedDataSigner;\nfunction verifySignatureWithoutPrefix(messageHash, signature, signer) {\n  try {\n    (0, signatureUtils_1.parseSignatureWithoutPrefix)(messageHash, signature, signer);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\nexports.verifySignatureWithoutPrefix = verifySignatureWithoutPrefix;\nfunction decodeSig(sig) {\n  var _a = eth_lib_1.account.decodeSignature(sig),\n    v = _a[0],\n    r = _a[1],\n    s = _a[2];\n  return {\n    v: parseInt(v, 16),\n    r: (0, util_1.toBuffer)(r),\n    s: (0, util_1.toBuffer)(s)\n  };\n}\nexports.decodeSig = decodeSig;","map":null,"metadata":{},"sourceType":"script"}