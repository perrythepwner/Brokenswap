{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resurrector = void 0;\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nconst base_1 = require(\"@celo/contractkit/lib/base\");\nconst connectors_1 = require(\"../connectors\");\nconst constants_1 = require(\"../constants\");\nconst local_storage_1 = require(\"./local-storage\");\nconst logger_1 = require(\"./logger\");\nfunction resurrector(networks, dapp, manualNetworkingMode) {\n  const walletType = (0, local_storage_1.getTypedStorageKey)(constants_1.localStorageKeys.lastUsedWalletType);\n  const network = getNetwork(networks);\n  if (!walletType || !network) return null;\n  (0, logger_1.getApplicationLogger)().log('[resurrector] will create', walletType, 'with', network, dapp);\n  try {\n    switch (walletType) {\n      case constants_1.WalletTypes.Ledger:\n        {\n          const index = (0, local_storage_1.getTypedStorageKey)(constants_1.localStorageKeys.lastUsedIndex);\n          if (index === null) return null;\n          return new connectors_1.LedgerConnector(network, index, base_1.CeloContract.GoldToken);\n        }\n      case constants_1.WalletTypes.CeloExtensionWallet:\n        return new connectors_1.CeloExtensionWalletConnector(network, base_1.CeloContract.GoldToken);\n      case constants_1.WalletTypes.MetaMask:\n        return new connectors_1.MetaMaskConnector(network, manualNetworkingMode, base_1.CeloContract.GoldToken);\n      case constants_1.WalletTypes.Injected:\n        return new connectors_1.InjectedConnector(network, manualNetworkingMode, base_1.CeloContract.GoldToken, undefined);\n      case constants_1.WalletTypes.PrivateKey:\n        {\n          const privateKey = (0, local_storage_1.getTypedStorageKey)(constants_1.localStorageKeys.lastUsedPrivateKey);\n          return new connectors_1.PrivateKeyConnector(network, privateKey, base_1.CeloContract.GoldToken);\n        }\n      case constants_1.WalletTypes.CoinbaseWallet:\n        return new connectors_1.CoinbaseWalletConnector(network, manualNetworkingMode, dapp);\n      case constants_1.WalletTypes.CeloDance:\n      case constants_1.WalletTypes.CeloTerminal:\n      case constants_1.WalletTypes.CeloWallet:\n      case constants_1.WalletTypes.Valora:\n      case constants_1.WalletTypes.WalletConnect:\n        {\n          return new connectors_1.WalletConnectConnector(network, manualNetworkingMode, base_1.CeloContract.GoldToken, {\n            projectId: dapp.walletConnectProjectId,\n            chainId: network.chainId,\n            init: {\n              metadata: Object.assign(Object.assign({}, dapp), {\n                icons: [dapp.icon]\n              })\n            }\n          });\n        }\n      case constants_1.WalletTypes.Unauthenticated:\n        return null;\n    }\n  } catch (e) {\n    (0, logger_1.getApplicationLogger)().error('Unknown error resurrecting', walletType, e);\n    return null;\n  }\n}\nexports.resurrector = resurrector;\nfunction getNetwork(networks) {\n  const networkName = (0, local_storage_1.getTypedStorageKey)(constants_1.localStorageKeys.lastUsedNetwork);\n  if (!networkName) return;\n  const network = networks.find(net => net.name === networkName);\n  return network;\n}","map":null,"metadata":{},"sourceType":"script"}