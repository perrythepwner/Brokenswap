{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseSolidityStringArray = exports.stringToBoolean = void 0;\nvar stringToBoolean = function stringToBoolean(inputString) {\n  var lowercasedInput = inputString.toLowerCase().trim();\n  if (lowercasedInput === 'true') {\n    return true;\n  } else if (lowercasedInput === 'false') {\n    return false;\n  }\n  throw new Error(\"Unable to parse '\".concat(inputString, \"' as boolean\"));\n};\nexports.stringToBoolean = stringToBoolean;\n/**\n * Parses an \"array of strings\" that is returned from a Solidity function\n *\n * @param stringLengths length of each string in bytes\n * @param data 0x-prefixed, hex-encoded string data in utf-8 bytes\n */\nvar parseSolidityStringArray = function parseSolidityStringArray(stringLengths, data) {\n  if (data === null) {\n    data = '0x';\n  }\n  var ret = [];\n  var offset = 0;\n  // @ts-ignore\n  var rawData = Buffer.from(data.slice(2), 'hex');\n  // tslint:disable-next-line:prefer-for-of\n  for (var i = 0; i < stringLengths.length; i++) {\n    var string = rawData.toString('utf-8', offset, offset + stringLengths[i]);\n    offset += stringLengths[i];\n    ret.push(string);\n  }\n  return ret;\n};\nexports.parseSolidityStringArray = parseSolidityStringArray;","map":null,"metadata":{},"sourceType":"script"}