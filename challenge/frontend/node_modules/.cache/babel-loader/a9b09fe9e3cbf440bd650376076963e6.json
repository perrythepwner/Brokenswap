{"ast":null,"code":"var _asyncToGenerator = require(\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nmodule.exports = getBlocksForRange;\nfunction getBlocksForRange(_x) {\n  return _getBlocksForRange.apply(this, arguments);\n}\nfunction _getBlocksForRange() {\n  _getBlocksForRange = _asyncToGenerator(function* (_ref) {\n    let {\n      provider,\n      fromBlock,\n      toBlock\n    } = _ref;\n    if (!fromBlock) fromBlock = toBlock;\n    const fromBlockNumber = hexToInt(fromBlock);\n    const toBlockNumber = hexToInt(toBlock);\n    const blockCountToQuery = toBlockNumber - fromBlockNumber + 1;\n    // load all blocks from old to new (inclusive)\n    const missingBlockNumbers = Array(blockCountToQuery).fill().map((_, index) => fromBlockNumber + index).map(intToHex);\n    const blockBodies = yield Promise.all(missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false])));\n    return blockBodies;\n  });\n  return _getBlocksForRange.apply(this, arguments);\n}\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  return Number.parseInt(hexString, 16);\n}\nfunction incrementHexInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  const value = hexToInt(hexString);\n  return intToHex(value + 1);\n}\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int;\n  const hexString = int.toString(16);\n  return '0x' + hexString;\n}\nfunction sendAsync(provider, request) {\n  return new Promise((resolve, reject) => {\n    provider.sendAsync(request, (error, response) => {\n      if (error) {\n        reject(error);\n      } else if (response.error) {\n        reject(response.error);\n      } else if (response.result) {\n        resolve(response.result);\n      } else {\n        reject(new Error(\"Result was empty\"));\n      }\n    });\n  });\n}\nfunction query(_x2, _x3, _x4) {\n  return _query.apply(this, arguments);\n}\nfunction _query() {\n  _query = _asyncToGenerator(function* (provider, method, params) {\n    for (let i = 0; i < 3; i++) {\n      try {\n        return yield sendAsync(provider, {\n          id: 1,\n          jsonrpc: \"2.0\",\n          method,\n          params\n        });\n      } catch (error) {\n        console.error(\"provider.sendAsync failed: \".concat(error.stack || error.message || error));\n      }\n    }\n    throw new Error(\"Block not found for params: \".concat(JSON.stringify(params)));\n  });\n  return _query.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}