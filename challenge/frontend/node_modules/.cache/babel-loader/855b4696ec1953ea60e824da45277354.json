{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst mini_kit_1 = require(\"@celo/contractkit/lib/mini-kit\");\nconst wallet_local_1 = require(\"@celo/wallet-local\");\nconst constants_1 = require(\"../constants\");\nconst local_storage_1 = require(\"../utils/local-storage\");\nconst common_1 = require(\"./common\");\nclass PrivateKeyConnector extends common_1.AbstractConnector {\n  constructor(network, privateKey, feeCurrency) {\n    super();\n    this.network = network;\n    this.feeCurrency = feeCurrency;\n    this.initialised = false;\n    this.type = constants_1.WalletTypes.PrivateKey;\n    this.updateFeeCurrency = common_1.updateFeeCurrency.bind(this);\n    this.wallet = new wallet_local_1.LocalWallet();\n    this.wallet.addAccount(privateKey);\n    this.kit = this.newKit(network);\n    (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedPrivateKey, privateKey);\n  }\n  initialise() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.initialised) return this;\n      yield this.updateFeeCurrency(this.feeCurrency);\n      this.initialised = true;\n      this.emit(common_1.ConnectorEvents.CONNECTED, {\n        networkName: this.network.name,\n        walletType: this.type,\n        walletChainId: null,\n        address: this.kit.connection.defaultAccount\n      });\n      return this;\n    });\n  }\n  startNetworkChangeFromApp(network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.kit = this.newKit(network);\n      yield this.updateFeeCurrency(this.feeCurrency); // new kit so we must set the feeCurrency again\n      this.emit(common_1.ConnectorEvents.NETWORK_CHANGED, network.name);\n    });\n  }\n  newKit(network) {\n    const kit = (0, mini_kit_1.newKit)(network.rpcUrl, this.wallet);\n    kit.connection.defaultAccount = this.wallet.getAccounts()[0];\n    return kit;\n  }\n  supportsFeeCurrency() {\n    return true;\n  }\n  close() {\n    (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedPrivateKey, '');\n    try {\n      this.kit.connection.stop();\n    } finally {\n      this.disconnect();\n    }\n  }\n}\nexports.default = PrivateKeyConnector;","map":null,"metadata":{},"sourceType":"script"}