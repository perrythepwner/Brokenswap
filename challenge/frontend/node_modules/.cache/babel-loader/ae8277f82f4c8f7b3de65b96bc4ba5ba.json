{"ast":null,"code":"import _asyncToGenerator from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{formatUnits}from'@ethersproject/units';import{ERC20_ABI}from'constants/abis/erc20';import{Contract,Wallet}from'ethers';import{useEffect,useState}from'react';import{useAllTokens}from'./Tokens';import{useWeb3Provider}from'./useContract';export function useConnectionInfo(){const[connectionInfo,setConnectionInfo]=useState([]);const[isInstanceRunning,setIsInstanceRunning]=useState(false);useEffect(()=>{const fetchData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(function*(){try{const RPC_ENDPOINT=process.env.REACT_APP_RPC_ENDPOINT;const response=yield fetch(\"connection-info-by-team/\".concat(RPC_ENDPOINT));const data=yield response.json();setConnectionInfo(data);if(!Array.isArray(data)){setIsInstanceRunning(true);}}catch(error){setIsInstanceRunning(false);}});return function fetchData(){return _ref.apply(this,arguments);};}();fetchData();},[]);return[connectionInfo,isInstanceRunning];}export function useBalances(){const provider=useWeb3Provider();const[connectionInfo,isInstanceRunning]=useConnectionInfo();const tokens=useAllTokens();const[HtbTokenBalance,setHtbTokenBalance]=useState(0);const[WethTokenBalance,setWethTokenBalance]=useState(0);useEffect(()=>{function setBalances(){return _setBalances.apply(this,arguments);}function _setBalances(){_setBalances=_asyncToGenerator(function*(){try{const player_addr=connectionInfo['Player Address'];const signer=new Wallet(connectionInfo['Player Private Key'],provider);const HtbContract=new Contract(Object.values(tokens)[0].address,ERC20_ABI,signer);const WethContract=new Contract(Object.values(tokens)[1].address,ERC20_ABI,signer);const HtbBalance=yield HtbContract.balanceOf(player_addr);const WethBalance=yield WethContract.balanceOf(player_addr);const HtbBalanceInFloat=parseFloat(parseFloat(formatUnits(HtbBalance,18)).toFixed(6));const WethBalanceInFloat=parseFloat(parseFloat(formatUnits(WethBalance,18)).toFixed(6));setHtbTokenBalance(HtbBalanceInFloat);setWethTokenBalance(WethBalanceInFloat);}catch(error){setHtbTokenBalance(0);setWethTokenBalance(0);}});return _setBalances.apply(this,arguments);}if(isInstanceRunning){setBalances();}else{setHtbTokenBalance(0);setWethTokenBalance(0);}},[connectionInfo,isInstanceRunning,provider,tokens]);return[HtbTokenBalance,WethTokenBalance];}","map":null,"metadata":{},"sourceType":"module"}