{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignatureUtils = exports.guessSigner = exports.verifyEIP712TypedDataSigner = exports.recoverEIP712TypedDataSignerVrs = exports.recoverEIP712TypedDataSignerRsv = exports.parseSignatureWithoutPrefix = exports.parseSignature = exports.verifySignature = exports.signMessageWithoutPrefix = exports.signMessage = exports.signedMessageToPublicKey = exports.LocalSigner = exports.addressToPublicKey = exports.hashMessage = exports.hashMessageWithPrefix = exports.serializeSignature = exports.POP_SIZE = exports.NativeSigner = void 0;\nvar signatureUtils_1 = require(\"@celo/base/lib/signatureUtils\");\nvar util_1 = require(\"@ethereumjs/util\");\nvar web3_utils_1 = require(\"web3-utils\");\nvar address_1 = require(\"./address\");\nvar sign_typed_data_utils_1 = require(\"./sign-typed-data-utils\");\n// Exports moved to @celo/base, forwarding them\n// here for backwards compatibility\nvar signatureUtils_2 = require(\"@celo/base/lib/signatureUtils\");\nObject.defineProperty(exports, \"NativeSigner\", {\n  enumerable: true,\n  get: function get() {\n    return signatureUtils_2.NativeSigner;\n  }\n});\nObject.defineProperty(exports, \"POP_SIZE\", {\n  enumerable: true,\n  get: function get() {\n    return signatureUtils_2.POP_SIZE;\n  }\n});\nObject.defineProperty(exports, \"serializeSignature\", {\n  enumerable: true,\n  get: function get() {\n    return signatureUtils_2.serializeSignature;\n  }\n});\n// If messages is a hex, the length of it should be the number of bytes\nfunction messageLength(message) {\n  if ((0, web3_utils_1.isHexStrict)(message)) {\n    return (message.length - 2) / 2;\n  }\n  return message.length;\n}\n// Ethereum has a special signature format that requires a prefix\n// https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\nfunction hashMessageWithPrefix(message) {\n  var prefix = '\\x19Ethereum Signed Message:\\n' + messageLength(message);\n  return (0, web3_utils_1.soliditySha3)(prefix, message);\n}\nexports.hashMessageWithPrefix = hashMessageWithPrefix;\nfunction hashMessage(message) {\n  return (0, web3_utils_1.soliditySha3)({\n    type: 'string',\n    value: message\n  });\n}\nexports.hashMessage = hashMessage;\nfunction addressToPublicKey(signer, signFn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var msg, data, sig, rawsig, prefixedMsg, pubKey, computedAddr;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          msg = Buffer.from('dummy_msg_data');\n          data = '0x' + msg.toString('hex');\n          return [4 /*yield*/, signFn(data, signer)];\n        case 1:\n          sig = _a.sent();\n          rawsig = (0, util_1.fromRpcSig)(sig);\n          prefixedMsg = hashMessageWithPrefix(data);\n          pubKey = (0, util_1.ecrecover)(Buffer.from(prefixedMsg.slice(2), 'hex'), rawsig.v, rawsig.r, rawsig.s);\n          computedAddr = (0, util_1.pubToAddress)(pubKey).toString('hex');\n          if (!(0, address_1.eqAddress)(computedAddr, signer)) {\n            throw new Error('computed address !== signer');\n          }\n          return [2 /*return*/, '0x' + pubKey.toString('hex')];\n      }\n    });\n  });\n}\nexports.addressToPublicKey = addressToPublicKey;\nfunction LocalSigner(privateKey) {\n  var _this = this;\n  return {\n    sign: function sign(message) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2 /*return*/, Promise.resolve((0, signatureUtils_1.serializeSignature)(signMessage(message, privateKey, (0, address_1.privateKeyToAddress)(privateKey))))];\n        });\n      });\n    }\n  };\n}\nexports.LocalSigner = LocalSigner;\nfunction signedMessageToPublicKey(message, v, r, s) {\n  var pubKeyBuf = (0, util_1.ecrecover)(Buffer.from(message.slice(2), 'hex'), BigInt(v), Buffer.from(r.slice(2), 'hex'), Buffer.from(s.slice(2), 'hex'));\n  return '0x' + pubKeyBuf.toString('hex');\n}\nexports.signedMessageToPublicKey = signedMessageToPublicKey;\nfunction signMessage(message, privateKey, address) {\n  return signMessageWithoutPrefix(hashMessageWithPrefix(message), (0, address_1.ensureLeading0x)(privateKey), address);\n}\nexports.signMessage = signMessage;\nfunction signMessageWithoutPrefix(messageHash, privateKey, address) {\n  var publicKey = (0, util_1.privateToPublic)((0, util_1.toBuffer)(privateKey));\n  var derivedAddress = (0, util_1.bufferToHex)((0, util_1.pubToAddress)(publicKey));\n  if (derivedAddress.toLowerCase() !== address.toLowerCase()) {\n    throw new Error('Provided private key does not match address of intended signer');\n  }\n  var _a = (0, util_1.ecsign)((0, util_1.toBuffer)(messageHash), (0, util_1.toBuffer)(privateKey)),\n    r = _a.r,\n    s = _a.s,\n    v = _a.v;\n  if (!isValidSignature(address, messageHash, Number(v), (0, util_1.bufferToHex)(r), (0, util_1.bufferToHex)(s))) {\n    throw new Error('Unable to validate signature');\n  }\n  return {\n    v: Number(v),\n    r: (0, util_1.bufferToHex)(r),\n    s: (0, util_1.bufferToHex)(s)\n  };\n}\nexports.signMessageWithoutPrefix = signMessageWithoutPrefix;\nfunction verifySignature(message, signature, signer) {\n  try {\n    parseSignature(message, signature, signer);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\nexports.verifySignature = verifySignature;\nfunction parseSignature(message, signature, signer) {\n  return parseSignatureWithoutPrefix(hashMessageWithPrefix(message), signature, signer);\n}\nexports.parseSignature = parseSignature;\nfunction parseSignatureWithoutPrefix(messageHash, signature, signer) {\n  var _a;\n  var _b = parseSignatureAsRsv(signature.slice(2)),\n    r = _b.r,\n    s = _b.s,\n    v = _b.v;\n  if (isValidSignature(signer, messageHash, v, r, s)) {\n    return {\n      v: v,\n      r: r,\n      s: s\n    };\n  }\n  ;\n  _a = parseSignatureAsVrs(signature.slice(2)), r = _a.r, s = _a.s, v = _a.v;\n  if (isValidSignature(signer, messageHash, v, r, s)) {\n    return {\n      v: v,\n      r: r,\n      s: s\n    };\n  }\n  throw new Error(\"Unable to parse signature (expected signer \".concat(signer, \")\"));\n}\nexports.parseSignatureWithoutPrefix = parseSignatureWithoutPrefix;\nfunction recoverEIP712TypedDataSigner(typedData, signature, parseFunction) {\n  var dataBuff = (0, sign_typed_data_utils_1.generateTypedDataHash)(typedData);\n  var _a = parseFunction((0, address_1.trimLeading0x)(signature)),\n    r = _a.r,\n    s = _a.s,\n    v = _a.v;\n  var publicKey = (0, util_1.ecrecover)((0, util_1.toBuffer)(dataBuff), BigInt(v), (0, util_1.toBuffer)(r), (0, util_1.toBuffer)(s));\n  // TODO test error handling on this\n  return (0, util_1.bufferToHex)((0, util_1.pubToAddress)(publicKey));\n}\n/**\n * Recover signer from RSV-serialized signature over signed typed data.\n * @param typedData EIP712 typed data\n * @param signature RSV signature of signed type data by signer\n * @returns string signer, or throws error if parsing fails\n */\nfunction recoverEIP712TypedDataSignerRsv(typedData, signature) {\n  return recoverEIP712TypedDataSigner(typedData, signature, parseSignatureAsRsv);\n}\nexports.recoverEIP712TypedDataSignerRsv = recoverEIP712TypedDataSignerRsv;\n/**\n * Recover signer from VRS-serialized signature over signed typed data.\n * @param typedData EIP712 typed data\n * @param signature VRS signature of signed type data by signer\n * @returns string signer, or throws error if parsing fails\n */\nfunction recoverEIP712TypedDataSignerVrs(typedData, signature) {\n  return recoverEIP712TypedDataSigner(typedData, signature, parseSignatureAsVrs);\n}\nexports.recoverEIP712TypedDataSignerVrs = recoverEIP712TypedDataSignerVrs;\n/**\n * @param typedData EIP712 typed data\n * @param signature VRS or SRV signature of `typedData` by `signer`\n * @param signer address to verify signed the `typedData`\n * @returns boolean, true if `signer` is a possible signer of `signature`\n */\nfunction verifyEIP712TypedDataSigner(typedData, signature, signer) {\n  var e_1, _a;\n  try {\n    for (var _b = __values([recoverEIP712TypedDataSignerVrs, recoverEIP712TypedDataSignerRsv]), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var recover = _c.value;\n      try {\n        if ((0, address_1.eqAddress)(recover(typedData, signature), signer)) {\n          return true;\n        }\n      } catch (e) {\n        // try both serialization formats before failing to verify\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return false;\n}\nexports.verifyEIP712TypedDataSigner = verifyEIP712TypedDataSigner;\nfunction guessSigner(message, signature) {\n  var messageHash = hashMessageWithPrefix(message);\n  var _a = parseSignatureAsRsv(signature.slice(2)),\n    r = _a.r,\n    s = _a.s,\n    v = _a.v;\n  var publicKey = (0, util_1.ecrecover)((0, util_1.toBuffer)(messageHash), BigInt(v), (0, util_1.toBuffer)(r), (0, util_1.toBuffer)(s));\n  return (0, util_1.bufferToHex)((0, util_1.pubToAddress)(publicKey));\n}\nexports.guessSigner = guessSigner;\nfunction parseSignatureAsVrs(signature) {\n  var v = parseInt(signature.slice(0, 2), 16);\n  var r = \"0x\".concat(signature.slice(2, 66));\n  var s = \"0x\".concat(signature.slice(66, 130));\n  if (v < 27) {\n    v += 27;\n  }\n  return {\n    v: v,\n    r: r,\n    s: s\n  };\n}\nfunction parseSignatureAsRsv(signature) {\n  var r = \"0x\".concat(signature.slice(0, 64));\n  var s = \"0x\".concat(signature.slice(64, 128));\n  var v = parseInt(signature.slice(128, 130), 16);\n  if (v < 27) {\n    v += 27;\n  }\n  return {\n    r: r,\n    s: s,\n    v: v\n  };\n}\nfunction isValidSignature(signer, message, v, r, s) {\n  try {\n    var publicKey = (0, util_1.ecrecover)((0, util_1.toBuffer)(message), BigInt(v), (0, util_1.toBuffer)(r), (0, util_1.toBuffer)(s));\n    var retrievedAddress = (0, util_1.bufferToHex)((0, util_1.pubToAddress)(publicKey));\n    return (0, address_1.eqAddress)(retrievedAddress, signer);\n  } catch (err) {\n    return false;\n  }\n}\nexports.SignatureUtils = {\n  NativeSigner: signatureUtils_1.NativeSigner,\n  LocalSigner: LocalSigner,\n  signMessage: signMessage,\n  signMessageWithoutPrefix: signMessageWithoutPrefix,\n  parseSignature: parseSignature,\n  parseSignatureWithoutPrefix: parseSignatureWithoutPrefix,\n  serializeSignature: signatureUtils_1.serializeSignature,\n  recoverEIP712TypedDataSignerRsv: recoverEIP712TypedDataSignerRsv,\n  recoverEIP712TypedDataSignerVrs: recoverEIP712TypedDataSignerVrs,\n  verifyEIP712TypedDataSigner: verifyEIP712TypedDataSigner\n};","map":null,"metadata":{},"sourceType":"script"}