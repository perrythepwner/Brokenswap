{"ast":null,"code":"import { disabledUntil, eventStatusFromHttpCode, getEnvelopeType, isRateLimited, makePromiseBuffer, rejectedSyncPromise, resolvedSyncPromise, serializeEnvelope, updateRateLimits } from '@sentry/utils';\nexport var ERROR_TRANSPORT_CATEGORY = 'error';\nexport var TRANSACTION_TRANSPORT_CATEGORY = 'transaction';\nexport var ATTACHMENT_TRANSPORT_CATEGORY = 'attachment';\nexport var SESSION_TRANSPORT_CATEGORY = 'session';\nexport var DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n/**\n * Creates a `NewTransport`\n *\n * @param options\n * @param makeRequest\n */\nexport function createTransport(options, makeRequest, buffer) {\n  if (buffer === void 0) {\n    buffer = makePromiseBuffer(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE);\n  }\n  var rateLimits = {};\n  var flush = function flush(timeout) {\n    return buffer.drain(timeout);\n  };\n  function send(envelope) {\n    var envCategory = getEnvelopeType(envelope);\n    var category = envCategory === 'event' ? 'error' : envCategory;\n    var request = {\n      category: category,\n      body: serializeEnvelope(envelope)\n    };\n    // Don't add to buffer if transport is already rate-limited\n    if (isRateLimited(rateLimits, category)) {\n      return rejectedSyncPromise({\n        status: 'rate_limit',\n        reason: getRateLimitReason(rateLimits, category)\n      });\n    }\n    var requestTask = function requestTask() {\n      return makeRequest(request).then(function (_a) {\n        var body = _a.body,\n          headers = _a.headers,\n          reason = _a.reason,\n          statusCode = _a.statusCode;\n        var status = eventStatusFromHttpCode(statusCode);\n        if (headers) {\n          rateLimits = updateRateLimits(rateLimits, headers);\n        }\n        if (status === 'success') {\n          return resolvedSyncPromise({\n            status: status,\n            reason: reason\n          });\n        }\n        return rejectedSyncPromise({\n          status: status,\n          reason: reason || body || (status === 'rate_limit' ? getRateLimitReason(rateLimits, category) : 'Unknown transport error')\n        });\n      });\n    };\n    return buffer.add(requestTask);\n  }\n  return {\n    send: send,\n    flush: flush\n  };\n}\nfunction getRateLimitReason(rateLimits, category) {\n  return \"Too many \" + category + \" requests, backing off until: \" + new Date(disabledUntil(rateLimits, category)).toISOString();\n}","map":null,"metadata":{},"sourceType":"module"}