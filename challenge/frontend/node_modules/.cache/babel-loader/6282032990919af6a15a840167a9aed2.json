{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst react_1 = require(\"react\");\nconst default_1 = __importDefault(require(\"../theme/default\"));\nconst types_1 = require(\"../types\");\nconst use_celo_1 = require(\"../use-celo\");\nclass ModeState {\n  constructor() {\n    this._mode = types_1.Mode.Light;\n    this.listeners = [];\n  }\n  set mode(mode) {\n    if (this._mode === mode) return;\n    this._mode = mode;\n    this.listeners.forEach(cb => cb(this._mode));\n  }\n  get mode() {\n    return this._mode;\n  }\n  addEventListener(listener) {\n    this.listeners.push(listener);\n  }\n  removeEventListener(listener) {\n    this.listeners = this.listeners.filter(x => x !== listener);\n  }\n  removeEventListeners() {\n    this.listeners = [];\n  }\n}\nconst state = new ModeState();\n// const COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';\nconst DARK_CLASSES = ['dark', 'tw-dark'];\nfunction hasDarkClasses(elem) {\n  // const hasDarkMedia = window.matchMedia(COLOR_SCHEME_QUERY).matches;\n  return DARK_CLASSES.some(cls => elem.classList.contains(cls));\n}\nif (typeof MutationObserver !== 'undefined') {\n  const body = document.getElementsByTagName('body');\n  const html = document.getElementsByTagName('html');\n  const elems = [...body, ...html];\n  const mutationCallback = () => {\n    const isDark = elems.some(hasDarkClasses);\n    state.mode = isDark ? types_1.Mode.Dark : types_1.Mode.Light;\n  };\n  const observer = new MutationObserver(mutationCallback);\n  mutationCallback();\n  elems.forEach(elem => {\n    observer.observe(elem, {\n      subtree: false,\n      childList: false,\n      attributeFilter: ['class']\n    });\n  });\n}\nfunction useTheme() {\n  const {\n    theme\n  } = (0, use_celo_1.useCeloInternal)();\n  const [mode, setMode] = (0, react_1.useState)(state.mode);\n  (0, react_1.useEffect)(() => {\n    const cb = m => setMode(m);\n    state.addEventListener(cb);\n    return () => {\n      state.removeEventListener(cb);\n    };\n  }, []);\n  return theme || default_1.default[mode];\n}\nexports.default = useTheme;","map":null,"metadata":{},"sourceType":"script"}