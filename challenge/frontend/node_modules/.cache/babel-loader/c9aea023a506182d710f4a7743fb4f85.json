{"ast":null,"code":"import _objectSpread from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{Token}from'@ubeswap/sdk';import tokenList from'./../../constants/token-list.json';const TOKEN_LIST=tokenList;/**\n * Token instances created from token info.\n */export class WrappedTokenInfo extends Token{constructor(tokenInfo){super(tokenInfo.chainId,tokenInfo.address,tokenInfo.decimals,tokenInfo.symbol,tokenInfo.name);this.tokenInfo=void 0;this.tokenInfo=tokenInfo;}get logoURI(){return this.tokenInfo.logoURI;}}/**\n * An empty result, useful as a default.\n */const EMPTY_LIST={[1]:{}};const listCache=typeof WeakMap!=='undefined'?new WeakMap():null;export function listToTokenMap(list){const result=listCache===null||listCache===void 0?void 0:listCache.get(list);if(result)return result;const map=list.tokens.reduce((tokenMap,tokenInfo)=>{var _tokenMap$token$chain;const token=new WrappedTokenInfo(tokenInfo);if(((_tokenMap$token$chain=tokenMap[token.chainId])===null||_tokenMap$token$chain===void 0?void 0:_tokenMap$token$chain[token.address])!==undefined)throw Error(\"Duplicate tokens found for \".concat(token.name));return _objectSpread(_objectSpread({},tokenMap),{},{[token.chainId]:_objectSpread(_objectSpread({},tokenMap[token.chainId]),{},{[token.address]:{token,list}})});},_objectSpread({},EMPTY_LIST));listCache===null||listCache===void 0?void 0:listCache.set(list,map);return map;}// get all the tokens from active lists, combine with local default tokens\nexport function useCombinedActiveList(){const defaultTokenMap=listToTokenMap(TOKEN_LIST);return defaultTokenMap;}// all tokens from inactive lists\nexport function useCombinedInactiveList(){return[];}// used to hide warnings on import for default tokens\nexport function useDefaultTokenList(){return listToTokenMap(TOKEN_LIST);}","map":null,"metadata":{},"sourceType":"module"}