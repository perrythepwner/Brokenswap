{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TxParamsNormalizer = void 0;\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nfunction isEmpty(value) {\n  return value === undefined || value === null || value === '0' || value.toLowerCase() === '0x' || value.toLowerCase() === '0x0';\n}\nfunction isPresent(value) {\n  return !isEmpty(value);\n}\nvar TxParamsNormalizer = /** @class */function () {\n  function TxParamsNormalizer(connection) {\n    this.connection = connection;\n    this.chainId = null;\n    this.gatewayFeeRecipient = null;\n  }\n  TxParamsNormalizer.prototype.populate = function (celoTxParams) {\n    var _a, _b, _c, _d;\n    return __awaiter(this, void 0, void 0, function () {\n      var txParams, _e, chainId, nonce, gas, maxFeePerGas, clientMaxPriorityFeePerGas;\n      var _this = this;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            txParams = __assign({}, celoTxParams);\n            if (isPresent(txParams.gatewayFeeRecipient) || isPresent(txParams.gatewayFee)) {\n              console.warn('Gateway fee has been deprecated and will be removed see: https://github.com/celo-org/celo-proposals/blob/master/CIPs/cip-0057.md');\n            }\n            return [4 /*yield*/, Promise.all([function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  if (txParams.chainId == null) {\n                    return [2 /*return*/, this.getChainId()];\n                  }\n                  return [2 /*return*/, txParams.chainId];\n                });\n              });\n            }, function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  if (txParams.nonce == null) {\n                    return [2 /*return*/, this.connection.nonce(txParams.from.toString())];\n                  }\n                  return [2 /*return*/, txParams.nonce];\n                });\n              });\n            }, function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  if (!txParams.gas || isEmpty(txParams.gas.toString())) {\n                    return [2 /*return*/, this.connection.estimateGas(txParams)];\n                  }\n                  return [2 /*return*/, txParams.gas];\n                });\n              });\n            }, function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var suggestedPrice, priceWithRoom;\n                var _a, _b;\n                return __generator(this, function (_c) {\n                  switch (_c.label) {\n                    case 0:\n                      if (!(isEmpty((_a = txParams.gasPrice) === null || _a === void 0 ? void 0 : _a.toString()) && isEmpty((_b = txParams.maxFeePerGas) === null || _b === void 0 ? void 0 : _b.toString()))) return [3 /*break*/, 2];\n                      return [4 /*yield*/, this.connection.gasPrice(txParams.feeCurrency)\n                      // add small buffer to suggested price like other libraries do\n                      ];\n\n                    case 1:\n                      suggestedPrice = _c.sent();\n                      priceWithRoom = new bignumber_js_1.default(suggestedPrice).times(120).dividedBy(100).integerValue().toString(16);\n                      return [2 /*return*/, \"0x\".concat(priceWithRoom)];\n                    case 2:\n                      return [2 /*return*/, txParams.maxFeePerGas];\n                  }\n                });\n              });\n            }].map(function (fn) {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  return [2 /*return*/, fn()];\n                });\n              });\n            }))];\n          case 1:\n            _e = _f.sent(), chainId = _e[0], nonce = _e[1], gas = _e[2], maxFeePerGas = _e[3];\n            txParams.chainId = chainId;\n            txParams.nonce = nonce;\n            txParams.gas = gas;\n            txParams.maxFeePerGas = maxFeePerGas;\n            if (!(isPresent((_a = txParams.maxFeePerGas) === null || _a === void 0 ? void 0 : _a.toString()) && isEmpty((_b = txParams.maxPriorityFeePerGas) === null || _b === void 0 ? void 0 : _b.toString()))) return [3 /*break*/, 3];\n            return [4 /*yield*/, this.connection.rpcCaller.call('eth_maxPriorityFeePerGas', [])];\n          case 2:\n            clientMaxPriorityFeePerGas = _f.sent();\n            txParams.maxPriorityFeePerGas = clientMaxPriorityFeePerGas.result;\n            _f.label = 3;\n          case 3:\n            // remove gasPrice if maxFeePerGas is set\n            if (isPresent((_c = txParams.gasPrice) === null || _c === void 0 ? void 0 : _c.toString()) && isPresent((_d = txParams.maxFeePerGas) === null || _d === void 0 ? void 0 : _d.toString())) {\n              txParams.gasPrice = undefined;\n              delete txParams.gasPrice;\n            }\n            return [2 /*return*/, txParams];\n        }\n      });\n    });\n  };\n  TxParamsNormalizer.prototype.getChainId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(this.chainId === null)) return [3 /*break*/, 2];\n            _a = this;\n            return [4 /*yield*/, this.connection.chainId()];\n          case 1:\n            _a.chainId = _b.sent();\n            _b.label = 2;\n          case 2:\n            return [2 /*return*/, this.chainId];\n        }\n      });\n    });\n  };\n  // Right now, Forno does not expose a node's coinbase so we can't\n  // set the gatewayFeeRecipient. Once that is fixed, we can reenable\n  // this.\n  // @ts-ignore - see comment above\n  TxParamsNormalizer.prototype.getCoinbase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(this.gatewayFeeRecipient === null)) return [3 /*break*/, 2];\n            _a = this;\n            return [4 /*yield*/, this.connection.coinbase()];\n          case 1:\n            _a.gatewayFeeRecipient = _b.sent();\n            _b.label = 2;\n          case 2:\n            if (this.gatewayFeeRecipient == null) {\n              throw new Error('missing-tx-params-populator@getCoinbase: Coinbase is null, we are not connected to a full ' + 'node, cannot sign transactions locally');\n            }\n            return [2 /*return*/, this.gatewayFeeRecipient];\n        }\n      });\n    });\n  };\n  return TxParamsNormalizer;\n}();\nexports.TxParamsNormalizer = TxParamsNormalizer;","map":null,"metadata":{},"sourceType":"script"}