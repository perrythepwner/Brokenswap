{"ast":null,"code":"import _asyncToGenerator from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from \"events\";\nimport { IJsonRpcProvider, isJsonRpcResponse, formatJsonRpcRequest, isJsonRpcError, getBigIntRpcId } from \"@walletconnect/jsonrpc-utils\";\nexport class JsonRpcProvider extends IJsonRpcProvider {\n  constructor(connection) {\n    super(connection);\n    this.events = new EventEmitter();\n    this.hasRegisteredEventListeners = false;\n    this.connection = this.setConnection(connection);\n    if (this.connection.connected) {\n      this.registerEventListeners();\n    }\n  }\n  connect() {\n    var _arguments = arguments,\n      _this = this;\n    return _asyncToGenerator(function* () {\n      let connection = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : _this.connection;\n      yield _this.open(connection);\n    })();\n  }\n  disconnect() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.close();\n    })();\n  }\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n  request(request, context) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.requestStrict(formatJsonRpcRequest(request.method, request.params || [], request.id || getBigIntRpcId().toString()), context);\n    })();\n  }\n  requestStrict(request, context) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve, reject) {\n          if (!_this4.connection.connected) {\n            try {\n              yield _this4.open();\n            } catch (e) {\n              reject(e);\n            }\n          }\n          _this4.events.on(\"\".concat(request.id), response => {\n            if (isJsonRpcError(response)) {\n              reject(response.error);\n            } else {\n              resolve(response.result);\n            }\n          });\n          try {\n            yield _this4.connection.send(request, context);\n          } catch (e) {\n            reject(e);\n          }\n        });\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  setConnection() {\n    let connection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.connection;\n    return connection;\n  }\n  onPayload(payload) {\n    this.events.emit(\"payload\", payload);\n    if (isJsonRpcResponse(payload)) {\n      this.events.emit(\"\".concat(payload.id), payload);\n    } else {\n      this.events.emit(\"message\", {\n        type: payload.method,\n        data: payload.params\n      });\n    }\n  }\n  onClose(event) {\n    if (event && event.code === 3000) {\n      this.events.emit(\"error\", new Error(\"WebSocket connection closed abnormally with code: \".concat(event.code, \" \").concat(event.reason ? \"(\".concat(event.reason, \")\") : \"\")));\n    }\n    this.events.emit(\"disconnect\");\n  }\n  open() {\n    var _arguments2 = arguments,\n      _this5 = this;\n    return _asyncToGenerator(function* () {\n      let connection = _arguments2.length > 0 && _arguments2[0] !== undefined ? _arguments2[0] : _this5.connection;\n      if (_this5.connection === connection && _this5.connection.connected) return;\n      if (_this5.connection.connected) _this5.close();\n      if (typeof connection === \"string\") {\n        yield _this5.connection.open(connection);\n        connection = _this5.connection;\n      }\n      _this5.connection = _this5.setConnection(connection);\n      yield _this5.connection.open();\n      _this5.registerEventListeners();\n      _this5.events.emit(\"connect\");\n    })();\n  }\n  close() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      yield _this6.connection.close();\n    })();\n  }\n  registerEventListeners() {\n    if (this.hasRegisteredEventListeners) return;\n    this.connection.on(\"payload\", payload => this.onPayload(payload));\n    this.connection.on(\"close\", event => this.onClose(event));\n    this.connection.on(\"error\", error => this.events.emit(\"error\", error));\n    this.connection.on(\"register_error\", error => this.onClose());\n    this.hasRegisteredEventListeners = true;\n  }\n}\nexport default JsonRpcProvider;","map":null,"metadata":{},"sourceType":"module"}