{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AttestationBase = exports.isAccountConsideredVerified = exports.extractAttestationCodeFromMessage = exports.messageContainsAttestationCode = exports.sanitizeMessageBase64 = exports.base64ToHex = exports.hashIdentifier = exports.getIdentifierPrefix = exports.IdentifierType = void 0;\nvar phoneNumbers_1 = require(\"./phoneNumbers\");\nvar DEFAULT_NUM_ATTESTATIONS_REQUIRED = 3;\nvar DEFAULT_ATTESTATION_THRESHOLD = 0.25;\n// Supported identifer types for attestations\nvar IdentifierType;\n(function (IdentifierType) {\n  IdentifierType[IdentifierType[\"PHONE_NUMBER\"] = 0] = \"PHONE_NUMBER\";\n  // In the future, other types like usernames or emails could go here\n})(IdentifierType = exports.IdentifierType || (exports.IdentifierType = {}));\n// Each identifer type has a unique prefix to prevent unlikely but possible collisions\nfunction getIdentifierPrefix(type) {\n  switch (type) {\n    case IdentifierType.PHONE_NUMBER:\n      return 'tel://';\n    default:\n      throw new Error('Unsupported Identifier Type');\n  }\n}\nexports.getIdentifierPrefix = getIdentifierPrefix;\nfunction hashIdentifier(sha3, identifier, type, salt) {\n  switch (type) {\n    case IdentifierType.PHONE_NUMBER:\n      return (0, phoneNumbers_1.getPhoneHash)(sha3, identifier, salt);\n    default:\n      throw new Error('Unsupported Identifier Type');\n  }\n}\nexports.hashIdentifier = hashIdentifier;\nfunction base64ToHex(base64String) {\n  return '0x' + Buffer.from(base64String, 'base64').toString('hex');\n}\nexports.base64ToHex = base64ToHex;\nfunction sanitizeMessageBase64(base64String) {\n  // Replace occurrences of ¿ with _. Unsure why that is happening right now\n  return base64String.replace(/(¿|§)/gi, '_');\n}\nexports.sanitizeMessageBase64 = sanitizeMessageBase64;\nvar attestationCodeRegex = new RegExp(/(.* |^)(?:celo:\\/\\/wallet\\/v\\/)?([a-zA-Z0-9=\\+\\/_-]{87,88})($| .*)/);\nfunction messageContainsAttestationCode(message) {\n  return attestationCodeRegex.test(message);\n}\nexports.messageContainsAttestationCode = messageContainsAttestationCode;\nfunction extractAttestationCodeFromMessage(message) {\n  var sanitizedMessage = sanitizeMessageBase64(message);\n  if (!messageContainsAttestationCode(sanitizedMessage)) {\n    return null;\n  }\n  var matches = sanitizedMessage.match(attestationCodeRegex);\n  if (!matches || matches.length < 3) {\n    return null;\n  }\n  return base64ToHex(matches[2]);\n}\nexports.extractAttestationCodeFromMessage = extractAttestationCodeFromMessage;\n/**\n * Returns true if an AttestationStat is considered verified using the given factors,\n * or defaults if factors are ommited.\n * @param stats AttestationStat of the account's attestation identitifer, retrievable via lookupIdentitfiers\n * @param numAttestationsRequired Optional number of attestations required.  Will default to\n *  hardcoded value if absent.\n * @param attestationThreshold Optional threshold for fraction attestations completed. Will\n *  default to hardcoded value if absent.\n */\nfunction isAccountConsideredVerified(stats, numAttestationsRequired, attestationThreshold) {\n  if (numAttestationsRequired === void 0) {\n    numAttestationsRequired = DEFAULT_NUM_ATTESTATIONS_REQUIRED;\n  }\n  if (attestationThreshold === void 0) {\n    attestationThreshold = DEFAULT_ATTESTATION_THRESHOLD;\n  }\n  if (!stats) {\n    return {\n      isVerified: false,\n      numAttestationsRemaining: 0,\n      total: 0,\n      completed: 0\n    };\n  }\n  var numAttestationsRemaining = numAttestationsRequired - stats.completed;\n  var fractionAttestation = stats.total < 1 ? 0 : stats.completed / stats.total;\n  // 'verified' is a term of convenience to mean that the attestation stats for a\n  // given identifier are beyond a certain threshold of confidence\n  var isVerified = numAttestationsRemaining <= 0 && fractionAttestation >= attestationThreshold;\n  return {\n    isVerified: isVerified,\n    numAttestationsRemaining: numAttestationsRemaining,\n    total: stats.total,\n    completed: stats.completed\n  };\n}\nexports.isAccountConsideredVerified = isAccountConsideredVerified;\nexports.AttestationBase = {\n  IdentifierType: IdentifierType,\n  getIdentifierPrefix: getIdentifierPrefix,\n  hashIdentifier: hashIdentifier,\n  base64ToHex: base64ToHex,\n  sanitizeMessageBase64: sanitizeMessageBase64,\n  messageContainsAttestationCode: messageContainsAttestationCode,\n  extractAttestationCodeFromMessage: extractAttestationCodeFromMessage,\n  isAccountConsideredVerified: isAccountConsideredVerified\n};","map":null,"metadata":{},"sourceType":"script"}