/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MinimaRouterInterface extends ethers.utils.Interface {
  functions: {
    "FEE_DENOMINATOR()": FunctionFragment;
    "defaultAdminFee()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "setAdmin(address,bool)": FunctionFragment;
    "setPartnerAdmin(uint256,address)": FunctionFragment;
    "setPartnerFee(uint256,uint256)": FunctionFragment;
    "setAdminFee(uint256,uint256)": FunctionFragment;
    "getOutputAmount(address[],address[],bytes[],uint256)": FunctionFragment;
    "swapExactInputForOutput((address[],address[],bytes[],uint256,uint256,uint256,address,uint256,uint256,bytes))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultAdminFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartnerAdmin",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartnerFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputAmount",
    values: [string[], string[], BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactInputForOutput",
    values: [
      {
        path: string[];
        pairs: string[];
        extras: BytesLike[];
        inputAmount: BigNumberish;
        minOutputAmount: BigNumberish;
        expectedOutputAmount: BigNumberish;
        to: string;
        deadline: BigNumberish;
        partner: BigNumberish;
        sig: BytesLike;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultAdminFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPartnerAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartnerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactInputForOutput",
    data: BytesLike
  ): Result;

  events: {
    "FeeChanged(uint256,address,bool,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Swap(address,address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export type FeeChangedEvent = TypedEvent<
  [BigNumber, string, boolean, BigNumber, BigNumber] & {
    partnerId: BigNumber;
    initiator: string;
    isAdminFee: boolean;
    oldFee: BigNumber;
    newFee: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SwapEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber] & {
    sender: string;
    to: string;
    input: string;
    output: string;
    inputAmount: BigNumber;
    outputAmount: BigNumber;
  }
>;

export class MinimaRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MinimaRouterInterface;

  functions: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultAdminFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      addr: string,
      isAdmin: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPartnerAdmin(
      partnerId: BigNumberish,
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPartnerFee(
      partnerId: BigNumberish,
      feeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdminFee(
      partnerId: BigNumberish,
      feeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOutputAmount(
      path: string[],
      pairs: string[],
      extras: BytesLike[],
      inputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { outputAmount: BigNumber }>;

    swapExactInputForOutput(
      details: {
        path: string[];
        pairs: string[];
        extras: BytesLike[];
        inputAmount: BigNumberish;
        minOutputAmount: BigNumberish;
        expectedOutputAmount: BigNumberish;
        to: string;
        deadline: BigNumberish;
        partner: BigNumberish;
        sig: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  defaultAdminFee(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    addr: string,
    isAdmin: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPartnerAdmin(
    partnerId: BigNumberish,
    admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPartnerFee(
    partnerId: BigNumberish,
    feeNumerator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdminFee(
    partnerId: BigNumberish,
    feeNumerator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOutputAmount(
    path: string[],
    pairs: string[],
    extras: BytesLike[],
    inputAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swapExactInputForOutput(
    details: {
      path: string[];
      pairs: string[];
      extras: BytesLike[];
      inputAmount: BigNumberish;
      minOutputAmount: BigNumberish;
      expectedOutputAmount: BigNumberish;
      to: string;
      deadline: BigNumberish;
      partner: BigNumberish;
      sig: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    defaultAdminFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      addr: string,
      isAdmin: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPartnerAdmin(
      partnerId: BigNumberish,
      admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPartnerFee(
      partnerId: BigNumberish,
      feeNumerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdminFee(
      partnerId: BigNumberish,
      feeNumerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getOutputAmount(
      path: string[],
      pairs: string[],
      extras: BytesLike[],
      inputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactInputForOutput(
      details: {
        path: string[];
        pairs: string[];
        extras: BytesLike[];
        inputAmount: BigNumberish;
        minOutputAmount: BigNumberish;
        expectedOutputAmount: BigNumberish;
        to: string;
        deadline: BigNumberish;
        partner: BigNumberish;
        sig: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "FeeChanged(uint256,address,bool,uint256,uint256)"(
      partnerId?: BigNumberish | null,
      initiator?: string | null,
      isAdminFee?: boolean | null,
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, string, boolean, BigNumber, BigNumber],
      {
        partnerId: BigNumber;
        initiator: string;
        isAdminFee: boolean;
        oldFee: BigNumber;
        newFee: BigNumber;
      }
    >;

    FeeChanged(
      partnerId?: BigNumberish | null,
      initiator?: string | null,
      isAdminFee?: boolean | null,
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, string, boolean, BigNumber, BigNumber],
      {
        partnerId: BigNumber;
        initiator: string;
        isAdminFee: boolean;
        oldFee: BigNumber;
        newFee: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Swap(address,address,address,address,uint256,uint256)"(
      sender?: string | null,
      to?: null,
      input?: string | null,
      output?: string | null,
      inputAmount?: null,
      outputAmount?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        sender: string;
        to: string;
        input: string;
        output: string;
        inputAmount: BigNumber;
        outputAmount: BigNumber;
      }
    >;

    Swap(
      sender?: string | null,
      to?: null,
      input?: string | null,
      output?: string | null,
      inputAmount?: null,
      outputAmount?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        sender: string;
        to: string;
        input: string;
        output: string;
        inputAmount: BigNumber;
        outputAmount: BigNumber;
      }
    >;
  };

  estimateGas: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    defaultAdminFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      addr: string,
      isAdmin: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPartnerAdmin(
      partnerId: BigNumberish,
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPartnerFee(
      partnerId: BigNumberish,
      feeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdminFee(
      partnerId: BigNumberish,
      feeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOutputAmount(
      path: string[],
      pairs: string[],
      extras: BytesLike[],
      inputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactInputForOutput(
      details: {
        path: string[];
        pairs: string[];
        extras: BytesLike[];
        inputAmount: BigNumberish;
        minOutputAmount: BigNumberish;
        expectedOutputAmount: BigNumberish;
        to: string;
        deadline: BigNumberish;
        partner: BigNumberish;
        sig: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultAdminFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      addr: string,
      isAdmin: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPartnerAdmin(
      partnerId: BigNumberish,
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPartnerFee(
      partnerId: BigNumberish,
      feeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdminFee(
      partnerId: BigNumberish,
      feeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOutputAmount(
      path: string[],
      pairs: string[],
      extras: BytesLike[],
      inputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactInputForOutput(
      details: {
        path: string[];
        pairs: string[];
        extras: BytesLike[];
        inputAmount: BigNumberish;
        minOutputAmount: BigNumberish;
        expectedOutputAmount: BigNumberish;
        to: string;
        deadline: BigNumberish;
        partner: BigNumberish;
        sig: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
