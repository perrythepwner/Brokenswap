/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BrokenswapInterface extends utils.Interface {
  functions: {
    "FEERATE()": FunctionFragment;
    "INVARIANT()": FunctionFragment;
    "_moveAmountToFeesPool(address,uint256)": FunctionFragment;
    "balanceOfToken(address)": FunctionFragment;
    "calcOutputAmount(address,address)": FunctionFragment;
    "feesPool()": FunctionFragment;
    "supportedTokens(address)": FunctionFragment;
    "swap(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEERATE"
      | "INVARIANT"
      | "_moveAmountToFeesPool"
      | "balanceOfToken"
      | "calcOutputAmount"
      | "feesPool"
      | "supportedTokens"
      | "swap"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "FEERATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "INVARIANT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_moveAmountToFeesPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcOutputAmount",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "feesPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "FEERATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INVARIANT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_moveAmountToFeesPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcOutputAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feesPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {
    "Swap(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export interface SwapEventObject {
  inputAmount: BigNumber;
  outputAmount: BigNumber;
  fees: BigNumber;
}
export type SwapEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface Brokenswap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BrokenswapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEERATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    INVARIANT(overrides?: CallOverrides): Promise<[BigNumber]>;

    _moveAmountToFeesPool(
      payingToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOfToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcOutputAmount(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feesPool(overrides?: CallOverrides): Promise<[string]>;

    supportedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swap(
      inputToken: string,
      outputToken: string,
      inputAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  FEERATE(overrides?: CallOverrides): Promise<BigNumber>;

  INVARIANT(overrides?: CallOverrides): Promise<BigNumber>;

  _moveAmountToFeesPool(
    payingToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOfToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  calcOutputAmount(
    inputToken: string,
    outputToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feesPool(overrides?: CallOverrides): Promise<string>;

  supportedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  swap(
    inputToken: string,
    outputToken: string,
    inputAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    FEERATE(overrides?: CallOverrides): Promise<BigNumber>;

    INVARIANT(overrides?: CallOverrides): Promise<BigNumber>;

    _moveAmountToFeesPool(
      payingToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOfToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutputAmount(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feesPool(overrides?: CallOverrides): Promise<string>;

    supportedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    swap(
      inputToken: string,
      outputToken: string,
      inputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Swap(uint256,uint256,uint256)"(
      inputAmount?: BigNumberish | null,
      outputAmount?: BigNumberish | null,
      fees?: BigNumberish | null
    ): SwapEventFilter;
    Swap(
      inputAmount?: BigNumberish | null,
      outputAmount?: BigNumberish | null,
      fees?: BigNumberish | null
    ): SwapEventFilter;
  };

  estimateGas: {
    FEERATE(overrides?: CallOverrides): Promise<BigNumber>;

    INVARIANT(overrides?: CallOverrides): Promise<BigNumber>;

    _moveAmountToFeesPool(
      payingToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOfToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutputAmount(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feesPool(overrides?: CallOverrides): Promise<BigNumber>;

    supportedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      inputToken: string,
      outputToken: string,
      inputAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEERATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INVARIANT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _moveAmountToFeesPool(
      payingToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOfToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcOutputAmount(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feesPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      inputToken: string,
      outputToken: string,
      inputAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
