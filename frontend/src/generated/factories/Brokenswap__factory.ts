/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
  BigNumberish,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Brokenswap, BrokenswapInterface } from "../Brokenswap";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "feeRate",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "feesPoolAddress",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AddressEmptyCode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddressInsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedInnerCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "inputAmount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "outputAmount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "fees",
        type: "uint256",
      },
    ],
    name: "Swap",
    type: "event",
  },
  {
    inputs: [],
    name: "FEERATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "INVARIANT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "payingToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "_moveAmountToFeesPool",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "balanceOfToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "inputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "outputToken",
        type: "address",
      },
    ],
    name: "calcOutputAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feesPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "supportedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "inputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "outputToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "inputAmount",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052604051610bf7380380610bf78339810160408190526100229161009a565b60058211610031576005610033565b815b6080526001600160a01b0390811660a0529283166000908152600160208190526040808320805460ff19908116841790915594909516825293902080549092169092179055506100e7565b80516001600160a01b038116811461009557600080fd5b919050565b600080600080608085870312156100b057600080fd5b6100b98561007e565b93506100c76020860161007e565b9250604085015191506100dc6060860161007e565b905092959194509250565b60805160a051610ade6101196000396000818160f401526101e301526000818161016c01526106440152610ade6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b99152d01161005b578063b99152d01461012e578063d6f9472014610141578063df791e5014610154578063fcc07a8c1461016757600080fd5b8063076b45c41461008d5780634a4ffd6b146100a957806368c4ac26146100cc5780636b259690146100ef575b600080fd5b61009660005481565b6040519081526020015b60405180910390f35b6100bc6100b73660046108fb565b61018e565b60405190151581526020016100a0565b6100bc6100da366004610925565b60016020526000908152604090205460ff1681565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100a0565b61009661013c366004610925565b610212565b61009661014f366004610940565b6102b7565b6100bc610162366004610973565b61041f565b6100967f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b038216600090815260016020819052604082205460ff161515146101d45760405162461bcd60e51b81526004016101cb906109af565b60405180910390fd5b6102086001600160a01b0384167f0000000000000000000000000000000000000000000000000000000000000000846106e1565b5060015b92915050565b6001600160a01b038116600090815260016020819052604082205460ff1615151461024f5760405162461bcd60e51b81526004016101cb906109af565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610293573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020c91906109dc565b6001600160a01b038216600090815260016020819052604082205460ff16151514801561030257506001600160a01b03821660009081526001602081905260409091205460ff161515145b61031e5760405162461bcd60e51b81526004016101cb906109af565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015610365573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038991906109dc565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156103d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f791906109dc565b90506000826000546104099190610a0b565b90506104158183610a2d565b9695505050505050565b6001600160a01b038316600090815260016020819052604082205460ff16151514801561046a57506001600160a01b03831660009081526001602081905260409091205460ff161515145b6104865760405162461bcd60e51b81526004016101cb906109af565b6040516370a0823160e01b8152306004820152849084906001600160a01b038216906370a0823190602401602060405180830381865afa1580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f291906109dc565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055a91906109dc565b6105649190610a40565b600055604051636eb1769f60e11b815233600482015230602482015284906001600160a01b0384169063dd62ed3e90604401602060405180830381865afa1580156105b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d791906109dc565b10156106255760405162461bcd60e51b815260206004820152601f60248201527f596f75206d75737420617070726f7665207472616e736665722066697273740060448201526064016101cb565b61063a6001600160a01b038316333087610745565b60006103e86106697f000000000000000000000000000000000000000000000000000000000000000087610a40565b6106739190610a0b565b905061067f838261018e565b50600061068c84846102b7565b90506106a26001600160a01b03841633836106e1565b8181877f92d941e0c114cd4379ba1e7d068a433f9e84070e2bd5213006935001f2720c3c60405160405180910390a460019450505050505b9392505050565b6040516001600160a01b0383811660248301526044820183905261074091859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610784565b505050565b6040516001600160a01b03848116602483015283811660448301526064820183905261077e9186918216906323b872dd9060840161070e565b50505050565b60006107996001600160a01b038416836107e7565b905080516000141580156107be5750808060200190518101906107bc9190610a57565b155b1561074057604051635274afe760e01b81526001600160a01b03841660048201526024016101cb565b60606106da8383600084600080856001600160a01b0316848660405161080d9190610a79565b60006040518083038185875af1925050503d806000811461084a576040519150601f19603f3d011682016040523d82523d6000602084013e61084f565b606091505b509150915061041586838360608261086f5761086a826108b6565b6106da565b815115801561088657506001600160a01b0384163b155b156108af57604051639996b31560e01b81526001600160a01b03851660048201526024016101cb565b50806106da565b8051156108c65780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b03811681146108f657600080fd5b919050565b6000806040838503121561090e57600080fd5b610917836108df565b946020939093013593505050565b60006020828403121561093757600080fd5b6106da826108df565b6000806040838503121561095357600080fd5b61095c836108df565b915061096a602084016108df565b90509250929050565b60008060006060848603121561098857600080fd5b610991846108df565b925061099f602085016108df565b9150604084013590509250925092565b602080825260139082015272151bdad95b881b9bdd081cdd5c1c1bdc9d1959606a1b604082015260600190565b6000602082840312156109ee57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082610a2857634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561020c5761020c6109f5565b808202811582820484141761020c5761020c6109f5565b600060208284031215610a6957600080fd5b815180151581146106da57600080fd5b6000825160005b81811015610a9a5760208186018101518583015201610a80565b50600092019182525091905056fea2646970667358221220fe5282d2a0a4fdc4f68d72d5ead92bf61f0a87c91db4f81606b8fd8fb818a83c64736f6c63430008150033";

type BrokenswapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BrokenswapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Brokenswap__factory extends ContractFactory {
  constructor(...args: BrokenswapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    tokenA: string,
    tokenB: string,
    feeRate: BigNumberish,
    feesPoolAddress: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<Brokenswap> {
    return super.deploy(
      tokenA,
      tokenB,
      feeRate,
      feesPoolAddress,
      overrides || {}
    ) as Promise<Brokenswap>;
  }
  override getDeployTransaction(
    tokenA: string,
    tokenB: string,
    feeRate: BigNumberish,
    feesPoolAddress: string,
    overrides?: PayableOverrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      tokenA,
      tokenB,
      feeRate,
      feesPoolAddress,
      overrides || {}
    );
  }
  override attach(address: string): Brokenswap {
    return super.attach(address) as Brokenswap;
  }
  override connect(signer: Signer): Brokenswap__factory {
    return super.connect(signer) as Brokenswap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BrokenswapInterface {
    return new utils.Interface(_abi) as BrokenswapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Brokenswap {
    return new Contract(address, _abi, signerOrProvider) as Brokenswap;
  }
}
