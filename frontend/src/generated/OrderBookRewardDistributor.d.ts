/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OrderBookRewardDistributorInterface extends ethers.utils.Interface {
  functions: {
    "PCT_DENOMINATOR()": FunctionFragment;
    "addToWhitelist(address)": FunctionFragment;
    "changeRewardCurrency(address)": FunctionFragment;
    "changeRewardRate(address,uint256)": FunctionFragment;
    "notifyOrderBroadcasted((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeFromWhitelist(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueERC20(address,uint256)": FunctionFragment;
    "rewardCurrency()": FunctionFragment;
    "rewardRate(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PCT_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRewardCurrency",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRewardRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyOrderBroadcasted",
    values: [
      {
        salt: BigNumberish;
        makerAsset: string;
        takerAsset: string;
        maker: string;
        receiver: string;
        allowedSender: string;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        getMakerAmount: BytesLike;
        getTakerAmount: BytesLike;
        predicate: BytesLike;
        permit: BytesLike;
        interaction: BytesLike;
      },
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewardRate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "PCT_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRewardCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyOrderBroadcasted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "ERC20Rescued(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardCurrencyChanged(address,address)": EventFragment;
    "RewardRateChanged(address,uint256,uint256)": EventFragment;
    "WhitelistChanged(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20Rescued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardCurrencyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardRateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistChanged"): EventFragment;
}

export type ERC20RescuedEvent = TypedEvent<
  [string, BigNumber] & { token: string; amount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RewardCurrencyChangedEvent = TypedEvent<
  [string, string] & { oldRewardCurrency: string; newRewardCurrency: string }
>;

export type RewardRateChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    token: string;
    oldRewardRate: BigNumber;
    newRewardRate: BigNumber;
  }
>;

export type WhitelistChangedEvent = TypedEvent<
  [string, boolean] & { user: string; whitelisted: boolean }
>;

export class OrderBookRewardDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OrderBookRewardDistributorInterface;

  functions: {
    PCT_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToWhitelist(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRewardCurrency(
      _rewardCurrency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRewardRate(
      _token: string,
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    notifyOrderBroadcasted(
      _order: {
        salt: BigNumberish;
        makerAsset: string;
        takerAsset: string;
        maker: string;
        receiver: string;
        allowedSender: string;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        getMakerAmount: BytesLike;
        getTakerAmount: BytesLike;
        predicate: BytesLike;
        permit: BytesLike;
        interaction: BytesLike;
      },
      _rewardRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeFromWhitelist(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardCurrency(overrides?: CallOverrides): Promise<[string]>;

    rewardRate(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  PCT_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  addToWhitelist(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRewardCurrency(
    _rewardCurrency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRewardRate(
    _token: string,
    _rewardRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  notifyOrderBroadcasted(
    _order: {
      salt: BigNumberish;
      makerAsset: string;
      takerAsset: string;
      maker: string;
      receiver: string;
      allowedSender: string;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      getMakerAmount: BytesLike;
      getTakerAmount: BytesLike;
      predicate: BytesLike;
      permit: BytesLike;
      interaction: BytesLike;
    },
    _rewardRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeFromWhitelist(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueERC20(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardCurrency(overrides?: CallOverrides): Promise<string>;

  rewardRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    PCT_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    addToWhitelist(_user: string, overrides?: CallOverrides): Promise<void>;

    changeRewardCurrency(
      _rewardCurrency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRewardRate(
      _token: string,
      _rewardRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    notifyOrderBroadcasted(
      _order: {
        salt: BigNumberish;
        makerAsset: string;
        takerAsset: string;
        maker: string;
        receiver: string;
        allowedSender: string;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        getMakerAmount: BytesLike;
        getTakerAmount: BytesLike;
        predicate: BytesLike;
        permit: BytesLike;
        interaction: BytesLike;
      },
      _rewardRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeFromWhitelist(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardCurrency(overrides?: CallOverrides): Promise<string>;

    rewardRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "ERC20Rescued(address,uint256)"(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    ERC20Rescued(
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RewardCurrencyChanged(address,address)"(
      oldRewardCurrency?: null,
      newRewardCurrency?: null
    ): TypedEventFilter<
      [string, string],
      { oldRewardCurrency: string; newRewardCurrency: string }
    >;

    RewardCurrencyChanged(
      oldRewardCurrency?: null,
      newRewardCurrency?: null
    ): TypedEventFilter<
      [string, string],
      { oldRewardCurrency: string; newRewardCurrency: string }
    >;

    "RewardRateChanged(address,uint256,uint256)"(
      token?: null,
      oldRewardRate?: null,
      newRewardRate?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; oldRewardRate: BigNumber; newRewardRate: BigNumber }
    >;

    RewardRateChanged(
      token?: null,
      oldRewardRate?: null,
      newRewardRate?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; oldRewardRate: BigNumber; newRewardRate: BigNumber }
    >;

    "WhitelistChanged(address,bool)"(
      user?: null,
      whitelisted?: null
    ): TypedEventFilter<
      [string, boolean],
      { user: string; whitelisted: boolean }
    >;

    WhitelistChanged(
      user?: null,
      whitelisted?: null
    ): TypedEventFilter<
      [string, boolean],
      { user: string; whitelisted: boolean }
    >;
  };

  estimateGas: {
    PCT_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    addToWhitelist(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRewardCurrency(
      _rewardCurrency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRewardRate(
      _token: string,
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    notifyOrderBroadcasted(
      _order: {
        salt: BigNumberish;
        makerAsset: string;
        takerAsset: string;
        maker: string;
        receiver: string;
        allowedSender: string;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        getMakerAmount: BytesLike;
        getTakerAmount: BytesLike;
        predicate: BytesLike;
        permit: BytesLike;
        interaction: BytesLike;
      },
      _rewardRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelist(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PCT_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToWhitelist(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRewardCurrency(
      _rewardCurrency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRewardRate(
      _token: string,
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    notifyOrderBroadcasted(
      _order: {
        salt: BigNumberish;
        makerAsset: string;
        takerAsset: string;
        maker: string;
        receiver: string;
        allowedSender: string;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        getMakerAmount: BytesLike;
        getTakerAmount: BytesLike;
        predicate: BytesLike;
        permit: BytesLike;
        interaction: BytesLike;
      },
      _rewardRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
