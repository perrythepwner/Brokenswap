/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OrderBookInterface extends ethers.utils.Interface {
  functions: {
    "MAX_FEE()": FunctionFragment;
    "PCT_DENOMINATOR()": FunctionFragment;
    "broadcastOrder((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,address)": FunctionFragment;
    "changeFee(uint256)": FunctionFragment;
    "changeFeeRecipient(address)": FunctionFragment;
    "fee()": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "limitOrderProtocol()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PCT_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "broadcastOrder",
    values: [
      {
        salt: BigNumberish;
        makerAsset: string;
        takerAsset: string;
        maker: string;
        receiver: string;
        allowedSender: string;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        getMakerAmount: BytesLike;
        getTakerAmount: BytesLike;
        predicate: BytesLike;
        permit: BytesLike;
        interaction: BytesLike;
      },
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitOrderProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PCT_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "broadcastOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitOrderProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "FeeChanged(uint256,uint256)": EventFragment;
    "FeeRecipientChanged(address,address)": EventFragment;
    "OrderBroadcasted(address,bytes32,tuple,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRecipientChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderBroadcasted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type FeeChangedEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldFee: BigNumber; newFee: BigNumber }
>;

export type FeeRecipientChangedEvent = TypedEvent<
  [string, string] & { oldFeeRecipient: string; newFeeRecipient: string }
>;

export type OrderBroadcastedEvent = TypedEvent<
  [
    string,
    string,
    [
      BigNumber,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ] & {
      salt: BigNumber;
      makerAsset: string;
      takerAsset: string;
      maker: string;
      receiver: string;
      allowedSender: string;
      makingAmount: BigNumber;
      takingAmount: BigNumber;
      makerAssetData: string;
      takerAssetData: string;
      getMakerAmount: string;
      getTakerAmount: string;
      predicate: string;
      permit: string;
      interaction: string;
    },
    string
  ] & {
    maker: string;
    orderHash: string;
    order: [
      BigNumber,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ] & {
      salt: BigNumber;
      makerAsset: string;
      takerAsset: string;
      maker: string;
      receiver: string;
      allowedSender: string;
      makingAmount: BigNumber;
      takingAmount: BigNumber;
      makerAssetData: string;
      takerAssetData: string;
      getMakerAmount: string;
      getTakerAmount: string;
      predicate: string;
      permit: string;
      interaction: string;
    };
    signature: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class OrderBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OrderBookInterface;

  functions: {
    MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PCT_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    broadcastOrder(
      _order: {
        salt: BigNumberish;
        makerAsset: string;
        takerAsset: string;
        maker: string;
        receiver: string;
        allowedSender: string;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        getMakerAmount: BytesLike;
        getTakerAmount: BytesLike;
        predicate: BytesLike;
        permit: BytesLike;
        interaction: BytesLike;
      },
      _signature: BytesLike,
      _notificationTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeFeeRecipient(
      _feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    limitOrderProtocol(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  PCT_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  broadcastOrder(
    _order: {
      salt: BigNumberish;
      makerAsset: string;
      takerAsset: string;
      maker: string;
      receiver: string;
      allowedSender: string;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerAssetData: BytesLike;
      takerAssetData: BytesLike;
      getMakerAmount: BytesLike;
      getTakerAmount: BytesLike;
      predicate: BytesLike;
      permit: BytesLike;
      interaction: BytesLike;
    },
    _signature: BytesLike,
    _notificationTarget: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeFeeRecipient(
    _feeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  limitOrderProtocol(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PCT_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    broadcastOrder(
      _order: {
        salt: BigNumberish;
        makerAsset: string;
        takerAsset: string;
        maker: string;
        receiver: string;
        allowedSender: string;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        getMakerAmount: BytesLike;
        getTakerAmount: BytesLike;
        predicate: BytesLike;
        permit: BytesLike;
        interaction: BytesLike;
      },
      _signature: BytesLike,
      _notificationTarget: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeFeeRecipient(
      _feeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    limitOrderProtocol(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeChanged(uint256,uint256)"(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    FeeChanged(
      oldFee?: null,
      newFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;

    "FeeRecipientChanged(address,address)"(
      oldFeeRecipient?: null,
      newFeeRecipient?: null
    ): TypedEventFilter<
      [string, string],
      { oldFeeRecipient: string; newFeeRecipient: string }
    >;

    FeeRecipientChanged(
      oldFeeRecipient?: null,
      newFeeRecipient?: null
    ): TypedEventFilter<
      [string, string],
      { oldFeeRecipient: string; newFeeRecipient: string }
    >;

    "OrderBroadcasted(address,bytes32,tuple,bytes)"(
      maker?: string | null,
      orderHash?: BytesLike | null,
      order?: null,
      signature?: null
    ): TypedEventFilter<
      [
        string,
        string,
        [
          BigNumber,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string,
          string,
          string,
          string
        ] & {
          salt: BigNumber;
          makerAsset: string;
          takerAsset: string;
          maker: string;
          receiver: string;
          allowedSender: string;
          makingAmount: BigNumber;
          takingAmount: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          getMakerAmount: string;
          getTakerAmount: string;
          predicate: string;
          permit: string;
          interaction: string;
        },
        string
      ],
      {
        maker: string;
        orderHash: string;
        order: [
          BigNumber,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string,
          string,
          string,
          string
        ] & {
          salt: BigNumber;
          makerAsset: string;
          takerAsset: string;
          maker: string;
          receiver: string;
          allowedSender: string;
          makingAmount: BigNumber;
          takingAmount: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          getMakerAmount: string;
          getTakerAmount: string;
          predicate: string;
          permit: string;
          interaction: string;
        };
        signature: string;
      }
    >;

    OrderBroadcasted(
      maker?: string | null,
      orderHash?: BytesLike | null,
      order?: null,
      signature?: null
    ): TypedEventFilter<
      [
        string,
        string,
        [
          BigNumber,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string,
          string,
          string,
          string
        ] & {
          salt: BigNumber;
          makerAsset: string;
          takerAsset: string;
          maker: string;
          receiver: string;
          allowedSender: string;
          makingAmount: BigNumber;
          takingAmount: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          getMakerAmount: string;
          getTakerAmount: string;
          predicate: string;
          permit: string;
          interaction: string;
        },
        string
      ],
      {
        maker: string;
        orderHash: string;
        order: [
          BigNumber,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string,
          string,
          string,
          string
        ] & {
          salt: BigNumber;
          makerAsset: string;
          takerAsset: string;
          maker: string;
          receiver: string;
          allowedSender: string;
          makingAmount: BigNumber;
          takingAmount: BigNumber;
          makerAssetData: string;
          takerAssetData: string;
          getMakerAmount: string;
          getTakerAmount: string;
          predicate: string;
          permit: string;
          interaction: string;
        };
        signature: string;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PCT_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    broadcastOrder(
      _order: {
        salt: BigNumberish;
        makerAsset: string;
        takerAsset: string;
        maker: string;
        receiver: string;
        allowedSender: string;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        getMakerAmount: BytesLike;
        getTakerAmount: BytesLike;
        predicate: BytesLike;
        permit: BytesLike;
        interaction: BytesLike;
      },
      _signature: BytesLike,
      _notificationTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeFeeRecipient(
      _feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    limitOrderProtocol(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PCT_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    broadcastOrder(
      _order: {
        salt: BigNumberish;
        makerAsset: string;
        takerAsset: string;
        maker: string;
        receiver: string;
        allowedSender: string;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerAssetData: BytesLike;
        takerAssetData: BytesLike;
        getMakerAmount: BytesLike;
        getTakerAmount: BytesLike;
        predicate: BytesLike;
        permit: BytesLike;
        interaction: BytesLike;
      },
      _signature: BytesLike,
      _notificationTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeFeeRecipient(
      _feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limitOrderProtocol(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
