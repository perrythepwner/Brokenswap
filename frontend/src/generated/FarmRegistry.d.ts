/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FarmRegistryInterface extends ethers.utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "addFarmInfo(bytes32,address)": FunctionFragment;
    "updateFarmData(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addFarmInfo",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFarmData",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFarmInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFarmData",
    data: BytesLike
  ): Result;

  events: {
    "FarmData(address,uint256,uint256)": EventFragment;
    "FarmInfo(address,bytes32,address)": EventFragment;
    "LPInfo(address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FarmData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FarmInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LPInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type FarmDataEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    stakingAddress: string;
    tvlUSD: BigNumber;
    rewardsUSDPerYear: BigNumber;
  }
>;

export type FarmInfoEvent = TypedEvent<
  [string, string, string] & {
    stakingAddress: string;
    farmName: string;
    lpAddress: string;
  }
>;

export type LPInfoEvent = TypedEvent<
  [string, string, string] & {
    lpAddress: string;
    token0Address: string;
    token1Address: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class FarmRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FarmRegistryInterface;

  functions: {
    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addFarmInfo(
      farmName: BytesLike,
      farm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFarmData(
      farm: string,
      tvlUSD: BigNumberish,
      rewardsUSDPerYear: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addFarmInfo(
    farmName: BytesLike,
    farm: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFarmData(
    farm: string,
    tvlUSD: BigNumberish,
    rewardsUSDPerYear: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addFarmInfo(
      farmName: BytesLike,
      farm: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFarmData(
      farm: string,
      tvlUSD: BigNumberish,
      rewardsUSDPerYear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FarmData(address,uint256,uint256)"(
      stakingAddress?: string | null,
      tvlUSD?: BigNumberish | null,
      rewardsUSDPerYear?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        stakingAddress: string;
        tvlUSD: BigNumber;
        rewardsUSDPerYear: BigNumber;
      }
    >;

    FarmData(
      stakingAddress?: string | null,
      tvlUSD?: BigNumberish | null,
      rewardsUSDPerYear?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        stakingAddress: string;
        tvlUSD: BigNumber;
        rewardsUSDPerYear: BigNumber;
      }
    >;

    "FarmInfo(address,bytes32,address)"(
      stakingAddress?: string | null,
      farmName?: BytesLike | null,
      lpAddress?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { stakingAddress: string; farmName: string; lpAddress: string }
    >;

    FarmInfo(
      stakingAddress?: string | null,
      farmName?: BytesLike | null,
      lpAddress?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { stakingAddress: string; farmName: string; lpAddress: string }
    >;

    "LPInfo(address,address,address)"(
      lpAddress?: string | null,
      token0Address?: string | null,
      token1Address?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { lpAddress: string; token0Address: string; token1Address: string }
    >;

    LPInfo(
      lpAddress?: string | null,
      token0Address?: string | null,
      token1Address?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { lpAddress: string; token0Address: string; token1Address: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addFarmInfo(
      farmName: BytesLike,
      farm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFarmData(
      farm: string,
      tvlUSD: BigNumberish,
      rewardsUSDPerYear: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addFarmInfo(
      farmName: BytesLike,
      farm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFarmData(
      farm: string,
      tvlUSD: BigNumberish,
      rewardsUSDPerYear: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
