/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { MockRegistry } from "../MockRegistry";

export class MockRegistry__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockRegistry> {
    return super.deploy(overrides || {}) as Promise<MockRegistry>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockRegistry {
    return super.attach(address) as MockRegistry;
  }
  connect(signer: Signer): MockRegistry__factory {
    return super.connect(signer) as MockRegistry__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRegistry {
    return new Contract(address, _abi, signerOrProvider) as MockRegistry;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "getAddressForOrDie",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_id",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "setAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610192806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063ca446dd91461003b578063dcf0aaed1461009e575b600080fd5b61009c610049366004610115565b60009182526020829052604090912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b005b6100d46100ac3660046100fd565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60006020828403121561010e578081fd5b5035919050565b60008060408385031215610127578081fd5b82359150602083013573ffffffffffffffffffffffffffffffffffffffff81168114610151578182fd5b80915050925092905056fea264697066735822122058b9efa86b5ed0e6e0f20a3fb22d12fc37ad43fd061f1937bb35b89ab7d8703764736f6c63430008030033";
