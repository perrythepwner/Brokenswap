/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface UbeswapFeeOnTransferRouterInterface extends ethers.utils.Interface {
  functions: {
    "MOOLA_ROUTER_FOT_REFERRAL_CODE()": FunctionFragment;
    "computeAmountsFromRouterAmounts(uint256[],address,address)": FunctionFragment;
    "computeSwap(address[])": FunctionFragment;
    "core()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "getAmountsIn(uint256,address[])": FunctionFragment;
    "getAmountsOut(uint256,address[])": FunctionFragment;
    "goldToken()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "moolaReferralCode()": FunctionFragment;
    "pool()": FunctionFragment;
    "router()": FunctionFragment;
    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MOOLA_ROUTER_FOT_REFERRAL_CODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeAmountsFromRouterAmounts",
    values: [BigNumberish[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "computeSwap",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(functionFragment: "goldToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "moolaReferralCode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MOOLA_ROUTER_FOT_REFERRAL_CODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAmountsFromRouterAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goldToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moolaReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposited(address,address,uint8,uint256)": EventFragment;
    "TokensSwapped(address,address[],address,uint256,uint256)": EventFragment;
    "Withdrawn(address,address,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensSwapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class UbeswapFeeOnTransferRouter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UbeswapFeeOnTransferRouterInterface;

  functions: {
    MOOLA_ROUTER_FOT_REFERRAL_CODE(
      overrides?: CallOverrides
    ): Promise<[number]>;

    "MOOLA_ROUTER_FOT_REFERRAL_CODE()"(
      overrides?: CallOverrides
    ): Promise<[number]>;

    computeAmountsFromRouterAmounts(
      _routerAmounts: BigNumberish[],
      _reserveIn: string,
      _reserveOut: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "computeAmountsFromRouterAmounts(uint256[],address,address)"(
      _routerAmounts: BigNumberish[],
      _reserveIn: string,
      _reserveOut: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    computeSwap(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, boolean, boolean, string[]] & {
          reserveIn: string;
          reserveOut: string;
          depositIn: boolean;
          depositOut: boolean;
          nextPath: string[];
        }
      ]
    >;

    "computeSwap(address[])"(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, boolean, boolean, string[]] & {
          reserveIn: string;
          reserveOut: string;
          depositIn: boolean;
          depositOut: boolean;
          nextPath: string[];
        }
      ]
    >;

    core(overrides?: CallOverrides): Promise<[string]>;

    "core()"(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(address,uint256)"(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountsIn(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getAmountsIn(uint256,address[])"(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getAmountsOut(uint256,address[])"(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    goldToken(overrides?: CallOverrides): Promise<[string]>;

    "goldToken()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _pool: string,
      _core: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _pool: string,
      _core: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moolaReferralCode(overrides?: CallOverrides): Promise<[number]>;

    "moolaReferralCode()"(overrides?: CallOverrides): Promise<[number]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    "pool()"(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    "router()"(overrides?: CallOverrides): Promise<[string]>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MOOLA_ROUTER_FOT_REFERRAL_CODE(overrides?: CallOverrides): Promise<number>;

  "MOOLA_ROUTER_FOT_REFERRAL_CODE()"(
    overrides?: CallOverrides
  ): Promise<number>;

  computeAmountsFromRouterAmounts(
    _routerAmounts: BigNumberish[],
    _reserveIn: string,
    _reserveOut: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "computeAmountsFromRouterAmounts(uint256[],address,address)"(
    _routerAmounts: BigNumberish[],
    _reserveIn: string,
    _reserveOut: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  computeSwap(
    _path: string[],
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean, boolean, string[]] & {
      reserveIn: string;
      reserveOut: string;
      depositIn: boolean;
      depositOut: boolean;
      nextPath: string[];
    }
  >;

  "computeSwap(address[])"(
    _path: string[],
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean, boolean, string[]] & {
      reserveIn: string;
      reserveOut: string;
      depositIn: boolean;
      depositOut: boolean;
      nextPath: string[];
    }
  >;

  core(overrides?: CallOverrides): Promise<string>;

  "core()"(overrides?: CallOverrides): Promise<string>;

  deposit(
    _reserve: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(address,uint256)"(
    _reserve: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountsIn(
    _amountOut: BigNumberish,
    _path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAmountsIn(uint256,address[])"(
    _amountOut: BigNumberish,
    _path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAmountsOut(
    _amountIn: BigNumberish,
    _path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getAmountsOut(uint256,address[])"(
    _amountIn: BigNumberish,
    _path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  goldToken(overrides?: CallOverrides): Promise<string>;

  "goldToken()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _pool: string,
    _core: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _pool: string,
    _core: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moolaReferralCode(overrides?: CallOverrides): Promise<number>;

  "moolaReferralCode()"(overrides?: CallOverrides): Promise<number>;

  pool(overrides?: CallOverrides): Promise<string>;

  "pool()"(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  swapExactTokensForTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensSupportingFeeOnTransferTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactTokens(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
    amountOut: BigNumberish,
    amountInMax: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _reserve: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    _reserve: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MOOLA_ROUTER_FOT_REFERRAL_CODE(overrides?: CallOverrides): Promise<number>;

    "MOOLA_ROUTER_FOT_REFERRAL_CODE()"(
      overrides?: CallOverrides
    ): Promise<number>;

    computeAmountsFromRouterAmounts(
      _routerAmounts: BigNumberish[],
      _reserveIn: string,
      _reserveOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "computeAmountsFromRouterAmounts(uint256[],address,address)"(
      _routerAmounts: BigNumberish[],
      _reserveIn: string,
      _reserveOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    computeSwap(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, boolean, string[]] & {
        reserveIn: string;
        reserveOut: string;
        depositIn: boolean;
        depositOut: boolean;
        nextPath: string[];
      }
    >;

    "computeSwap(address[])"(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, boolean, string[]] & {
        reserveIn: string;
        reserveOut: string;
        depositIn: boolean;
        depositOut: boolean;
        nextPath: string[];
      }
    >;

    core(overrides?: CallOverrides): Promise<string>;

    "core()"(overrides?: CallOverrides): Promise<string>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,uint256)"(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmountsIn(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAmountsIn(uint256,address[])"(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getAmountsOut(uint256,address[])"(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    goldToken(overrides?: CallOverrides): Promise<string>;

    "goldToken()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _pool: string,
      _core: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _pool: string,
      _core: string,
      overrides?: CallOverrides
    ): Promise<void>;

    moolaReferralCode(overrides?: CallOverrides): Promise<number>;

    "moolaReferralCode()"(overrides?: CallOverrides): Promise<number>;

    pool(overrides?: CallOverrides): Promise<string>;

    "pool()"(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    withdraw(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposited(
      reserve: string | null,
      account: string | null,
      reason: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, string, number, BigNumber],
      { reserve: string; account: string; reason: number; amount: BigNumber }
    >;

    TokensSwapped(
      account: string | null,
      path: string[] | null,
      to: string | null,
      amountIn: null,
      amountOut: null
    ): TypedEventFilter<
      [string, string[], string, BigNumber, BigNumber],
      {
        account: string;
        path: string[];
        to: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
      }
    >;

    Withdrawn(
      reserve: string | null,
      account: string | null,
      reason: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, string, number, BigNumber],
      { reserve: string; account: string; reason: number; amount: BigNumber }
    >;
  };

  estimateGas: {
    MOOLA_ROUTER_FOT_REFERRAL_CODE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MOOLA_ROUTER_FOT_REFERRAL_CODE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeAmountsFromRouterAmounts(
      _routerAmounts: BigNumberish[],
      _reserveIn: string,
      _reserveOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeAmountsFromRouterAmounts(uint256[],address,address)"(
      _routerAmounts: BigNumberish[],
      _reserveIn: string,
      _reserveOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeSwap(_path: string[], overrides?: CallOverrides): Promise<BigNumber>;

    "computeSwap(address[])"(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    "core()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(address,uint256)"(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountsIn(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountsIn(uint256,address[])"(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountsOut(uint256,address[])"(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    goldToken(overrides?: CallOverrides): Promise<BigNumber>;

    "goldToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _pool: string,
      _core: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _pool: string,
      _core: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moolaReferralCode(overrides?: CallOverrides): Promise<BigNumber>;

    "moolaReferralCode()"(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MOOLA_ROUTER_FOT_REFERRAL_CODE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MOOLA_ROUTER_FOT_REFERRAL_CODE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeAmountsFromRouterAmounts(
      _routerAmounts: BigNumberish[],
      _reserveIn: string,
      _reserveOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeAmountsFromRouterAmounts(uint256[],address,address)"(
      _routerAmounts: BigNumberish[],
      _reserveIn: string,
      _reserveOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeSwap(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeSwap(address[])"(
      _path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "core()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(address,uint256)"(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountsIn(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountsIn(uint256,address[])"(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountsOut(uint256,address[])"(
      _amountIn: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    goldToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "goldToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _pool: string,
      _core: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _pool: string,
      _core: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moolaReferralCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "moolaReferralCode()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokens(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      _reserve: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
