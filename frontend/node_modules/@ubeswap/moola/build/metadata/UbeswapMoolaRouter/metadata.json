{
  "compiler": { "version": "0.8.3+commit.8d00100c" },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          { "internalType": "address", "name": "router_", "type": "address" },
          { "internalType": "address", "name": "owner_", "type": "address" }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "reserve",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "enum ILendingPoolWrapper.Reason",
            "name": "reason",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "Deposited",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "Recovered",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address[]",
            "name": "path",
            "type": "address[]"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amountIn",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amountOut",
            "type": "uint256"
          }
        ],
        "name": "TokensSwapped",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "reserve",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "enum ILendingPoolWrapper.Reason",
            "name": "reason",
            "type": "uint8"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "Withdrawn",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "MOOLA_ROUTER_REFERRAL_CODE",
        "outputs": [{ "internalType": "uint16", "name": "", "type": "uint16" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[]",
            "name": "_routerAmounts",
            "type": "uint256[]"
          },
          {
            "internalType": "address",
            "name": "_reserveIn",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_reserveOut",
            "type": "address"
          }
        ],
        "name": "computeAmountsFromRouterAmounts",
        "outputs": [
          { "internalType": "uint256[]", "name": "", "type": "uint256[]" }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address[]", "name": "_path", "type": "address[]" }
        ],
        "name": "computeSwap",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "reserveIn",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "reserveOut",
                "type": "address"
              },
              { "internalType": "bool", "name": "depositIn", "type": "bool" },
              { "internalType": "bool", "name": "depositOut", "type": "bool" },
              {
                "internalType": "address[]",
                "name": "nextPath",
                "type": "address[]"
              }
            ],
            "internalType": "struct UbeswapMoolaRouterLibrary.SwapPlan",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "core",
        "outputs": [
          {
            "internalType": "contract ILendingPoolCore",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "_reserve", "type": "address" },
          { "internalType": "uint256", "name": "_amount", "type": "uint256" }
        ],
        "name": "deposit",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_amountOut",
            "type": "uint256"
          },
          { "internalType": "address[]", "name": "_path", "type": "address[]" }
        ],
        "name": "getAmountsIn",
        "outputs": [
          { "internalType": "uint256[]", "name": "", "type": "uint256[]" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "_amountIn", "type": "uint256" },
          { "internalType": "address[]", "name": "_path", "type": "address[]" }
        ],
        "name": "getAmountsOut",
        "outputs": [
          { "internalType": "uint256[]", "name": "", "type": "uint256[]" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "goldToken",
        "outputs": [
          { "internalType": "address", "name": "", "type": "address" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "_pool", "type": "address" },
          { "internalType": "address", "name": "_core", "type": "address" }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "moolaReferralCode",
        "outputs": [{ "internalType": "uint16", "name": "", "type": "uint16" }],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          { "internalType": "address", "name": "", "type": "address" }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "pool",
        "outputs": [
          {
            "internalType": "contract ILendingPool",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "tokenAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenAmount",
            "type": "uint256"
          }
        ],
        "name": "recoverERC20",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "router",
        "outputs": [
          {
            "internalType": "contract IUbeswapRouter",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "amountIn", "type": "uint256" },
          {
            "internalType": "uint256",
            "name": "amountOutMin",
            "type": "uint256"
          },
          { "internalType": "address[]", "name": "path", "type": "address[]" },
          { "internalType": "address", "name": "to", "type": "address" },
          { "internalType": "uint256", "name": "deadline", "type": "uint256" }
        ],
        "name": "swapExactTokensForTokens",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "uint256", "name": "amountOut", "type": "uint256" },
          {
            "internalType": "uint256",
            "name": "amountInMax",
            "type": "uint256"
          },
          { "internalType": "address[]", "name": "path", "type": "address[]" },
          { "internalType": "address", "name": "to", "type": "address" },
          { "internalType": "uint256", "name": "deadline", "type": "uint256" }
        ],
        "name": "swapTokensForExactTokens",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "newOwner", "type": "address" }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          { "internalType": "address", "name": "_reserve", "type": "address" },
          { "internalType": "uint256", "name": "_amount", "type": "uint256" }
        ],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      { "stateMutability": "payable", "type": "receive" }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "deposit(address,uint256)": {
          "params": {
            "_amount": "The total amount of tokens to deposit.",
            "_reserve": "The token to deposit."
          }
        },
        "owner()": { "details": "Returns the address of the current owner." },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        },
        "withdraw(address,uint256)": {
          "params": {
            "_amount": "The total amount of tokens to withdraw.",
            "_reserve": "The token to withdraw."
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "events": {
        "Recovered(address,uint256)": {
          "notice": "Emitted when tokens that were stuck in the router contract were recovered"
        },
        "TokensSwapped(address,address[],address,uint256,uint256)": {
          "notice": "Emitted when tokens are swapped"
        }
      },
      "kind": "user",
      "methods": {
        "MOOLA_ROUTER_REFERRAL_CODE()": {
          "notice": "Referral code for the default Moola router"
        },
        "core()": { "notice": "Lending core" },
        "deposit(address,uint256)": {
          "notice": "Deposits tokens into the lending pool."
        },
        "goldToken()": { "notice": "Celo Gold token" },
        "initialize(address,address)": {
          "notice": "initializes the pool (only used for deployment)"
        },
        "moolaReferralCode()": {
          "notice": "Referral code to allow tracking Moola volume originating from Ubeswap."
        },
        "pool()": { "notice": "Lending pool" },
        "recoverERC20(address,uint256)": {
          "notice": "Added to support recovering tokens stuck in the contract This is to ensure that tokens can't get lost"
        },
        "router()": { "notice": "Ubeswap router" },
        "withdraw(address,uint256)": {
          "notice": "Withdraws tokens from the lending pool."
        }
      },
      "notice": "Router for allowing conversion to/from Moola before swapping.",
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/router/UbeswapMoolaRouter.sol": "UbeswapMoolaRouter"
    },
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": { "bytecodeHash": "ipfs", "useLiteralContent": true },
    "optimizer": { "enabled": true, "runs": 999999 },
    "remappings": []
  },
  "sources": {
    "contracts/interfaces/ILendingPoolWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\n/// @notice Wraps the Moola lending pool\ninterface ILendingPoolWrapper {\n    enum Reason {DIRECT, CONVERT_IN, CONVERT_OUT}\n\n    event Deposited(\n        address indexed reserve,\n        address indexed account,\n        Reason indexed reason,\n        uint256 amount\n    );\n\n    event Withdrawn(\n        address indexed reserve,\n        address indexed account,\n        Reason indexed reason,\n        uint256 amount\n    );\n\n    /**\n     * @notice Deposits tokens into the lending pool.\n     * @param _reserve The token to deposit.\n     * @param _amount The total amount of tokens to deposit.\n     */\n    function deposit(address _reserve, uint256 _amount) external;\n\n    /**\n     * @notice Withdraws tokens from the lending pool.\n     * @param _reserve The token to withdraw.\n     * @param _amount The total amount of tokens to withdraw.\n     */\n    function withdraw(address _reserve, uint256 _amount) external;\n}\n",
      "keccak256": "0x0a23671c888a4f3ec82ad963aaa34a1c59cb0b34d5144a6d29c177f7aae94c4e",
      "license": "MIT"
    },
    "contracts/interfaces/IMoola.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\n// Interfaces in this file come from Moola.\n\ninterface IAToken {\n    function redeem(uint256 _amount) external;\n}\n\ninterface ILendingPoolCore {\n    function getReserveATokenAddress(address _reserve)\n        external\n        view\n        returns (address);\n}\n\ninterface ILendingPool {\n    function deposit(\n        address _reserve,\n        uint256 _amount,\n        uint16 _referralCode\n    ) external payable;\n}\n",
      "keccak256": "0xd926425b8e071112120ad8a0ee4e7cf1bbf46e32c824c6db99dbfb76391360f3",
      "license": "MIT"
    },
    "contracts/interfaces/IUbeswapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\n/// @notice Swaps tokens\ninterface IUbeswapRouter {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function getAmountsOut(uint256 amountIn, address[] memory path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] memory path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n",
      "keccak256": "0x5ea4c91031ad1712d88fdf0575f626f078c2173facbf36d2db5843f886340137",
      "license": "MIT"
    },
    "contracts/lending/LendingPoolWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nimport \"openzeppelin-solidity/contracts/security/ReentrancyGuard.sol\";\nimport \"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../interfaces/ILendingPoolWrapper.sol\";\nimport \"../interfaces/IMoola.sol\";\nimport \"./MoolaLibrary.sol\";\n\ninterface IWrappedTestingGold {\n    function unwrapTestingOnly(uint256 _amount) external;\n\n    function wrap() external payable;\n}\n\n/**\n * @notice Wrapper to deposit and withdraw into a lending pool.\n */\ncontract LendingPoolWrapper is ILendingPoolWrapper, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    /// @notice Lending pool\n    ILendingPool public pool;\n\n    /// @notice Lending core\n    ILendingPoolCore public core;\n\n    /// @notice Referral code to allow tracking Moola volume originating from Ubeswap.\n    uint16 public immutable moolaReferralCode;\n\n    /// @notice Celo Gold token\n    address public immutable goldToken = MoolaLibrary.getGoldToken();\n\n    constructor(uint16 moolaReferralCode_) {\n        moolaReferralCode = moolaReferralCode_;\n    }\n\n    /// @notice initializes the pool (only used for deployment)\n    function initialize(address _pool, address _core) external {\n        require(\n            address(pool) == address(0),\n            \"LendingPoolWrapper: pool already set\"\n        );\n        require(\n            address(core) == address(0),\n            \"LendingPoolWrapper: core already set\"\n        );\n        pool = ILendingPool(_pool);\n        core = ILendingPoolCore(_core);\n    }\n\n    function deposit(address _reserve, uint256 _amount) external override {\n        IERC20(_reserve).safeTransferFrom(msg.sender, address(this), _amount);\n        _convert(_reserve, _amount, true, Reason.DIRECT);\n        IERC20(\n            core.getReserveATokenAddress(\n                MoolaLibrary.getMoolaReserveToken(_reserve)\n            )\n        )\n            .safeTransfer(msg.sender, _amount);\n    }\n\n    function withdraw(address _reserve, uint256 _amount) external override {\n        IERC20(\n            core.getReserveATokenAddress(\n                MoolaLibrary.getMoolaReserveToken(_reserve)\n            )\n        )\n            .safeTransferFrom(msg.sender, address(this), _amount);\n        _convert(_reserve, _amount, false, Reason.DIRECT);\n        IERC20(_reserve).safeTransfer(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Converts tokens to/from their Moola representation.\n     * @param _reserve The token to deposit or withdraw.\n     * @param _amount The total amount of tokens to deposit or withdraw.\n     * @param _deposit If true, deposit the token for aTokens. Otherwise, withdraw aTokens to tokens.\n     * @param _reason Reason for why the conversion happened.\n     */\n    function _convert(\n        address _reserve,\n        uint256 _amount,\n        bool _deposit,\n        Reason _reason\n    ) internal nonReentrant {\n        if (_deposit) {\n            if (\n                MoolaLibrary.getMoolaReserveToken(_reserve) ==\n                MoolaLibrary.CELO_MAGIC_ADDRESS\n            ) {\n                // hardhat -- doesn't have celo erc20 so we need to handle it differently\n                if (block.chainid == 31337) {\n                    IWrappedTestingGold(goldToken).unwrapTestingOnly(_amount);\n                }\n                pool.deposit{value: _amount}(\n                    MoolaLibrary.CELO_MAGIC_ADDRESS,\n                    _amount,\n                    moolaReferralCode\n                );\n            } else {\n                IERC20(_reserve).safeApprove(address(core), _amount);\n                pool.deposit(_reserve, _amount, moolaReferralCode);\n            }\n            emit Deposited(_reserve, msg.sender, _reason, _amount);\n        } else {\n            IAToken(\n                core.getReserveATokenAddress(\n                    MoolaLibrary.getMoolaReserveToken(_reserve)\n                )\n            )\n                .redeem(_amount);\n            emit Withdrawn(_reserve, msg.sender, _reason, _amount);\n        }\n    }\n\n    /// @notice This is used to receive CELO direct payments\n    receive() external payable {\n        // mock gold token can send tokens here on Hardhat\n        if (block.chainid == 31337 && msg.sender == address(goldToken)) {\n            return;\n        }\n        require(\n            msg.sender == address(core),\n            \"LendingPoolWrapper: Must be LendingPoolCore to send CELO\"\n        );\n\n        // if hardhat, wrap the token so we can send it back to the user\n        if (block.chainid == 31337) {\n            IWrappedTestingGold(goldToken).wrap{value: msg.value}();\n        }\n    }\n}\n",
      "keccak256": "0x170daa93e4b01158087c0241fd0806b77c9f753ccbe62e8614913d716c3e2730",
      "license": "MIT"
    },
    "contracts/lending/MoolaLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nimport \"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface IRegistry {\n    function getAddressForOrDie(bytes32) external view returns (address);\n}\n\n/**\n * Library for interacting with Moola.\n */\nlibrary MoolaLibrary {\n    /// @dev Mock CELO address to represent raw CELO tokens\n    address internal constant CELO_MAGIC_ADDRESS =\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    /// @dev Address of the Celo registry\n    address internal constant CELO_REGISTRY =\n        0x000000000000000000000000000000000000ce10;\n\n    bytes32 internal constant GOLD_TOKEN_REGISTRY_ID =\n        keccak256(abi.encodePacked(\"GoldToken\"));\n\n    /// @notice Gets the address of CGLD\n    function getGoldToken() internal view returns (address) {\n        if (block.chainid == 31337) {\n            // deployed via create2 in tests\n            return\n                IRegistry(0xCde5a0dC96d0ecEaee6fFfA84a6d9a6343f2c8E2)\n                    .getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID);\n        }\n        return\n            IRegistry(CELO_REGISTRY).getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID);\n    }\n\n    /// @notice Gets the token that Moola requests, supporting the gold token.\n    function getMoolaReserveToken(address _reserve)\n        internal\n        view\n        returns (address)\n    {\n        if (_reserve == getGoldToken()) {\n            _reserve = CELO_MAGIC_ADDRESS;\n        }\n        return _reserve;\n    }\n}\n",
      "keccak256": "0xa8a5c890f9b9b54e40a8d60efd2b0dcf26b96587166e9842f0d2da748af1ef72",
      "license": "MIT"
    },
    "contracts/router/UbeswapMoolaRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nimport \"openzeppelin-solidity/contracts/access/Ownable.sol\";\nimport \"./UbeswapMoolaRouterBase.sol\";\n\n/// @notice Router for allowing conversion to/from Moola before swapping.\ncontract UbeswapMoolaRouter is UbeswapMoolaRouterBase, Ownable {\n    using SafeERC20 for IERC20;\n\n    /// @notice Emitted when tokens that were stuck in the router contract were recovered\n    event Recovered(address indexed token, uint256 amount);\n\n    /// @notice Referral code for the default Moola router\n    uint16 public constant MOOLA_ROUTER_REFERRAL_CODE = 0x0420;\n\n    constructor(address router_, address owner_)\n        UbeswapMoolaRouterBase(router_, MOOLA_ROUTER_REFERRAL_CODE)\n    {\n        transferOwnership(owner_);\n    }\n\n    /// @notice Added to support recovering tokens stuck in the contract\n    /// This is to ensure that tokens can't get lost\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\n        external\n        onlyOwner\n    {\n        IERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\n        emit Recovered(tokenAddress, tokenAmount);\n    }\n}\n",
      "keccak256": "0xfe11674f6f40524716b5e41e2af4d1afb6e69580b7ffaeae2ef9b64d926ffa9c",
      "license": "MIT"
    },
    "contracts/router/UbeswapMoolaRouterBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nimport \"../lending/LendingPoolWrapper.sol\";\nimport \"../interfaces/IUbeswapRouter.sol\";\nimport \"./UbeswapMoolaRouterLibrary.sol\";\n\n/**\n * Router for allowing conversion to/from Moola before swapping.\n */\nabstract contract UbeswapMoolaRouterBase is LendingPoolWrapper, IUbeswapRouter {\n    using SafeERC20 for IERC20;\n\n    /// @notice Ubeswap router\n    IUbeswapRouter public immutable router;\n\n    /// @notice Emitted when tokens are swapped\n    event TokensSwapped(\n        address indexed account,\n        address[] indexed path,\n        address indexed to,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    constructor(address router_, uint16 moolaReferralCode_)\n        LendingPoolWrapper(moolaReferralCode_)\n    {\n        router = IUbeswapRouter(router_);\n    }\n\n    function _initSwap(\n        address[] calldata _path,\n        uint256 _inAmount,\n        uint256 _outAmount\n    ) internal returns (UbeswapMoolaRouterLibrary.SwapPlan memory _plan) {\n        _plan = UbeswapMoolaRouterLibrary.computeSwap(core, _path);\n\n        // if we have a path, approve the router to be able to trade\n        if (_plan.nextPath.length > 0) {\n            // if out amount is specified, compute the in amount from it\n            if (_outAmount != 0) {\n                _inAmount = router.getAmountsIn(_outAmount, _plan.nextPath)[0];\n            }\n            IERC20(_plan.nextPath[0]).safeApprove(address(router), _inAmount);\n        }\n\n        // Handle pulling the initial amount from the contract caller\n        IERC20(_path[0]).safeTransferFrom(msg.sender, address(this), _inAmount);\n\n        // If in reserve is specified, we must convert\n        if (_plan.reserveIn != address(0)) {\n            _convert(\n                _plan.reserveIn,\n                _inAmount,\n                _plan.depositIn,\n                Reason.CONVERT_IN\n            );\n        }\n    }\n\n    /// @dev Ensures that the ERC20 token balances of this contract before and after\n    /// the swap are equal\n    /// TODO(igm): remove this once we get an audit\n    /// This should NEVER get triggered, but it's better to be safe than sorry\n    modifier balanceUnchanged(address[] calldata _path, address _to) {\n        // Populate initial balances for comparison later\n        uint256[] memory _initialBalances = new uint256[](_path.length);\n        for (uint256 i = 0; i < _path.length; i++) {\n            _initialBalances[i] = IERC20(_path[i]).balanceOf(address(this));\n        }\n        _;\n        for (uint256 i = 0; i < _path.length - 1; i++) {\n            uint256 newBalance = IERC20(_path[i]).balanceOf(address(this));\n            require(\n                // if triangular arb, ignore\n                _path[i] == _path[0] ||\n                    _path[i] == _path[_path.length - 1] ||\n                    // ensure tokens balances haven't changed\n                    newBalance == _initialBalances[i],\n                \"UbeswapMoolaRouter: tokens left over after swap\"\n            );\n        }\n        // sends the final tokens to `_to` address\n        address lastAddress = _path[_path.length - 1];\n        IERC20(lastAddress).safeTransfer(\n            _to,\n            // subtract the initial balance from this token\n            IERC20(lastAddress).balanceOf(address(this)) -\n                _initialBalances[_initialBalances.length - 1]\n        );\n    }\n\n    /// @dev Handles the swap after the plan is executed\n    function _swapConvertOut(\n        UbeswapMoolaRouterLibrary.SwapPlan memory _plan,\n        uint256[] memory _routerAmounts,\n        address[] calldata _path,\n        address _to\n    ) internal returns (uint256[] memory amounts) {\n        amounts = UbeswapMoolaRouterLibrary.computeAmountsFromRouterAmounts(\n            _routerAmounts,\n            _plan.reserveIn,\n            _plan.reserveOut\n        );\n        if (_plan.reserveOut != address(0)) {\n            _convert(\n                _plan.reserveOut,\n                amounts[amounts.length - 1],\n                _plan.depositOut,\n                Reason.CONVERT_OUT\n            );\n        }\n        emit TokensSwapped(\n            msg.sender,\n            _path,\n            _to,\n            amounts[0],\n            amounts[amounts.length - 1]\n        );\n    }\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    )\n        external\n        override\n        balanceUnchanged(path, to)\n        returns (uint256[] memory amounts)\n    {\n        UbeswapMoolaRouterLibrary.SwapPlan memory plan =\n            _initSwap(path, amountIn, 0);\n        if (plan.nextPath.length > 0) {\n            amounts = router.swapExactTokensForTokens(\n                amountIn,\n                amountOutMin,\n                plan.nextPath,\n                address(this),\n                deadline\n            );\n        }\n        amounts = _swapConvertOut(plan, amounts, path, to);\n    }\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    )\n        external\n        override\n        balanceUnchanged(path, to)\n        returns (uint256[] memory amounts)\n    {\n        UbeswapMoolaRouterLibrary.SwapPlan memory plan =\n            _initSwap(path, 0, amountOut);\n        if (plan.nextPath.length > 0) {\n            amounts = router.swapTokensForExactTokens(\n                amountOut,\n                amountInMax,\n                plan.nextPath,\n                address(this),\n                deadline\n            );\n        }\n        amounts = _swapConvertOut(plan, amounts, path, to);\n    }\n\n    function getAmountsOut(uint256 _amountIn, address[] calldata _path)\n        external\n        view\n        override\n        returns (uint256[] memory)\n    {\n        return\n            UbeswapMoolaRouterLibrary.getAmountsOut(\n                core,\n                router,\n                _amountIn,\n                _path\n            );\n    }\n\n    function getAmountsIn(uint256 _amountOut, address[] calldata _path)\n        external\n        view\n        override\n        returns (uint256[] memory)\n    {\n        return\n            UbeswapMoolaRouterLibrary.getAmountsIn(\n                core,\n                router,\n                _amountOut,\n                _path\n            );\n    }\n\n    function computeSwap(address[] calldata _path)\n        external\n        view\n        returns (UbeswapMoolaRouterLibrary.SwapPlan memory)\n    {\n        return UbeswapMoolaRouterLibrary.computeSwap(core, _path);\n    }\n\n    function computeAmountsFromRouterAmounts(\n        uint256[] memory _routerAmounts,\n        address _reserveIn,\n        address _reserveOut\n    ) external pure returns (uint256[] memory) {\n        return\n            UbeswapMoolaRouterLibrary.computeAmountsFromRouterAmounts(\n                _routerAmounts,\n                _reserveIn,\n                _reserveOut\n            );\n    }\n}\n",
      "keccak256": "0x603bf5f794d5ac975dd0b5fe9762d397b4172c263b409a55bc1826265e70b0d4",
      "license": "MIT"
    },
    "contracts/router/UbeswapMoolaRouterLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nimport \"../interfaces/IUbeswapRouter.sol\";\nimport \"../interfaces/IMoola.sol\";\nimport \"../lending/MoolaLibrary.sol\";\n\n/// @notice Library for computing various router functions\nlibrary UbeswapMoolaRouterLibrary {\n    /// @notice Plan for executing a swap on the router.\n    struct SwapPlan {\n        address reserveIn;\n        address reserveOut;\n        bool depositIn;\n        bool depositOut;\n        address[] nextPath;\n    }\n\n    /// @notice Computes the swap that will take place based on the path\n    function computeSwap(ILendingPoolCore _core, address[] calldata _path)\n        internal\n        view\n        returns (SwapPlan memory _plan)\n    {\n        uint256 startIndex;\n        uint256 endIndex = _path.length;\n\n        // cAsset -> mcAsset (deposit)\n        if (\n            _core.getReserveATokenAddress(\n                MoolaLibrary.getMoolaReserveToken(_path[0])\n            ) == _path[1]\n        ) {\n            _plan.reserveIn = _path[0];\n            _plan.depositIn = true;\n            startIndex += 1;\n        }\n        // mcAsset -> cAsset (withdraw)\n        else if (\n            _path[0] ==\n            _core.getReserveATokenAddress(\n                MoolaLibrary.getMoolaReserveToken(_path[1])\n            )\n        ) {\n            _plan.reserveIn = _path[1];\n            _plan.depositIn = false;\n            startIndex += 1;\n        }\n\n        // only handle out path swap if the path is long enough\n        if (\n            _path.length >= 3 &&\n            // if we already did a conversion and path length is 3, skip.\n            !(_path.length == 3 && startIndex > 0)\n        ) {\n            // cAsset -> mcAsset (deposit)\n            if (\n                _core.getReserveATokenAddress(\n                    MoolaLibrary.getMoolaReserveToken(_path[_path.length - 2])\n                ) == _path[_path.length - 1]\n            ) {\n                _plan.reserveOut = _path[_path.length - 2];\n                _plan.depositOut = true;\n                endIndex -= 1;\n            }\n            // mcAsset -> cAsset (withdraw)\n            else if (\n                _path[_path.length - 2] ==\n                _core.getReserveATokenAddress(\n                    MoolaLibrary.getMoolaReserveToken(_path[_path.length - 1])\n                )\n            ) {\n                _plan.reserveOut = _path[_path.length - 1];\n                endIndex -= 1;\n                // not needed\n                // _depositOut = false;\n            }\n        }\n\n        _plan.nextPath = _path[startIndex:endIndex];\n    }\n\n    /// @notice Computes the amounts given the amounts returned by the router\n    function computeAmountsFromRouterAmounts(\n        uint256[] memory _routerAmounts,\n        address _reserveIn,\n        address _reserveOut\n    ) internal pure returns (uint256[] memory amounts) {\n        uint256 startOffset = _reserveIn != address(0) ? 1 : 0;\n        uint256 endOffset = _reserveOut != address(0) ? 1 : 0;\n        uint256 length = _routerAmounts.length + startOffset + endOffset;\n\n        amounts = new uint256[](length);\n        if (startOffset > 0) {\n            amounts[0] = _routerAmounts[0];\n        }\n        if (endOffset > 0) {\n            amounts[length - 1] = _routerAmounts[_routerAmounts.length - 1];\n        }\n        for (uint256 i = 0; i < _routerAmounts.length; i++) {\n            amounts[i + startOffset] = _routerAmounts[i];\n        }\n    }\n\n    function getAmountsOut(\n        ILendingPoolCore core,\n        IUbeswapRouter router,\n        uint256 amountIn,\n        address[] calldata path\n    ) internal view returns (uint256[] memory amounts) {\n        SwapPlan memory plan = computeSwap(core, path);\n        amounts = computeAmountsFromRouterAmounts(\n            router.getAmountsOut(amountIn, plan.nextPath),\n            plan.reserveIn,\n            plan.reserveOut\n        );\n    }\n\n    function getAmountsIn(\n        ILendingPoolCore core,\n        IUbeswapRouter router,\n        uint256 amountOut,\n        address[] calldata path\n    ) internal view returns (uint256[] memory amounts) {\n        SwapPlan memory plan = computeSwap(core, path);\n        amounts = computeAmountsFromRouterAmounts(\n            router.getAmountsIn(amountOut, plan.nextPath),\n            plan.reserveIn,\n            plan.reserveOut\n        );\n    }\n}\n",
      "keccak256": "0xfda8abea9ecfe7a011bf1d36469125d2a27a3267a744356948ccde6eae4d6857",
      "license": "MIT"
    },
    "openzeppelin-solidity/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n",
      "keccak256": "0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c",
      "license": "MIT"
    },
    "openzeppelin-solidity/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n",
      "keccak256": "0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe",
      "license": "MIT"
    },
    "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n",
      "keccak256": "0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835",
      "license": "MIT"
    },
    "openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n",
      "keccak256": "0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7",
      "license": "MIT"
    },
    "openzeppelin-solidity/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n",
      "keccak256": "0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45",
      "license": "MIT"
    },
    "openzeppelin-solidity/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n",
      "keccak256": "0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0",
      "license": "MIT"
    }
  },
  "version": 1
}
