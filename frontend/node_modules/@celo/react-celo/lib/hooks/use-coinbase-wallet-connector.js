"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCoinbaseWalletConnector = void 0;
const react_1 = require("react");
const connectors_1 = require("../connectors");
const use_celo_1 = require("../use-celo");
const logger_1 = require("../utils/logger");
function useCoinbaseWalletConnector(onSubmit) {
    const { network, feeCurrency, manualNetworkMode, initConnector, initError: error, dapp, } = (0, use_celo_1.useCeloInternal)();
    (0, react_1.useEffect)(() => {
        let stale;
        void (() => __awaiter(this, void 0, void 0, function* () {
            const connector = new connectors_1.CoinbaseWalletConnector(network, manualNetworkMode, dapp);
            try {
                yield initConnector(connector);
                if (!stale) {
                    onSubmit(connector);
                }
            }
            catch (e) {
                (0, logger_1.getApplicationLogger)().error('[use-coinbase-wallet-connector]', e);
            }
        }))();
        return () => {
            stale = true;
        };
    }, [initConnector, network, dapp, onSubmit, feeCurrency, manualNetworkMode]);
    return { error, dapp, network };
}
exports.useCoinbaseWalletConnector = useCoinbaseWalletConnector;
//# sourceMappingURL=use-coinbase-wallet-connector.js.map