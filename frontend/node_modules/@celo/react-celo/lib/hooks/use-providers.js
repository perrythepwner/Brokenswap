"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRecent = exports.walletToProvider = void 0;
const react_1 = require("react");
const react_device_detect_1 = require("react-device-detect");
const constants_1 = require("../constants");
const local_storage_1 = require("../utils/local-storage");
const sort_1 = require("../utils/sort");
function walletToProvider(wallet) {
    return {
        name: wallet.name,
        walletConnectId: wallet.id,
        type: constants_1.WalletTypes.WalletConnect,
        description: wallet.description || 'Missing description in registry',
        icon: wallet.logos.md,
        canConnect: () => true,
        showInList: () => react_device_detect_1.isMobile ? Object.values(wallet.mobile).some(Boolean) : true,
        listPriority: () => constants_1.Priorities.Default,
        installURL: wallet.homepage,
        supportedPlatforms: [constants_1.Platform.Mobile],
    };
}
exports.walletToProvider = walletToProvider;
function getRecent() {
    const listOfRecentWalletTypeIds = (0, local_storage_1.getRecentWallets)();
    // create mapping by the identifier we saved so its easy to get the recent provider from the id
    const providersByTypeId = Object.values(constants_1.PROVIDERS).reduce((collection, current) => {
        const unifiedID = current.type === constants_1.WalletTypes.WalletConnect
            ? `${current.type}:${current.walletConnectId}`
            : current.type;
        collection.set(unifiedID, current);
        return collection;
    }, new Map());
    // map over type-ids and get the actual provider
    const recentProviders = listOfRecentWalletTypeIds
        .map((unifiedID) => {
        const provider = providersByTypeId.get(unifiedID);
        return provider;
    })
        .filter((p) => p !== undefined);
    return {
        providers: recentProviders,
        // return as a set to make it easy to filter these out of the default list
        ids: new Set(listOfRecentWalletTypeIds),
    };
}
exports.getRecent = getRecent;
function useProviders(wallets = [], includedDefaultProviders, sort = sort_1.defaultProviderSort, search) {
    const record = (0, react_1.useMemo)(() => (Object.assign(Object.assign({}, includedDefaultProviders.reduce((all, current) => {
        all[current] = constants_1.PROVIDERS[current];
        return all;
    }, {})), wallets.reduce((acc, wallet) => {
        acc[wallet.id] = walletToProvider(wallet);
        return acc;
    }, {}))), [wallets, includedDefaultProviders]);
    const providers = (0, react_1.useMemo)(() => {
        return Object.entries(record)
            .filter(([providerKey, provider]) => provider.showInList() &&
            (!search || providerKey.toLowerCase().includes(search.toLowerCase())))
            .sort(([, a], [, b]) => sort(a, b));
    }, [record, sort, search]);
    if (!providers.length) {
        return [];
    }
    const recentlyUsedProviders = getRecent();
    if (recentlyUsedProviders.ids.size !== 0) {
        const recent = recentlyUsedProviders.providers.map((provider) => {
            return [provider.name, provider];
        });
        const rest = providers.filter(([_, provider]) => {
            const unifiedID = provider.type === constants_1.WalletTypes.WalletConnect
                ? `${provider.type}:${provider.walletConnectId}`
                : provider.type;
            return !recentlyUsedProviders.ids.has(unifiedID);
        });
        return [
            [constants_1.Priorities.Recent, recent],
            [constants_1.Priorities.Default, rest],
        ];
    }
    return [[constants_1.Priorities.Default, providers]];
}
exports.default = useProviders;
//# sourceMappingURL=use-providers.js.map