"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCeloInternal = exports.useContractKit = exports.useCelo = void 0;
const react_celo_provider_1 = require("./react-celo-provider");
function useCelo() {
    const [reducerState, _dispatch, celoMethods] = (0, react_celo_provider_1.useReactCeloContext)();
    const { dapp, address, network, walletChainId, feeCurrency, connectorInitError, networks, connector, } = reducerState;
    const { destroy, disconnect, updateNetwork, connect, getConnectedKit, performActions, updateFeeCurrency, contractsCache, updateTheme, } = celoMethods;
    return {
        dapp,
        address,
        network,
        walletChainId,
        feeCurrency,
        initError: connectorInitError,
        // Copy to ensure any accidental mutations dont affect global state
        networks: networks.map((net) => (Object.assign({}, net))),
        kit: connector.kit,
        // the wallet address from Account.getWalletAddress => The address at which the account expects to receive transfers.
        // If it's empty/0x0, the account indicates that an address exchange should be initiated with the dataEncryptionKey
        /*
         * @deprecated this will likely be removed in favor of just address
         */
        account: connector.kit.connection.defaultAccount,
        initialised: connector.initialised,
        walletType: connector.type,
        supportsFeeCurrency: connector.supportsFeeCurrency(),
        destroy,
        disconnect,
        updateNetwork,
        connect,
        getConnectedKit,
        performActions,
        updateFeeCurrency,
        contractsCache: contractsCache,
        updateTheme,
    };
}
exports.useCelo = useCelo;
/**
 * @deprecated Use the alias {@link useCelo} hook instead.
 */
exports.useContractKit = useCelo;
/**
 * @internal useCelo with internal methods exposed. Package use only.
 */
const useCeloInternal = () => {
    const [{ pendingActionCount, connectionCallback, theme, manualNetworkMode }, _dispatch, { initConnector, resetInitError },] = (0, react_celo_provider_1.useReactCeloContext)();
    return Object.assign(Object.assign({}, useCelo()), { manualNetworkMode,
        connectionCallback,
        initConnector,
        pendingActionCount,
        theme,
        resetInitError });
};
exports.useCeloInternal = useCeloInternal;
//# sourceMappingURL=use-celo.js.map