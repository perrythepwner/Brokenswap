"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCeloState = void 0;
const base_1 = require("@celo/contractkit/lib/base");
const react_1 = require("react");
const connectors_1 = require("./connectors");
const constants_1 = require("./constants");
const use_is_mounted_1 = require("./hooks/use-is-mounted");
const react_celo_reducer_1 = require("./react-celo-reducer");
const get_initial_network_1 = require("./utils/get-initial-network");
const helpers_1 = require("./utils/helpers");
const resurrector_1 = require("./utils/resurrector");
const initialState = {
    connector: new connectors_1.UnauthenticatedConnector(constants_1.Mainnet),
    connectorInitError: null,
    manualNetworkMode: false,
    dapp: {
        name: 'Celo dApp',
        description: 'Celo dApp',
        url: 'https://celo.org',
        icon: 'https://celo.org/favicon.ico',
    },
    walletChainId: null,
    network: constants_1.Mainnet,
    networks: constants_1.DEFAULT_NETWORKS,
    pendingActionCount: 0,
    address: null,
    connectionCallback: null,
    feeCurrency: base_1.CeloContract.GoldToken,
    theme: null,
};
function useDispatch(dispatch) {
    const isMountedRef = (0, use_is_mounted_1.useIsMounted)();
    return (0, react_1.useCallback)((type, ...payload) => {
        if (isMountedRef.current) {
            dispatch({ type, payload: payload[0] });
        }
    }, [dispatch, isMountedRef]);
}
function useCeloState({ dapp, network, defaultNetwork, manualNetworkMode, theme, networks, feeCurrency, }) {
    var _a;
    const stateFromLocalStorage = (0, react_1.useMemo)(() => (0, helpers_1.loadPreviousState)(), 
    // We only want this to run on mount so the deps array is empty.
    // This is OK because the stateFromLocalStorage is only used to create the initial reducer state
    /* eslint-disable-next-line */
    []);
    const connector = (0, react_1.useMemo)(() => {
        return (0, resurrector_1.resurrector)(networks, dapp, manualNetworkMode !== null && manualNetworkMode !== void 0 ? manualNetworkMode : initialState.manualNetworkMode);
        /* eslint-disable-next-line */
    }, []);
    const initialNetwork = (0, get_initial_network_1.getInitialNetwork)(networks, defaultNetwork, network, stateFromLocalStorage.networkName);
    const [state, _dispatch] = (0, react_1.useReducer)(react_celo_reducer_1.celoReactReducer, Object.assign(Object.assign({}, initialState), { manualNetworkMode: manualNetworkMode !== null && manualNetworkMode !== void 0 ? manualNetworkMode : initialState.manualNetworkMode, address: stateFromLocalStorage.address, connector: connector || initialState.connector, network: initialNetwork, feeCurrency: stateFromLocalStorage.feeCurrency ||
            feeCurrency ||
            base_1.CeloContract.GoldToken, networks,
        theme, dapp: Object.assign(Object.assign({}, dapp), { icon: (_a = dapp.icon) !== null && _a !== void 0 ? _a : `${dapp.url}/favicon.ico` }) }));
    const dispatch = useDispatch(_dispatch);
    return [state, dispatch];
}
exports.useCeloState = useCeloState;
//# sourceMappingURL=react-celo-provider-state.js.map