"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("@celo/contractkit/lib/base");
const mini_kit_1 = require("@celo/contractkit/lib/mini-kit");
const wallet_sdk_1 = require("@coinbase/wallet-sdk");
const constants_1 = require("../constants");
const logger_1 = require("../utils/logger");
const metamask_1 = require("../utils/metamask");
const common_1 = require("./common");
class CoinbaseWalletConnector extends common_1.AbstractConnector {
    constructor(network, manualNetworkingMode, dapp) {
        var _a, _b;
        super();
        this.network = network;
        this.manualNetworkingMode = manualNetworkingMode;
        this.initialised = false;
        this.type = constants_1.WalletTypes.CoinbaseWallet;
        this.feeCurrency = base_1.CeloContract.GoldToken;
        this.provider = null;
        this.onChainChanged = (chainIdHex) => {
            const chainId = parseInt(chainIdHex, 16);
            if (this.network.chainId !== chainId) {
                this.emit(common_1.ConnectorEvents.WALLET_CHAIN_CHANGED, chainId);
            }
        };
        this.onAccountsChanged = (accounts) => {
            if (accounts[0]) {
                this.kit.connection.defaultAccount = accounts[0];
                this.emit(common_1.ConnectorEvents.ADDRESS_CHANGED, accounts[0]);
            }
        };
        this.kit = (0, mini_kit_1.newKit)(network.rpcUrl);
        const sdk = new wallet_sdk_1.CoinbaseWalletSDK({
            appName: (_a = dapp === null || dapp === void 0 ? void 0 : dapp.name) !== null && _a !== void 0 ? _a : '',
            appLogoUrl: (_b = dapp === null || dapp === void 0 ? void 0 : dapp.icon) !== null && _b !== void 0 ? _b : '',
            reloadOnDisconnect: false,
            diagnosticLogger: {
                log: (e, p) => {
                    // this fixes the app trying to resurrect the cb connector after the wallet has initiated a disconnection as the sdk then reloads the page
                    if ('walletlink_sdk_metadata_destroyed' === e &&
                        (p === null || p === void 0 ? void 0 : p.alreadyDestroyed) === false) {
                        this.close();
                    }
                    (0, logger_1.getApplicationLogger)().debug('[coinbase-wallet] sdk event', e, 'properties', p);
                },
            },
        });
        this.provider = sdk.makeWeb3Provider(network.rpcUrl, network.chainId);
    }
    initialise() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.provider) {
                throw new Error('Coinbase wallet provider not instantiated');
            }
            if (this.initialised) {
                return this;
            }
            const { default: Web3 } = yield Promise.resolve().then(() => __importStar(require('web3')));
            const web3 = new Web3(this.provider);
            const [defaultAccount] = yield this.provider.request({
                method: 'eth_requestAccounts',
            });
            this.removeListeners();
            try {
                if (!this.manualNetworkingMode) {
                    yield (0, metamask_1.switchToNetwork)(this.network, this.provider, () => web3.eth.getChainId());
                }
            }
            catch (e) {
                // if user rejects the switch it will throw but we dont want it to disrupt everything
                // they different chain ids will be enough for dapp devs to decided to reprompt
            }
            const walletChainId = yield this.provider.request({
                method: 'eth_chainId',
            });
            this.provider.on('chainChanged', this.onChainChanged);
            this.provider.on('accountsChanged', this.onAccountsChanged);
            this.newKit(web3, defaultAccount);
            this.initialised = true;
            this.emit(common_1.ConnectorEvents.CONNECTED, {
                walletType: this.type,
                walletChainId: parseInt(walletChainId, 16),
                networkName: this.network.name,
                address: defaultAccount,
            });
            return this;
        });
    }
    removeListeners() {
        if (this.provider) {
            this.provider.removeListener('chainChanged', this.onChainChanged);
            this.provider.removeListener('accountsChanged', this.onAccountsChanged);
        }
    }
    newKit(web3, defaultAccount) {
        this.kit = (0, mini_kit_1.newKitFromWeb3)(web3);
        this.kit.connection.defaultAccount = defaultAccount;
        return this.kit;
    }
    supportsFeeCurrency() {
        return false;
    }
    startNetworkChangeFromApp(network) {
        return __awaiter(this, void 0, void 0, function* () {
            const web3 = this.kit.connection.web3;
            yield (0, metamask_1.switchToNetwork)(network, this.provider, () => web3.eth.getChainId());
            this.continueNetworkUpdateFromWallet(network);
        });
    }
    // for when the wallet is already on the desired network and the kit / dapp need to catch up.
    continueNetworkUpdateFromWallet(network) {
        this.network = network; // must set to prevent loop
        const web3 = this.kit.connection.web3;
        this.newKit(web3, this.account); // kit caches things so it need to be recreated
        this.emit(common_1.ConnectorEvents.NETWORK_CHANGED, network.name);
    }
    close() {
        var _a, _b;
        this.removeListeners();
        try {
            this.kit.connection.stop();
        }
        catch (e) {
            (0, logger_1.getApplicationLogger)().error('[methods.close] could not stop a already stopped CeloConnection', e);
        }
        this.disconnect();
        if ((_a = this.provider) === null || _a === void 0 ? void 0 : _a.connected) {
            // must be called last as it refreshes page which then starts the resurector if disconnect has not been called
            void ((_b = this.provider) === null || _b === void 0 ? void 0 : _b.close());
        }
        return;
    }
}
exports.default = CoinbaseWalletConnector;
//# sourceMappingURL=coinbase-wallet.js.map