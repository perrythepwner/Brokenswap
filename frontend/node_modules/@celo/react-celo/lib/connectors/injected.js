"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mini_kit_1 = require("@celo/contractkit/lib/mini-kit");
const constants_1 = require("../constants");
const ethereum_1 = require("../utils/ethereum");
const logger_1 = require("../utils/logger");
const metamask_1 = require("../utils/metamask");
const common_1 = require("./common");
class InjectedConnector extends common_1.AbstractConnector {
    constructor(network, manualNetworkMode, feeCurrency, defaultType = constants_1.WalletTypes.Injected) {
        super();
        this.manualNetworkMode = manualNetworkMode;
        this.feeCurrency = feeCurrency;
        this.initialised = false;
        this.type = constants_1.WalletTypes.Injected;
        // wallet changes net chain
        // emits 'chainChanged'
        // onChainChanged called and emits WALLET_CHAIN_CHANGED if chain ids dont match
        // networkWatcher sees that and if a suitable network can be found calls continueNetworkUpdateFromWallet()
        // else it dies.
        this.onChainChanged = (chainIdHex) => {
            const chainId = parseInt(chainIdHex, 16);
            // if this change was initiated by app the chainIds will already match and we can abort
            (0, logger_1.getApplicationLogger)().log('onChainChanged', chainId);
            if (this.network.chainId !== chainId) {
                this.emit(common_1.ConnectorEvents.WALLET_CHAIN_CHANGED, chainId);
            }
        };
        this.onAccountsChanged = (accounts) => {
            if (accounts.length === 0) {
                // wallet is locked properly close the connection.
                this.close();
            }
            else {
                this.kit.connection.defaultAccount = accounts[0];
                this.emit(common_1.ConnectorEvents.ADDRESS_CHANGED, accounts[0]);
            }
        };
        this.type = defaultType;
        this.kit = (0, mini_kit_1.newKit)(network.rpcUrl);
        this.network = network;
    }
    initialise(lastUsedAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.initialised) {
                return this;
            }
            let defaultAccount = lastUsedAddress;
            const injected = yield (0, ethereum_1.getInjectedEthereum)();
            if (!injected) {
                throw new Error('Ethereum wallet not installed');
            }
            const { web3, ethereum, isMetaMask } = injected;
            this.type = isMetaMask ? constants_1.WalletTypes.MetaMask : constants_1.WalletTypes.Injected;
            const metamask = ethereum._metamask;
            const isUnlocked = isMetaMask && (yield (metamask === null || metamask === void 0 ? void 0 : metamask.isUnlocked()));
            const isConnected = ethereum.isConnected && ethereum.isConnected();
            if (isUnlocked || !isConnected || !defaultAccount) {
                [defaultAccount] = yield ethereum.request({
                    method: 'eth_requestAccounts',
                });
            }
            ethereum.removeListener('chainChanged', this.onChainChanged);
            ethereum.removeListener('accountsChanged', this.onAccountsChanged);
            if (!this.manualNetworkMode) {
                yield (0, metamask_1.switchToNetwork)(this.network, ethereum, () => this.kit.connection.chainId());
            }
            ethereum.on('chainChanged', this.onChainChanged);
            ethereum.on('accountsChanged', this.onAccountsChanged);
            this.newKit(web3, defaultAccount);
            const walletChainId = yield ethereum.request({ method: 'eth_chainId' });
            this.initialised = true;
            this.emit(common_1.ConnectorEvents.CONNECTED, {
                walletType: this.type,
                address: defaultAccount,
                networkName: this.network.name,
                walletChainId: parseInt(walletChainId, 16),
            });
            return this;
        });
    }
    newKit(web3, defaultAccount) {
        this.kit = (0, mini_kit_1.newKitFromWeb3)(web3);
        this.kit.connection.defaultAccount = defaultAccount;
    }
    startNetworkChangeFromApp(network) {
        return __awaiter(this, void 0, void 0, function* () {
            const ethereum = (0, ethereum_1.getEthereum)();
            yield (0, metamask_1.switchToNetwork)(network, ethereum, this.kit.connection.chainId);
            this.continueNetworkUpdateFromWallet(network);
        });
    }
    //
    continueNetworkUpdateFromWallet(network) {
        this.network = network; // must set to prevent loop
        const web3 = this.kit.connection.web3;
        this.newKit(web3, this.account); // kit caches things so it need to be recreated
        this.emit(common_1.ConnectorEvents.NETWORK_CHANGED, network.name);
    }
    supportsFeeCurrency() {
        return false;
    }
    removeListenersFromEth() {
        const ethereum = (0, ethereum_1.getEthereum)();
        if (ethereum) {
            ethereum.removeListener('chainChanged', this.onChainChanged);
            ethereum.removeListener('accountsChanged', this.onAccountsChanged);
        }
    }
    close() {
        this.removeListenersFromEth();
        try {
            this.kit.connection.stop();
        }
        finally {
            this.disconnect();
        }
    }
}
exports.default = InjectedConnector;
//# sourceMappingURL=injected.js.map