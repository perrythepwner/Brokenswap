import { CeloTokenContract } from '@celo/contractkit/lib/base';
import { MiniContractKit } from '@celo/contractkit/lib/mini-kit';
import { WalletConnectWalletOptions } from '@celo/wallet-walletconnect';
import { WalletTypes } from '../constants';
import { Connector, Network } from '../types';
import { AbstractConnector, updateFeeCurrency } from './common';
export default class WalletConnectConnector extends AbstractConnector implements Connector {
    private network;
    feeCurrency: CeloTokenContract;
    readonly options: WalletConnectWalletOptions;
    readonly autoOpen: boolean;
    getDeeplinkUrl?: ((uri: string) => string | false) | undefined;
    readonly version?: number | undefined;
    readonly walletId?: string | undefined;
    initialised: boolean;
    type: WalletTypes.WalletConnect;
    kit: MiniContractKit;
    constructor(network: Network, manualNetworkMode: boolean, feeCurrency: CeloTokenContract, options: WalletConnectWalletOptions, autoOpen?: boolean, getDeeplinkUrl?: ((uri: string) => string | false) | undefined, version?: number | undefined, walletId?: string | undefined);
    initialise(): Promise<this>;
    private handleUri;
    startNetworkChangeFromApp(network: Network): Promise<void>;
    private restartKit;
    private onCallRequest;
    private onSessionEvent;
    private onSessionUpdated;
    private onSessionDeleted;
    continueNetworkUpdateFromWallet(network: Network): void;
    supportsFeeCurrency(): boolean;
    private onAddressChange;
    private onConnected;
    private fetchWalletAddressForAccount;
    updateFeeCurrency: typeof updateFeeCurrency;
    close(message?: string): Promise<void>;
}
//# sourceMappingURL=wallet-connect.d.ts.map