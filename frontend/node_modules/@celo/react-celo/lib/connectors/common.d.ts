import { CeloTokenContract } from '@celo/contractkit/lib/base';
import { MiniContractKit, newKitFromWeb3 } from '@celo/contractkit/lib/mini-kit';
import EventEmitter from 'eventemitter3';
import { WalletTypes } from '../constants';
import { Connector } from '../types';
export type Web3Type = Parameters<typeof newKitFromWeb3>[0];
export declare class UnsupportedChainIdError extends Error {
    readonly chainID: number;
    static readonly NAME: string;
    constructor(chainID: number);
}
export declare function updateFeeCurrency(this: Connector, feeContract: CeloTokenContract): Promise<void>;
export declare enum ConnectorEvents {
    'CONNECTED' = "CONNECTED",
    'DISCONNECTED' = "DISCONNECTED",
    'ADDRESS_CHANGED' = "ADDRESS_CHANGED",
    'NETWORK_CHANGED' = "NETWORK_CHANGED",
    'NETWORK_CHANGE_FAILED' = "NETWORK_CHANGE_FAILED",
    'WALLET_CHAIN_CHANGED' = "WALLET_CHAIN_CHANGED",
    'WC_URI_RECEIVED' = "WC_URI_RECEIVED",
    'WC_INITIALISED' = "WC_INITIALISED",
    'WC_ERROR' = "WC_ERROR"
}
interface ConnectorParamsCommon {
    networkName: string;
    walletType: WalletTypes;
    walletChainId: number | null;
    address: string;
    walletId?: string;
    index?: number;
}
interface PrivateKeyParams extends ConnectorParamsCommon {
    walletType: WalletTypes.PrivateKey;
    privateKey: string;
}
interface LedgerParams extends ConnectorParamsCommon {
    walletType: WalletTypes.Ledger;
    index: number;
}
interface WalletConnectParams extends ConnectorParamsCommon {
    walletType: WalletTypes.CeloWallet | WalletTypes.Valora | WalletTypes.WalletConnect | WalletTypes.CeloTerminal | WalletTypes.CeloDance;
    walletId: string;
}
export type ConnectorParams = ConnectorParamsCommon | PrivateKeyParams | LedgerParams | WalletConnectParams;
export type EventsMap = {
    [ConnectorEvents.ADDRESS_CHANGED]: string;
    [ConnectorEvents.NETWORK_CHANGED]: string;
    [ConnectorEvents.NETWORK_CHANGE_FAILED]: unknown;
    [ConnectorEvents.WALLET_CHAIN_CHANGED]: number;
    [ConnectorEvents.CONNECTED]: ConnectorParams;
    [ConnectorEvents.WC_URI_RECEIVED]: string;
    [ConnectorEvents.WC_INITIALISED]: void;
    [ConnectorEvents.WC_ERROR]: Error;
    [ConnectorEvents.DISCONNECTED]: void;
};
export declare class AbstractConnector {
    kit?: MiniContractKit;
    type: WalletTypes | undefined;
    protected emitter: EventEmitter<string | symbol, any>;
    get account(): string | undefined;
    protected set account(address: string | undefined);
    on: <E extends ConnectorEvents>(event: E, fn: (arg: EventsMap[E]) => void) => void;
    supportsFeeCurrency(): boolean;
    protected emit: <E extends ConnectorEvents>(event: E, data?: EventsMap[E] | undefined) => void;
    protected disconnect(): void;
}
export {};
//# sourceMappingURL=common.d.ts.map