"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.celoReactReducer = void 0;
const logger_1 = require("./utils/logger");
function celoReactReducer(state, action) {
    switch (action.type) {
        case 'decrementPendingActionCount':
            return Object.assign(Object.assign({}, state), { pendingActionCount: state.pendingActionCount - 1 });
        case 'setAddress':
            if (action.payload === state.address) {
                return state;
            }
            return Object.assign(Object.assign({}, state), { address: action.payload });
        case 'setWalletChainId':
            return Object.assign(Object.assign({}, state), { walletChainId: action.payload });
        case 'setNetwork':
            if (action.payload === state.network) {
                return state;
            }
            return Object.assign(Object.assign({}, state), { network: action.payload });
        case 'setNetworkByName': {
            const network = state.networks.find((net) => net.name === action.payload);
            if (network) {
                return Object.assign(Object.assign({}, state), { network });
            }
            return state;
        }
        case 'setFeeCurrency':
            if (action.payload === state.feeCurrency) {
                return state;
            }
            return Object.assign(Object.assign({}, state), { feeCurrency: action.payload });
        case 'initialisedConnector': {
            return Object.assign(Object.assign({}, state), { connector: action.payload });
        }
        case 'connect': {
            const network = state.networks.find((net) => net.name === action.payload.networkName);
            return Object.assign(Object.assign({}, state), { address: action.payload.address, network: network, walletChainId: action.payload.walletChainId });
        }
        case 'disconnect':
            return Object.assign(Object.assign({}, state), { address: null });
        default:
            // This checks to see if the action type is `set<fieldname>`
            if (action.type.slice(0, 3) === 'set') {
                // This builds the proper camel-case field name from the action type
                // e.g., setFieldName -> fieldName
                const key = `${action.type.charAt(3).toLowerCase()}${action.type.slice(4)}`;
                return Object.assign(Object.assign({}, state), { [key]: action.payload });
            }
            else {
                (0, logger_1.getApplicationLogger)().error('[reducer]', new Error(`Unrecognized action type ${action.type}`));
            }
            return state;
    }
}
exports.celoReactReducer = celoReactReducer;
//# sourceMappingURL=react-celo-reducer.js.map