import { CeloTokenContract } from '@celo/contractkit/lib/base';
import { Connector, Dapp, Maybe, Network, Theme } from './types';
export declare function celoReactReducer(state: ReducerState, action: Actions): ReducerState;
export interface ReducerState {
    connector: Connector;
    /**
     * Initialisation error, if applicable.
     */
    connectorInitError: Maybe<Error>;
    dapp: Dapp;
    /**
     * the chain id of the wallet (if applicable), may be different than dapp at certain moments,
     * exposed here to give developer optionality in handling network behavior
     * null when not known or wallet doesn't have a network (like ledger)
     */
    walletChainId: number | null;
    network: Network;
    manualNetworkMode: boolean;
    networks: Network[];
    pendingActionCount: number;
    address: Maybe<string>;
    feeCurrency: CeloTokenContract;
    theme: Maybe<Theme>;
    connectionCallback: Maybe<(connector: Connector | false) => void>;
}
type SetActions = {
    [Key in keyof ReducerState as `set${Capitalize<Key>}`]: ReducerState[Key];
};
export interface ActionsMap extends SetActions {
    decrementPendingActionCount: undefined;
    initialisedConnector: Connector;
    disconnect: undefined;
    connect: {
        address: string;
        networkName: string;
        walletChainId: number | null;
    };
    setNetworkByName: string;
}
export type Actions = {
    [Key in keyof ActionsMap]: {
        type: Key;
        payload: ActionsMap[Key];
    };
}[keyof ActionsMap];
export {};
//# sourceMappingURL=react-celo-reducer.d.ts.map