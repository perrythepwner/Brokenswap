import { ReducerState } from './react-celo-reducer';
import { Maybe } from './types';
import { CeloMethods } from './use-celo-methods';
type SomeReducerStateProps = Pick<ReducerState, 'dapp' | 'address' | 'network' | 'feeCurrency'>;
type DerivedFromReducerStateProps = {
    walletChainId: ReducerState['walletChainId'];
    networks: readonly ReducerState['network'][];
    initError: ReducerState['connectorInitError'];
};
type SomeReducerConnectorProps = Pick<ReducerState['connector'], 'kit' | 'initialised'>;
type DerivedFromConnectorProps = {
    supportsFeeCurrency: ReturnType<ReducerState['connector']['supportsFeeCurrency']>;
    walletType: ReducerState['connector']['type'];
};
type SomeCeloMethods = Omit<CeloMethods, 'resetInitError' | 'initConnector'>;
export type UseCelo = SomeReducerStateProps & DerivedFromReducerStateProps & SomeReducerConnectorProps & DerivedFromConnectorProps & SomeCeloMethods & {
    account: Maybe<string>;
};
export declare function useCelo<CC = undefined>(): UseCelo;
/**
 * @deprecated Use the alias {@link useCelo} hook instead.
 */
export declare const useContractKit: typeof useCelo;
type UseCeloInternal = UseCelo & Pick<ReducerState, 'connectionCallback' | 'pendingActionCount' | 'theme' | 'manualNetworkMode'> & Pick<CeloMethods, 'initConnector' | 'resetInitError'>;
/**
 * @internal useCelo with internal methods exposed. Package use only.
 */
export declare const useCeloInternal: () => UseCeloInternal;
export {};
//# sourceMappingURL=use-celo.d.ts.map