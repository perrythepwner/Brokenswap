"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInitialNetwork = void 0;
const logger_1 = require("./logger");
// will look for a network searching first in local storage, then based on what was given.
function getInitialNetwork(networks, defaultNetwork, passedNetwork, storedNetwork) {
    if (process.env.NODE_ENV !== 'production' && passedNetwork) {
        (0, logger_1.getApplicationLogger)().warn('The `network` prop on CeloProvider has been deprecated, use `defaultNetwork`');
    }
    const network = networks.find((net) => {
        if (storedNetwork) {
            net.name === storedNetwork;
        }
        // TODO:#246 remove when network prop is removed
        if (passedNetwork) {
            return net.name === passedNetwork.name;
        }
        else {
            return net.name === defaultNetwork;
        }
    });
    if (!network) {
        const name = defaultNetwork || (passedNetwork === null || passedNetwork === void 0 ? void 0 : passedNetwork.name) || 'unknown';
        throw new Error(`[react-celo] Could not find 'defaultNetwork' (${name}) in 'networks'. 'defaultNetwork' must equal 'network.name' on one of the 'networks' passed to CeloProvider.`);
    }
    // ensure for now that we return the original
    if (network.name === (passedNetwork === null || passedNetwork === void 0 ? void 0 : passedNetwork.name)) {
        return passedNetwork;
    }
    return network;
}
exports.getInitialNetwork = getInitialNetwork;
//# sourceMappingURL=get-initial-network.js.map