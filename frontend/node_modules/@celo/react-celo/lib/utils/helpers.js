"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFixedBody = exports.isValidFeeCurrency = exports.loadPreviousState = void 0;
const base_1 = require("@celo/contractkit/lib/base");
const react_1 = require("react");
const constants_1 = require("../constants");
const local_storage_1 = require("./local-storage");
function loadPreviousState() {
    const address = (0, local_storage_1.getTypedStorageKey)(constants_1.localStorageKeys.lastUsedAddress);
    const networkName = (0, local_storage_1.getTypedStorageKey)(constants_1.localStorageKeys.lastUsedNetwork);
    const localLastUsedFeeCurrency = (0, local_storage_1.getTypedStorageKey)(constants_1.localStorageKeys.lastUsedFeeCurrency);
    const feeCurrency = isValidFeeCurrency(localLastUsedFeeCurrency)
        ? localLastUsedFeeCurrency
        : null;
    return {
        address,
        networkName,
        feeCurrency,
    };
}
exports.loadPreviousState = loadPreviousState;
function isValidFeeCurrency(currency) {
    switch (currency) {
        case base_1.CeloContract.GoldToken:
        case base_1.CeloContract.StableToken:
        case base_1.CeloContract.StableTokenEUR:
        case base_1.CeloContract.StableTokenBRL:
            return true;
        default:
            return false;
    }
}
exports.isValidFeeCurrency = isValidFeeCurrency;
function useFixedBody(isOpen) {
    (0, react_1.useEffect)(() => {
        if (isOpen) {
            const originalOverflow = document.body.style.overflow;
            const originalPadding = document.body.style.paddingRight;
            document.body.style.overflow = 'hidden';
            document.body.style.paddingRight = '15px';
            return () => {
                document.body.style.overflow = originalOverflow;
                document.body.style.paddingRight = originalPadding;
            };
        }
    }, [isOpen]);
}
exports.useFixedBody = useFixedBody;
//# sourceMappingURL=helpers.js.map