import { GoldTokenWrapper } from '@celo/contractkit/lib/wrappers/GoldTokenWrapper';
import { StableTokenWrapper } from '@celo/contractkit/lib/wrappers/StableTokenWrapper';
import { Ethereum } from '../global';
import { CeloNetwork, Network } from '../types';
export interface ERC20Token {
    address: string;
    name: string;
    symbol: string;
    decimals: number;
    image?: string;
}
export interface AddERC20TokenParameter {
    type: 'ERC20';
    options: ERC20Token;
}
export interface CeloTokens {
    CELO: GoldTokenWrapper;
    cUSD: StableTokenWrapper;
    cEUR: StableTokenWrapper;
    cREAL: StableTokenWrapper;
}
export type StableTokens = Omit<CeloTokens, 'CELO'>;
export interface AddEthereumChainParameter {
    chainId: string;
    chainName: string;
    nativeCurrency: Omit<ERC20Token, 'address'>;
    rpcUrls: string[];
    blockExplorerUrls?: string[];
    iconUrls?: string[];
}
export declare enum MetamaskRPCErrorCode {
    AwaitingUserConfirmation = -32002,
    UnrecognizedChainID = -32603,
    UnknownNetwork = 4902
}
export interface MetamaskRPCError {
    code: MetamaskRPCErrorCode;
    message: string;
    stack: string;
}
export declare const makeNetworkParams: (info: CeloNetwork, CELO: GoldTokenWrapper) => Promise<AddEthereumChainParameter>;
export declare const tokenToParam: (token: GoldTokenWrapper | StableTokenWrapper) => Promise<AddERC20TokenParameter>;
export declare const makeAddCeloTokensParams: (tokens: StableTokens) => Promise<AddERC20TokenParameter[]>;
export declare const addTokensToMetamask: (ethereum: Ethereum, tokens: StableTokens) => Promise<boolean>;
export declare const addNetworkToMetamask: (ethereum: Ethereum, networkConfig: Network) => Promise<void>;
export declare function addNetworksToMetamask(ethereum: Ethereum): Promise<void>;
export declare function switchToNetwork(network: Network, ethereum: Ethereum, getChainId: () => Promise<number>): Promise<void>;
export declare const networkHasUpdated: (getChainId: () => Promise<number>, expectedChainId: number) => Promise<true | undefined>;
export declare function getWalletChainId(ethereum: Ethereum): Promise<number>;
//# sourceMappingURL=metamask.d.ts.map