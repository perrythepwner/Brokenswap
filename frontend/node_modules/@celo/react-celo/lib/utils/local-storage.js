"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.localStorageAvailable = exports.wipeStorage = exports.clearPreviousConfig = exports.setTypedStorageKey = exports.getTypedStorageKey = exports.getRecentWallets = exports.rememberWallet = void 0;
const constants_1 = require("../constants");
class MockedLocalStorage {
    constructor() {
        this.storage = new Map();
    }
    getItem(key) {
        if (this.storage.has(key)) {
            this.storage.get(key);
        }
        return null;
    }
    key(index) {
        if (index < 0 || index >= this.length) {
            return null;
        }
        let i = 0;
        for (const value of this.storage.values()) {
            if (i === index) {
                return value;
            }
            i += 1;
        }
        return null;
    }
    setItem(key, value) {
        this.storage.set(key, value);
    }
    removeItem(key) {
        this.storage.delete(key);
    }
    clear() {
        this.storage.clear();
    }
    get length() {
        return this.storage.size;
    }
}
const localStorage = typeof window === 'undefined'
    ? new MockedLocalStorage()
    : window.localStorage;
const MAX_WALLETS = 3;
// adds wallet to top of stack
// if stack already has wallet pull to top
function rememberWallet(type, id) {
    const unifiedID = id ? `${type}:${id}` : type;
    const stack = getRecentWallets();
    const index = stack.indexOf(unifiedID);
    if (index > -1) {
        stack.splice(index, 1);
    }
    const newLength = stack.unshift(unifiedID);
    if (newLength > MAX_WALLETS) {
        // remove oldest
        stack.pop();
    }
    const serialized = JSON.stringify(stack);
    localStorage.setItem(constants_1.localStorageKeys.lastUsedWallets, serialized);
}
exports.rememberWallet = rememberWallet;
function getRecentWallets() {
    const raw = localStorage.getItem(constants_1.localStorageKeys.lastUsedWallets);
    if (!raw) {
        return [];
    }
    const stack = JSON.parse(raw);
    return stack;
}
exports.getRecentWallets = getRecentWallets;
function getTypedStorageKey(key) {
    const item = localStorage.getItem(key);
    if (key === constants_1.localStorageKeys.lastUsedIndex && item) {
        return Number(item);
    }
    if (item) {
        return item;
    }
    return null;
}
exports.getTypedStorageKey = getTypedStorageKey;
function setTypedStorageKey(key, value) {
    localStorage.setItem(key, value.toString());
}
exports.setTypedStorageKey = setTypedStorageKey;
function clearPreviousConfig() {
    Object.values(constants_1.localStorageKeys).forEach((val) => {
        if (val === constants_1.localStorageKeys.lastUsedWalletId)
            return;
        if (val === constants_1.localStorageKeys.lastUsedWalletType)
            return;
        if (val === constants_1.localStorageKeys.lastUsedWallets)
            return;
        localStorage.removeItem(val);
    });
}
exports.clearPreviousConfig = clearPreviousConfig;
function wipeStorage() {
    localStorage.clear();
}
exports.wipeStorage = wipeStorage;
function localStorageAvailable() {
    return typeof localStorage !== 'undefined';
}
exports.localStorageAvailable = localStorageAvailable;
//# sourceMappingURL=local-storage.js.map