import { CeloTokenContract } from '@celo/contractkit/lib/base';
import { WalletConnectWalletOptions } from '@celo/wallet-walletconnect';
import { localStorageKeys, WalletTypes } from '../constants';
type ParamType = {
    [localStorageKeys.lastUsedAddress]: string;
    [localStorageKeys.lastUsedNetwork]: string;
    [localStorageKeys.lastUsedPrivateKey]: string;
    [localStorageKeys.lastUsedWalletId]: string;
    [localStorageKeys.lastUsedFeeCurrency]: CeloTokenContract;
    [localStorageKeys.lastUsedIndex]: number;
    [localStorageKeys.lastUsedWalletType]: WalletTypes;
    [localStorageKeys.lastUsedWallets]: string;
};
export declare function rememberWallet(type: WalletTypes, id?: string): void;
export declare function getRecentWallets(): string[];
export declare function getTypedStorageKey<T extends localStorageKeys>(key: T): ParamType[T] | null;
export declare function setTypedStorageKey<T extends localStorageKeys, V extends ParamType[T]>(key: T, value: V): void;
export type WalletArgs = [string] | [CeloTokenContract] | [WalletConnectWalletOptions] | [number] | [];
export declare function clearPreviousConfig(): void;
export declare function wipeStorage(): void;
export declare function localStorageAvailable(): boolean;
export {};
//# sourceMappingURL=local-storage.d.ts.map