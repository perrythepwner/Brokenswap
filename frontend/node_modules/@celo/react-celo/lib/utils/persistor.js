"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../connectors/common");
const constants_1 = require("../constants");
const local_storage_1 = require("./local-storage");
const persistor = (connector) => {
    connector.on(common_1.ConnectorEvents.ADDRESS_CHANGED, (address) => {
        (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedAddress, address);
    });
    // This might not be needed since we tend to just recreated connectors when network switches
    connector.on(common_1.ConnectorEvents.NETWORK_CHANGED, (networkName) => {
        (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedNetwork, networkName);
    });
    connector.on(common_1.ConnectorEvents.CONNECTED, (params) => {
        (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedNetwork, params.networkName);
        (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedWalletType, params.walletType);
        (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedAddress, params.address);
        if (params.index) {
            (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedIndex, params.index);
        }
        if (params.walletId) {
            (0, local_storage_1.setTypedStorageKey)(constants_1.localStorageKeys.lastUsedWalletId, params.walletId);
        }
        (0, local_storage_1.rememberWallet)(params.walletType, params.walletId);
    });
    connector.on(common_1.ConnectorEvents.DISCONNECTED, () => {
        (0, local_storage_1.clearPreviousConfig)();
    });
};
exports.default = persistor;
//# sourceMappingURL=persistor.js.map