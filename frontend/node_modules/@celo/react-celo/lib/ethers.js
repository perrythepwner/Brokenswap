"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConnectedSigner = exports.useLazyConnectedSigner = exports.useGetConnectedSigner = exports.useProviderOrSigner = exports.useProvider = void 0;
const providers_1 = require("@ethersproject/providers");
const react_1 = require("react");
const use_is_mounted_1 = require("./hooks/use-is-mounted");
const use_celo_1 = require("./use-celo");
const useProvider = () => {
    const { kit, network } = (0, use_celo_1.useCelo)();
    const provider = kit.connection.web3
        .currentProvider;
    const { chainId, name } = network;
    return (0, react_1.useMemo)(() => {
        return new providers_1.Web3Provider(provider, { chainId, name });
    }, [provider, chainId, name]);
};
exports.useProvider = useProvider;
const useProviderOrSigner = () => {
    const { kit } = (0, use_celo_1.useCelo)();
    const provider = (0, exports.useProvider)();
    return (0, react_1.useMemo)(() => {
        return kit.connection.defaultAccount
            ? provider.getSigner(kit.connection.defaultAccount)
            : provider;
    }, [provider, kit.connection.defaultAccount]);
};
exports.useProviderOrSigner = useProviderOrSigner;
const useGetConnectedSigner = () => {
    const { kit, getConnectedKit, network } = (0, use_celo_1.useCelo)();
    const signer = (0, exports.useProviderOrSigner)();
    const { chainId, name } = network;
    return (0, react_1.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
        if (kit.connection.defaultAccount) {
            return signer;
        }
        const nextKit = yield getConnectedKit();
        const nextProvider = nextKit.connection.web3
            .currentProvider;
        return new providers_1.Web3Provider(nextProvider, { chainId, name }).getSigner(nextKit.connection.defaultAccount);
    }), [kit.connection.defaultAccount, getConnectedKit, signer, chainId, name]);
};
exports.useGetConnectedSigner = useGetConnectedSigner;
const useLazyConnectedSigner = () => {
    var _a;
    const isMountedRef = (0, use_is_mounted_1.useIsMounted)();
    const getConnectedSigner = (0, exports.useGetConnectedSigner)();
    const [signer, setSigner] = (0, react_1.useState)(null);
    const getConnectedSignerCb = (0, react_1.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
        const theSigner = yield getConnectedSigner();
        if (isMountedRef.current) {
            setSigner(theSigner);
        }
        return theSigner;
    }), [getConnectedSigner, setSigner, isMountedRef]);
    return {
        signer,
        getConnectedSigner: getConnectedSignerCb,
        address: (_a = signer === null || signer === void 0 ? void 0 : signer._address) !== null && _a !== void 0 ? _a : null,
    };
};
exports.useLazyConnectedSigner = useLazyConnectedSigner;
const useConnectedSigner = () => {
    const getConnectedSigner = (0, exports.useGetConnectedSigner)();
    const [signer, setSigner] = (0, react_1.useState)(null);
    (0, react_1.useEffect)(() => {
        let stale;
        void (() => __awaiter(void 0, void 0, void 0, function* () {
            const theSigner = yield getConnectedSigner();
            if (!stale) {
                setSigner(theSigner);
            }
            setSigner(yield getConnectedSigner());
        }))();
        return () => {
            stale = true;
        };
    }, [getConnectedSigner]);
    return signer;
};
exports.useConnectedSigner = useConnectedSigner;
//# sourceMappingURL=ethers.js.map