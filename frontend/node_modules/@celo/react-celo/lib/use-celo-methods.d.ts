import { CeloTokenContract } from '@celo/contractkit/lib/base';
import { MiniContractKit } from '@celo/contractkit/lib/mini-kit';
import { ContractCacheBuilder } from './hooks/use-contracts-cache';
import { Dispatcher } from './react-celo-provider-state';
import { Connector, Network, Theme } from './types';
interface CeloMethodsInput {
    connector: Connector;
    networks: Network[];
    network: Network;
    manualNetworkMode: boolean;
}
export declare function useCeloMethods({ connector, networks, network, manualNetworkMode }: CeloMethodsInput, dispatch: Dispatcher, buildContractsCache?: ContractCacheBuilder): CeloMethods;
export interface CeloMethods {
    /**
     * @deprecated use `disconnect` (same behavior better name)
     *
     */
    destroy: () => Promise<void>;
    /**
     * `disconnect` closes the connection to the wallet and reses state
     */
    disconnect: () => Promise<void>;
    /**
     * `updateNetwork` changes the network used in the wallet.
     *  optional dappOnly if the wallet is known to already be on the correct chain
     *  useful when in manualNetworkingMode
     * Note: _not compatible with all wallets_
     */
    updateNetwork: (network: Network, dappOnly?: boolean) => Promise<void>;
    /**
     * `connect` initiates the connection to a wallet and
     * opens a modal from which the user can choose a
     * wallet to connect to.
     */
    connect: () => Promise<Connector>;
    /**
     * `getConnectedKit` gets the connected instance of MiniContractKit.
     * If the user is not connected, this opens up the connection modal.
     */
    getConnectedKit: () => Promise<MiniContractKit>;
    /**
     * `performActions` is a helper function for handling any interaction with a Celo wallet.
     * Perform action will:
     * - open the action modal
     * - handle multiple transactions in order
     */
    performActions: (...operations: ((kit: MiniContractKit) => unknown | Promise<unknown>)[]) => Promise<unknown[]>;
    /**
     * `updateFeeCurrency` updates the currency that will be used
     * in future transactions.
     *
     * Note: _not compatible with all wallets_
     */
    updateFeeCurrency: (newFeeCurrency: CeloTokenContract) => Promise<void>;
    contractsCache?: unknown;
    /**
     * `updateTheme` programmaticaly updates the theme used in the
     * wallet connection modal. This is useful if you want to give
     * the user the option to change the theme.
     */
    updateTheme: (theme: Theme | null) => void;
    /**
     * @internal
     * resetInitError cleans up the error that occurred
     * when trying to initialize a wallet connector.
     */
    resetInitError: () => void;
    /**
     * @internal
     *
     * `initConnector` is used to initialize a connector
     *  for the wallet chosen by the user.
     */
    initConnector: (connector: Connector, lastUsedAddress?: string) => Promise<void>;
}
export {};
//# sourceMappingURL=use-celo-methods.d.ts.map