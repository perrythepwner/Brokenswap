"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_NETWORKS = exports.getProviderForWallet = exports.STATIC_NETWORK_WALLETS = exports.Localhost = exports.Mainnet = exports.Cannoli = exports.Baklava = exports.Alfajores = exports.NetworkNames = exports.PROVIDERS = exports.WalletIds = exports.Platform = exports.Priorities = exports.WalletTypes = exports.SupportedProviders = exports.localStorageKeys = void 0;
const react_device_detect_1 = require("react-device-detect");
const Icons = __importStar(require("./components/icons"));
const types_1 = require("./types");
const ethereum_1 = require("./utils/ethereum");
var localStorageKeys;
(function (localStorageKeys) {
    localStorageKeys["lastUsedAddress"] = "react-celo/last-used-address";
    localStorageKeys["lastUsedNetwork"] = "react-celo/last-used-network";
    localStorageKeys["lastUsedWalletType"] = "react-celo/last-used-wallet";
    localStorageKeys["lastUsedWalletId"] = "react-celo/last-used-wallet-id";
    localStorageKeys["lastUsedWallets"] = "react-celo/last-used-wallets";
    localStorageKeys["lastUsedIndex"] = "react-celo/last-used-index";
    localStorageKeys["lastUsedPrivateKey"] = "react-celo/last-used-private-key";
    localStorageKeys["lastUsedFeeCurrency"] = "react-celo/last-used-fee-currency";
})(localStorageKeys = exports.localStorageKeys || (exports.localStorageKeys = {}));
var SupportedProviders;
(function (SupportedProviders) {
    SupportedProviders["CeloExtensionWallet"] = "Celo Extension Wallet";
    SupportedProviders["CeloTerminal"] = "Celo Terminal";
    SupportedProviders["CeloWallet"] = "Celo Wallet";
    SupportedProviders["CeloDance"] = "CeloDance";
    SupportedProviders["Injected"] = "Injected";
    SupportedProviders["Ledger"] = "Ledger";
    SupportedProviders["MetaMask"] = "MetaMask";
    SupportedProviders["PrivateKey"] = "Private key";
    SupportedProviders["Valora"] = "Valora";
    SupportedProviders["WalletConnect"] = "WalletConnect";
    // backwards compatibility
    SupportedProviders["Steakwallet"] = "Omni";
    SupportedProviders["Omni"] = "Omni";
    SupportedProviders["CoinbaseWallet"] = "Coinbase Wallet";
})(SupportedProviders = exports.SupportedProviders || (exports.SupportedProviders = {}));
var WalletTypes;
(function (WalletTypes) {
    WalletTypes["Valora"] = "Valora";
    WalletTypes["MetaMask"] = "MetaMask";
    WalletTypes["WalletConnect"] = "WalletConnect";
    WalletTypes["CeloDance"] = "CeloDance";
    WalletTypes["CeloWallet"] = "CeloWallet";
    WalletTypes["CeloTerminal"] = "CeloTerminal";
    WalletTypes["CeloExtensionWallet"] = "CeloExtensionWallet";
    WalletTypes["Ledger"] = "Ledger";
    WalletTypes["Injected"] = "Injected";
    WalletTypes["PrivateKey"] = "PrivateKey";
    WalletTypes["Unauthenticated"] = "Unauthenticated";
    WalletTypes["CoinbaseWallet"] = "CoinbaseWallet";
})(WalletTypes = exports.WalletTypes || (exports.WalletTypes = {}));
var Priorities;
(function (Priorities) {
    Priorities[Priorities["Default"] = 0] = "Default";
    Priorities[Priorities["Popular"] = 1] = "Popular";
    Priorities[Priorities["Recent"] = 2] = "Recent";
})(Priorities = exports.Priorities || (exports.Priorities = {}));
var Platform;
(function (Platform) {
    Platform["Mobile"] = "Mobile";
    Platform["Desktop"] = "Desktop";
    Platform["Web"] = "Web";
})(Platform = exports.Platform || (exports.Platform = {}));
exports.WalletIds = {
    WalletConnect: '_',
    Valora: 'd01c7758d741b363e637a817a09bcf579feae4db9f5bb16f599fdd1f66e2f974',
    CeloWallet: '36d854b702817e228d5c853c528d7bdb46f4bb041d255f67b82eb47111e5676b',
    CeloDance: 'TODO',
    CeloTerminal: '8f8506b7f191a8ab95a8295fc8ca147aa152b1358bee4283d6ad2468d97e0ca4',
    Omni: 'afbd95522f4041c71dd4f1a065f971fd32372865b416f95a0b1db759ae33f2a7',
};
exports.PROVIDERS = {
    [SupportedProviders.Valora]: {
        name: SupportedProviders.Valora,
        type: WalletTypes.WalletConnect,
        description: 'Connect to Valora, a mobile payments app that works worldwide',
        icon: Icons.Valora,
        canConnect: () => true,
        showInList: () => true,
        listPriority: () => Priorities.Popular,
        installURL: 'https://valoraapp.com/',
        walletConnectId: exports.WalletIds.Valora,
        supportedPlatforms: [Platform.Mobile],
        getLink: (uri, platform = Platform.Mobile) => {
            switch (platform) {
                case Platform.Mobile:
                    return `celo://wallet/wc?uri=${uri}`;
                default:
                    return false;
            }
        },
    },
    [SupportedProviders.WalletConnect]: {
        name: SupportedProviders.WalletConnect,
        type: WalletTypes.WalletConnect,
        description: 'Scan a QR code to connect your wallet',
        icon: Icons.WalletConnect,
        canConnect: () => true,
        showInList: () => true,
        listPriority: () => Priorities.Default,
        supportedPlatforms: [Platform.Mobile],
    },
    [SupportedProviders.Ledger]: {
        name: SupportedProviders.Ledger,
        type: WalletTypes.Ledger,
        description: 'Sync with your Ledger hardware wallet',
        icon: Icons.Ledger,
        canConnect: () => true,
        showInList: () => !react_device_detect_1.isMobile,
        listPriority: () => Priorities.Popular,
    },
    [SupportedProviders.CeloWallet]: {
        name: SupportedProviders.CeloWallet,
        type: WalletTypes.WalletConnect,
        description: 'Connect to Celo Wallet for web or desktop',
        icon: Icons.Celo,
        canConnect: () => true,
        showInList: () => true,
        listPriority: () => Priorities.Default,
        walletConnectId: exports.WalletIds.CeloWallet,
        installURL: 'https://celowallet.app/',
        supportedPlatforms: [Platform.Desktop, Platform.Web],
        getLink: (uri, platform = Platform.Mobile) => {
            switch (platform) {
                case Platform.Desktop:
                    return `celowallet://wc?uri=${encodeURIComponent(uri)}`;
                case Platform.Web:
                    return `https://celowallet.app/wc?uri=${encodeURIComponent(uri)}`;
                default:
                    return false;
            }
        },
    },
    [SupportedProviders.CeloTerminal]: {
        name: SupportedProviders.CeloTerminal,
        type: WalletTypes.WalletConnect,
        description: 'Connect to the Celo Terminal desktop app',
        icon: Icons.CeloTerminal,
        canConnect: () => true,
        showInList: () => !react_device_detect_1.isMobile,
        listPriority: () => Priorities.Default,
        installURL: 'https://celoterminal.com/',
        walletConnectId: exports.WalletIds.CeloTerminal,
        supportedPlatforms: [],
    },
    [SupportedProviders.MetaMask]: {
        name: SupportedProviders.MetaMask,
        type: WalletTypes.MetaMask,
        description: react_device_detect_1.isMobile
            ? (0, ethereum_1.isEthereumFromMetamask)()
                ? 'Connect with MetaMask Mobile App'
                : 'Open MetaMask Mobile App'
            : 'Use the Metamask browser extension. Celo support is limited.',
        icon: Icons.MetaMask,
        canConnect: () => react_device_detect_1.isMobile || (0, ethereum_1.isEthereumFromMetamask)(),
        showInList: () => true,
        listPriority: () => Priorities.Popular,
        installURL: react_device_detect_1.isMobile
            ? 'https://metamask.app.link/dapp/' +
                window.location.href.replace(/^https?:\/\//, '')
            : 'https://metamask.app.link/',
    },
    [SupportedProviders.CeloExtensionWallet]: {
        name: SupportedProviders.CeloExtensionWallet,
        type: WalletTypes.CeloExtensionWallet,
        description: 'Use a wallet from the the Celo chrome extension',
        icon: Icons.ChromeExtensionStore,
        canConnect: () => !!window.celo,
        showInList: () => !react_device_detect_1.isMobile,
        listPriority: () => Priorities.Default,
        installURL: 'https://chrome.google.com/webstore/detail/celoextensionwallet/kkilomkmpmkbdnfelcpgckmpcaemjcdh/related',
    },
    [SupportedProviders.Injected]: {
        name: SupportedProviders.Injected,
        type: WalletTypes.Injected,
        description: 'Connect any Ethereum wallet to Celo',
        icon: Icons.Ethereum,
        canConnect: () => (0, ethereum_1.isEthereumPresent)(),
        showInList: () => (0, ethereum_1.isEthereumFromMetamask)(),
        listPriority: () => Priorities.Default,
    },
    [SupportedProviders.PrivateKey]: {
        name: SupportedProviders.PrivateKey,
        type: WalletTypes.PrivateKey,
        description: 'Enter a plaintext private key to load your account (testing only)',
        icon: Icons.PrivateKey,
        canConnect: () => true,
        showInList: () => process.env.NODE_ENV !== 'production',
        listPriority: () => Priorities.Default,
    },
    [SupportedProviders.CeloDance]: {
        name: SupportedProviders.CeloDance,
        type: WalletTypes.WalletConnect,
        description: 'Send, vote, and earn rewards within one wallet',
        icon: Icons.CeloDance,
        canConnect: () => true,
        showInList: () => true,
        listPriority: () => Priorities.Default,
        installURL: 'https://celo.dance/',
        walletConnectId: exports.WalletIds.CeloDance,
        supportedPlatforms: [Platform.Mobile],
        getLink: (uri, platform = Platform.Mobile) => {
            switch (platform) {
                case Platform.Mobile:
                    return `celo://wallet/wc?uri=${uri}`;
                default:
                    return false;
            }
        },
    },
    [SupportedProviders.Omni]: {
        name: SupportedProviders.Omni,
        description: 'Scan a QR code to connect your wallet',
        type: WalletTypes.WalletConnect,
        icon: Icons.Omni,
        canConnect: () => true,
        showInList: () => true,
        listPriority: () => Priorities.Default,
        installURL: 'https://omniwallet.app.link',
        walletConnectId: exports.WalletIds.Omni,
        supportedPlatforms: [Platform.Mobile],
        getLink: (uri, platform = Platform.Mobile) => {
            switch (platform) {
                case Platform.Mobile:
                    return `omni://wc?uri=${uri}`;
                default:
                    return false;
            }
        },
    },
    [SupportedProviders.CoinbaseWallet]: {
        name: SupportedProviders.CoinbaseWallet,
        type: WalletTypes.CoinbaseWallet,
        description: 'Scan a QR code to connect your wallet',
        icon: Icons.CoinbaseWallet,
        canConnect: () => true,
        showInList: () => true,
        listPriority: () => Priorities.Default,
    },
};
// If adding another chain be sure to add it to the ChainId enum
// and to requiredNamespaces in packages/walletconnect/src/wc-wallet.ts
exports.NetworkNames = {
    Alfajores: 'Alfajores',
    Baklava: 'Baklava',
    Mainnet: 'Mainnet',
    Cannoli: 'Cannoli',
    Localhost: 'Localhost',
};
exports.Alfajores = {
    name: exports.NetworkNames.Alfajores,
    rpcUrl: 'https://alfajores-forno.celo-testnet.org',
    graphQl: 'https://explorer.celo.org/alfajores/graphiql',
    explorer: 'https://explorer.celo.org/alfajores',
    chainId: types_1.ChainId.Alfajores,
};
exports.Baklava = {
    name: exports.NetworkNames.Baklava,
    rpcUrl: 'https://baklava-forno.celo-testnet.org',
    graphQl: 'https://explorer.celo.org/baklava/graphiql',
    explorer: 'https://explorer.celo.org/baklava',
    chainId: types_1.ChainId.Baklava,
};
exports.Cannoli = {
    name: exports.NetworkNames.Cannoli,
    rpcUrl: 'https://forno.cannoli.celo-testnet.org',
    graphQl: 'https://explorer.celo.org/cannoli/graphiql',
    explorer: 'https://explorer.celo.org/cannoli',
    chainId: types_1.ChainId.Cannoli,
};
exports.Mainnet = {
    name: exports.NetworkNames.Mainnet,
    rpcUrl: 'https://forno.celo.org',
    graphQl: 'https://explorer.celo.org/mainnet/graphiql',
    explorer: 'https://explorer.celo.org/mainnet',
    chainId: types_1.ChainId.Mainnet,
};
exports.Localhost = {
    name: exports.NetworkNames.Localhost,
    rpcUrl: 'http://localhost:8545',
    graphQl: '',
    explorer: '',
    chainId: 1337,
};
/**
 * These wallets cannot have their networks
 * updated via react-celo
 */
exports.STATIC_NETWORK_WALLETS = [WalletTypes['CeloExtensionWallet']];
/**
 * Gets the provider associated with a wallet type.
 * @param wallet
 * @returns
 */
const getProviderForWallet = (wallet) => wallet === WalletTypes.Unauthenticated ? null : SupportedProviders[wallet];
exports.getProviderForWallet = getProviderForWallet;
/**
 * Default networks to connect to.
 */
exports.DEFAULT_NETWORKS = [
    exports.Mainnet,
    exports.Alfajores,
    exports.Baklava,
    exports.Cannoli,
    ...(process.env.NODE_ENV !== 'production' ? [exports.Localhost] : []),
];
//# sourceMappingURL=constants.js.map