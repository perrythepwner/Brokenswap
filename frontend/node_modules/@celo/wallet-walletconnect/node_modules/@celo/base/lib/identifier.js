"use strict";
// These functions were moved from the identity SDK because the protocol package
// and @celo/phone-utils both need these core identifier generation functions as well.
// The protocol package cannot depend on the identity SDK as is since this creates
// a non-trivial dependency cycle (currently, if A->B means "A depends on B",
// identity -> phone-number-privacy-common -> contractkit -> protocol).
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIdentifierHash = exports.getPrefixedIdentifier = exports.IdentifierPrefix = exports.PEPPER_SEPARATOR = void 0;
exports.PEPPER_SEPARATOR = '__';
// Docstring is duplicated in @celo/identity; make sure to update in both places.
/**
 * Standardized prefixes for ODIS identifiers.
 *
 * @remarks These prefixes prevent collisions between off-chain identifiers.
 * i.e. if a user's instagram and twitter handles are the same,
 * these prefixes prevent the ODIS identifers from being the same.
 *
 * If you would like to use a prefix that isn't included, please put up a PR
 * adding it to @celo/base (in celo-monorepo/packages/sdk/base/src/identifier.ts)
 * to ensure interoperability with other projects. When adding new prefixes,
 * please use either the full platform name in all lowercase (e.g. 'facebook')
 * or DID methods https://w3c.github.io/did-spec-registries/#did-methods.
 * Make sure to add the expected value for the unit test case in
 * `celo-monorepo/packages/sdk/base/src/identifier.test.ts`,
 * otherwise the test will fail.
 *
 * The NULL prefix is included to allow projects to use the sdk without selecting
 * a predefined prefix or adding their own. Production use of the NULL prefix is
 * discouraged since identifiers will not be interoperable with other projects.
 * Please think carefully before using the NULL prefix.
 */
var IdentifierPrefix;
(function (IdentifierPrefix) {
    IdentifierPrefix["NULL"] = "";
    IdentifierPrefix["PHONE_NUMBER"] = "tel";
    IdentifierPrefix["EMAIL"] = "mailto";
    IdentifierPrefix["TWITTER"] = "twit";
    IdentifierPrefix["FACEBOOK"] = "facebook";
    IdentifierPrefix["INSTAGRAM"] = "instagram";
    IdentifierPrefix["DISCORD"] = "discord";
    IdentifierPrefix["TELEGRAM"] = "telegram";
    IdentifierPrefix["SIGNAL"] = "signal";
})(IdentifierPrefix = exports.IdentifierPrefix || (exports.IdentifierPrefix = {}));
// Docstring is duplicated in @celo/identity; make sure to update in both places.
/**
 * Concatenates the identifierPrefix and plaintextIdentifier with the separator '://'
 *
 * @param plaintextIdentifier Off-chain identifier, ex: phone number, twitter handle, email, etc.
 * @param identifierPrefix Standardized prefix used to prevent collisions between identifiers
 */
var getPrefixedIdentifier = function (plaintextIdentifier, identifierPrefix) { return identifierPrefix + '://' + plaintextIdentifier; };
exports.getPrefixedIdentifier = getPrefixedIdentifier;
/**
 * Helper function for getIdentifierHash in @celo/identity, so that this can
 * be used in protocol tests without dependency issues.
 *
 * @remarks
 * Concatenates the plaintext prefixed identifier with the pepper derived by hashing the unblinded
 * signature returned by ODIS.
 *
 * @param sha3 Hash function (i.e. soliditySha3) to use to generate the identifier
 * @param plaintextIdentifier Off-chain identifier, ex: phone number, twitter handle, email, etc.
 * @param identifierPrefix Standardized prefix used to prevent collisions between identifiers
 * @param pepper Hash of the unblinded signature returned by ODIS
 */
var getIdentifierHash = function (sha3, plaintextIdentifier, identifierPrefix, pepper) {
    // hashing the identifier before appending the pepper to avoid domain collisions where the
    // identifier may contain underscores
    // not doing this for phone numbers to maintain backwards compatibility
    var value = identifierPrefix === IdentifierPrefix.PHONE_NUMBER
        ? (0, exports.getPrefixedIdentifier)(plaintextIdentifier, identifierPrefix) + exports.PEPPER_SEPARATOR + pepper
        : sha3((0, exports.getPrefixedIdentifier)(plaintextIdentifier, identifierPrefix)) +
            exports.PEPPER_SEPARATOR +
            pepper;
    return sha3(value);
};
exports.getIdentifierHash = getIdentifierHash;
//# sourceMappingURL=identifier.js.map