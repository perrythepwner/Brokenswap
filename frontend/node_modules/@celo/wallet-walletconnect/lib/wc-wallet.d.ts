import { CeloTx } from '@celo/connect';
import { RemoteWallet } from '@celo/wallet-remote';
import { SignClientTypes } from '@walletconnect/types';
import { WalletConnectWalletOptions } from './types';
import { WalletConnectSigner } from './wc-signer';
export declare class WalletConnectWallet extends RemoteWallet<WalletConnectSigner> {
    private initOptions;
    private client?;
    private session?;
    private canceler;
    private emitter;
    private chainId;
    private signers;
    on: <E extends SignClientTypes.Event>(event: E, fn: (error: Error | null, data?: SignClientTypes.EventArguments[E] | undefined) => void) => void;
    private emit;
    constructor({ init, projectId, chainId }: WalletConnectWalletOptions);
    hasSession(): Promise<void>;
    private setupListeners;
    /**
     * Pulled out to allow mocking
     */
    private getWalletConnectClient;
    switchToChain(params: {
        chainId: number;
        networkId: number;
        rpcUrl: string;
        nativeCurrency?: {
            name: string;
            symbol: string;
        };
    }): Promise<boolean>;
    /**
     * Get the URI needed for out of band session establishment
     */
    getUri(): Promise<string | void>;
    onSessionProposal: (session: SignClientTypes.EventArguments['session_proposal']) => void;
    onSessionUpdated: (session: SignClientTypes.EventArguments['session_update']) => void;
    onSessionExtended: (session: SignClientTypes.EventArguments['session_extend']) => void;
    onSessionExpire: ({ topic }: {
        topic: string;
    }) => void;
    onSessionDeleted: (session: SignClientTypes.EventArguments['session_delete']) => void;
    onSessionEvent: (event: SignClientTypes.EventArguments['session_event']) => void;
    onSessionPing: (ping: SignClientTypes.EventArguments['session_ping']) => void;
    onSessionRequest: (request: SignClientTypes.EventArguments['session_request']) => void;
    loadAccountSigners(): Promise<Map<string, WalletConnectSigner>>;
    /**
     * Gets the signer based on the 'from' field in the tx body
     * @param txParams Transaction to sign
     * @dev overrides WalletBase.signTransaction
     */
    signTransaction(txParams: CeloTx): Promise<import("@celo/connect").EncodedTransaction>;
    close: () => Promise<void>;
}
//# sourceMappingURL=wc-wallet.d.ts.map