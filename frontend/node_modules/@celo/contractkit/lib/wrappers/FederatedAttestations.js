"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederatedAttestationsWrapper = void 0;
var connect_1 = require("@celo/connect");
var typed_data_constructors_1 = require("@celo/utils/lib/typed-data-constructors");
var BaseWrapper_1 = require("./BaseWrapper");
var FederatedAttestationsWrapper = /** @class */ (function (_super) {
    __extends(FederatedAttestationsWrapper, _super);
    function FederatedAttestationsWrapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @notice Returns identifiers mapped to `account` by signers of `trustedIssuers`
         * @param account Address of the account
         * @param trustedIssuers Array of n issuers whose identifier mappings will be used
         * @return countsPerIssuer Array of number of identifiers returned per issuer
         * @return identifiers Array (length == sum([0])) of identifiers
         * @dev Adds identifier info to the arrays in order of provided trustedIssuers
         * @dev Expectation that only one attestation exists per (identifier, issuer, account)
         */
        _this.lookupIdentifiers = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.lookupIdentifiers);
        /**
         * @notice Returns info about attestations for `identifier` produced by
         *    signers of `trustedIssuers`
         * @param identifier Hash of the identifier
         * @param trustedIssuers Array of n issuers whose attestations will be included
         * @return countsPerIssuer Array of number of attestations returned per issuer
         *          For m (== sum([0])) found attestations:
         * @return accounts Array of m accounts
         * @return signers Array of m signers
         * @return issuedOns Array of m issuedOns
         * @return publishedOns Array of m publishedOns
         * @dev Adds attestation info to the arrays in order of provided trustedIssuers
         * @dev Expectation that only one attestation exists per (identifier, issuer, account)
         */
        _this.lookupAttestations = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.lookupAttestations);
        /**
         * @notice Validates the given attestation and signature
         * @param identifier Hash of the identifier to be attested
         * @param issuer Address of the attestation issuer
         * @param account Address of the account being mapped to the identifier
         * @param issuedOn Time at which the issuer issued the attestation in Unix time
         * @param signer Address of the signer of the attestation
         * @param v The recovery id of the incoming ECDSA signature
         * @param r Output value r of the ECDSA signature
         * @param s Output value s of the ECDSA signature
         * @dev Throws if attestation has been revoked
         * @dev Throws if signer is not an authorized AttestationSigner of the issuer
         */
        _this.validateAttestationSig = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.validateAttestationSig);
        /**
         * @return keccak 256 of abi encoded parameters
         */
        _this.getUniqueAttestationHash = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getUniqueAttestationHash);
        /**
         * @notice Registers an attestation directly from the issuer
         * @param identifier Hash of the identifier to be attested
         * @param account Address of the account being mapped to the identifier
         * @param issuedOn Time at which the issuer issued the attestation in Unix time
         * @dev Attestation signer and issuer in storage is set to msg.sender
         * @dev Throws if an attestation with the same (identifier, issuer, account) already exists
         */
        _this.registerAttestationAsIssuer = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.registerAttestationAsIssuer);
        /**
         * @notice Revokes an attestation
         * @param identifier Hash of the identifier to be revoked
         * @param issuer Address of the attestation issuer
         * @param account Address of the account mapped to the identifier
         * @dev Throws if sender is not the issuer, signer, or account
         */
        _this.revokeAttestation = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.revokeAttestation);
        /**
         * @notice Revokes attestations [identifiers <-> accounts] from issuer
         * @param issuer Address of the issuer of all attestations to be revoked
         * @param identifiers Hash of the identifiers
         * @param accounts Addresses of the accounts mapped to the identifiers
         *   at the same indices
         * @dev Throws if the number of identifiers and accounts is not the same
         * @dev Throws if sender is not the issuer or currently registered signer of issuer
         * @dev Throws if an attestation is not found for identifiers[i] <-> accounts[i]
         */
        _this.batchRevokeAttestations = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.batchRevokeAttestations);
        return _this;
    }
    /**
     * @notice Generates a valid signature and registers the attestation
     * @param identifier Hash of the identifier to be attested
     * @param issuer Address of the attestation issuer
     * @param account Address of the account being mapped to the identifier
     * @param issuedOn Time at which the issuer issued the attestation in Unix time
     * @param signer Address of the signer of the attestation
     * @dev Throws if an attestation with the same (identifier, issuer, account) already exists
     */
    FederatedAttestationsWrapper.prototype.registerAttestation = function (identifier, issuer, account, signer, issuedOn) {
        return __awaiter(this, void 0, void 0, function () {
            var chainId, typedData, sig;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.connection.chainId()];
                    case 1:
                        chainId = _a.sent();
                        typedData = (0, typed_data_constructors_1.registerAttestation)(chainId, this.address, {
                            identifier: identifier,
                            issuer: issuer,
                            account: account,
                            signer: signer,
                            issuedOn: issuedOn,
                        });
                        return [4 /*yield*/, this.connection.signTypedData(signer, typedData)];
                    case 2:
                        sig = _a.sent();
                        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.registerAttestation(identifier, issuer, account, signer, issuedOn, sig.v, sig.r, sig.s))];
                }
            });
        });
    };
    return FederatedAttestationsWrapper;
}(BaseWrapper_1.BaseWrapper));
exports.FederatedAttestationsWrapper = FederatedAttestationsWrapper;
//# sourceMappingURL=FederatedAttestations.js.map