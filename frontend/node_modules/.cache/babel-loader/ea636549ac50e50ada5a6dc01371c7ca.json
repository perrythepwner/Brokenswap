{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pipeToFuture = exports.toFuture = exports.Future = void 0;\n// A Future is like an externally fulfillable (resolvable) promise\n/** @internal */\nvar Future = /** @class */function () {\n  function Future() {\n    var _this = this;\n    this._finished = false;\n    this._error = null;\n    this.promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n    });\n  }\n  Object.defineProperty(Future.prototype, \"finished\", {\n    get: function get() {\n      return this._finished;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Future.prototype, \"error\", {\n    get: function get() {\n      return this._error;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Future.prototype.resolve = function (value) {\n    this._finished = true;\n    this._error = null;\n    this._resolve(value);\n  };\n  Future.prototype.reject = function (error) {\n    this._finished = true;\n    this._error = error;\n    this._reject(error);\n  };\n  Future.prototype.wait = function () {\n    return this.promise;\n  };\n  Future.prototype.asPromise = function () {\n    return this.promise;\n  };\n  return Future;\n}();\nexports.Future = Future;\n/** @internal */\nfunction toFuture(p) {\n  var future = new Future();\n  return pipeToFuture(p, future);\n}\nexports.toFuture = toFuture;\n/** @internal */\nfunction pipeToFuture(p, future) {\n  p.then(future.resolve.bind(future)).catch(future.reject.bind(future));\n  return future;\n}\nexports.pipeToFuture = pipeToFuture;","map":null,"metadata":{},"sourceType":"script"}