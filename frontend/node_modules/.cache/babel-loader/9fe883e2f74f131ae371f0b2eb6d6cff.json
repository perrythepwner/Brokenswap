{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeError = exports.isValidCode = exports.getMessageFromCode = exports.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;\nconst error_constants_1 = require(\"./error-constants\");\nconst classes_1 = require(\"./classes\");\nconst FALLBACK_ERROR_CODE = error_constants_1.errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n};\nexports.JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n */\nfunction getMessageFromCode(code) {\n  let fallbackMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FALLBACK_MESSAGE;\n  if (Number.isInteger(code)) {\n    const codeString = code.toString();\n    if (hasKey(error_constants_1.errorValues, codeString)) {\n      return error_constants_1.errorValues[codeString].message;\n    }\n    if (isJsonRpcServerError(code)) {\n      return exports.JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n  return fallbackMessage;\n}\nexports.getMessageFromCode = getMessageFromCode;\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n */\nfunction isValidCode(code) {\n  if (!Number.isInteger(code)) {\n    return false;\n  }\n  const codeString = code.toString();\n  if (error_constants_1.errorValues[codeString]) {\n    return true;\n  }\n  if (isJsonRpcServerError(code)) {\n    return true;\n  }\n  return false;\n}\nexports.isValidCode = isValidCode;\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n */\nfunction serializeError(error) {\n  let {\n    fallbackError = FALLBACK_ERROR,\n    shouldIncludeStack = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a, _b;\n  if (!fallbackError || !Number.isInteger(fallbackError.code) || typeof fallbackError.message !== 'string') {\n    throw new Error('Must provide fallback error with integer number code and string message.');\n  }\n  if (error instanceof classes_1.EthereumRpcError) {\n    return error.serialize();\n  }\n  const serialized = {};\n  if (error && typeof error === 'object' && !Array.isArray(error) && hasKey(error, 'code') && isValidCode(error.code)) {\n    const _error = error;\n    serialized.code = _error.code;\n    if (_error.message && typeof _error.message === 'string') {\n      serialized.message = _error.message;\n      if (hasKey(_error, 'data')) {\n        serialized.data = _error.data;\n      }\n    } else {\n      serialized.message = getMessageFromCode(serialized.code);\n      serialized.data = {\n        originalError: assignOriginalError(error)\n      };\n    }\n  } else {\n    serialized.code = fallbackError.code;\n    const message = (_a = error) === null || _a === void 0 ? void 0 : _a.message;\n    serialized.message = message && typeof message === 'string' ? message : fallbackError.message;\n    serialized.data = {\n      originalError: assignOriginalError(error)\n    };\n  }\n  const stack = (_b = error) === null || _b === void 0 ? void 0 : _b.stack;\n  if (shouldIncludeStack && error && stack && typeof stack === 'string') {\n    serialized.stack = stack;\n  }\n  return serialized;\n}\nexports.serializeError = serializeError;\n// Internal\nfunction isJsonRpcServerError(code) {\n  return code >= -32099 && code <= -32000;\n}\nfunction assignOriginalError(error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return Object.assign({}, error);\n  }\n  return error;\n}\nfunction hasKey(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}","map":null,"metadata":{},"sourceType":"script"}