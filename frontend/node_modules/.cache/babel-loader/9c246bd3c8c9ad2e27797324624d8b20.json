{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RxWebSocket = exports.ConnectionState = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nvar ConnectionState;\n(function (ConnectionState) {\n  ConnectionState[ConnectionState[\"DISCONNECTED\"] = 0] = \"DISCONNECTED\";\n  ConnectionState[ConnectionState[\"CONNECTING\"] = 1] = \"CONNECTING\";\n  ConnectionState[ConnectionState[\"CONNECTED\"] = 2] = \"CONNECTED\";\n})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));\n/**\n * Rx-ified WebSocket\n */\nclass RxWebSocket {\n  /**\n   * Constructor\n   * @param url WebSocket server URL\n   * @param [WebSocketClass] Custom WebSocket implementation\n   */\n  constructor(url) {\n    let WebSocketClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WebSocket;\n    this.WebSocketClass = WebSocketClass;\n    this.webSocket = null;\n    this.connectionStateSubject = new rxjs_1.BehaviorSubject(ConnectionState.DISCONNECTED);\n    this.incomingDataSubject = new rxjs_1.Subject();\n    this.url = url.replace(/^http/, \"ws\");\n  }\n  /**\n   * Make a websocket connection\n   * @returns an Observable that completes when connected\n   */\n  connect() {\n    if (this.webSocket) {\n      return (0, rxjs_1.throwError)(new Error(\"webSocket object is not null\"));\n    }\n    return new rxjs_1.Observable(obs => {\n      let webSocket;\n      try {\n        this.webSocket = webSocket = new this.WebSocketClass(this.url);\n      } catch (err) {\n        obs.error(err);\n        return;\n      }\n      this.connectionStateSubject.next(ConnectionState.CONNECTING);\n      webSocket.onclose = evt => {\n        this.clearWebSocket();\n        obs.error(new Error(\"websocket error \".concat(evt.code, \": \").concat(evt.reason)));\n        this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n      };\n      webSocket.onopen = _ => {\n        obs.next();\n        obs.complete();\n        this.connectionStateSubject.next(ConnectionState.CONNECTED);\n      };\n      webSocket.onmessage = evt => {\n        this.incomingDataSubject.next(evt.data);\n      };\n    }).pipe((0, operators_1.take)(1));\n  }\n  /**\n   * Disconnect from server\n   */\n  disconnect() {\n    const {\n      webSocket\n    } = this;\n    if (!webSocket) {\n      return;\n    }\n    this.clearWebSocket();\n    this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n    try {\n      webSocket.close();\n    } catch (_a) {}\n  }\n  /**\n   * Emit current connection state and subsequent changes\n   * @returns an Observable for the connection state\n   */\n  get connectionState$() {\n    return this.connectionStateSubject.asObservable();\n  }\n  /**\n   * Emit incoming data from server\n   * @returns an Observable for the data received\n   */\n  get incomingData$() {\n    return this.incomingDataSubject.asObservable();\n  }\n  /**\n   * Emit incoming JSON data from server. non-JSON data are ignored\n   * @returns an Observable for parsed JSON data\n   */\n  get incomingJSONData$() {\n    return this.incomingData$.pipe((0, operators_1.flatMap)(m => {\n      let j;\n      try {\n        j = JSON.parse(m);\n      } catch (err) {\n        return (0, rxjs_1.empty)();\n      }\n      return (0, rxjs_1.of)(j);\n    }));\n  }\n  /**\n   * Send data to server\n   * @param data text to send\n   */\n  sendData(data) {\n    const {\n      webSocket\n    } = this;\n    if (!webSocket) {\n      throw new Error(\"websocket is not connected\");\n    }\n    webSocket.send(data);\n  }\n  clearWebSocket() {\n    const {\n      webSocket\n    } = this;\n    if (!webSocket) {\n      return;\n    }\n    this.webSocket = null;\n    webSocket.onclose = null;\n    webSocket.onerror = null;\n    webSocket.onmessage = null;\n    webSocket.onopen = null;\n  }\n}\nexports.RxWebSocket = RxWebSocket;","map":{"version":3,"names":["Object","defineProperty","exports","value","RxWebSocket","ConnectionState","rxjs_1","require","operators_1","constructor","url","WebSocketClass","arguments","length","undefined","WebSocket","webSocket","connectionStateSubject","BehaviorSubject","DISCONNECTED","incomingDataSubject","Subject","replace","connect","throwError","Error","Observable","obs","err","error","next","CONNECTING","onclose","evt","clearWebSocket","concat","code","reason","onopen","_","complete","CONNECTED","onmessage","data","pipe","take","disconnect","close","_a","connectionState$","asObservable","incomingData$","incomingJSONData$","flatMap","m","j","JSON","parse","empty","of","sendData","send","onerror"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@coinbase/wallet-sdk/dist/connection/RxWebSocket.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RxWebSocket = exports.ConnectionState = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nvar ConnectionState;\n(function (ConnectionState) {\n    ConnectionState[ConnectionState[\"DISCONNECTED\"] = 0] = \"DISCONNECTED\";\n    ConnectionState[ConnectionState[\"CONNECTING\"] = 1] = \"CONNECTING\";\n    ConnectionState[ConnectionState[\"CONNECTED\"] = 2] = \"CONNECTED\";\n})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));\n/**\n * Rx-ified WebSocket\n */\nclass RxWebSocket {\n    /**\n     * Constructor\n     * @param url WebSocket server URL\n     * @param [WebSocketClass] Custom WebSocket implementation\n     */\n    constructor(url, WebSocketClass = WebSocket) {\n        this.WebSocketClass = WebSocketClass;\n        this.webSocket = null;\n        this.connectionStateSubject = new rxjs_1.BehaviorSubject(ConnectionState.DISCONNECTED);\n        this.incomingDataSubject = new rxjs_1.Subject();\n        this.url = url.replace(/^http/, \"ws\");\n    }\n    /**\n     * Make a websocket connection\n     * @returns an Observable that completes when connected\n     */\n    connect() {\n        if (this.webSocket) {\n            return (0, rxjs_1.throwError)(new Error(\"webSocket object is not null\"));\n        }\n        return new rxjs_1.Observable(obs => {\n            let webSocket;\n            try {\n                this.webSocket = webSocket = new this.WebSocketClass(this.url);\n            }\n            catch (err) {\n                obs.error(err);\n                return;\n            }\n            this.connectionStateSubject.next(ConnectionState.CONNECTING);\n            webSocket.onclose = evt => {\n                this.clearWebSocket();\n                obs.error(new Error(`websocket error ${evt.code}: ${evt.reason}`));\n                this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n            };\n            webSocket.onopen = _ => {\n                obs.next();\n                obs.complete();\n                this.connectionStateSubject.next(ConnectionState.CONNECTED);\n            };\n            webSocket.onmessage = evt => {\n                this.incomingDataSubject.next(evt.data);\n            };\n        }).pipe((0, operators_1.take)(1));\n    }\n    /**\n     * Disconnect from server\n     */\n    disconnect() {\n        const { webSocket } = this;\n        if (!webSocket) {\n            return;\n        }\n        this.clearWebSocket();\n        this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n        try {\n            webSocket.close();\n        }\n        catch (_a) { }\n    }\n    /**\n     * Emit current connection state and subsequent changes\n     * @returns an Observable for the connection state\n     */\n    get connectionState$() {\n        return this.connectionStateSubject.asObservable();\n    }\n    /**\n     * Emit incoming data from server\n     * @returns an Observable for the data received\n     */\n    get incomingData$() {\n        return this.incomingDataSubject.asObservable();\n    }\n    /**\n     * Emit incoming JSON data from server. non-JSON data are ignored\n     * @returns an Observable for parsed JSON data\n     */\n    get incomingJSONData$() {\n        return this.incomingData$.pipe((0, operators_1.flatMap)(m => {\n            let j;\n            try {\n                j = JSON.parse(m);\n            }\n            catch (err) {\n                return (0, rxjs_1.empty)();\n            }\n            return (0, rxjs_1.of)(j);\n        }));\n    }\n    /**\n     * Send data to server\n     * @param data text to send\n     */\n    sendData(data) {\n        const { webSocket } = this;\n        if (!webSocket) {\n            throw new Error(\"websocket is not connected\");\n        }\n        webSocket.send(data);\n    }\n    clearWebSocket() {\n        const { webSocket } = this;\n        if (!webSocket) {\n            return;\n        }\n        this.webSocket = null;\n        webSocket.onclose = null;\n        webSocket.onerror = null;\n        webSocket.onmessage = null;\n        webSocket.onopen = null;\n    }\n}\nexports.RxWebSocket = RxWebSocket;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}