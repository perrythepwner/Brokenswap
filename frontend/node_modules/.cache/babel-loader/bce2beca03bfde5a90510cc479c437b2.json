{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCelo, useProvider } from '@celo/react-celo';\nimport { ChainId, currencyEquals, JSBI, Pair, Route, TokenAmount } from '@ubeswap/sdk';\nimport { useMemo } from 'react';\nimport { useUserAllowMoolaWithdrawal } from 'state/user/hooks';\nimport { moolaDuals } from './useMoola';\nconst BIG_NUMBER = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(255));\nexport const useMoolaDirectRoute = (inputCurrency, outputCurrency) => {\n  _s();\n  const library = useProvider();\n  const {\n    network\n  } = useCelo();\n  const chainId = network.chainId;\n  const [allowMoolaWithdrawal] = useUserAllowMoolaWithdrawal();\n  return useMemo(() => {\n    if (chainId === ChainId.BAKLAVA) {\n      return null;\n    }\n    if (!library) {\n      return null;\n    }\n    if (!inputCurrency || !outputCurrency) {\n      return null;\n    }\n    const withdrawalRoutes = moolaDuals.map(dual => dual.map(token => token[chainId]));\n    const depositRoutes = withdrawalRoutes.map(route => route.reverse());\n    const routes = [...depositRoutes, ...(allowMoolaWithdrawal ? withdrawalRoutes : [])];\n    const routeRaw = inputCurrency && outputCurrency && routes.find(_ref => {\n      let [a, b] = _ref;\n      return currencyEquals(inputCurrency, a) && currencyEquals(outputCurrency, b);\n    });\n    if (!routeRaw) {\n      return null;\n    }\n    return new Route([new Pair(new TokenAmount(inputCurrency, BIG_NUMBER), new TokenAmount(outputCurrency, BIG_NUMBER))], inputCurrency, outputCurrency);\n  }, [inputCurrency, outputCurrency, allowMoolaWithdrawal, chainId, library]);\n};\n_s(useMoolaDirectRoute, \"Px8kM+ECzVe7x3RoBkpzohZFqwA=\", false, function () {\n  return [useProvider, useCelo, useUserAllowMoolaWithdrawal];\n});","map":{"version":3,"names":["useCelo","useProvider","ChainId","currencyEquals","JSBI","Pair","Route","TokenAmount","useMemo","useUserAllowMoolaWithdrawal","moolaDuals","BIG_NUMBER","exponentiate","BigInt","useMoolaDirectRoute","inputCurrency","outputCurrency","_s","library","network","chainId","allowMoolaWithdrawal","BAKLAVA","withdrawalRoutes","map","dual","token","depositRoutes","route","reverse","routes","routeRaw","find","_ref","a","b"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/components/swap/routing/moola/useMoolaDirectRoute.ts"],"sourcesContent":["import { useCelo, useProvider } from '@celo/react-celo'\nimport { ChainId, currencyEquals, JSBI, Pair, Route, Token, TokenAmount } from '@ubeswap/sdk'\nimport { useMemo } from 'react'\nimport { useUserAllowMoolaWithdrawal } from 'state/user/hooks'\n\nimport { moolaDuals } from './useMoola'\n\nconst BIG_NUMBER = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(255))\n\nexport const useMoolaDirectRoute = (\n  inputCurrency: Token | null | undefined,\n  outputCurrency: Token | null | undefined\n): Route | null => {\n  const library = useProvider()\n  const { network } = useCelo()\n  const chainId = network.chainId as unknown as ChainId\n  const [allowMoolaWithdrawal] = useUserAllowMoolaWithdrawal()\n\n  return useMemo(() => {\n    if (chainId === ChainId.BAKLAVA) {\n      return null\n    }\n\n    if (!library) {\n      return null\n    }\n\n    if (!inputCurrency || !outputCurrency) {\n      return null\n    }\n\n    const withdrawalRoutes = moolaDuals.map((dual) => dual.map((token) => token[chainId]))\n    const depositRoutes = withdrawalRoutes.map((route) => route.reverse())\n\n    const routes = [...depositRoutes, ...(allowMoolaWithdrawal ? withdrawalRoutes : [])] as const\n\n    const routeRaw =\n      inputCurrency &&\n      outputCurrency &&\n      routes.find(([a, b]) => currencyEquals(inputCurrency, a) && currencyEquals(outputCurrency, b))\n    if (!routeRaw) {\n      return null\n    }\n\n    return new Route(\n      [new Pair(new TokenAmount(inputCurrency, BIG_NUMBER), new TokenAmount(outputCurrency, BIG_NUMBER))],\n      inputCurrency,\n      outputCurrency\n    )\n  }, [inputCurrency, outputCurrency, allowMoolaWithdrawal, chainId, library])\n}\n"],"mappings":";AAAA,SAASA,OAAO,EAAEC,WAAW,QAAQ,kBAAkB;AACvD,SAASC,OAAO,EAAEC,cAAc,EAAEC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAASC,WAAW,QAAQ,cAAc;AAC7F,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,2BAA2B,QAAQ,kBAAkB;AAE9D,SAASC,UAAU,QAAQ,YAAY;AAEvC,MAAMC,UAAU,GAAGP,IAAI,CAACQ,YAAY,CAACR,IAAI,CAACS,MAAM,CAAC,CAAC,CAAC,EAAET,IAAI,CAACS,MAAM,CAAC,GAAG,CAAC,CAAC;AAEtE,OAAO,MAAMC,mBAAmB,GAAGA,CACjCC,aAAuC,EACvCC,cAAwC,KACvB;EAAAC,EAAA;EACjB,MAAMC,OAAO,GAAGjB,WAAW,CAAC,CAAC;EAC7B,MAAM;IAAEkB;EAAQ,CAAC,GAAGnB,OAAO,CAAC,CAAC;EAC7B,MAAMoB,OAAO,GAAGD,OAAO,CAACC,OAA6B;EACrD,MAAM,CAACC,oBAAoB,CAAC,GAAGZ,2BAA2B,CAAC,CAAC;EAE5D,OAAOD,OAAO,CAAC,MAAM;IACnB,IAAIY,OAAO,KAAKlB,OAAO,CAACoB,OAAO,EAAE;MAC/B,OAAO,IAAI;IACb;IAEA,IAAI,CAACJ,OAAO,EAAE;MACZ,OAAO,IAAI;IACb;IAEA,IAAI,CAACH,aAAa,IAAI,CAACC,cAAc,EAAE;MACrC,OAAO,IAAI;IACb;IAEA,MAAMO,gBAAgB,GAAGb,UAAU,CAACc,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACD,GAAG,CAAEE,KAAK,IAAKA,KAAK,CAACN,OAAO,CAAC,CAAC,CAAC;IACtF,MAAMO,aAAa,GAAGJ,gBAAgB,CAACC,GAAG,CAAEI,KAAK,IAAKA,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC;IAEtE,MAAMC,MAAM,GAAG,CAAC,GAAGH,aAAa,EAAE,IAAIN,oBAAoB,GAAGE,gBAAgB,GAAG,EAAE,CAAC,CAAU;IAE7F,MAAMQ,QAAQ,GACZhB,aAAa,IACbC,cAAc,IACdc,MAAM,CAACE,IAAI,CAACC,IAAA;MAAA,IAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAAF,IAAA;MAAA,OAAK9B,cAAc,CAACY,aAAa,EAAEmB,CAAC,CAAC,IAAI/B,cAAc,CAACa,cAAc,EAAEmB,CAAC,CAAC;IAAA,EAAC;IAChG,IAAI,CAACJ,QAAQ,EAAE;MACb,OAAO,IAAI;IACb;IAEA,OAAO,IAAIzB,KAAK,CACd,CAAC,IAAID,IAAI,CAAC,IAAIE,WAAW,CAACQ,aAAa,EAAEJ,UAAU,CAAC,EAAE,IAAIJ,WAAW,CAACS,cAAc,EAAEL,UAAU,CAAC,CAAC,CAAC,EACnGI,aAAa,EACbC,cACF,CAAC;EACH,CAAC,EAAE,CAACD,aAAa,EAAEC,cAAc,EAAEK,oBAAoB,EAAED,OAAO,EAAEF,OAAO,CAAC,CAAC;AAC7E,CAAC;AAAAD,EAAA,CAzCYH,mBAAmB;EAAA,QAIdb,WAAW,EACPD,OAAO,EAEIS,2BAA2B;AAAA"},"metadata":{},"sourceType":"module"}