{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.DIGEST_LENGTH = 32;\nexports.BLOCK_SIZE = 64;\n/**\n * SHA2-256 cryptographic hash algorithm.\n */\nvar SHA256 = /** @class */function () {\n  function SHA256() {\n    /** Length of hash output */\n    this.digestLength = exports.DIGEST_LENGTH;\n    /** Block size */\n    this.blockSize = exports.BLOCK_SIZE;\n    // Note: Int32Array is used instead of Uint32Array for performance reasons.\n    this._state = new Int32Array(8); // hash state\n    this._temp = new Int32Array(64); // temporary state\n    this._buffer = new Uint8Array(128); // buffer for data to hash\n    this._bufferLength = 0; // number of bytes in buffer\n    this._bytesHashed = 0; // number of total bytes hashed\n    this._finished = false; // indicates whether the hash was finalized\n    this.reset();\n  }\n  SHA256.prototype._initState = function () {\n    this._state[0] = 0x6a09e667;\n    this._state[1] = 0xbb67ae85;\n    this._state[2] = 0x3c6ef372;\n    this._state[3] = 0xa54ff53a;\n    this._state[4] = 0x510e527f;\n    this._state[5] = 0x9b05688c;\n    this._state[6] = 0x1f83d9ab;\n    this._state[7] = 0x5be0cd19;\n  };\n  /**\n   * Resets hash state making it possible\n   * to re-use this instance to hash other data.\n   */\n  SHA256.prototype.reset = function () {\n    this._initState();\n    this._bufferLength = 0;\n    this._bytesHashed = 0;\n    this._finished = false;\n    return this;\n  };\n  /**\n   * Cleans internal buffers and resets hash state.\n   */\n  SHA256.prototype.clean = function () {\n    wipe_1.wipe(this._buffer);\n    wipe_1.wipe(this._temp);\n    this.reset();\n  };\n  /**\n   * Updates hash state with the given data.\n   *\n   * Throws error when trying to update already finalized hash:\n   * instance must be reset to update it again.\n   */\n  SHA256.prototype.update = function (data, dataLength) {\n    if (dataLength === void 0) {\n      dataLength = data.length;\n    }\n    if (this._finished) {\n      throw new Error(\"SHA256: can't update because hash was finished.\");\n    }\n    var dataPos = 0;\n    this._bytesHashed += dataLength;\n    if (this._bufferLength > 0) {\n      while (this._bufferLength < this.blockSize && dataLength > 0) {\n        this._buffer[this._bufferLength++] = data[dataPos++];\n        dataLength--;\n      }\n      if (this._bufferLength === this.blockSize) {\n        hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);\n        this._bufferLength = 0;\n      }\n    }\n    if (dataLength >= this.blockSize) {\n      dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);\n      dataLength %= this.blockSize;\n    }\n    while (dataLength > 0) {\n      this._buffer[this._bufferLength++] = data[dataPos++];\n      dataLength--;\n    }\n    return this;\n  };\n  /**\n   * Finalizes hash state and puts hash into out.\n   * If hash was already finalized, puts the same value.\n   */\n  SHA256.prototype.finish = function (out) {\n    if (!this._finished) {\n      var bytesHashed = this._bytesHashed;\n      var left = this._bufferLength;\n      var bitLenHi = bytesHashed / 0x20000000 | 0;\n      var bitLenLo = bytesHashed << 3;\n      var padLength = bytesHashed % 64 < 56 ? 64 : 128;\n      this._buffer[left] = 0x80;\n      for (var i = left + 1; i < padLength - 8; i++) {\n        this._buffer[i] = 0;\n      }\n      binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n      binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n      hashBlocks(this._temp, this._state, this._buffer, 0, padLength);\n      this._finished = true;\n    }\n    for (var i = 0; i < this.digestLength / 4; i++) {\n      binary_1.writeUint32BE(this._state[i], out, i * 4);\n    }\n    return this;\n  };\n  /**\n   * Returns the final hash digest.\n   */\n  SHA256.prototype.digest = function () {\n    var out = new Uint8Array(this.digestLength);\n    this.finish(out);\n    return out;\n  };\n  /**\n   * Function useful for HMAC/PBKDF2 optimization.\n   * Returns hash state to be used with restoreState().\n   * Only chain value is saved, not buffers or other\n   * state variables.\n   */\n  SHA256.prototype.saveState = function () {\n    if (this._finished) {\n      throw new Error(\"SHA256: cannot save finished state\");\n    }\n    return {\n      state: new Int32Array(this._state),\n      buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n      bufferLength: this._bufferLength,\n      bytesHashed: this._bytesHashed\n    };\n  };\n  /**\n   * Function useful for HMAC/PBKDF2 optimization.\n   * Restores state saved by saveState() and sets bytesHashed\n   * to the given value.\n   */\n  SHA256.prototype.restoreState = function (savedState) {\n    this._state.set(savedState.state);\n    this._bufferLength = savedState.bufferLength;\n    if (savedState.buffer) {\n      this._buffer.set(savedState.buffer);\n    }\n    this._bytesHashed = savedState.bytesHashed;\n    this._finished = false;\n    return this;\n  };\n  /**\n   * Cleans state returned by saveState().\n   */\n  SHA256.prototype.cleanSavedState = function (savedState) {\n    wipe_1.wipe(savedState.state);\n    if (savedState.buffer) {\n      wipe_1.wipe(savedState.buffer);\n    }\n    savedState.bufferLength = 0;\n    savedState.bytesHashed = 0;\n  };\n  return SHA256;\n}();\nexports.SHA256 = SHA256;\n// Constants\nvar K = new Int32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);\nfunction hashBlocks(w, v, p, pos, len) {\n  while (len >= 64) {\n    var a = v[0];\n    var b = v[1];\n    var c = v[2];\n    var d = v[3];\n    var e = v[4];\n    var f = v[5];\n    var g = v[6];\n    var h = v[7];\n    for (var i = 0; i < 16; i++) {\n      var j = pos + i * 4;\n      w[i] = binary_1.readUint32BE(p, j);\n    }\n    for (var i = 16; i < 64; i++) {\n      var u = w[i - 2];\n      var t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;\n      u = w[i - 15];\n      var t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;\n      w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n    }\n    for (var i = 0; i < 64; i++) {\n      var t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;\n      var t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;\n      h = g;\n      g = f;\n      f = e;\n      e = d + t1 | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = t1 + t2 | 0;\n    }\n    v[0] += a;\n    v[1] += b;\n    v[2] += c;\n    v[3] += d;\n    v[4] += e;\n    v[5] += f;\n    v[6] += g;\n    v[7] += h;\n    pos += 64;\n    len -= 64;\n  }\n  return pos;\n}\nfunction hash(data) {\n  var h = new SHA256();\n  h.update(data);\n  var digest = h.digest();\n  h.clean();\n  return digest;\n}\nexports.hash = hash;","map":{"version":3,"sources":["../sha256.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nexports.DIGEST_LENGTH = 32;\nexports.BLOCK_SIZE = 64;\n/**\n * SHA2-256 cryptographic hash algorithm.\n */\nvar SHA256 = /** @class */ (function () {\n    function SHA256() {\n        /** Length of hash output */\n        this.digestLength = exports.DIGEST_LENGTH;\n        /** Block size */\n        this.blockSize = exports.BLOCK_SIZE;\n        // Note: Int32Array is used instead of Uint32Array for performance reasons.\n        this._state = new Int32Array(8); // hash state\n        this._temp = new Int32Array(64); // temporary state\n        this._buffer = new Uint8Array(128); // buffer for data to hash\n        this._bufferLength = 0; // number of bytes in buffer\n        this._bytesHashed = 0; // number of total bytes hashed\n        this._finished = false; // indicates whether the hash was finalized\n        this.reset();\n    }\n    SHA256.prototype._initState = function () {\n        this._state[0] = 0x6a09e667;\n        this._state[1] = 0xbb67ae85;\n        this._state[2] = 0x3c6ef372;\n        this._state[3] = 0xa54ff53a;\n        this._state[4] = 0x510e527f;\n        this._state[5] = 0x9b05688c;\n        this._state[6] = 0x1f83d9ab;\n        this._state[7] = 0x5be0cd19;\n    };\n    /**\n     * Resets hash state making it possible\n     * to re-use this instance to hash other data.\n     */\n    SHA256.prototype.reset = function () {\n        this._initState();\n        this._bufferLength = 0;\n        this._bytesHashed = 0;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans internal buffers and resets hash state.\n     */\n    SHA256.prototype.clean = function () {\n        wipe_1.wipe(this._buffer);\n        wipe_1.wipe(this._temp);\n        this.reset();\n    };\n    /**\n     * Updates hash state with the given data.\n     *\n     * Throws error when trying to update already finalized hash:\n     * instance must be reset to update it again.\n     */\n    SHA256.prototype.update = function (data, dataLength) {\n        if (dataLength === void 0) { dataLength = data.length; }\n        if (this._finished) {\n            throw new Error(\"SHA256: can't update because hash was finished.\");\n        }\n        var dataPos = 0;\n        this._bytesHashed += dataLength;\n        if (this._bufferLength > 0) {\n            while (this._bufferLength < this.blockSize && dataLength > 0) {\n                this._buffer[this._bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this._bufferLength === this.blockSize) {\n                hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);\n                this._bufferLength = 0;\n            }\n        }\n        if (dataLength >= this.blockSize) {\n            dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);\n            dataLength %= this.blockSize;\n        }\n        while (dataLength > 0) {\n            this._buffer[this._bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    };\n    /**\n     * Finalizes hash state and puts hash into out.\n     * If hash was already finalized, puts the same value.\n     */\n    SHA256.prototype.finish = function (out) {\n        if (!this._finished) {\n            var bytesHashed = this._bytesHashed;\n            var left = this._bufferLength;\n            var bitLenHi = (bytesHashed / 0x20000000) | 0;\n            var bitLenLo = bytesHashed << 3;\n            var padLength = (bytesHashed % 64 < 56) ? 64 : 128;\n            this._buffer[left] = 0x80;\n            for (var i = left + 1; i < padLength - 8; i++) {\n                this._buffer[i] = 0;\n            }\n            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n            hashBlocks(this._temp, this._state, this._buffer, 0, padLength);\n            this._finished = true;\n        }\n        for (var i = 0; i < this.digestLength / 4; i++) {\n            binary_1.writeUint32BE(this._state[i], out, i * 4);\n        }\n        return this;\n    };\n    /**\n     * Returns the final hash digest.\n     */\n    SHA256.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization.\n     * Returns hash state to be used with restoreState().\n     * Only chain value is saved, not buffers or other\n     * state variables.\n     */\n    SHA256.prototype.saveState = function () {\n        if (this._finished) {\n            throw new Error(\"SHA256: cannot save finished state\");\n        }\n        return {\n            state: new Int32Array(this._state),\n            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n            bufferLength: this._bufferLength,\n            bytesHashed: this._bytesHashed\n        };\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization.\n     * Restores state saved by saveState() and sets bytesHashed\n     * to the given value.\n     */\n    SHA256.prototype.restoreState = function (savedState) {\n        this._state.set(savedState.state);\n        this._bufferLength = savedState.bufferLength;\n        if (savedState.buffer) {\n            this._buffer.set(savedState.buffer);\n        }\n        this._bytesHashed = savedState.bytesHashed;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans state returned by saveState().\n     */\n    SHA256.prototype.cleanSavedState = function (savedState) {\n        wipe_1.wipe(savedState.state);\n        if (savedState.buffer) {\n            wipe_1.wipe(savedState.buffer);\n        }\n        savedState.bufferLength = 0;\n        savedState.bytesHashed = 0;\n    };\n    return SHA256;\n}());\nexports.SHA256 = SHA256;\n// Constants\nvar K = new Int32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\nfunction hashBlocks(w, v, p, pos, len) {\n    while (len >= 64) {\n        var a = v[0];\n        var b = v[1];\n        var c = v[2];\n        var d = v[3];\n        var e = v[4];\n        var f = v[5];\n        var g = v[6];\n        var h = v[7];\n        for (var i = 0; i < 16; i++) {\n            var j = pos + i * 4;\n            w[i] = binary_1.readUint32BE(p, j);\n        }\n        for (var i = 16; i < 64; i++) {\n            var u = w[i - 2];\n            var t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);\n            u = w[i - 15];\n            var t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);\n            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n        }\n        for (var i = 0; i < 64; i++) {\n            var t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^\n                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +\n                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n            var t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^\n                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) | 0;\n        }\n        v[0] += a;\n        v[1] += b;\n        v[2] += c;\n        v[3] += d;\n        v[4] += e;\n        v[5] += f;\n        v[6] += g;\n        v[7] += h;\n        pos += 64;\n        len -= 64;\n    }\n    return pos;\n}\nfunction hash(data) {\n    var h = new SHA256();\n    h.update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hash = hash;\n//# sourceMappingURL=sha256.js.map"]},"metadata":{},"sourceType":"script"}