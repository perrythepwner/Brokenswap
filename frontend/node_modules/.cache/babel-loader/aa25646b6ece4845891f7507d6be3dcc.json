{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from \"react\";\nimport { equal } from \"@wry/equality\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nexport function useFragment(options) {\n  var cache = useApolloClient().cache;\n  var fragment = options.fragment,\n    fragmentName = options.fragmentName,\n    from = options.from,\n    _a = options.optimistic,\n    optimistic = _a === void 0 ? true : _a,\n    rest = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n  var diffOptions = __assign(__assign({}, rest), {\n    returnPartialData: true,\n    id: typeof from === \"string\" ? from : cache.identify(from),\n    query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n    optimistic: optimistic\n  });\n  var resultRef = React.useRef();\n  var latestDiff = cache.diff(diffOptions);\n  var getSnapshot = function getSnapshot() {\n    var latestDiffToResult = diffToResult(latestDiff);\n    return resultRef.current && equal(resultRef.current.data, latestDiffToResult.data) ? resultRef.current : resultRef.current = latestDiffToResult;\n  };\n  return useSyncExternalStore(function (forceUpdate) {\n    var lastTimeout = 0;\n    var unsubcribe = cache.watch(__assign(__assign({}, diffOptions), {\n      immediate: true,\n      callback: function callback(diff) {\n        if (!equal(diff, latestDiff)) {\n          resultRef.current = diffToResult(latestDiff = diff);\n          lastTimeout = setTimeout(forceUpdate);\n        }\n      }\n    }));\n    return function () {\n      unsubcribe();\n      clearTimeout(lastTimeout);\n    };\n  }, getSnapshot, getSnapshot);\n}\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n  return result;\n}","map":{"version":3,"sources":["../../../src/react/hooks/useFragment.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,KAAK,QAAQ,eAAe;AAGrC,SAAS,cAAc,QAAQ,0BAA0B;AAQzD,SAAS,eAAe,QAAQ,sBAAsB;AACtD,SAAS,oBAAoB,QAAQ,2BAA2B;AA8BhE,OAAM,SAAU,WAAW,CACzB,OAAyC,EAAA;EAEjC,IAAA,KAAK,GAAK,eAAe,CAAA,CAAE,CAAA,KAAtB;EAEL,IAAA,QAAQ,GAAqD,OAAO,CAAA,QAA5D;IAAE,YAAY,GAAuC,OAAO,CAAA,YAA9C;IAAE,IAAI,GAAiC,OAAO,CAAA,IAAxC;IAAE,EAAA,GAA+B,OAAO,CAAA,UAArB;IAAjB,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAA,EAAA;IAAK,IAAI,GAAA,MAAA,CAAK,OAAO,EAAtE,CAAA,UAAA,EAAA,cAAA,EAAA,MAAA,EAAA,YAAA,CAA4D,CAAF;EAEhE,IAAM,WAAW,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACZ,IAAI,CAAA,EAAA;IACP,iBAAiB,EAAE,IAAI;IACvB,EAAE,EAAE,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;IAC1D,KAAK,EAAE,KAAK,CAAC,gBAAgB,CAAC,CAAC,QAAQ,EAAE,YAAY,CAAC;IACtD,UAAU,EAAA;EAAA,CAAA,CACX;EAED,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAA,CAA4B;EAC1D,IAAI,UAAU,GAAG,KAAK,CAAC,IAAI,CAAQ,WAAW,CAAC;EAG/C,IAAM,WAAW,GAAG,SAAd,WAAW,CAAA,EAAG;IAClB,IAAM,kBAAkB,GAAG,YAAY,CAAC,UAAU,CAAC;IACnD,OAAO,SAAS,CAAC,OAAO,IACtB,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,kBAAkB,CAAC,IAAI,CAAC,GACpD,SAAS,CAAC,OAAO,GAChB,SAAS,CAAC,OAAO,GAAG,kBAAmB;EAC9C,CAAC;EAED,OAAO,oBAAoB,CACzB,UAAC,WAAW,EAAA;IACV,IAAI,WAAW,GAAG,CAAC;IACnB,IAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACzB,WAAW,CAAA,EAAA;MACd,SAAS,EAAE,IAAI;MACf,QAAQ,EAAA,SAAA,SAAC,IAAI,EAAA;QACX,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE;UAC5B,SAAS,CAAC,OAAO,GAAG,YAAY,CAAE,UAAU,GAAG,IAAK,CAAC;UACrD,WAAW,GAAG,UAAU,CAAC,WAAW,CAAQ;QAC7C;MACH;IAAC,CAAA,CAAA,CACD;IACF,OAAO,YAAA;MACL,UAAU,CAAA,CAAE;MACZ,YAAY,CAAC,WAAW,CAAC;IAC3B,CAAC;EACH,CAAC,EACD,WAAW,EACX,WAAW,CACZ;AACH;AAEA,SAAS,YAAY,CACnB,IAA6B,EAAA;EAE7B,IAAM,MAAM,GAAG;IACb,IAAI,EAAE,IAAI,CAAC,MAAO;IAClB,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC;GACU;EAE7B,IAAI,IAAI,CAAC,OAAO,EAAE;IAChB,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,KAAK,EAAA;MAAK,OAAA,KAAK,CAAC,OAAO;IAAb,CAAa,CAAC,CAAC;EAC5E;EAED,OAAO,MAAM;AACf","sourcesContent":["import * as React from \"react\";\nimport { equal } from \"@wry/equality\";\n\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport type {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache/index.js\";\n\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { OperationVariables } from \"../../core/index.js\";\nimport type { NoInfer } from \"../types/types.js\";\n\nexport interface UseFragmentOptions<TData, TVars>\n  extends Omit<\n      Cache.DiffOptions<NoInfer<TData>, NoInfer<TVars>>,\n      \"id\" | \"query\" | \"optimistic\" | \"previousResult\" | \"returnPartialData\"\n    >,\n    Omit<\n      Cache.ReadFragmentOptions<TData, TVars>,\n      \"id\" | \"variables\" | \"returnPartialData\"\n    > {\n  from: StoreObject | Reference | string;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n}\n\nexport type UseFragmentResult<TData> =\n  | {\n      data: TData;\n      complete: true;\n      missing?: never;\n    }\n  | {\n      data: DeepPartial<TData>;\n      complete: false;\n      missing?: MissingTree;\n    };\n\nexport function useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  const { cache } = useApolloClient();\n\n  const { fragment, fragmentName, from, optimistic = true, ...rest } = options;\n\n  const diffOptions: Cache.DiffOptions<TData, TVars> = {\n    ...rest,\n    returnPartialData: true,\n    id: typeof from === \"string\" ? from : cache.identify(from),\n    query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n    optimistic,\n  };\n\n  const resultRef = React.useRef<UseFragmentResult<TData>>();\n  let latestDiff = cache.diff<TData>(diffOptions);\n\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = () => {\n    const latestDiffToResult = diffToResult(latestDiff);\n    return resultRef.current &&\n      equal(resultRef.current.data, latestDiffToResult.data)\n      ? resultRef.current\n      : (resultRef.current = latestDiffToResult);\n  };\n\n  return useSyncExternalStore(\n    (forceUpdate) => {\n      let lastTimeout = 0;\n      const unsubcribe = cache.watch({\n        ...diffOptions,\n        immediate: true,\n        callback(diff) {\n          if (!equal(diff, latestDiff)) {\n            resultRef.current = diffToResult((latestDiff = diff));\n            lastTimeout = setTimeout(forceUpdate) as any;\n          }\n        },\n      });\n      return () => {\n        unsubcribe();\n        clearTimeout(lastTimeout);\n      };\n    },\n    getSnapshot,\n    getSnapshot\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>\n): UseFragmentResult<TData> {\n  const result = {\n    data: diff.result!,\n    complete: !!diff.complete,\n  } as UseFragmentResult<TData>;\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map((error) => error.missing));\n  }\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}