{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseBlockTracker = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst sec = 1000;\nconst calculateSum = (accumulator, currentValue) => accumulator + currentValue;\nconst blockTrackerEvents = ['sync', 'latest'];\nclass BaseBlockTracker extends safe_event_emitter_1.default {\n  constructor(opts) {\n    super();\n    // config\n    this._blockResetDuration = opts.blockResetDuration || 20 * sec;\n    // state\n    this._currentBlock = null;\n    this._isRunning = false;\n    // bind functions for internal use\n    this._onNewListener = this._onNewListener.bind(this);\n    this._onRemoveListener = this._onRemoveListener.bind(this);\n    this._resetCurrentBlock = this._resetCurrentBlock.bind(this);\n    // listen for handler changes\n    this._setupInternalEvents();\n  }\n  destroy() {\n    var _superprop_getRemoveAllListeners = () => super.removeAllListeners,\n      _this = this;\n    return _asyncToGenerator(function* () {\n      _this._cancelBlockResetTimeout();\n      yield _this._maybeEnd();\n      _superprop_getRemoveAllListeners().call(_this);\n    })();\n  }\n  isRunning() {\n    return this._isRunning;\n  }\n  getCurrentBlock() {\n    return this._currentBlock;\n  }\n  getLatestBlock() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // return if available\n      if (_this2._currentBlock) {\n        return _this2._currentBlock;\n      }\n      // wait for a new latest block\n      const latestBlock = yield new Promise(resolve => _this2.once('latest', resolve));\n      // return newly set current block\n      return latestBlock;\n    })();\n  }\n  // dont allow module consumer to remove our internal event listeners\n  removeAllListeners(eventName) {\n    // perform default behavior, preserve fn arity\n    if (eventName) {\n      super.removeAllListeners(eventName);\n    } else {\n      super.removeAllListeners();\n    }\n    // re-add internal events\n    this._setupInternalEvents();\n    // trigger stop check just in case\n    this._onRemoveListener();\n    return this;\n  }\n  _setupInternalEvents() {\n    // first remove listeners for idempotence\n    this.removeListener('newListener', this._onNewListener);\n    this.removeListener('removeListener', this._onRemoveListener);\n    // then add them\n    this.on('newListener', this._onNewListener);\n    this.on('removeListener', this._onRemoveListener);\n  }\n  _onNewListener(eventName) {\n    // `newListener` is called *before* the listener is added\n    if (blockTrackerEvents.includes(eventName)) {\n      this._maybeStart();\n    }\n  }\n  _onRemoveListener() {\n    // `removeListener` is called *after* the listener is removed\n    if (this._getBlockTrackerEventCount() > 0) {\n      return;\n    }\n    this._maybeEnd();\n  }\n  _maybeStart() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3._isRunning) {\n        return;\n      }\n      _this3._isRunning = true;\n      // cancel setting latest block to stale\n      _this3._cancelBlockResetTimeout();\n      yield _this3._start();\n      _this3.emit('_started');\n    })();\n  }\n  _maybeEnd() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this4._isRunning) {\n        return;\n      }\n      _this4._isRunning = false;\n      _this4._setupBlockResetTimeout();\n      yield _this4._end();\n      _this4.emit('_ended');\n    })();\n  }\n  _getBlockTrackerEventCount() {\n    return blockTrackerEvents.map(eventName => this.listenerCount(eventName)).reduce(calculateSum);\n  }\n  _newPotentialLatest(newBlock) {\n    const currentBlock = this._currentBlock;\n    // only update if blok number is higher\n    if (currentBlock && hexToInt(newBlock) <= hexToInt(currentBlock)) {\n      return;\n    }\n    this._setCurrentBlock(newBlock);\n  }\n  _setCurrentBlock(newBlock) {\n    const oldBlock = this._currentBlock;\n    this._currentBlock = newBlock;\n    this.emit('latest', newBlock);\n    this.emit('sync', {\n      oldBlock,\n      newBlock\n    });\n  }\n  _setupBlockResetTimeout() {\n    // clear any existing timeout\n    this._cancelBlockResetTimeout();\n    // clear latest block when stale\n    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration);\n    // nodejs - dont hold process open\n    if (this._blockResetTimeout.unref) {\n      this._blockResetTimeout.unref();\n    }\n  }\n  _cancelBlockResetTimeout() {\n    if (this._blockResetTimeout) {\n      clearTimeout(this._blockResetTimeout);\n    }\n  }\n  _resetCurrentBlock() {\n    this._currentBlock = null;\n  }\n}\nexports.BaseBlockTracker = BaseBlockTracker;\n/**\n * Converts a number represented as a string in hexadecimal format into a native\n * number.\n *\n * @param hexInt - The hex string.\n * @returns The number.\n */\nfunction hexToInt(hexInt) {\n  return Number.parseInt(hexInt, 16);\n}","map":null,"metadata":{},"sourceType":"script"}