{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListCompositeTreeView = void 0;\nconst arrayComposite_1 = require(\"./arrayComposite\");\nclass ListCompositeTreeView extends arrayComposite_1.ArrayCompositeTreeView {\n  constructor(type, tree) {\n    super(type, tree);\n    this.type = type;\n    this.tree = tree;\n  }\n  /**\n   * Adds one view element at the end of the array and adds 1 to the current Tree length.\n   */\n  push(view) {\n    const length = this.length;\n    if (length >= this.type.limit) {\n      throw Error(\"Error pushing over limit\");\n    }\n    this.type.tree_setLength(this.tree, length + 1);\n    // No need for pre-initialization like in ListBasic.push since ArrayCompositeTreeView.set() doesn't do a get node\n    this.set(length, view);\n  }\n}\nexports.ListCompositeTreeView = ListCompositeTreeView;","map":{"version":3,"sources":["../../src/view/listComposite.ts"],"names":[],"mappings":";;;;;;AAGA,MAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AASA,MAAa,qBAEX,SAAQ,gBAAA,CAAA,sBAAmC,CAAA;EAC3C,WAAA,CAAqB,IAAoC,EAAY,IAAU,EAAA;IAC7E,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;IADE,IAAA,CAAA,IAAI,GAAJ,IAAI;IAA4C,IAAA,CAAA,IAAI,GAAJ,IAAI;EAEzE;EAEA;;AAEG;EACH,IAAI,CAAC,IAAgC,EAAA;IACnC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM;IAC1B,IAAI,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;MAC7B,MAAM,KAAK,CAAC,0BAA0B,CAAC;IACxC;IAED,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,GAAG,CAAC,CAAC;IAC/C;IACA,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC;EACxB;AACD;AApBD,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCompositeTreeView = void 0;\nconst arrayComposite_1 = require(\"./arrayComposite\");\nclass ListCompositeTreeView extends arrayComposite_1.ArrayCompositeTreeView {\n    constructor(type, tree) {\n        super(type, tree);\n        this.type = type;\n        this.tree = tree;\n    }\n    /**\n     * Adds one view element at the end of the array and adds 1 to the current Tree length.\n     */\n    push(view) {\n        const length = this.length;\n        if (length >= this.type.limit) {\n            throw Error(\"Error pushing over limit\");\n        }\n        this.type.tree_setLength(this.tree, length + 1);\n        // No need for pre-initialization like in ListBasic.push since ArrayCompositeTreeView.set() doesn't do a get node\n        this.set(length, view);\n    }\n}\nexports.ListCompositeTreeView = ListCompositeTreeView;\n//# sourceMappingURL=listComposite.js.map"]},"metadata":{},"sourceType":"script"}