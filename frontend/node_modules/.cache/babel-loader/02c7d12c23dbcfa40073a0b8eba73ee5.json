{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCeloState = void 0;\nconst base_1 = require(\"@celo/contractkit/lib/base\");\nconst react_1 = require(\"react\");\nconst connectors_1 = require(\"./connectors\");\nconst constants_1 = require(\"./constants\");\nconst use_is_mounted_1 = require(\"./hooks/use-is-mounted\");\nconst react_celo_reducer_1 = require(\"./react-celo-reducer\");\nconst get_initial_network_1 = require(\"./utils/get-initial-network\");\nconst helpers_1 = require(\"./utils/helpers\");\nconst resurrector_1 = require(\"./utils/resurrector\");\nconst initialState = {\n  connector: new connectors_1.UnauthenticatedConnector(constants_1.Mainnet),\n  connectorInitError: null,\n  manualNetworkMode: false,\n  dapp: {\n    name: 'Celo dApp',\n    description: 'Celo dApp',\n    url: 'https://celo.org',\n    icon: 'https://celo.org/favicon.ico'\n  },\n  walletChainId: null,\n  network: constants_1.Mainnet,\n  networks: constants_1.DEFAULT_NETWORKS,\n  pendingActionCount: 0,\n  address: null,\n  connectionCallback: null,\n  feeCurrency: base_1.CeloContract.GoldToken,\n  theme: null\n};\nfunction useDispatch(dispatch) {\n  const isMountedRef = (0, use_is_mounted_1.useIsMounted)();\n  return (0, react_1.useCallback)(function (type) {\n    if (isMountedRef.current) {\n      dispatch({\n        type,\n        payload: arguments.length <= 1 ? undefined : arguments[1]\n      });\n    }\n  }, [dispatch, isMountedRef]);\n}\nfunction useCeloState(_ref) {\n  let {\n    dapp,\n    network,\n    defaultNetwork,\n    manualNetworkMode,\n    theme,\n    networks,\n    feeCurrency\n  } = _ref;\n  var _a;\n  const stateFromLocalStorage = (0, react_1.useMemo)(() => (0, helpers_1.loadPreviousState)(),\n  // We only want this to run on mount so the deps array is empty.\n  // This is OK because the stateFromLocalStorage is only used to create the initial reducer state\n  /* eslint-disable-next-line */\n  []);\n  const connector = (0, react_1.useMemo)(() => {\n    return (0, resurrector_1.resurrector)(networks, dapp, manualNetworkMode !== null && manualNetworkMode !== void 0 ? manualNetworkMode : initialState.manualNetworkMode);\n    /* eslint-disable-next-line */\n  }, []);\n  const initialNetwork = (0, get_initial_network_1.getInitialNetwork)(networks, defaultNetwork, network, stateFromLocalStorage.networkName);\n  const [state, _dispatch] = (0, react_1.useReducer)(react_celo_reducer_1.celoReactReducer, Object.assign(Object.assign({}, initialState), {\n    manualNetworkMode: manualNetworkMode !== null && manualNetworkMode !== void 0 ? manualNetworkMode : initialState.manualNetworkMode,\n    address: stateFromLocalStorage.address,\n    connector: connector || initialState.connector,\n    network: initialNetwork,\n    feeCurrency: stateFromLocalStorage.feeCurrency || feeCurrency || base_1.CeloContract.GoldToken,\n    networks,\n    theme,\n    dapp: Object.assign(Object.assign({}, dapp), {\n      icon: (_a = dapp.icon) !== null && _a !== void 0 ? _a : \"\".concat(dapp.url, \"/favicon.ico\")\n    })\n  }));\n  const dispatch = useDispatch(_dispatch);\n  return [state, dispatch];\n}\nexports.useCeloState = useCeloState;","map":null,"metadata":{},"sourceType":"script"}