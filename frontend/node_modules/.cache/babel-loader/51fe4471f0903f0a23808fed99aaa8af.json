{"ast":null,"code":"import _asyncToGenerator from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";function wait(ms){return new Promise(resolve=>setTimeout(resolve,ms));}function waitRandom(min,max){return wait(min+Math.round(Math.random()*Math.max(0,max-min)));}/**\n * This error is thrown if the function is cancelled before completing\n */export class CancelledError extends Error{constructor(){super('Cancelled');}}/**\n * Throw this error if the function should retry\n */export class RetryableError extends Error{}/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */export function retry(fn,_ref){let{n,minWait,maxWait}=_ref;let completed=false;let rejectCancelled;const promise=new Promise((resolve,reject)=>{void _asyncToGenerator(function*(){rejectCancelled=reject;// eslint-disable-next-line no-constant-condition\nwhile(true){let result;try{result=yield fn();if(!completed){resolve(result);completed=true;}break;}catch(error){if(completed){break;}if(n<=0||!(error instanceof RetryableError)){reject(error);completed=true;break;}n--;}yield waitRandom(minWait,maxWait);}})();});return{promise,cancel:()=>{if(completed)return;completed=true;rejectCancelled(new CancelledError());}};}","map":{"version":3,"names":["wait","ms","Promise","resolve","setTimeout","waitRandom","min","max","Math","round","random","CancelledError","Error","constructor","RetryableError","retry","fn","_ref","n","minWait","maxWait","completed","rejectCancelled","promise","reject","_asyncToGenerator","result","error","cancel"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/utils/retry.ts"],"sourcesContent":["function wait(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nfunction waitRandom(min: number, max: number): Promise<void> {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)))\n}\n\n/**\n * This error is thrown if the function is cancelled before completing\n */\nexport class CancelledError extends Error {\n  constructor() {\n    super('Cancelled')\n  }\n}\n\n/**\n * Throw this error if the function should retry\n */\nexport class RetryableError extends Error {}\n\n/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */\nexport function retry<T>(\n  fn: () => Promise<T>,\n  { n, minWait, maxWait }: { n: number; minWait: number; maxWait: number }\n): { promise: Promise<T>; cancel: () => void } {\n  let completed = false\n  let rejectCancelled: (error: Error) => void\n  const promise = new Promise<T>((resolve, reject) => {\n    void (async () => {\n      rejectCancelled = reject\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        let result: T\n        try {\n          result = await fn()\n          if (!completed) {\n            resolve(result)\n            completed = true\n          }\n          break\n        } catch (error) {\n          if (completed) {\n            break\n          }\n          if (n <= 0 || !(error instanceof RetryableError)) {\n            reject(error)\n            completed = true\n            break\n          }\n          n--\n        }\n        await waitRandom(minWait, maxWait)\n      }\n    })()\n  })\n  return {\n    promise,\n    cancel: () => {\n      if (completed) return\n      completed = true\n      rejectCancelled(new CancelledError())\n    },\n  }\n}\n"],"mappings":"kLAAA,QAAS,CAAAA,IAAIA,CAACC,EAAU,CAAiB,CACvC,MAAO,IAAI,CAAAC,OAAO,CAAEC,OAAO,EAAKC,UAAU,CAACD,OAAO,CAAEF,EAAE,CAAC,CAAC,CAC1D,CAEA,QAAS,CAAAI,UAAUA,CAACC,GAAW,CAAEC,GAAW,CAAiB,CAC3D,MAAO,CAAAP,IAAI,CAACM,GAAG,CAAGE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGF,IAAI,CAACD,GAAG,CAAC,CAAC,CAAEA,GAAG,CAAGD,GAAG,CAAC,CAAC,CAAC,CACvE,CAEA;AACA;AACA,GACA,MAAO,MAAM,CAAAK,cAAc,QAAS,CAAAC,KAAM,CACxCC,WAAWA,CAAA,CAAG,CACZ,KAAK,CAAC,WAAW,CAAC,CACpB,CACF,CAEA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,cAAc,QAAS,CAAAF,KAAM,EAE1C;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAG,KAAKA,CACnBC,EAAoB,CAAAC,IAAA,CAEyB,IAD7C,CAAEC,CAAC,CAAEC,OAAO,CAAEC,OAAyD,CAAC,CAAAH,IAAA,CAExE,GAAI,CAAAI,SAAS,CAAG,KAAK,CACrB,GAAI,CAAAC,eAAuC,CAC3C,KAAM,CAAAC,OAAO,CAAG,GAAI,CAAArB,OAAO,CAAI,CAACC,OAAO,CAAEqB,MAAM,GAAK,CAClD,IAAK,CAAAC,iBAAA,CAAC,WAAY,CAChBH,eAAe,CAAGE,MAAM,CACxB;AACA,MAAO,IAAI,CAAE,CACX,GAAI,CAAAE,MAAS,CACb,GAAI,CACFA,MAAM,MAAS,CAAAV,EAAE,CAAC,CAAC,CACnB,GAAI,CAACK,SAAS,CAAE,CACdlB,OAAO,CAACuB,MAAM,CAAC,CACfL,SAAS,CAAG,IAAI,CAClB,CACA,MACF,CAAE,MAAOM,KAAK,CAAE,CACd,GAAIN,SAAS,CAAE,CACb,MACF,CACA,GAAIH,CAAC,EAAI,CAAC,EAAI,EAAES,KAAK,WAAY,CAAAb,cAAc,CAAC,CAAE,CAChDU,MAAM,CAACG,KAAK,CAAC,CACbN,SAAS,CAAG,IAAI,CAChB,MACF,CACAH,CAAC,EAAE,CACL,CACA,KAAM,CAAAb,UAAU,CAACc,OAAO,CAAEC,OAAO,CAAC,CACpC,CACF,CAAC,EAAE,CAAC,CACN,CAAC,CAAC,CACF,MAAO,CACLG,OAAO,CACPK,MAAM,CAAEA,CAAA,GAAM,CACZ,GAAIP,SAAS,CAAE,OACfA,SAAS,CAAG,IAAI,CAChBC,eAAe,CAAC,GAAI,CAAAX,cAAc,CAAC,CAAC,CAAC,CACvC,CACF,CAAC,CACH"},"metadata":{},"sourceType":"module"}