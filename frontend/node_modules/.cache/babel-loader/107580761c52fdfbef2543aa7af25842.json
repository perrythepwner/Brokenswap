{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseDappKitRequestDeeplink = exports.parseDappkitResponseDeeplink = exports.serializeDappKitRequestDeeplink = exports.SignTxRequest = exports.produceResponseDeeplink = exports.SignTxResponseSuccess = exports.AccountAuthResponseSuccess = exports.AccountAuthRequest = exports.DappKitResponseStatus = exports.DappKitRequestTypes = exports.DAPPKIT_BASE_HOST = void 0;\nvar querystring_1 = require(\"querystring\");\nvar url_1 = require(\"url\");\nexports.DAPPKIT_BASE_HOST = 'celo://wallet/dappkit';\nvar DappKitRequestTypes;\n(function (DappKitRequestTypes) {\n  DappKitRequestTypes[\"ACCOUNT_ADDRESS\"] = \"account_address\";\n  DappKitRequestTypes[\"SIGN_TX\"] = \"sign_tx\";\n})(DappKitRequestTypes = exports.DappKitRequestTypes || (exports.DappKitRequestTypes = {}));\nvar DappKitResponseStatus;\n(function (DappKitResponseStatus) {\n  DappKitResponseStatus[\"SUCCESS\"] = \"200\";\n  DappKitResponseStatus[\"UNAUTHORIZED\"] = \"401\";\n})(DappKitResponseStatus = exports.DappKitResponseStatus || (exports.DappKitResponseStatus = {}));\nvar AccountAuthRequest = function AccountAuthRequest(meta) {\n  return __assign({\n    type: DappKitRequestTypes.ACCOUNT_ADDRESS\n  }, meta);\n};\nexports.AccountAuthRequest = AccountAuthRequest;\nvar AccountAuthResponseSuccess = function AccountAuthResponseSuccess(address, phoneNumber, pepper) {\n  return {\n    type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n    status: DappKitResponseStatus.SUCCESS,\n    address: address,\n    phoneNumber: phoneNumber,\n    pepper: pepper\n  };\n};\nexports.AccountAuthResponseSuccess = AccountAuthResponseSuccess;\nvar SignTxResponseSuccess = function SignTxResponseSuccess(rawTxs) {\n  return {\n    type: DappKitRequestTypes.SIGN_TX,\n    status: DappKitResponseStatus.SUCCESS,\n    rawTxs: rawTxs\n  };\n};\nexports.SignTxResponseSuccess = SignTxResponseSuccess;\nfunction produceResponseDeeplink(request, response) {\n  var params = {\n    type: response.type,\n    status: response.status,\n    requestId: request.requestId\n  };\n  switch (response.type) {\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      if (response.status === DappKitResponseStatus.SUCCESS) {\n        params.account = response.address;\n        params.phoneNumber = response.phoneNumber;\n      }\n      break;\n    case DappKitRequestTypes.SIGN_TX:\n      if (response.status === DappKitResponseStatus.SUCCESS) {\n        params.rawTxs = response.rawTxs;\n      }\n    default:\n      break;\n  }\n  return request.callback + '?' + (0, querystring_1.stringify)(params);\n}\nexports.produceResponseDeeplink = produceResponseDeeplink;\nvar SignTxRequest = function SignTxRequest(txs, meta) {\n  return __assign({\n    type: DappKitRequestTypes.SIGN_TX,\n    txs: txs.map(function (tx) {\n      return {\n        txData: tx.txData,\n        estimatedGas: tx.estimatedGas,\n        from: tx.from,\n        to: tx.to,\n        nonce: tx.nonce,\n        feeCurrencyAddress: tx.feeCurrencyAddress,\n        value: tx.value\n      };\n    })\n  }, meta);\n};\nexports.SignTxRequest = SignTxRequest;\nfunction assertString(objectName, key, value) {\n  if (value === undefined) {\n    throw new Error(\"Expected \".concat(objectName, \" to contain \").concat(key));\n  }\n  if (typeof value !== 'string') {\n    throw new Error(\"Expected \".concat(objectName, \"[\").concat(key, \"] to be a string, but is \").concat(typeof value));\n  }\n  return;\n}\nfunction serializeDappKitRequestDeeplink(request) {\n  // TODO: Probably use a proper validation library here\n  assertString('request', 'type', request.type);\n  assertString('request', 'requestId', request.requestId);\n  assertString('request', 'callback', request.callback);\n  assertString('request', 'dappName', request.dappName);\n  var params = {\n    type: request.type,\n    requestId: request.requestId,\n    callback: request.callback,\n    dappName: request.dappName\n  };\n  switch (request.type) {\n    case DappKitRequestTypes.SIGN_TX:\n      params = __assign(__assign({}, params), {\n        txs: Buffer.from(JSON.stringify(request.txs), 'utf8').toString('base64')\n      });\n      break;\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      break;\n    default:\n      throw new Error(\"Invalid DappKitRequest type: \".concat(JSON.stringify(request)));\n  }\n  return exports.DAPPKIT_BASE_HOST + '?' + (0, querystring_1.stringify)(params);\n}\nexports.serializeDappKitRequestDeeplink = serializeDappKitRequestDeeplink;\n// TODO: parsing query params yields broad types\n// once interface stabilizes, properly type the parsing\nfunction parseDappkitResponseDeeplink(url) {\n  var rawParams = (0, url_1.parse)(url, true);\n  if (rawParams.query.type === undefined) {\n    throw new Error('Invalid Deeplink: does not contain type:' + url);\n  }\n  if (rawParams.query.requestId === undefined) {\n    throw new Error('Invalid Deeplink: does not contain requestId');\n  }\n  var requestId = rawParams.query.requestId;\n  var address = rawParams.query.account;\n  var phoneNumber = rawParams.query.phoneNumber;\n  switch (rawParams.query.type) {\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      if (rawParams.query.status === DappKitResponseStatus.SUCCESS) {\n        // @ts-ignore\n        return {\n          type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n          status: DappKitResponseStatus.SUCCESS,\n          address: address,\n          phoneNumber: phoneNumber,\n          requestId: requestId\n        };\n      } else {\n        return {\n          type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n          status: DappKitResponseStatus.UNAUTHORIZED,\n          requestId: requestId\n        };\n      }\n    case DappKitRequestTypes.SIGN_TX:\n      if (rawParams.query.status === DappKitResponseStatus.SUCCESS) {\n        var rawTxs = rawParams.query.rawTxs;\n        if (typeof rawTxs === 'string') {\n          rawTxs = [rawTxs];\n        }\n        // @ts-ignore\n        return {\n          type: DappKitRequestTypes.SIGN_TX,\n          status: DappKitResponseStatus.SUCCESS,\n          rawTxs: rawTxs,\n          requestId: requestId\n        };\n      } else {\n        return {\n          type: DappKitRequestTypes.SIGN_TX,\n          status: DappKitResponseStatus.UNAUTHORIZED,\n          requestId: requestId\n        };\n      }\n    default:\n      throw new Error('Invalid Deeplink: does not match defined requests');\n  }\n}\nexports.parseDappkitResponseDeeplink = parseDappkitResponseDeeplink;\nfunction parseDappKitRequestDeeplink(url) {\n  var rawParams = (0, url_1.parse)(url, true);\n  if (rawParams.query.type === undefined) {\n    throw new Error('Invalid Deeplink: does not contain type:' + url);\n  }\n  if (!rawParams.query.dappName || !rawParams.query.callback || !rawParams.query.requestId) {\n    throw new Error(\"Invalid Deeplink: Does not contain meta parameters: \" + url);\n  }\n  var requestMeta = {\n    // @ts-ignore\n    callback: rawParams.query.callback,\n    // @ts-ignore\n    requestId: rawParams.query.requestId,\n    // @ts-ignore\n    dappName: rawParams.query.dappName\n  };\n  switch (rawParams.query.type) {\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      return (0, exports.AccountAuthRequest)(requestMeta);\n      break;\n    case DappKitRequestTypes.SIGN_TX:\n      // @ts-ignore\n      return __assign({\n        type: DappKitRequestTypes.SIGN_TX,\n        // @ts-ignore\n        txs: JSON.parse(Buffer.from(rawParams.query.txs, 'base64').toString('utf8'))\n      }, requestMeta);\n    default:\n      throw new Error('Invalid Deeplink: does not match defined requests');\n  }\n}\nexports.parseDappKitRequestDeeplink = parseDappKitRequestDeeplink;","map":null,"metadata":{},"sourceType":"script"}