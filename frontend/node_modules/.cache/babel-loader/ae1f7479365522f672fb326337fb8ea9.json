{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractKit = exports.MiniContractKit = exports.newKitFromWeb3 = exports.newKitWithApiKey = exports.newKit = void 0;\nvar connect_1 = require(\"@celo/connect\");\nvar wallet_local_1 = require(\"@celo/wallet-local\");\nvar address_registry_1 = require(\"./address-registry\");\nvar celo_tokens_1 = require(\"./celo-tokens\");\nvar mini_contract_cache_1 = require(\"./mini-contract-cache\");\nvar setupForKits_1 = require(\"./setupForKits\");\n/**\n * Creates a new instance of `MiniMiniContractKit` given a nodeUrl\n * @param url CeloBlockchain node url\n * @optional wallet to reuse or add a wallet different than the default (example ledger-wallet)\n * @optional options to pass to the Web3 HttpProvider constructor\n */\nfunction newKit(url, wallet, options) {\n  var web3 = (0, setupForKits_1.getWeb3ForKit)(url, options);\n  return newKitFromWeb3(web3, wallet);\n}\nexports.newKit = newKit;\n/**\n * Creates a new instance of `MiniContractKit` given a nodeUrl and apiKey\n * @param url CeloBlockchain node url\n * @param apiKey to include in the http request header\n * @optional wallet to reuse or add a wallet different than the default (example ledger-wallet)\n */\nfunction newKitWithApiKey(url, apiKey, wallet) {\n  var options = (0, setupForKits_1.setupAPIKey)(apiKey);\n  return newKit(url, wallet, options);\n}\nexports.newKitWithApiKey = newKitWithApiKey;\n/**\n * Creates a new instance of the `MiniContractKit` with a web3 instance\n * @param web3 Web3 instance\n */\nfunction newKitFromWeb3(web3, wallet) {\n  if (wallet === void 0) {\n    wallet = new wallet_local_1.LocalWallet();\n  }\n  (0, setupForKits_1.ensureCurrentProvider)(web3);\n  return new MiniContractKit(new connect_1.Connection(web3, wallet));\n}\nexports.newKitFromWeb3 = newKitFromWeb3;\n/**\n * MiniContractKit provides a core subset of {@link ContractKit}'s functionality\n *\n * @remarks\n *\n * It is recommended to use this over ContractKit for dApps as it is lighter\n *\n * @param connection â€“ an instance of @celo/connect {@link Connection}\n */\nvar MiniContractKit = /** @class */function () {\n  function MiniContractKit(connection) {\n    this.connection = connection;\n    this.registry = new address_registry_1.AddressRegistry(connection);\n    this.contracts = new mini_contract_cache_1.MiniContractCache(connection, this.registry);\n    this.celoTokens = new celo_tokens_1.CeloTokens(this.contracts, this.registry);\n  }\n  MiniContractKit.prototype.getWallet = function () {\n    return this.connection.wallet;\n  };\n  // Like get Total Balance on MiniContractKit but does not include locked celo or pending\n  MiniContractKit.prototype.getTotalBalance = function (address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = [{}];\n            return [4 /*yield*/, this.celoTokens.balancesOf(address)];\n          case 1:\n            return [2 /*return*/, __assign.apply(void 0, _a.concat([_b.sent()]))];\n        }\n      });\n    });\n  };\n  return MiniContractKit;\n}();\nexports.MiniContractKit = MiniContractKit;\n// For easy switching from full contractKit to Mini\nexports.ContractKit = MiniContractKit;","map":null,"metadata":{},"sourceType":"script"}