{"ast":null,"code":"import{useEffect,useRef}from'react';// modified from https://usehooks.com/usePrevious/\nexport default function usePrevious(value){// The ref object is a generic container whose current property is mutable ...\n// ... and can hold any value, similar to an instance property on a class\nconst ref=useRef();// Store current value in ref\nuseEffect(()=>{ref.current=value;},[value]);// Only re-run if value changes\n// Return previous value (happens before update in useEffect above)\nreturn ref.current;}","map":{"version":3,"names":["useEffect","useRef","usePrevious","value","ref","current"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/hooks/usePrevious.ts"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\n// modified from https://usehooks.com/usePrevious/\nexport default function usePrevious<T>(value: T) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef<T>()\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value\n  }, [value]) // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current\n}\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAEzC;AACA,cAAe,SAAS,CAAAC,WAAWA,CAAIC,KAAQ,CAAE,CAC/C;AACA;AACA,KAAM,CAAAC,GAAG,CAAGH,MAAM,CAAI,CAAC,CAEvB;AACAD,SAAS,CAAC,IAAM,CACdI,GAAG,CAACC,OAAO,CAAGF,KAAK,CACrB,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CAAC;AAEZ;AACA,MAAO,CAAAC,GAAG,CAACC,OAAO,CACpB"},"metadata":{},"sourceType":"module"}