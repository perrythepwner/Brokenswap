{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar chains_1 = require(\"./chains\");\nvar hardforks_1 = require(\"./hardforks\");\n/**\n * Common class to access chain and hardfork parameters\n */\nvar Common = /** @class */function () {\n  /**\n   * @constructor\n   * @param chain String ('mainnet') or Number (1) chain\n   * @param hardfork String identifier ('byzantium') for hardfork (optional)\n   * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n   */\n  function Common(chain, hardfork, supportedHardforks) {\n    this._chainParams = this.setChain(chain);\n    this._hardfork = null;\n    this._supportedHardforks = supportedHardforks === undefined ? [] : supportedHardforks;\n    if (hardfork) {\n      this.setHardfork(hardfork);\n    }\n  }\n  /**\n   * Creates a Common object for a custom chain, based on a standard one. It uses all the [[Chain]]\n   * params from [[baseChain]] except the ones overridden in [[customChainParams]].\n   *\n   * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n   * chain params on.\n   * @param customChainParams The custom parameters of the chain.\n   * @param hardfork String identifier ('byzantium') for hardfork (optional)\n   * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n   */\n  Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\n    var standardChainParams = Common._getChainParams(baseChain);\n    return new Common(__assign(__assign({}, standardChainParams), customChainParams), hardfork, supportedHardforks);\n  };\n  Common._getChainParams = function (chain) {\n    if (typeof chain === 'number') {\n      if (chains_1.chains['names'][chain]) {\n        return chains_1.chains[chains_1.chains['names'][chain]];\n      }\n      throw new Error(\"Chain with ID \" + chain + \" not supported\");\n    }\n    if (chains_1.chains[chain]) {\n      return chains_1.chains[chain];\n    }\n    throw new Error(\"Chain with name \" + chain + \" not supported\");\n  };\n  /**\n   * Sets the chain\n   * @param chain String ('mainnet') or Number (1) chain\n   *     representation. Or, a Dictionary of chain parameters for a private network.\n   * @returns The dictionary with parameters set as chain\n   */\n  Common.prototype.setChain = function (chain) {\n    if (typeof chain === 'number' || typeof chain === 'string') {\n      this._chainParams = Common._getChainParams(chain);\n    } else if (typeof chain === 'object') {\n      var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n      for (var _i = 0, required_1 = required; _i < required_1.length; _i++) {\n        var param = required_1[_i];\n        if (chain[param] === undefined) {\n          throw new Error(\"Missing required chain parameter: \" + param);\n        }\n      }\n      this._chainParams = chain;\n    } else {\n      throw new Error('Wrong input format');\n    }\n    return this._chainParams;\n  };\n  /**\n   * Sets the hardfork to get params for\n   * @param hardfork String identifier ('byzantium')\n   */\n  Common.prototype.setHardfork = function (hardfork) {\n    if (!this._isSupportedHardfork(hardfork)) {\n      throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n    }\n    var changed = false;\n    for (var _i = 0, hardforkChanges_1 = hardforks_1.hardforks; _i < hardforkChanges_1.length; _i++) {\n      var hfChanges = hardforkChanges_1[_i];\n      if (hfChanges[0] === hardfork) {\n        this._hardfork = hardfork;\n        changed = true;\n      }\n    }\n    if (!changed) {\n      throw new Error(\"Hardfork with name \" + hardfork + \" not supported\");\n    }\n  };\n  /**\n   * Internal helper function to choose between hardfork set and hardfork provided as param\n   * @param hardfork Hardfork given to function as a parameter\n   * @returns Hardfork chosen to be used\n   */\n  Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\n    onlySupported = onlySupported === undefined ? true : onlySupported;\n    if (!hardfork) {\n      if (!this._hardfork) {\n        throw new Error('Method called with neither a hardfork set nor provided by param');\n      } else {\n        hardfork = this._hardfork;\n      }\n    } else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n      throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n    }\n    return hardfork;\n  };\n  /**\n   * Internal helper function, returns the params for the given hardfork for the chain set\n   * @param hardfork Hardfork name\n   * @returns Dictionary with hardfork params\n   */\n  Common.prototype._getHardfork = function (hardfork) {\n    var hfs = this.hardforks();\n    for (var _i = 0, hfs_1 = hfs; _i < hfs_1.length; _i++) {\n      var hf = hfs_1[_i];\n      if (hf['name'] === hardfork) return hf;\n    }\n    throw new Error(\"Hardfork \" + hardfork + \" not defined for chain \" + this.chainName());\n  };\n  /**\n   * Internal helper function to check if a hardfork is set to be supported by the library\n   * @param hardfork Hardfork name\n   * @returns True if hardfork is supported\n   */\n  Common.prototype._isSupportedHardfork = function (hardfork) {\n    if (this._supportedHardforks.length > 0) {\n      for (var _i = 0, _a = this._supportedHardforks; _i < _a.length; _i++) {\n        var supportedHf = _a[_i];\n        if (hardfork === supportedHf) return true;\n      }\n    } else {\n      return true;\n    }\n    return false;\n  };\n  /**\n   * Returns the parameter corresponding to a hardfork\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow', 'casper', 'sharding')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param hardfork Hardfork name, optional if hardfork set\n   */\n  Common.prototype.param = function (topic, name, hardfork) {\n    hardfork = this._chooseHardfork(hardfork);\n    var value;\n    for (var _i = 0, hardforkChanges_2 = hardforks_1.hardforks; _i < hardforkChanges_2.length; _i++) {\n      var hfChanges = hardforkChanges_2[_i];\n      if (!hfChanges[1][topic]) {\n        throw new Error(\"Topic \" + topic + \" not defined\");\n      }\n      if (hfChanges[1][topic][name] !== undefined) {\n        value = hfChanges[1][topic][name].v;\n      }\n      if (hfChanges[0] === hardfork) break;\n    }\n    if (value === undefined) {\n      throw new Error(topic + \" value for \" + name + \" not found\");\n    }\n    return value;\n  };\n  /**\n   * Returns a parameter for the hardfork active on block number\n   * @param topic Parameter topic\n   * @param name Parameter name\n   * @param blockNumber Block number\n   */\n  Common.prototype.paramByBlock = function (topic, name, blockNumber) {\n    var activeHfs = this.activeHardforks(blockNumber);\n    var hardfork = activeHfs[activeHfs.length - 1]['name'];\n    return this.param(topic, name, hardfork);\n  };\n  /**\n   * Checks if set or provided hardfork is active on block number\n   * @param hardfork Hardfork name or null (for HF set)\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n  Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\n    opts = opts !== undefined ? opts : {};\n    var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n    hardfork = this._chooseHardfork(hardfork, onlySupported);\n    var hfBlock = this.hardforkBlock(hardfork);\n    if (hfBlock !== null && blockNumber >= hfBlock) return true;\n    return false;\n  };\n  /**\n   * Alias to hardforkIsActiveOnBlock when hardfork is set\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n  Common.prototype.activeOnBlock = function (blockNumber, opts) {\n    return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\n  };\n  /**\n   * Sequence based check if given or set HF1 is greater than or equal HF2\n   * @param hardfork1 Hardfork name or null (if set)\n   * @param hardfork2 Hardfork name\n   * @param opts Hardfork options\n   * @returns True if HF1 gte HF2\n   */\n  Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\n    opts = opts !== undefined ? opts : {};\n    var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\n    hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\n    var hardforks;\n    if (onlyActive) {\n      hardforks = this.activeHardforks(null, opts);\n    } else {\n      hardforks = this.hardforks();\n    }\n    var posHf1 = -1,\n      posHf2 = -1;\n    var index = 0;\n    for (var _i = 0, hardforks_2 = hardforks; _i < hardforks_2.length; _i++) {\n      var hf = hardforks_2[_i];\n      if (hf['name'] === hardfork1) posHf1 = index;\n      if (hf['name'] === hardfork2) posHf2 = index;\n      index += 1;\n    }\n    return posHf1 >= posHf2;\n  };\n  /**\n   * Alias to hardforkGteHardfork when hardfork is set\n   * @param hardfork Hardfork name\n   * @param opts Hardfork options\n   * @returns True if hardfork set is greater than hardfork provided\n   */\n  Common.prototype.gteHardfork = function (hardfork, opts) {\n    return this.hardforkGteHardfork(null, hardfork, opts);\n  };\n  /**\n   * Checks if given or set hardfork is active on the chain\n   * @param hardfork Hardfork name, optional if HF set\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if hardfork is active on the chain\n   */\n  Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\n    opts = opts !== undefined ? opts : {};\n    var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n    hardfork = this._chooseHardfork(hardfork, onlySupported);\n    for (var _i = 0, _a = this.hardforks(); _i < _a.length; _i++) {\n      var hf = _a[_i];\n      if (hf['name'] === hardfork && hf['block'] !== null) return true;\n    }\n    return false;\n  };\n  /**\n   * Returns the active hardfork switches for the current chain\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Array with hardfork arrays\n   */\n  Common.prototype.activeHardforks = function (blockNumber, opts) {\n    opts = opts !== undefined ? opts : {};\n    var activeHardforks = [];\n    var hfs = this.hardforks();\n    for (var _i = 0, hfs_2 = hfs; _i < hfs_2.length; _i++) {\n      var hf = hfs_2[_i];\n      if (hf['block'] === null) continue;\n      if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block']) break;\n      if (opts.onlySupported && !this._isSupportedHardfork(hf['name'])) continue;\n      activeHardforks.push(hf);\n    }\n    return activeHardforks;\n  };\n  /**\n   * Returns the latest active hardfork name for chain or block or throws if unavailable\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Hardfork name\n   */\n  Common.prototype.activeHardfork = function (blockNumber, opts) {\n    opts = opts !== undefined ? opts : {};\n    var activeHardforks = this.activeHardforks(blockNumber, opts);\n    if (activeHardforks.length > 0) {\n      return activeHardforks[activeHardforks.length - 1]['name'];\n    } else {\n      throw new Error(\"No (supported) active hardfork found\");\n    }\n  };\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number\n   */\n  Common.prototype.hardforkBlock = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n    return this._getHardfork(hardfork)['block'];\n  };\n  /**\n   * True if block number provided is the hardfork (given or set) change block of the current chain\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n  Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n    if (this.hardforkBlock(hardfork) === blockNumber) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * Provide the consensus type for the hardfork set or provided as param\n   * @param hardfork Hardfork name, optional if hardfork set\n   * @returns Consensus type (e.g. 'pow', 'poa')\n   */\n  Common.prototype.consensus = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork);\n    return this._getHardfork(hardfork)['consensus'];\n  };\n  /**\n   * Provide the finality type for the hardfork set or provided as param\n   * @param {String} hardfork Hardfork name, optional if hardfork set\n   * @returns {String} Finality type (e.g. 'pos', null of no finality)\n   */\n  Common.prototype.finality = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork);\n    return this._getHardfork(hardfork)['finality'];\n  };\n  /**\n   * Returns the Genesis parameters of current chain\n   * @returns Genesis dictionary\n   */\n  Common.prototype.genesis = function () {\n    return this._chainParams['genesis'];\n  };\n  /**\n   * Returns the hardforks for current chain\n   * @returns {Array} Array with arrays of hardforks\n   */\n  Common.prototype.hardforks = function () {\n    return this._chainParams['hardforks'];\n  };\n  /**\n   * Returns bootstrap nodes for the current chain\n   * @returns {Dictionary} Dict with bootstrap nodes\n   */\n  Common.prototype.bootstrapNodes = function () {\n    return this._chainParams['bootstrapNodes'];\n  };\n  /**\n   * Returns the hardfork set\n   * @returns Hardfork name\n   */\n  Common.prototype.hardfork = function () {\n    return this._hardfork;\n  };\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   */\n  Common.prototype.chainId = function () {\n    return this._chainParams['chainId'];\n  };\n  /**\n   * Returns the name of current chain\n   * @returns chain name (lower case)\n   */\n  Common.prototype.chainName = function () {\n    return chains_1.chains['names'][this.chainId()] || this._chainParams['name'];\n  };\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   */\n  Common.prototype.networkId = function () {\n    return this._chainParams['networkId'];\n  };\n  return Common;\n}();\nexports.default = Common;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chains_1 = require(\"./chains\");\nvar hardforks_1 = require(\"./hardforks\");\n/**\n * Common class to access chain and hardfork parameters\n */\nvar Common = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param chain String ('mainnet') or Number (1) chain\n     * @param hardfork String identifier ('byzantium') for hardfork (optional)\n     * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n     */\n    function Common(chain, hardfork, supportedHardforks) {\n        this._chainParams = this.setChain(chain);\n        this._hardfork = null;\n        this._supportedHardforks = supportedHardforks === undefined ? [] : supportedHardforks;\n        if (hardfork) {\n            this.setHardfork(hardfork);\n        }\n    }\n    /**\n     * Creates a Common object for a custom chain, based on a standard one. It uses all the [[Chain]]\n     * params from [[baseChain]] except the ones overridden in [[customChainParams]].\n     *\n     * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n     * chain params on.\n     * @param customChainParams The custom parameters of the chain.\n     * @param hardfork String identifier ('byzantium') for hardfork (optional)\n     * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n     */\n    Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\n        var standardChainParams = Common._getChainParams(baseChain);\n        return new Common(__assign(__assign({}, standardChainParams), customChainParams), hardfork, supportedHardforks);\n    };\n    Common._getChainParams = function (chain) {\n        if (typeof chain === 'number') {\n            if (chains_1.chains['names'][chain]) {\n                return chains_1.chains[chains_1.chains['names'][chain]];\n            }\n            throw new Error(\"Chain with ID \" + chain + \" not supported\");\n        }\n        if (chains_1.chains[chain]) {\n            return chains_1.chains[chain];\n        }\n        throw new Error(\"Chain with name \" + chain + \" not supported\");\n    };\n    /**\n     * Sets the chain\n     * @param chain String ('mainnet') or Number (1) chain\n     *     representation. Or, a Dictionary of chain parameters for a private network.\n     * @returns The dictionary with parameters set as chain\n     */\n    Common.prototype.setChain = function (chain) {\n        if (typeof chain === 'number' || typeof chain === 'string') {\n            this._chainParams = Common._getChainParams(chain);\n        }\n        else if (typeof chain === 'object') {\n            var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n            for (var _i = 0, required_1 = required; _i < required_1.length; _i++) {\n                var param = required_1[_i];\n                if (chain[param] === undefined) {\n                    throw new Error(\"Missing required chain parameter: \" + param);\n                }\n            }\n            this._chainParams = chain;\n        }\n        else {\n            throw new Error('Wrong input format');\n        }\n        return this._chainParams;\n    };\n    /**\n     * Sets the hardfork to get params for\n     * @param hardfork String identifier ('byzantium')\n     */\n    Common.prototype.setHardfork = function (hardfork) {\n        if (!this._isSupportedHardfork(hardfork)) {\n            throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n        }\n        var changed = false;\n        for (var _i = 0, hardforkChanges_1 = hardforks_1.hardforks; _i < hardforkChanges_1.length; _i++) {\n            var hfChanges = hardforkChanges_1[_i];\n            if (hfChanges[0] === hardfork) {\n                this._hardfork = hardfork;\n                changed = true;\n            }\n        }\n        if (!changed) {\n            throw new Error(\"Hardfork with name \" + hardfork + \" not supported\");\n        }\n    };\n    /**\n     * Internal helper function to choose between hardfork set and hardfork provided as param\n     * @param hardfork Hardfork given to function as a parameter\n     * @returns Hardfork chosen to be used\n     */\n    Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\n        onlySupported = onlySupported === undefined ? true : onlySupported;\n        if (!hardfork) {\n            if (!this._hardfork) {\n                throw new Error('Method called with neither a hardfork set nor provided by param');\n            }\n            else {\n                hardfork = this._hardfork;\n            }\n        }\n        else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n            throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n        }\n        return hardfork;\n    };\n    /**\n     * Internal helper function, returns the params for the given hardfork for the chain set\n     * @param hardfork Hardfork name\n     * @returns Dictionary with hardfork params\n     */\n    Common.prototype._getHardfork = function (hardfork) {\n        var hfs = this.hardforks();\n        for (var _i = 0, hfs_1 = hfs; _i < hfs_1.length; _i++) {\n            var hf = hfs_1[_i];\n            if (hf['name'] === hardfork)\n                return hf;\n        }\n        throw new Error(\"Hardfork \" + hardfork + \" not defined for chain \" + this.chainName());\n    };\n    /**\n     * Internal helper function to check if a hardfork is set to be supported by the library\n     * @param hardfork Hardfork name\n     * @returns True if hardfork is supported\n     */\n    Common.prototype._isSupportedHardfork = function (hardfork) {\n        if (this._supportedHardforks.length > 0) {\n            for (var _i = 0, _a = this._supportedHardforks; _i < _a.length; _i++) {\n                var supportedHf = _a[_i];\n                if (hardfork === supportedHf)\n                    return true;\n            }\n        }\n        else {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Returns the parameter corresponding to a hardfork\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow', 'casper', 'sharding')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param hardfork Hardfork name, optional if hardfork set\n     */\n    Common.prototype.param = function (topic, name, hardfork) {\n        hardfork = this._chooseHardfork(hardfork);\n        var value;\n        for (var _i = 0, hardforkChanges_2 = hardforks_1.hardforks; _i < hardforkChanges_2.length; _i++) {\n            var hfChanges = hardforkChanges_2[_i];\n            if (!hfChanges[1][topic]) {\n                throw new Error(\"Topic \" + topic + \" not defined\");\n            }\n            if (hfChanges[1][topic][name] !== undefined) {\n                value = hfChanges[1][topic][name].v;\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        if (value === undefined) {\n            throw new Error(topic + \" value for \" + name + \" not found\");\n        }\n        return value;\n    };\n    /**\n     * Returns a parameter for the hardfork active on block number\n     * @param topic Parameter topic\n     * @param name Parameter name\n     * @param blockNumber Block number\n     */\n    Common.prototype.paramByBlock = function (topic, name, blockNumber) {\n        var activeHfs = this.activeHardforks(blockNumber);\n        var hardfork = activeHfs[activeHfs.length - 1]['name'];\n        return this.param(topic, name, hardfork);\n    };\n    /**\n     * Checks if set or provided hardfork is active on block number\n     * @param hardfork Hardfork name or null (for HF set)\n     * @param blockNumber\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if HF is active on block number\n     */\n    Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\n        opts = opts !== undefined ? opts : {};\n        var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\n        var hfBlock = this.hardforkBlock(hardfork);\n        if (hfBlock !== null && blockNumber >= hfBlock)\n            return true;\n        return false;\n    };\n    /**\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\n     * @param blockNumber\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if HF is active on block number\n     */\n    Common.prototype.activeOnBlock = function (blockNumber, opts) {\n        return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\n    };\n    /**\n     * Sequence based check if given or set HF1 is greater than or equal HF2\n     * @param hardfork1 Hardfork name or null (if set)\n     * @param hardfork2 Hardfork name\n     * @param opts Hardfork options\n     * @returns True if HF1 gte HF2\n     */\n    Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\n        opts = opts !== undefined ? opts : {};\n        var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\n        hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\n        var hardforks;\n        if (onlyActive) {\n            hardforks = this.activeHardforks(null, opts);\n        }\n        else {\n            hardforks = this.hardforks();\n        }\n        var posHf1 = -1, posHf2 = -1;\n        var index = 0;\n        for (var _i = 0, hardforks_2 = hardforks; _i < hardforks_2.length; _i++) {\n            var hf = hardforks_2[_i];\n            if (hf['name'] === hardfork1)\n                posHf1 = index;\n            if (hf['name'] === hardfork2)\n                posHf2 = index;\n            index += 1;\n        }\n        return posHf1 >= posHf2;\n    };\n    /**\n     * Alias to hardforkGteHardfork when hardfork is set\n     * @param hardfork Hardfork name\n     * @param opts Hardfork options\n     * @returns True if hardfork set is greater than hardfork provided\n     */\n    Common.prototype.gteHardfork = function (hardfork, opts) {\n        return this.hardforkGteHardfork(null, hardfork, opts);\n    };\n    /**\n     * Checks if given or set hardfork is active on the chain\n     * @param hardfork Hardfork name, optional if HF set\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if hardfork is active on the chain\n     */\n    Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\n        opts = opts !== undefined ? opts : {};\n        var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\n        for (var _i = 0, _a = this.hardforks(); _i < _a.length; _i++) {\n            var hf = _a[_i];\n            if (hf['name'] === hardfork && hf['block'] !== null)\n                return true;\n        }\n        return false;\n    };\n    /**\n     * Returns the active hardfork switches for the current chain\n     * @param blockNumber up to block if provided, otherwise for the whole chain\n     * @param opts Hardfork options (onlyActive unused)\n     * @return Array with hardfork arrays\n     */\n    Common.prototype.activeHardforks = function (blockNumber, opts) {\n        opts = opts !== undefined ? opts : {};\n        var activeHardforks = [];\n        var hfs = this.hardforks();\n        for (var _i = 0, hfs_2 = hfs; _i < hfs_2.length; _i++) {\n            var hf = hfs_2[_i];\n            if (hf['block'] === null)\n                continue;\n            if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block'])\n                break;\n            if (opts.onlySupported && !this._isSupportedHardfork(hf['name']))\n                continue;\n            activeHardforks.push(hf);\n        }\n        return activeHardforks;\n    };\n    /**\n     * Returns the latest active hardfork name for chain or block or throws if unavailable\n     * @param blockNumber up to block if provided, otherwise for the whole chain\n     * @param opts Hardfork options (onlyActive unused)\n     * @return Hardfork name\n     */\n    Common.prototype.activeHardfork = function (blockNumber, opts) {\n        opts = opts !== undefined ? opts : {};\n        var activeHardforks = this.activeHardforks(blockNumber, opts);\n        if (activeHardforks.length > 0) {\n            return activeHardforks[activeHardforks.length - 1]['name'];\n        }\n        else {\n            throw new Error(\"No (supported) active hardfork found\");\n        }\n    };\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number\n     */\n    Common.prototype.hardforkBlock = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        return this._getHardfork(hardfork)['block'];\n    };\n    /**\n     * True if block number provided is the hardfork (given or set) change block of the current chain\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     */\n    Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        if (this.hardforkBlock(hardfork) === blockNumber) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Provide the consensus type for the hardfork set or provided as param\n     * @param hardfork Hardfork name, optional if hardfork set\n     * @returns Consensus type (e.g. 'pow', 'poa')\n     */\n    Common.prototype.consensus = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork);\n        return this._getHardfork(hardfork)['consensus'];\n    };\n    /**\n     * Provide the finality type for the hardfork set or provided as param\n     * @param {String} hardfork Hardfork name, optional if hardfork set\n     * @returns {String} Finality type (e.g. 'pos', null of no finality)\n     */\n    Common.prototype.finality = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork);\n        return this._getHardfork(hardfork)['finality'];\n    };\n    /**\n     * Returns the Genesis parameters of current chain\n     * @returns Genesis dictionary\n     */\n    Common.prototype.genesis = function () {\n        return this._chainParams['genesis'];\n    };\n    /**\n     * Returns the hardforks for current chain\n     * @returns {Array} Array with arrays of hardforks\n     */\n    Common.prototype.hardforks = function () {\n        return this._chainParams['hardforks'];\n    };\n    /**\n     * Returns bootstrap nodes for the current chain\n     * @returns {Dictionary} Dict with bootstrap nodes\n     */\n    Common.prototype.bootstrapNodes = function () {\n        return this._chainParams['bootstrapNodes'];\n    };\n    /**\n     * Returns the hardfork set\n     * @returns Hardfork name\n     */\n    Common.prototype.hardfork = function () {\n        return this._hardfork;\n    };\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     */\n    Common.prototype.chainId = function () {\n        return this._chainParams['chainId'];\n    };\n    /**\n     * Returns the name of current chain\n     * @returns chain name (lower case)\n     */\n    Common.prototype.chainName = function () {\n        return chains_1.chains['names'][this.chainId()] || this._chainParams['name'];\n    };\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     */\n    Common.prototype.networkId = function () {\n        return this._chainParams['networkId'];\n    };\n    return Common;\n}());\nexports.default = Common;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}