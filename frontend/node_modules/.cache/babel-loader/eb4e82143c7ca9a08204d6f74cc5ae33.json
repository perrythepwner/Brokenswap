{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst wasm_1 = require(\"./wasm\");\n/**\n * Class based SHA256\n */\nclass SHA256 {\n  constructor() {\n    this.ctx = wasm_1.newInstance();\n    this.wasmInputValue = this.ctx.input.value;\n    this.wasmOutputValue = this.ctx.output.value;\n    this.uint8InputArray = new Uint8Array(this.ctx.memory.buffer, this.wasmInputValue, this.ctx.INPUT_LENGTH);\n    this.uint8OutputArray = new Uint8Array(this.ctx.memory.buffer, this.wasmOutputValue, 32);\n  }\n  init() {\n    this.ctx.init();\n    return this;\n  }\n  update(data) {\n    const INPUT_LENGTH = this.ctx.INPUT_LENGTH;\n    if (data.length > INPUT_LENGTH) {\n      for (let i = 0; i < data.length; i += INPUT_LENGTH) {\n        const sliced = data.slice(i, i + INPUT_LENGTH);\n        this.uint8InputArray.set(sliced);\n        this.ctx.update(this.wasmInputValue, sliced.length);\n      }\n    } else {\n      this.uint8InputArray.set(data);\n      this.ctx.update(this.wasmInputValue, data.length);\n    }\n    return this;\n  }\n  final() {\n    this.ctx.final(this.wasmOutputValue);\n    const output = new Uint8Array(32);\n    output.set(this.uint8OutputArray);\n    return output;\n  }\n}\nexports.default = SHA256;","map":{"version":3,"sources":["../src/sha256.ts"],"names":[],"mappings":";;;;;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AAEA;;AAEG;AACH,MAAqB,MAAM,CAAA;EAOzB,WAAA,CAAA,EAAA;IACE,IAAI,CAAC,GAAG,GAAG,MAAA,CAAA,WAAW,CAAA,CAAE;IACxB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK;IAC1C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK;IAC5C,IAAI,CAAC,eAAe,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC;IACzG,IAAI,CAAC,gBAAgB,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,EAAE,EAAE,CAAC;EAC1F;EAEA,IAAI,CAAA,EAAA;IACF,IAAI,CAAC,GAAG,CAAC,IAAI,CAAA,CAAE;IACf,OAAO,IAAI;EACb;EAEA,MAAM,CAAC,IAAgB,EAAA;IACrB,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY;IAC1C,IAAI,IAAI,CAAC,MAAM,GAAG,YAAY,EAAE;MAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,YAAY,EAAE;QAClD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC;QAC9C,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC;QAChC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,MAAM,CAAC;MACpD;KACF,MAAM;MACL,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC;MAC9B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC;IAClD;IACD,OAAO,IAAI;EACb;EAEA,KAAK,CAAA,EAAA;IACH,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC;IACpC,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC;IACjC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACjC,OAAO,MAAM;EACf;AACD;AAzCD,OAAA,CAAA,OAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst wasm_1 = require(\"./wasm\");\n/**\n * Class based SHA256\n */\nclass SHA256 {\n    constructor() {\n        this.ctx = wasm_1.newInstance();\n        this.wasmInputValue = this.ctx.input.value;\n        this.wasmOutputValue = this.ctx.output.value;\n        this.uint8InputArray = new Uint8Array(this.ctx.memory.buffer, this.wasmInputValue, this.ctx.INPUT_LENGTH);\n        this.uint8OutputArray = new Uint8Array(this.ctx.memory.buffer, this.wasmOutputValue, 32);\n    }\n    init() {\n        this.ctx.init();\n        return this;\n    }\n    update(data) {\n        const INPUT_LENGTH = this.ctx.INPUT_LENGTH;\n        if (data.length > INPUT_LENGTH) {\n            for (let i = 0; i < data.length; i += INPUT_LENGTH) {\n                const sliced = data.slice(i, i + INPUT_LENGTH);\n                this.uint8InputArray.set(sliced);\n                this.ctx.update(this.wasmInputValue, sliced.length);\n            }\n        }\n        else {\n            this.uint8InputArray.set(data);\n            this.ctx.update(this.wasmInputValue, data.length);\n        }\n        return this;\n    }\n    final() {\n        this.ctx.final(this.wasmOutputValue);\n        const output = new Uint8Array(32);\n        output.set(this.uint8OutputArray);\n        return output;\n    }\n}\nexports.default = SHA256;\n//# sourceMappingURL=sha256.js.map"]},"metadata":{},"sourceType":"script"}