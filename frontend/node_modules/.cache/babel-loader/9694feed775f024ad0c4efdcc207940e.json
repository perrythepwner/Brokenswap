{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.intToUnpaddedBuffer = exports.bigIntToUnpaddedBuffer = exports.bigIntToHex = exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.short = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToInt = exports.bigIntToBuffer = exports.bufferToBigInt = exports.bufferToHex = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst internal_1 = require(\"./internal\");\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nconst intToHex = function intToHex(i) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(\"Received an invalid integer type: \".concat(i));\n  }\n  return \"0x\".concat(i.toString(16));\n};\nexports.intToHex = intToHex;\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nconst intToBuffer = function intToBuffer(i) {\n  const hex = (0, exports.intToHex)(i);\n  return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\nexports.intToBuffer = intToBuffer;\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nconst zeros = function zeros(bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\nexports.zeros = zeros;\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function setLength(msg, length, right) {\n  const buf = (0, exports.zeros)(length);\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n    return msg.slice(-length);\n  }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nconst setLengthLeft = function setLengthLeft(msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, false);\n};\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nconst setLengthRight = function setLengthRight(msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, true);\n};\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nconst stripZeros = function stripZeros(a) {\n  let first = a[0];\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n  return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nconst unpadBuffer = function unpadBuffer(a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return stripZeros(a);\n};\nexports.unpadBuffer = unpadBuffer;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nconst unpadArray = function unpadArray(a) {\n  (0, helpers_1.assertIsArray)(a);\n  return stripZeros(a);\n};\nexports.unpadArray = unpadArray;\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nconst unpadHexString = function unpadHexString(a) {\n  (0, helpers_1.assertIsHexString)(a);\n  a = (0, internal_1.stripHexPrefix)(a);\n  return '0x' + stripZeros(a);\n};\nexports.unpadHexString = unpadHexString;\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nconst toBuffer = function toBuffer(v) {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0);\n  }\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v);\n  }\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v);\n  }\n  if (typeof v === 'string') {\n    if (!(0, internal_1.isHexString)(v)) {\n      throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \".concat(v));\n    }\n    return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n  }\n  if (typeof v === 'number') {\n    return (0, exports.intToBuffer)(v);\n  }\n  if (typeof v === 'bigint') {\n    if (v < BigInt(0)) {\n      throw new Error(\"Cannot convert negative bigint to buffer. Given: \".concat(v));\n    }\n    let n = v.toString(16);\n    if (n.length % 2) n = '0' + n;\n    return Buffer.from(n, 'hex');\n  }\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray());\n  }\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer());\n  }\n  throw new Error('invalid type');\n};\nexports.toBuffer = toBuffer;\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nconst bufferToHex = function bufferToHex(buf) {\n  buf = (0, exports.toBuffer)(buf);\n  return '0x' + buf.toString('hex');\n};\nexports.bufferToHex = bufferToHex;\n/**\n * Converts a {@link Buffer} to a {@link bigint}\n */\nfunction bufferToBigInt(buf) {\n  const hex = (0, exports.bufferToHex)(buf);\n  if (hex === '0x') {\n    return BigInt(0);\n  }\n  return BigInt(hex);\n}\nexports.bufferToBigInt = bufferToBigInt;\n/**\n * Converts a {@link bigint} to a {@link Buffer}\n */\nfunction bigIntToBuffer(num) {\n  return (0, exports.toBuffer)('0x' + num.toString(16));\n}\nexports.bigIntToBuffer = bigIntToBuffer;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nconst bufferToInt = function bufferToInt(buf) {\n  const res = Number(bufferToBigInt(buf));\n  if (!Number.isSafeInteger(res)) throw new Error('Number exceeds 53 bits');\n  return res;\n};\nexports.bufferToInt = bufferToInt;\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nconst fromSigned = function fromSigned(num) {\n  return BigInt.asIntN(256, bufferToBigInt(num));\n};\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nconst toUnsigned = function toUnsigned(num) {\n  return bigIntToBuffer(BigInt.asUintN(256, num));\n};\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nconst addHexPrefix = function addHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\nexports.addHexPrefix = addHexPrefix;\n/**\n * Shortens a string  or buffer's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n */\nfunction short(buffer) {\n  let maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  const bufferStr = Buffer.isBuffer(buffer) ? buffer.toString('hex') : buffer;\n  if (bufferStr.length <= maxLength) {\n    return bufferStr;\n  }\n  return bufferStr.slice(0, maxLength) + '…';\n}\nexports.short = short;\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nconst toUtf8 = function toUtf8(hex) {\n  const zerosRegexp = /^(00)+|(00)+$/g;\n  hex = (0, internal_1.stripHexPrefix)(hex);\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided');\n  }\n  const bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n  return bufferVal.toString('utf8');\n};\nexports.toUtf8 = toUtf8;\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nconst baToJSON = function baToJSON(ba) {\n  if (Buffer.isBuffer(ba)) {\n    return \"0x\".concat(ba.toString('hex'));\n  } else if (ba instanceof Array) {\n    const array = [];\n    for (let i = 0; i < ba.length; i++) {\n      array.push((0, exports.baToJSON)(ba[i]));\n    }\n    return array;\n  }\n};\nexports.baToJSON = baToJSON;\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\nconst validateNoLeadingZeroes = function validateNoLeadingZeroes(values) {\n  for (const [k, v] of Object.entries(values)) {\n    if (v !== undefined && v.length > 0 && v[0] === 0) {\n      throw new Error(\"\".concat(k, \" cannot have leading zeroes, received: \").concat(v.toString('hex')));\n    }\n  }\n};\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\nfunction arrToBufArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Buffer.from(arr);\n  }\n  return arr.map(a => arrToBufArr(a));\n}\nexports.arrToBufArr = arrToBufArr;\nfunction bufArrToArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);\n  }\n  return arr.map(a => bufArrToArr(a));\n}\nexports.bufArrToArr = bufArrToArr;\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nconst bigIntToHex = num => {\n  return '0x' + num.toString(16);\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert value from bigint to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nfunction bigIntToUnpaddedBuffer(value) {\n  return (0, exports.unpadBuffer)(bigIntToBuffer(value));\n}\nexports.bigIntToUnpaddedBuffer = bigIntToUnpaddedBuffer;\nfunction intToUnpaddedBuffer(value) {\n  return (0, exports.unpadBuffer)((0, exports.intToBuffer)(value));\n}\nexports.intToUnpaddedBuffer = intToUnpaddedBuffer;","map":{"version":3,"sources":["../src/bytes.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.intToUnpaddedBuffer = exports.bigIntToUnpaddedBuffer = exports.bigIntToHex = exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.short = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToInt = exports.bigIntToBuffer = exports.bufferToBigInt = exports.bufferToHex = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst internal_1 = require(\"./internal\");\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nconst intToHex = function (i) {\n    if (!Number.isSafeInteger(i) || i < 0) {\n        throw new Error(`Received an invalid integer type: ${i}`);\n    }\n    return `0x${i.toString(16)}`;\n};\nexports.intToHex = intToHex;\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nconst intToBuffer = function (i) {\n    const hex = (0, exports.intToHex)(i);\n    return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\nexports.intToBuffer = intToBuffer;\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nconst zeros = function (bytes) {\n    return Buffer.allocUnsafe(bytes).fill(0);\n};\nexports.zeros = zeros;\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function (msg, length, right) {\n    const buf = (0, exports.zeros)(length);\n    if (right) {\n        if (msg.length < length) {\n            msg.copy(buf);\n            return buf;\n        }\n        return msg.slice(0, length);\n    }\n    else {\n        if (msg.length < length) {\n            msg.copy(buf, length - msg.length);\n            return buf;\n        }\n        return msg.slice(-length);\n    }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nconst setLengthLeft = function (msg, length) {\n    (0, helpers_1.assertIsBuffer)(msg);\n    return setLength(msg, length, false);\n};\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nconst setLengthRight = function (msg, length) {\n    (0, helpers_1.assertIsBuffer)(msg);\n    return setLength(msg, length, true);\n};\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nconst stripZeros = function (a) {\n    let first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nconst unpadBuffer = function (a) {\n    (0, helpers_1.assertIsBuffer)(a);\n    return stripZeros(a);\n};\nexports.unpadBuffer = unpadBuffer;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nconst unpadArray = function (a) {\n    (0, helpers_1.assertIsArray)(a);\n    return stripZeros(a);\n};\nexports.unpadArray = unpadArray;\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nconst unpadHexString = function (a) {\n    (0, helpers_1.assertIsHexString)(a);\n    a = (0, internal_1.stripHexPrefix)(a);\n    return ('0x' + stripZeros(a));\n};\nexports.unpadHexString = unpadHexString;\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nconst toBuffer = function (v) {\n    if (v === null || v === undefined) {\n        return Buffer.allocUnsafe(0);\n    }\n    if (Buffer.isBuffer(v)) {\n        return Buffer.from(v);\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Buffer.from(v);\n    }\n    if (typeof v === 'string') {\n        if (!(0, internal_1.isHexString)(v)) {\n            throw new Error(`Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);\n        }\n        return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n    }\n    if (typeof v === 'number') {\n        return (0, exports.intToBuffer)(v);\n    }\n    if (typeof v === 'bigint') {\n        if (v < BigInt(0)) {\n            throw new Error(`Cannot convert negative bigint to buffer. Given: ${v}`);\n        }\n        let n = v.toString(16);\n        if (n.length % 2)\n            n = '0' + n;\n        return Buffer.from(n, 'hex');\n    }\n    if (v.toArray) {\n        // converts a BN to a Buffer\n        return Buffer.from(v.toArray());\n    }\n    if (v.toBuffer) {\n        return Buffer.from(v.toBuffer());\n    }\n    throw new Error('invalid type');\n};\nexports.toBuffer = toBuffer;\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nconst bufferToHex = function (buf) {\n    buf = (0, exports.toBuffer)(buf);\n    return '0x' + buf.toString('hex');\n};\nexports.bufferToHex = bufferToHex;\n/**\n * Converts a {@link Buffer} to a {@link bigint}\n */\nfunction bufferToBigInt(buf) {\n    const hex = (0, exports.bufferToHex)(buf);\n    if (hex === '0x') {\n        return BigInt(0);\n    }\n    return BigInt(hex);\n}\nexports.bufferToBigInt = bufferToBigInt;\n/**\n * Converts a {@link bigint} to a {@link Buffer}\n */\nfunction bigIntToBuffer(num) {\n    return (0, exports.toBuffer)('0x' + num.toString(16));\n}\nexports.bigIntToBuffer = bigIntToBuffer;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nconst bufferToInt = function (buf) {\n    const res = Number(bufferToBigInt(buf));\n    if (!Number.isSafeInteger(res))\n        throw new Error('Number exceeds 53 bits');\n    return res;\n};\nexports.bufferToInt = bufferToInt;\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nconst fromSigned = function (num) {\n    return BigInt.asIntN(256, bufferToBigInt(num));\n};\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nconst toUnsigned = function (num) {\n    return bigIntToBuffer(BigInt.asUintN(256, num));\n};\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nconst addHexPrefix = function (str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\nexports.addHexPrefix = addHexPrefix;\n/**\n * Shortens a string  or buffer's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n */\nfunction short(buffer, maxLength = 50) {\n    const bufferStr = Buffer.isBuffer(buffer) ? buffer.toString('hex') : buffer;\n    if (bufferStr.length <= maxLength) {\n        return bufferStr;\n    }\n    return bufferStr.slice(0, maxLength) + '…';\n}\nexports.short = short;\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nconst toUtf8 = function (hex) {\n    const zerosRegexp = /^(00)+|(00)+$/g;\n    hex = (0, internal_1.stripHexPrefix)(hex);\n    if (hex.length % 2 !== 0) {\n        throw new Error('Invalid non-even hex string input for toUtf8() provided');\n    }\n    const bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n    return bufferVal.toString('utf8');\n};\nexports.toUtf8 = toUtf8;\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nconst baToJSON = function (ba) {\n    if (Buffer.isBuffer(ba)) {\n        return `0x${ba.toString('hex')}`;\n    }\n    else if (ba instanceof Array) {\n        const array = [];\n        for (let i = 0; i < ba.length; i++) {\n            array.push((0, exports.baToJSON)(ba[i]));\n        }\n        return array;\n    }\n};\nexports.baToJSON = baToJSON;\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\nconst validateNoLeadingZeroes = function (values) {\n    for (const [k, v] of Object.entries(values)) {\n        if (v !== undefined && v.length > 0 && v[0] === 0) {\n            throw new Error(`${k} cannot have leading zeroes, received: ${v.toString('hex')}`);\n        }\n    }\n};\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\nfunction arrToBufArr(arr) {\n    if (!Array.isArray(arr)) {\n        return Buffer.from(arr);\n    }\n    return arr.map((a) => arrToBufArr(a));\n}\nexports.arrToBufArr = arrToBufArr;\nfunction bufArrToArr(arr) {\n    if (!Array.isArray(arr)) {\n        return Uint8Array.from(arr ?? []);\n    }\n    return arr.map((a) => bufArrToArr(a));\n}\nexports.bufArrToArr = bufArrToArr;\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nconst bigIntToHex = (num) => {\n    return '0x' + num.toString(16);\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert value from bigint to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nfunction bigIntToUnpaddedBuffer(value) {\n    return (0, exports.unpadBuffer)(bigIntToBuffer(value));\n}\nexports.bigIntToUnpaddedBuffer = bigIntToUnpaddedBuffer;\nfunction intToUnpaddedBuffer(value) {\n    return (0, exports.unpadBuffer)((0, exports.intToBuffer)(value));\n}\nexports.intToUnpaddedBuffer = intToUnpaddedBuffer;\n//# sourceMappingURL=bytes.js.map"]},"metadata":{},"sourceType":"script"}