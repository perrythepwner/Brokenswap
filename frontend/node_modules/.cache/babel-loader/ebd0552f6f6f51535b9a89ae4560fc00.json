{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"react\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useSubscription(subscription, options) {\n  var hasIssuedDeprecationWarningRef = React.useRef(false);\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  var _a = React.useState({\n      loading: !(options === null || options === void 0 ? void 0 : options.skip),\n      error: void 0,\n      data: void 0,\n      variables: options === null || options === void 0 ? void 0 : options.variables\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionData) {\n      globalThis.__DEV__ !== false && invariant.warn(options.onData ? 52 : 53);\n    }\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionComplete) {\n      globalThis.__DEV__ !== false && invariant.warn(options.onComplete ? 54 : 55);\n    }\n  }\n  var _b = React.useState(function () {\n      if (options === null || options === void 0 ? void 0 : options.skip) {\n        return null;\n      }\n      return client.subscribe({\n        query: subscription,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        context: options === null || options === void 0 ? void 0 : options.context\n      });\n    }),\n    observable = _b[0],\n    setObservable = _b[1];\n  var canResetObservableRef = React.useRef(false);\n  React.useEffect(function () {\n    return function () {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n  var ref = React.useRef({\n    client: client,\n    subscription: subscription,\n    options: options\n  });\n  React.useEffect(function () {\n    var _a, _b, _c, _d;\n    var shouldResubscribe = options === null || options === void 0 ? void 0 : options.shouldResubscribe;\n    if (typeof shouldResubscribe === \"function\") {\n      shouldResubscribe = !!shouldResubscribe(options);\n    }\n    if (options === null || options === void 0 ? void 0 : options.skip) {\n      if (!(options === null || options === void 0 ? void 0 : options.skip) !== !((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.skip) || canResetObservableRef.current) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (shouldResubscribe !== false && (client !== ref.current.client || subscription !== ref.current.subscription || (options === null || options === void 0 ? void 0 : options.fetchPolicy) !== ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || !(options === null || options === void 0 ? void 0 : options.skip) !== !((_c = ref.current.options) === null || _c === void 0 ? void 0 : _c.skip) || !equal(options === null || options === void 0 ? void 0 : options.variables, (_d = ref.current.options) === null || _d === void 0 ? void 0 : _d.variables)) || canResetObservableRef.current) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options === null || options === void 0 ? void 0 : options.variables\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        context: options === null || options === void 0 ? void 0 : options.context\n      }));\n      canResetObservableRef.current = false;\n    }\n    Object.assign(ref.current, {\n      client: client,\n      subscription: subscription,\n      options: options\n    });\n  }, [client, subscription, options, canResetObservableRef.current]);\n  React.useEffect(function () {\n    if (!observable) {\n      return;\n    }\n    var subscriptionStopped = false;\n    var subscription = observable.subscribe({\n      next: function next(fetchResult) {\n        var _a, _b;\n        if (subscriptionStopped) {\n          return;\n        }\n        var result = {\n          loading: false,\n          data: fetchResult.data,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        };\n        setResult(result);\n        if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onData) {\n          ref.current.options.onData({\n            client: client,\n            data: result\n          });\n        } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client: client,\n            subscriptionData: result\n          });\n        }\n      },\n      error: function error(_error) {\n        var _a, _b;\n        if (!subscriptionStopped) {\n          setResult({\n            loading: false,\n            data: void 0,\n            error: _error,\n            variables: options === null || options === void 0 ? void 0 : options.variables\n          });\n          (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError) === null || _b === void 0 ? void 0 : _b.call(_a, _error);\n        }\n      },\n      complete: function complete() {\n        var _a, _b;\n        if (!subscriptionStopped) {\n          if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onComplete) {\n            ref.current.options.onComplete();\n          } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionComplete) {\n            ref.current.options.onSubscriptionComplete();\n          }\n        }\n      }\n    });\n    return function () {\n      subscriptionStopped = true;\n      setTimeout(function () {\n        subscription.unsubscribe();\n      });\n    };\n  }, [observable]);\n  return result;\n}","map":{"version":3,"sources":["../../../src/react/hooks/useSubscription.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"react\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport { equal } from \"@wry/equality\";\n\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport type {\n  NoInfer,\n  SubscriptionHookOptions,\n  SubscriptionResult,\n} from \"../types/types.js\";\nimport type { OperationVariables } from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\nexport function useSubscription<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n) {\n  const hasIssuedDeprecationWarningRef = React.useRef(false);\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  const [result, setResult] = React.useState<\n    SubscriptionResult<TData, TVariables>\n  >({\n    loading: !options?.skip,\n    error: void 0,\n    data: void 0,\n    variables: options?.variables,\n  });\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options?.onSubscriptionData) {\n      invariant.warn(\n        options.onData\n          ? \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\"\n          : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\"\n      );\n    }\n\n    if (options?.onSubscriptionComplete) {\n      invariant.warn(\n        options.onComplete\n          ? \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\"\n          : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\"\n      );\n    }\n  }\n\n  const [observable, setObservable] = React.useState(() => {\n    if (options?.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options?.variables,\n      fetchPolicy: options?.fetchPolicy,\n      context: options?.context,\n    });\n  });\n\n  const canResetObservableRef = React.useRef(false);\n  React.useEffect(() => {\n    return () => {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n\n  const ref = React.useRef({ client, subscription, options });\n  React.useEffect(() => {\n    let shouldResubscribe = options?.shouldResubscribe;\n    if (typeof shouldResubscribe === \"function\") {\n      shouldResubscribe = !!shouldResubscribe(options!);\n    }\n\n    if (options?.skip) {\n      if (\n        !options?.skip !== !ref.current.options?.skip ||\n        canResetObservableRef.current\n      ) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options?.variables,\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (\n      (shouldResubscribe !== false &&\n        (client !== ref.current.client ||\n          subscription !== ref.current.subscription ||\n          options?.fetchPolicy !== ref.current.options?.fetchPolicy ||\n          !options?.skip !== !ref.current.options?.skip ||\n          !equal(options?.variables, ref.current.options?.variables))) ||\n      canResetObservableRef.current\n    ) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options?.variables,\n      });\n      setObservable(\n        client.subscribe({\n          query: subscription,\n          variables: options?.variables,\n          fetchPolicy: options?.fetchPolicy,\n          context: options?.context,\n        })\n      );\n      canResetObservableRef.current = false;\n    }\n\n    Object.assign(ref.current, { client, subscription, options });\n  }, [client, subscription, options, canResetObservableRef.current]);\n\n  React.useEffect(() => {\n    if (!observable) {\n      return;\n    }\n\n    let subscriptionStopped = false;\n    const subscription = observable.subscribe({\n      next(fetchResult) {\n        if (subscriptionStopped) {\n          return;\n        }\n\n        const result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data!,\n          error: void 0,\n          variables: options?.variables,\n        };\n        setResult(result);\n\n        if (ref.current.options?.onData) {\n          ref.current.options.onData({\n            client,\n            data: result,\n          });\n        } else if (ref.current.options?.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client,\n            subscriptionData: result,\n          });\n        }\n      },\n      error(error) {\n        if (!subscriptionStopped) {\n          setResult({\n            loading: false,\n            data: void 0,\n            error,\n            variables: options?.variables,\n          });\n          ref.current.options?.onError?.(error);\n        }\n      },\n      complete() {\n        if (!subscriptionStopped) {\n          if (ref.current.options?.onComplete) {\n            ref.current.options.onComplete();\n          } else if (ref.current.options?.onSubscriptionComplete) {\n            ref.current.options.onSubscriptionComplete();\n          }\n        }\n      },\n    });\n\n    return () => {\n      // immediately stop receiving subscription values, but do not unsubscribe\n      // until after a short delay in case another useSubscription hook is\n      // reusing the same underlying observable and is about to subscribe\n      subscriptionStopped = true;\n      setTimeout(() => {\n        subscription.unsubscribe();\n      });\n    };\n  }, [observable]);\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}