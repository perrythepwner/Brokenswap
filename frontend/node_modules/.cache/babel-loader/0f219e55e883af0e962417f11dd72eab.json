{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resurrector = void 0;\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nconst base_1 = require(\"@celo/contractkit/lib/base\");\nconst connectors_1 = require(\"../connectors\");\nconst constants_1 = require(\"../constants\");\nconst local_storage_1 = require(\"./local-storage\");\nconst logger_1 = require(\"./logger\");\nfunction resurrector(networks, dapp, manualNetworkingMode) {\n  const walletType = (0, local_storage_1.getTypedStorageKey)(constants_1.localStorageKeys.lastUsedWalletType);\n  const network = getNetwork(networks);\n  if (!walletType || !network) return null;\n  (0, logger_1.getApplicationLogger)().log('[resurrector] will create', walletType, 'with', network, dapp);\n  try {\n    switch (walletType) {\n      case constants_1.WalletTypes.Ledger:\n        {\n          const index = (0, local_storage_1.getTypedStorageKey)(constants_1.localStorageKeys.lastUsedIndex);\n          if (index === null) return null;\n          return new connectors_1.LedgerConnector(network, index, base_1.CeloContract.GoldToken);\n        }\n      case constants_1.WalletTypes.CeloExtensionWallet:\n        return new connectors_1.CeloExtensionWalletConnector(network, base_1.CeloContract.GoldToken);\n      case constants_1.WalletTypes.MetaMask:\n        return new connectors_1.MetaMaskConnector(network, manualNetworkingMode, base_1.CeloContract.GoldToken);\n      case constants_1.WalletTypes.Injected:\n        return new connectors_1.InjectedConnector(network, manualNetworkingMode, base_1.CeloContract.GoldToken, undefined);\n      case constants_1.WalletTypes.PrivateKey:\n        {\n          const privateKey = (0, local_storage_1.getTypedStorageKey)(constants_1.localStorageKeys.lastUsedPrivateKey);\n          return new connectors_1.PrivateKeyConnector(network, privateKey, base_1.CeloContract.GoldToken);\n        }\n      case constants_1.WalletTypes.CoinbaseWallet:\n        return new connectors_1.CoinbaseWalletConnector(network, manualNetworkingMode, dapp);\n      case constants_1.WalletTypes.CeloDance:\n      case constants_1.WalletTypes.CeloTerminal:\n      case constants_1.WalletTypes.CeloWallet:\n      case constants_1.WalletTypes.Valora:\n      case constants_1.WalletTypes.WalletConnect:\n        {\n          return new connectors_1.WalletConnectConnector(network, manualNetworkingMode, base_1.CeloContract.GoldToken, {\n            projectId: dapp.walletConnectProjectId,\n            chainId: network.chainId,\n            init: {\n              metadata: Object.assign(Object.assign({}, dapp), {\n                icons: [dapp.icon]\n              })\n            }\n          });\n        }\n      case constants_1.WalletTypes.Unauthenticated:\n        return null;\n    }\n  } catch (e) {\n    (0, logger_1.getApplicationLogger)().error('Unknown error resurrecting', walletType, e);\n    return null;\n  }\n}\nexports.resurrector = resurrector;\nfunction getNetwork(networks) {\n  const networkName = (0, local_storage_1.getTypedStorageKey)(constants_1.localStorageKeys.lastUsedNetwork);\n  if (!networkName) return;\n  const network = networks.find(net => net.name === networkName);\n  return network;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","resurrector","base_1","require","connectors_1","constants_1","local_storage_1","logger_1","networks","dapp","manualNetworkingMode","walletType","getTypedStorageKey","localStorageKeys","lastUsedWalletType","network","getNetwork","getApplicationLogger","log","WalletTypes","Ledger","index","lastUsedIndex","LedgerConnector","CeloContract","GoldToken","CeloExtensionWallet","CeloExtensionWalletConnector","MetaMask","MetaMaskConnector","Injected","InjectedConnector","undefined","PrivateKey","privateKey","lastUsedPrivateKey","PrivateKeyConnector","CoinbaseWallet","CoinbaseWalletConnector","CeloDance","CeloTerminal","CeloWallet","Valora","WalletConnect","WalletConnectConnector","projectId","walletConnectProjectId","chainId","init","metadata","assign","icons","icon","Unauthenticated","e","error","networkName","lastUsedNetwork","find","net","name"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@celo/react-celo/lib/utils/resurrector.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resurrector = void 0;\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nconst base_1 = require(\"@celo/contractkit/lib/base\");\nconst connectors_1 = require(\"../connectors\");\nconst constants_1 = require(\"../constants\");\nconst local_storage_1 = require(\"./local-storage\");\nconst logger_1 = require(\"./logger\");\nfunction resurrector(networks, dapp, manualNetworkingMode) {\n    const walletType = (0, local_storage_1.getTypedStorageKey)(constants_1.localStorageKeys.lastUsedWalletType);\n    const network = getNetwork(networks);\n    if (!walletType || !network)\n        return null;\n    (0, logger_1.getApplicationLogger)().log('[resurrector] will create', walletType, 'with', network, dapp);\n    try {\n        switch (walletType) {\n            case constants_1.WalletTypes.Ledger: {\n                const index = (0, local_storage_1.getTypedStorageKey)(constants_1.localStorageKeys.lastUsedIndex);\n                if (index === null)\n                    return null;\n                return new connectors_1.LedgerConnector(network, index, base_1.CeloContract.GoldToken);\n            }\n            case constants_1.WalletTypes.CeloExtensionWallet:\n                return new connectors_1.CeloExtensionWalletConnector(network, base_1.CeloContract.GoldToken);\n            case constants_1.WalletTypes.MetaMask:\n                return new connectors_1.MetaMaskConnector(network, manualNetworkingMode, base_1.CeloContract.GoldToken);\n            case constants_1.WalletTypes.Injected:\n                return new connectors_1.InjectedConnector(network, manualNetworkingMode, base_1.CeloContract.GoldToken, undefined);\n            case constants_1.WalletTypes.PrivateKey: {\n                const privateKey = (0, local_storage_1.getTypedStorageKey)(constants_1.localStorageKeys.lastUsedPrivateKey);\n                return new connectors_1.PrivateKeyConnector(network, privateKey, base_1.CeloContract.GoldToken);\n            }\n            case constants_1.WalletTypes.CoinbaseWallet:\n                return new connectors_1.CoinbaseWalletConnector(network, manualNetworkingMode, dapp);\n            case constants_1.WalletTypes.CeloDance:\n            case constants_1.WalletTypes.CeloTerminal:\n            case constants_1.WalletTypes.CeloWallet:\n            case constants_1.WalletTypes.Valora:\n            case constants_1.WalletTypes.WalletConnect: {\n                return new connectors_1.WalletConnectConnector(network, manualNetworkingMode, base_1.CeloContract.GoldToken, {\n                    projectId: dapp.walletConnectProjectId,\n                    chainId: network.chainId,\n                    init: {\n                        metadata: Object.assign(Object.assign({}, dapp), { icons: [dapp.icon] }),\n                    },\n                });\n            }\n            case constants_1.WalletTypes.Unauthenticated:\n                return null;\n        }\n    }\n    catch (e) {\n        (0, logger_1.getApplicationLogger)().error('Unknown error resurrecting', walletType, e);\n        return null;\n    }\n}\nexports.resurrector = resurrector;\nfunction getNetwork(networks) {\n    const networkName = (0, local_storage_1.getTypedStorageKey)(constants_1.localStorageKeys.lastUsedNetwork);\n    if (!networkName)\n        return;\n    const network = networks.find((net) => net.name === networkName);\n    return network;\n}\n//# sourceMappingURL=resurrector.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}