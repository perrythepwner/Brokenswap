{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExchangeWrapper = void 0;\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\n/**\n * Contract that allows to exchange StableToken for GoldToken and vice versa\n * using a Constant Product Market Maker Model aka Mento\n */\nvar ExchangeWrapper = /** @class */function (_super) {\n  __extends(ExchangeWrapper, _super);\n  function ExchangeWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Query spread parameter\n     * @returns Current spread charged on exchanges\n     */\n    _this.spread = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.spread, undefined, BaseWrapper_1.fixidityValueToBigNumber);\n    /**\n     * Query reserve fraction parameter\n     * @returns Current fraction to commit to the gold bucket\n     */\n    _this.reserveFraction = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.reserveFraction, undefined, BaseWrapper_1.fixidityValueToBigNumber);\n    /**\n     * Query update frequency parameter\n     * @returns The time period that needs to elapse between bucket\n     * updates\n     */\n    _this.updateFrequency = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.updateFrequency, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Query minimum reports parameter\n     * @returns The minimum number of fresh reports that need to be\n     * present in the oracle to update buckets\n     * commit to the gold bucket\n     */\n    _this.minimumReports = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.minimumReports, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Query last bucket update\n     * @returns The timestamp of the last time exchange buckets were updated.\n     */\n    _this.lastBucketUpdate = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.lastBucketUpdate, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * DEPRECATED: use function sell\n     * Exchanges sellAmount of sellToken in exchange for at least minBuyAmount of buyToken\n     * Requires the sellAmount to have been approved to the exchange\n     * @param sellAmount The amount of sellToken the user is selling to the exchange\n     * @param minBuyAmount The minimum amount of buyToken the user has to receive for this\n     * transaction to succeed\n     * @param sellGold `true` if gold is the sell token\n     * @return The amount of buyToken that was transfered\n     */\n    _this.exchange = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.exchange, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.valueToString, BaseWrapper_1.valueToString, BaseWrapper_1.identity));\n    /**\n     * Sells sellAmount of sellToken in exchange for at least minBuyAmount of buyToken\n     * Requires the sellAmount to have been approved to the exchange\n     * @param sellAmount The amount of sellToken the user is selling to the exchange\n     * @param minBuyAmount The minimum amount of buyToken the user has to receive for this\n     * transaction to succeed\n     * @param sellGold `true` if gold is the sell token\n     * @return The amount of buyToken that was transfered\n     */\n    _this.sell = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.sell, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.valueToString, BaseWrapper_1.valueToString, BaseWrapper_1.identity));\n    /**\n     * Sells sellAmount of sellToken in exchange for at least minBuyAmount of buyToken\n     * Requires the sellAmount to have been approved to the exchange\n     * @param buyAmount The amount of sellToken the user is selling to the exchange\n     * @param maxSellAmount The maximum amount of sellToken the user will sell for this\n     * transaction to succeed\n     * @param buyGold `true` if gold is the buy token\n     * @return The amount of buyToken that was transfered\n     */\n    _this.buy = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.buy, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.valueToString, BaseWrapper_1.valueToString, BaseWrapper_1.identity));\n    /**\n     * Returns the buy token and sell token bucket sizes, in order. The ratio of\n     * the two also represents the exchange rate between the two.\n     * @param sellGold `true` if gold is the sell token\n     * @return [buyTokenBucket, sellTokenBucket]\n     */\n    _this.getBuyAndSellBuckets = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getBuyAndSellBuckets, undefined, function (callRes) {\n      return [(0, BaseWrapper_1.valueToBigNumber)(callRes[0]), (0, BaseWrapper_1.valueToBigNumber)(callRes[1])];\n    });\n    /**\n     * Sell amount of CELO in exchange for at least minStableAmount of the stable token\n     * Requires the amount to have been approved to the exchange\n     * @param amount The amount of CELO the user is selling to the exchange\n     * @param minStableAmount The minimum amount of the stable token the user has to receive for this\n     * transaction to succeed\n     */\n    _this.sellGold = function (amount, minStableAmount) {\n      return _this.sell(amount, minStableAmount, true);\n    };\n    /**\n     * Sell amount of the stable token in exchange for at least minGoldAmount of CELO\n     * Requires the amount to have been approved to the exchange\n     * @param amount The amount of the stable token the user is selling to the exchange\n     * @param minGoldAmount The minimum amount of CELO the user has to receive for this\n     * transaction to succeed\n     */\n    _this.sellStable = function (amount, minGoldAmount) {\n      return _this.sell(amount, minGoldAmount, false);\n    };\n    /**\n     * Deprecated alias of sellStable.\n     * Sell amount of the stable token in exchange for at least minGoldAmount of CELO\n     * Requires the amount to have been approved to the exchange\n     * @deprecated use sellStable instead\n     * @param amount The amount of the stable token the user is selling to the exchange\n     * @param minGoldAmount The minimum amount of CELO the user has to receive for this\n     * transaction to succeed\n     */\n    _this.sellDollar = _this.sellStable;\n    /**\n     * Buy amount of CELO in exchange for at most maxStableAmount of the stable token\n     * Requires the amount to have been approved to the exchange\n     * @param amount The amount of CELO the user is buying from the exchange\n     * @param maxStableAmount The maximum amount of the stable token the user will pay for this\n     * transaction to succeed\n     */\n    _this.buyGold = function (amount, maxStableAmount) {\n      return _this.buy(amount, maxStableAmount, true);\n    };\n    /**\n     * Buy amount of the stable token in exchange for at least minGoldAmount of CELO\n     * Requires the amount to have been approved to the exchange\n     * @param amount The amount of the stable token the user is selling to the exchange\n     * @param maxGoldAmount The maximum amount of CELO the user will pay for this\n     * transaction to succeed\n     */\n    _this.buyStable = function (amount, maxGoldAmount) {\n      return _this.buy(amount, maxGoldAmount, false);\n    };\n    /**\n     * Deprecated alias of buyStable.\n     * Buy amount of the stable token in exchange for at least minGoldAmount of CELO\n     * Requires the amount to have been approved to the exchange\n     * @deprecated use buyStable instead\n     * @param amount The amount of the stable token the user is selling to the exchange\n     * @param maxGoldAmount The maximum amount of CELO the user will pay for this\n     * transaction to succeed\n     */\n    _this.buyDollar = _this.buyStable;\n    /**\n     * Returns the amount of CELO a user would get for sellAmount of the stable token\n     * @param sellAmount The amount of the stable token the user is selling to the exchange\n     * @return The corresponding CELO amount.\n     */\n    _this.quoteStableSell = function (sellAmount) {\n      return _this.getBuyTokenAmount(sellAmount, false);\n    };\n    /**\n     * Deprecated alias of quoteStableSell.\n     * Returns the amount of CELO a user would get for sellAmount of the stable token\n     * @deprecated Use quoteStableSell instead\n     * @param sellAmount The amount of the stable token the user is selling to the exchange\n     * @return The corresponding CELO amount.\n     */\n    _this.quoteUsdSell = _this.quoteStableSell;\n    /**\n     * Returns the amount of the stable token a user would get for sellAmount of CELO\n     * @param sellAmount The amount of CELO the user is selling to the exchange\n     * @return The corresponding stable token amount.\n     */\n    _this.quoteGoldSell = function (sellAmount) {\n      return _this.getBuyTokenAmount(sellAmount, true);\n    };\n    /**\n     * Returns the amount of CELO a user would need to exchange to receive buyAmount of\n     * the stable token.\n     * @param buyAmount The amount of the stable token the user would like to purchase.\n     * @return The corresponding CELO amount.\n     */\n    _this.quoteStableBuy = function (buyAmount) {\n      return _this.getSellTokenAmount(buyAmount, false);\n    };\n    /**\n     * Deprecated alias of quoteStableBuy.\n     * Returns the amount of CELO a user would need to exchange to receive buyAmount of\n     * the stable token.\n     * @deprecated Use quoteStableBuy instead\n     * @param buyAmount The amount of the stable token the user would like to purchase.\n     * @return The corresponding CELO amount.\n     */\n    _this.quoteUsdBuy = _this.quoteStableBuy;\n    /**\n     * Returns the amount of the stable token a user would need to exchange to receive buyAmount of\n     * CELO.\n     * @param buyAmount The amount of CELO the user would like to purchase.\n     * @return The corresponding stable token amount.\n     */\n    _this.quoteGoldBuy = function (buyAmount) {\n      return _this.getSellTokenAmount(buyAmount, true);\n    };\n    /**\n     * Returns the exchange rate for the stable token estimated at the buyAmount\n     * @param buyAmount The amount of the stable token in wei to estimate the exchange rate at\n     * @return The exchange rate (number of CELO received for one stable token)\n     */\n    _this.getStableExchangeRate = function (buyAmount) {\n      return _this.getExchangeRate(buyAmount, false);\n    };\n    /**\n     * Deprecated alias of getStableExchangeRate.\n     * Returns the exchange rate for the stable token estimated at the buyAmount\n     * @deprecated Use getStableExchangeRate instead\n     * @param buyAmount The amount of the stable token in wei to estimate the exchange rate at\n     * @return The exchange rate (number of CELO received for one stable token)\n     */\n    _this.getUsdExchangeRate = _this.getStableExchangeRate;\n    /**\n     * Returns the exchange rate for CELO estimated at the buyAmount\n     * @param buyAmount The amount of CELO in wei to estimate the exchange rate at\n     * @return The exchange rate (number of stable tokens received for one CELO)\n     */\n    _this.getGoldExchangeRate = function (buyAmount) {\n      return _this.getExchangeRate(buyAmount, true);\n    };\n    return _this;\n  }\n  /**\n   * @dev Returns the amount of buyToken a user would get for sellAmount of sellToken\n   * @param sellAmount The amount of sellToken the user is selling to the exchange\n   * @param sellGold `true` if gold is the sell token\n   * @return The corresponding buyToken amount.\n   */\n  ExchangeWrapper.prototype.getBuyTokenAmount = function (sellAmount, sellGold) {\n    return __awaiter(this, void 0, void 0, function () {\n      var sell, res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            sell = (0, BaseWrapper_1.valueToString)(sellAmount);\n            if (new bignumber_js_1.default(sell).eq(0)) {\n              return [2 /*return*/, new bignumber_js_1.default(0)];\n            }\n            return [4 /*yield*/, this.contract.methods.getBuyTokenAmount(sell, sellGold).call()];\n          case 1:\n            res = _a.sent();\n            return [2 /*return*/, (0, BaseWrapper_1.valueToBigNumber)(res)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the amount of sellToken a user would need to exchange to receive buyAmount of\n   * buyToken.\n   * @param buyAmount The amount of buyToken the user would like to purchase.\n   * @param sellGold `true` if gold is the sell token\n   * @return The corresponding sellToken amount.\n   */\n  ExchangeWrapper.prototype.getSellTokenAmount = function (buyAmount, sellGold) {\n    return __awaiter(this, void 0, void 0, function () {\n      var buy, res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            buy = (0, BaseWrapper_1.valueToString)(buyAmount);\n            if (new bignumber_js_1.default(buy).eq(0)) {\n              return [2 /*return*/, new bignumber_js_1.default(0)];\n            }\n            return [4 /*yield*/, this.contract.methods.getSellTokenAmount(buy, sellGold).call()];\n          case 1:\n            res = _a.sent();\n            return [2 /*return*/, (0, BaseWrapper_1.valueToBigNumber)(res)];\n        }\n      });\n    });\n  };\n  /**\n   * @dev Returns the current configuration of the exchange contract\n   * @return ExchangeConfig object\n   */\n  ExchangeWrapper.prototype.getConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, Promise.all([this.spread(), this.reserveFraction(), this.updateFrequency(), this.minimumReports(), this.lastBucketUpdate()])];\n          case 1:\n            res = _a.sent();\n            return [2 /*return*/, {\n              spread: res[0],\n              reserveFraction: res[1],\n              updateFrequency: res[2],\n              minimumReports: res[3],\n              lastBucketUpdate: res[4]\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @dev Returns human readable configuration of the exchange contract\n   * @return ExchangeConfig object\n   */\n  ExchangeWrapper.prototype.getHumanReadableConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getConfig()];\n          case 1:\n            config = _a.sent();\n            return [2 /*return*/, __assign(__assign({}, config), {\n              updateFrequency: (0, BaseWrapper_1.secondsToDurationString)(config.updateFrequency),\n              lastBucketUpdate: (0, BaseWrapper_1.unixSecondsTimestampToDateString)(config.lastBucketUpdate)\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the exchange rate estimated at buyAmount.\n   * @param buyAmount The amount of buyToken in wei to estimate the exchange rate at\n   * @param sellGold `true` if gold is the sell token\n   * @return The exchange rate (number of sellTokens received for one buyToken).\n   */\n  ExchangeWrapper.prototype.getExchangeRate = function (buyAmount, sellGold) {\n    return __awaiter(this, void 0, void 0, function () {\n      var takerAmount;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getBuyTokenAmount(buyAmount, sellGold)];\n          case 1:\n            takerAmount = _a.sent();\n            return [2 /*return*/, (0, BaseWrapper_1.valueToFrac)(buyAmount, takerAmount)];\n          // Number of sellTokens received for one buyToken\n        }\n      });\n    });\n  };\n\n  return ExchangeWrapper;\n}(BaseWrapper_1.BaseWrapper);\nexports.ExchangeWrapper = ExchangeWrapper;","map":null,"metadata":{},"sourceType":"script"}