{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useConnectedSigner = exports.useLazyConnectedSigner = exports.useGetConnectedSigner = exports.useProviderOrSigner = exports.useProvider = void 0;\nconst providers_1 = require(\"@ethersproject/providers\");\nconst react_1 = require(\"react\");\nconst use_is_mounted_1 = require(\"./hooks/use-is-mounted\");\nconst use_celo_1 = require(\"./use-celo\");\nconst useProvider = () => {\n  const {\n    kit,\n    network\n  } = (0, use_celo_1.useCelo)();\n  const provider = kit.connection.web3.currentProvider;\n  const {\n    chainId,\n    name\n  } = network;\n  return (0, react_1.useMemo)(() => {\n    return new providers_1.Web3Provider(provider, {\n      chainId,\n      name\n    });\n  }, [provider, chainId, name]);\n};\nexports.useProvider = useProvider;\nconst useProviderOrSigner = () => {\n  const {\n    kit\n  } = (0, use_celo_1.useCelo)();\n  const provider = (0, exports.useProvider)();\n  return (0, react_1.useMemo)(() => {\n    return kit.connection.defaultAccount ? provider.getSigner(kit.connection.defaultAccount) : provider;\n  }, [provider, kit.connection.defaultAccount]);\n};\nexports.useProviderOrSigner = useProviderOrSigner;\nconst useGetConnectedSigner = () => {\n  const {\n    kit,\n    getConnectedKit,\n    network\n  } = (0, use_celo_1.useCelo)();\n  const signer = (0, exports.useProviderOrSigner)();\n  const {\n    chainId,\n    name\n  } = network;\n  return (0, react_1.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {\n    if (kit.connection.defaultAccount) {\n      return signer;\n    }\n    const nextKit = yield getConnectedKit();\n    const nextProvider = nextKit.connection.web3.currentProvider;\n    return new providers_1.Web3Provider(nextProvider, {\n      chainId,\n      name\n    }).getSigner(nextKit.connection.defaultAccount);\n  }), [kit.connection.defaultAccount, getConnectedKit, signer, chainId, name]);\n};\nexports.useGetConnectedSigner = useGetConnectedSigner;\nconst useLazyConnectedSigner = () => {\n  var _a;\n  const isMountedRef = (0, use_is_mounted_1.useIsMounted)();\n  const getConnectedSigner = (0, exports.useGetConnectedSigner)();\n  const [signer, setSigner] = (0, react_1.useState)(null);\n  const getConnectedSignerCb = (0, react_1.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {\n    const theSigner = yield getConnectedSigner();\n    if (isMountedRef.current) {\n      setSigner(theSigner);\n    }\n    return theSigner;\n  }), [getConnectedSigner, setSigner, isMountedRef]);\n  return {\n    signer,\n    getConnectedSigner: getConnectedSignerCb,\n    address: (_a = signer === null || signer === void 0 ? void 0 : signer._address) !== null && _a !== void 0 ? _a : null\n  };\n};\nexports.useLazyConnectedSigner = useLazyConnectedSigner;\nconst useConnectedSigner = () => {\n  const getConnectedSigner = (0, exports.useGetConnectedSigner)();\n  const [signer, setSigner] = (0, react_1.useState)(null);\n  (0, react_1.useEffect)(() => {\n    let stale;\n    void (() => __awaiter(void 0, void 0, void 0, function* () {\n      const theSigner = yield getConnectedSigner();\n      if (!stale) {\n        setSigner(theSigner);\n      }\n      setSigner(yield getConnectedSigner());\n    }))();\n    return () => {\n      stale = true;\n    };\n  }, [getConnectedSigner]);\n  return signer;\n};\nexports.useConnectedSigner = useConnectedSigner;","map":null,"metadata":{},"sourceType":"script"}