{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inputSignFormatter = exports.inputAddressFormatter = exports.inputAccessListFormatter = exports.parseAccessList = exports.outputBigNumberFormatter = exports.outputLogFormatter = exports.hexToNumber = exports.outputBlockFormatter = exports.outputBlockHeaderFormatter = exports.inputBlockNumberFormatter = exports.inputDefaultBlockNumberFormatter = exports.outputCeloTxReceiptFormatter = exports.outputCeloTxFormatter = exports.inputCeloTxFormatter = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar address_2 = require(\"@celo/utils/lib/address\");\nvar solidity_1 = require(\"@celo/utils/lib/solidity\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar utf8_1 = require(\"utf8\");\n/**\n * Formats the input of a transaction and converts all values to HEX\n */\nfunction inputCeloTxFormatter(tx) {\n  var from = tx.from,\n    chainId = tx.chainId,\n    nonce = tx.nonce,\n    to = tx.to,\n    gas = tx.gas,\n    gasPrice = tx.gasPrice,\n    maxFeePerGas = tx.maxFeePerGas,\n    maxPriorityFeePerGas = tx.maxPriorityFeePerGas,\n    feeCurrency = tx.feeCurrency,\n    gatewayFee = tx.gatewayFee,\n    gatewayFeeRecipient = tx.gatewayFeeRecipient,\n    data = tx.data,\n    value = tx.value,\n    accessList = tx.accessList,\n    common = tx.common,\n    chain = tx.chain,\n    hardfork = tx.hardfork,\n    rest = __rest(tx, [\"from\", \"chainId\", \"nonce\", \"to\", \"gas\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"feeCurrency\", \"gatewayFee\", \"gatewayFeeRecipient\", \"data\", \"value\", \"accessList\", \"common\", \"chain\", \"hardfork\"]);\n  var formattedTX = rest;\n  formattedTX.from = inputAddressFormatter(from === null || from === void 0 ? void 0 : from.toString());\n  formattedTX.to = inputAddressFormatter(to);\n  formattedTX.gas = numberToHex(gas);\n  formattedTX.value = numberToHex(value === null || value === void 0 ? void 0 : value.toString());\n  formattedTX.nonce = numberToHex(nonce === null || nonce === void 0 ? void 0 : nonce.toString());\n  if (feeCurrency) {\n    formattedTX.feeCurrency = inputAddressFormatter(feeCurrency);\n  }\n  if (gatewayFeeRecipient) {\n    formattedTX.gatewayFeeRecipient = inputAddressFormatter(gatewayFeeRecipient);\n  }\n  if (gatewayFee) {\n    formattedTX.gatewayFee = numberToHex(gatewayFee);\n  }\n  if (data && !isHex(data)) {\n    throw new Error('The data field must be HEX encoded data.');\n  } else if (data) {\n    formattedTX.data = (0, address_1.ensureLeading0x)(data);\n  }\n  if (gasPrice) {\n    formattedTX.gasPrice = numberToHex(gasPrice.toString());\n  }\n  if (maxFeePerGas) {\n    formattedTX.maxFeePerGas = numberToHex(maxFeePerGas.toString());\n  }\n  if (maxPriorityFeePerGas) {\n    formattedTX.maxPriorityFeePerGas = numberToHex(maxPriorityFeePerGas.toString());\n  }\n  if (accessList) {\n    formattedTX.accessList = inputAccessListFormatter(accessList);\n  }\n  return formattedTX;\n}\nexports.inputCeloTxFormatter = inputCeloTxFormatter;\nfunction outputCeloTxFormatter(tx) {\n  if (tx.blockNumber !== null) {\n    tx.blockNumber = hexToNumber(tx.blockNumber);\n  }\n  if (tx.transactionIndex !== null) {\n    tx.transactionIndex = hexToNumber(tx.transactionIndex);\n  }\n  tx.nonce = hexToNumber(tx.nonce);\n  tx.gas = hexToNumber(tx.gas);\n  tx.value = outputBigNumberFormatter(tx.value);\n  if (tx.gatewayFee) {\n    tx.gatewayFee = outputBigNumberFormatter(tx.gatewayFee);\n  }\n  if (tx.gasPrice) {\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n  }\n  if (tx.maxFeePerGas) {\n    tx.maxFeePerGas = outputBigNumberFormatter(tx.maxFeePerGas);\n  }\n  if (tx.maxPriorityFeePerGas) {\n    tx.maxPriorityFeePerGas = outputBigNumberFormatter(tx.maxPriorityFeePerGas);\n  }\n  tx.to = tx.to && (0, address_2.isValidAddress)(tx.to) ?\n  // tx.to could be `0x0` or `null` while contract creation\n  tx.to = (0, address_2.toChecksumAddress)(tx.to) : null; // set to `null` if invalid address\n  if (tx.from) {\n    tx.from = (0, address_2.toChecksumAddress)(tx.from);\n  }\n  if (tx.feeCurrency) {\n    tx.feeCurrency = (0, address_2.toChecksumAddress)(tx.feeCurrency);\n  }\n  if (tx.gatewayFeeRecipient) {\n    tx.gatewayFeeRecipient = (0, address_2.toChecksumAddress)(tx.gatewayFeeRecipient);\n  }\n  return tx;\n}\nexports.outputCeloTxFormatter = outputCeloTxFormatter;\nfunction outputCeloTxReceiptFormatter(receipt) {\n  if (typeof receipt !== 'object') {\n    throw new Error('Received receipt is invalid: ' + receipt);\n  }\n  if (receipt.blockNumber !== null) {\n    receipt.blockNumber = hexToNumber(receipt.blockNumber);\n  }\n  if (receipt.transactionIndex !== null) {\n    receipt.transactionIndex = hexToNumber(receipt.transactionIndex);\n  }\n  receipt.cumulativeGasUsed = hexToNumber(receipt.cumulativeGasUsed);\n  receipt.gasUsed = hexToNumber(receipt.gasUsed);\n  if (Array.isArray(receipt.logs)) {\n    receipt.logs = receipt.logs.map(outputLogFormatter);\n  }\n  if (receipt.contractAddress) {\n    receipt.contractAddress = (0, address_2.toChecksumAddress)(receipt.contractAddress);\n  }\n  if (typeof receipt.status !== 'undefined' && receipt.status !== null) {\n    receipt.status = Boolean(parseInt((0, address_1.trimLeading0x)(receipt.status), 10));\n  }\n  return receipt;\n}\nexports.outputCeloTxReceiptFormatter = outputCeloTxReceiptFormatter;\nfunction inputDefaultBlockNumberFormatter(blockNumber) {\n  if (blockNumber == null) {\n    blockNumber = 'latest';\n  }\n  return inputBlockNumberFormatter(blockNumber);\n}\nexports.inputDefaultBlockNumberFormatter = inputDefaultBlockNumberFormatter;\nfunction inputBlockNumberFormatter(blockNumber) {\n  if (blockNumber == null) {\n    return undefined;\n  }\n  if (isPredefinedBlockNumber(blockNumber)) {\n    return blockNumber;\n  }\n  if (blockNumber === 'genesis') {\n    return '0x0';\n  }\n  return isHexStrict(blockNumber.toString()) ? blockNumber.toString().toLocaleLowerCase() : numberToHex(blockNumber.toString());\n}\nexports.inputBlockNumberFormatter = inputBlockNumberFormatter;\n// TODO prune after gingerbread hardfork\nfunction outputBlockHeaderFormatter(blockHeader) {\n  // transform to number\n  blockHeader.gasLimit = hexToNumber(blockHeader.gasLimit);\n  blockHeader.gasUsed = hexToNumber(blockHeader.gasUsed);\n  blockHeader.size = hexToNumber(blockHeader.size);\n  blockHeader.timestamp = hexToNumber(blockHeader.timestamp);\n  if (blockHeader.number !== null) {\n    blockHeader.number = hexToNumber(blockHeader.number);\n  }\n  if (blockHeader.miner) {\n    blockHeader.miner = (0, address_2.toChecksumAddress)(blockHeader.miner);\n  }\n  return blockHeader;\n}\nexports.outputBlockHeaderFormatter = outputBlockHeaderFormatter;\nfunction outputBlockFormatter(block) {\n  block = outputBlockHeaderFormatter(block);\n  if (block.difficulty) {\n    block.difficulty = outputBigNumberFormatter(block.difficulty);\n  }\n  if (block.totalDifficulty) {\n    block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n  }\n  if (Array.isArray(block.transactions)) {\n    block.transactions.forEach(function (item) {\n      if (typeof item !== 'string' && !(item instanceof String)) {\n        return outputCeloTxFormatter(item);\n      }\n    });\n  }\n  return block;\n}\nexports.outputBlockFormatter = outputBlockFormatter;\nfunction hexToNumber(hex) {\n  if (hex) {\n    return new bignumber_js_1.default(hex).toNumber();\n  }\n  return undefined;\n}\nexports.hexToNumber = hexToNumber;\nfunction outputLogFormatter(log) {\n  // generate a custom log id\n  if (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string' && typeof log.logIndex === 'string') {\n    var shaId = (0, solidity_1.sha3)((0, address_1.trimLeading0x)(log.blockHash) + (0, address_1.trimLeading0x)(log.transactionHash) + (0, address_1.trimLeading0x)(log.logIndex));\n    log.id = 'log_' + (0, address_1.trimLeading0x)(shaId).substring(0, 8);\n  } else if (!log.id) {\n    log.id = null;\n  }\n  if (log.blockNumber !== null) {\n    log.blockNumber = hexToNumber(log.blockNumber);\n  }\n  if (log.transactionIndex !== null) {\n    log.transactionIndex = hexToNumber(log.transactionIndex);\n  }\n  if (log.logIndex !== null) {\n    log.logIndex = hexToNumber(log.logIndex);\n  }\n  if (log.address) {\n    log.address = (0, address_2.toChecksumAddress)(log.address);\n  }\n  return log;\n}\nexports.outputLogFormatter = outputLogFormatter;\nfunction outputBigNumberFormatter(hex) {\n  return new bignumber_js_1.default(hex).toString(10);\n}\nexports.outputBigNumberFormatter = outputBigNumberFormatter;\nfunction isHash(value) {\n  return isHex(value) && value.length === 32;\n}\nfunction parseAccessList(accessListRaw) {\n  var accessList = [];\n  if (!accessListRaw) {\n    return accessList;\n  }\n  for (var _i = 0, accessListRaw_1 = accessListRaw; _i < accessListRaw_1.length; _i++) {\n    var entry = accessListRaw_1[_i];\n    var address = entry[0],\n      storageKeys = entry[1];\n    throwIfInvalidAddress(address);\n    accessList.push({\n      address: address,\n      storageKeys: storageKeys.map(function (key) {\n        if (isHash(key)) {\n          return key;\n        } else {\n          // same behavior as web3\n          throw new Error(\"Invalid storage key: \".concat(key));\n        }\n      })\n    });\n  }\n  return accessList;\n}\nexports.parseAccessList = parseAccessList;\nfunction throwIfInvalidAddress(address) {\n  if (!(0, address_2.isValidAddress)(address)) {\n    throw new Error(\"Invalid address: \".concat(address));\n  }\n}\nfunction inputAccessListFormatter(accessList) {\n  if (!accessList || accessList.length === 0) {\n    return [];\n  }\n  return accessList.reduce(function (acc, _a) {\n    var address = _a.address,\n      storageKeys = _a.storageKeys;\n    throwIfInvalidAddress(address);\n    storageKeys.forEach(function (storageKey) {\n      if (storageKey.length - 2 !== 64) {\n        throw new Error(\"Invalid storage key: \".concat(storageKey));\n      }\n    });\n    acc.push([address, storageKeys]);\n    return acc;\n  }, []);\n}\nexports.inputAccessListFormatter = inputAccessListFormatter;\nfunction inputAddressFormatter(address) {\n  if (!address || address === '0x') {\n    return undefined;\n  }\n  if ((0, address_2.isValidAddress)(address)) {\n    return (0, address_1.ensureLeading0x)(address).toLocaleLowerCase();\n  }\n  throw new Error(\"Provided address \".concat(address, \" is invalid, the capitalization checksum test failed\"));\n}\nexports.inputAddressFormatter = inputAddressFormatter;\nfunction inputSignFormatter(data) {\n  return isHexStrict(data) ? data : utf8ToHex(data);\n}\nexports.inputSignFormatter = inputSignFormatter;\nfunction utf8ToHex(str) {\n  str = (0, utf8_1.encode)(str);\n  var hex = '';\n  // remove \\u0000 padding from either side\n  str = str.replace(/^(?:\\u0000)*/, '');\n  str = str.split('').reverse().join('');\n  str = str.replace(/^(?:\\u0000)*/, '');\n  str = str.split('').reverse().join('');\n  for (var i = 0; i < str.length; i++) {\n    var code = str.charCodeAt(i);\n    // if (code !== 0) {\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n;\n    // }\n  }\n\n  return (0, address_1.ensureLeading0x)(hex);\n}\nfunction isHex(hex) {\n  return /^(-0x|0x)?[0-9a-f]*$/i.test(hex);\n}\nfunction isHexStrict(hex) {\n  return /^(-)?0x[0-9a-f]*$/i.test(hex);\n}\nfunction numberToHex(value) {\n  if (value) {\n    var numberValue = new bignumber_js_1.default(value);\n    var result = (0, address_1.ensureLeading0x)(new bignumber_js_1.default(value).toString(16));\n    // Seen in web3, copied just in case\n    return numberValue.lt(new bignumber_js_1.default(0)) ? \"-\".concat(result) : result;\n  }\n  return undefined;\n}\nfunction isPredefinedBlockNumber(blockNumber) {\n  return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n}","map":{"version":3,"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__importDefault","mod","__esModule","defineProperty","exports","value","inputSignFormatter","inputAddressFormatter","inputAccessListFormatter","parseAccessList","outputBigNumberFormatter","outputLogFormatter","hexToNumber","outputBlockFormatter","outputBlockHeaderFormatter","inputBlockNumberFormatter","inputDefaultBlockNumberFormatter","outputCeloTxReceiptFormatter","outputCeloTxFormatter","inputCeloTxFormatter","address_1","require","address_2","solidity_1","bignumber_js_1","utf8_1","tx","from","chainId","nonce","to","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","feeCurrency","gatewayFee","gatewayFeeRecipient","data","accessList","common","chain","hardfork","rest","formattedTX","toString","numberToHex","isHex","Error","ensureLeading0x","blockNumber","transactionIndex","isValidAddress","toChecksumAddress","receipt","cumulativeGasUsed","gasUsed","Array","isArray","logs","map","contractAddress","status","Boolean","parseInt","trimLeading0x","undefined","isPredefinedBlockNumber","isHexStrict","toLocaleLowerCase","blockHeader","gasLimit","size","timestamp","number","miner","block","difficulty","totalDifficulty","transactions","forEach","item","String","hex","default","toNumber","log","blockHash","transactionHash","logIndex","shaId","sha3","id","substring","address","isHash","accessListRaw","_i","accessListRaw_1","entry","storageKeys","throwIfInvalidAddress","push","key","concat","reduce","acc","_a","storageKey","utf8ToHex","str","encode","replace","split","reverse","join","code","charCodeAt","n","test","numberValue","result","lt"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@celo/wallet-base/node_modules/@celo/connect/lib/utils/formatter.js"],"sourcesContent":["\"use strict\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.inputSignFormatter = exports.inputAddressFormatter = exports.inputAccessListFormatter = exports.parseAccessList = exports.outputBigNumberFormatter = exports.outputLogFormatter = exports.hexToNumber = exports.outputBlockFormatter = exports.outputBlockHeaderFormatter = exports.inputBlockNumberFormatter = exports.inputDefaultBlockNumberFormatter = exports.outputCeloTxReceiptFormatter = exports.outputCeloTxFormatter = exports.inputCeloTxFormatter = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar address_2 = require(\"@celo/utils/lib/address\");\nvar solidity_1 = require(\"@celo/utils/lib/solidity\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar utf8_1 = require(\"utf8\");\n/**\n * Formats the input of a transaction and converts all values to HEX\n */\nfunction inputCeloTxFormatter(tx) {\n    var from = tx.from, chainId = tx.chainId, nonce = tx.nonce, to = tx.to, gas = tx.gas, gasPrice = tx.gasPrice, maxFeePerGas = tx.maxFeePerGas, maxPriorityFeePerGas = tx.maxPriorityFeePerGas, feeCurrency = tx.feeCurrency, gatewayFee = tx.gatewayFee, gatewayFeeRecipient = tx.gatewayFeeRecipient, data = tx.data, value = tx.value, accessList = tx.accessList, common = tx.common, chain = tx.chain, hardfork = tx.hardfork, rest = __rest(tx, [\"from\", \"chainId\", \"nonce\", \"to\", \"gas\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"feeCurrency\", \"gatewayFee\", \"gatewayFeeRecipient\", \"data\", \"value\", \"accessList\", \"common\", \"chain\", \"hardfork\"]);\n    var formattedTX = rest;\n    formattedTX.from = inputAddressFormatter(from === null || from === void 0 ? void 0 : from.toString());\n    formattedTX.to = inputAddressFormatter(to);\n    formattedTX.gas = numberToHex(gas);\n    formattedTX.value = numberToHex(value === null || value === void 0 ? void 0 : value.toString());\n    formattedTX.nonce = numberToHex(nonce === null || nonce === void 0 ? void 0 : nonce.toString());\n    if (feeCurrency) {\n        formattedTX.feeCurrency = inputAddressFormatter(feeCurrency);\n    }\n    if (gatewayFeeRecipient) {\n        formattedTX.gatewayFeeRecipient = inputAddressFormatter(gatewayFeeRecipient);\n    }\n    if (gatewayFee) {\n        formattedTX.gatewayFee = numberToHex(gatewayFee);\n    }\n    if (data && !isHex(data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n    else if (data) {\n        formattedTX.data = (0, address_1.ensureLeading0x)(data);\n    }\n    if (gasPrice) {\n        formattedTX.gasPrice = numberToHex(gasPrice.toString());\n    }\n    if (maxFeePerGas) {\n        formattedTX.maxFeePerGas = numberToHex(maxFeePerGas.toString());\n    }\n    if (maxPriorityFeePerGas) {\n        formattedTX.maxPriorityFeePerGas = numberToHex(maxPriorityFeePerGas.toString());\n    }\n    if (accessList) {\n        formattedTX.accessList = inputAccessListFormatter(accessList);\n    }\n    return formattedTX;\n}\nexports.inputCeloTxFormatter = inputCeloTxFormatter;\nfunction outputCeloTxFormatter(tx) {\n    if (tx.blockNumber !== null) {\n        tx.blockNumber = hexToNumber(tx.blockNumber);\n    }\n    if (tx.transactionIndex !== null) {\n        tx.transactionIndex = hexToNumber(tx.transactionIndex);\n    }\n    tx.nonce = hexToNumber(tx.nonce);\n    tx.gas = hexToNumber(tx.gas);\n    tx.value = outputBigNumberFormatter(tx.value);\n    if (tx.gatewayFee) {\n        tx.gatewayFee = outputBigNumberFormatter(tx.gatewayFee);\n    }\n    if (tx.gasPrice) {\n        tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    }\n    if (tx.maxFeePerGas) {\n        tx.maxFeePerGas = outputBigNumberFormatter(tx.maxFeePerGas);\n    }\n    if (tx.maxPriorityFeePerGas) {\n        tx.maxPriorityFeePerGas = outputBigNumberFormatter(tx.maxPriorityFeePerGas);\n    }\n    tx.to =\n        tx.to && (0, address_2.isValidAddress)(tx.to)\n            ? // tx.to could be `0x0` or `null` while contract creation\n                (tx.to = (0, address_2.toChecksumAddress)(tx.to))\n            : null; // set to `null` if invalid address\n    if (tx.from) {\n        tx.from = (0, address_2.toChecksumAddress)(tx.from);\n    }\n    if (tx.feeCurrency) {\n        tx.feeCurrency = (0, address_2.toChecksumAddress)(tx.feeCurrency);\n    }\n    if (tx.gatewayFeeRecipient) {\n        tx.gatewayFeeRecipient = (0, address_2.toChecksumAddress)(tx.gatewayFeeRecipient);\n    }\n    return tx;\n}\nexports.outputCeloTxFormatter = outputCeloTxFormatter;\nfunction outputCeloTxReceiptFormatter(receipt) {\n    if (typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: ' + receipt);\n    }\n    if (receipt.blockNumber !== null) {\n        receipt.blockNumber = hexToNumber(receipt.blockNumber);\n    }\n    if (receipt.transactionIndex !== null) {\n        receipt.transactionIndex = hexToNumber(receipt.transactionIndex);\n    }\n    receipt.cumulativeGasUsed = hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = hexToNumber(receipt.gasUsed);\n    if (Array.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n    if (receipt.contractAddress) {\n        receipt.contractAddress = (0, address_2.toChecksumAddress)(receipt.contractAddress);\n    }\n    if (typeof receipt.status !== 'undefined' && receipt.status !== null) {\n        receipt.status = Boolean(parseInt((0, address_1.trimLeading0x)(receipt.status), 10));\n    }\n    return receipt;\n}\nexports.outputCeloTxReceiptFormatter = outputCeloTxReceiptFormatter;\nfunction inputDefaultBlockNumberFormatter(blockNumber) {\n    if (blockNumber == null) {\n        blockNumber = 'latest';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n}\nexports.inputDefaultBlockNumberFormatter = inputDefaultBlockNumberFormatter;\nfunction inputBlockNumberFormatter(blockNumber) {\n    if (blockNumber == null) {\n        return undefined;\n    }\n    if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    if (blockNumber === 'genesis') {\n        return '0x0';\n    }\n    return isHexStrict(blockNumber.toString())\n        ? blockNumber.toString().toLocaleLowerCase()\n        : numberToHex(blockNumber.toString());\n}\nexports.inputBlockNumberFormatter = inputBlockNumberFormatter;\n// TODO prune after gingerbread hardfork\nfunction outputBlockHeaderFormatter(blockHeader) {\n    // transform to number\n    blockHeader.gasLimit = hexToNumber(blockHeader.gasLimit);\n    blockHeader.gasUsed = hexToNumber(blockHeader.gasUsed);\n    blockHeader.size = hexToNumber(blockHeader.size);\n    blockHeader.timestamp = hexToNumber(blockHeader.timestamp);\n    if (blockHeader.number !== null) {\n        blockHeader.number = hexToNumber(blockHeader.number);\n    }\n    if (blockHeader.miner) {\n        blockHeader.miner = (0, address_2.toChecksumAddress)(blockHeader.miner);\n    }\n    return blockHeader;\n}\nexports.outputBlockHeaderFormatter = outputBlockHeaderFormatter;\nfunction outputBlockFormatter(block) {\n    block = outputBlockHeaderFormatter(block);\n    if (block.difficulty) {\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    }\n    if (block.totalDifficulty) {\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n    }\n    if (Array.isArray(block.transactions)) {\n        block.transactions.forEach(function (item) {\n            if (typeof item !== 'string' && !(item instanceof String)) {\n                return outputCeloTxFormatter(item);\n            }\n        });\n    }\n    return block;\n}\nexports.outputBlockFormatter = outputBlockFormatter;\nfunction hexToNumber(hex) {\n    if (hex) {\n        return new bignumber_js_1.default(hex).toNumber();\n    }\n    return undefined;\n}\nexports.hexToNumber = hexToNumber;\nfunction outputLogFormatter(log) {\n    // generate a custom log id\n    if (typeof log.blockHash === 'string' &&\n        typeof log.transactionHash === 'string' &&\n        typeof log.logIndex === 'string') {\n        var shaId = (0, solidity_1.sha3)((0, address_1.trimLeading0x)(log.blockHash) +\n            (0, address_1.trimLeading0x)(log.transactionHash) +\n            (0, address_1.trimLeading0x)(log.logIndex));\n        log.id = 'log_' + (0, address_1.trimLeading0x)(shaId).substring(0, 8);\n    }\n    else if (!log.id) {\n        log.id = null;\n    }\n    if (log.blockNumber !== null) {\n        log.blockNumber = hexToNumber(log.blockNumber);\n    }\n    if (log.transactionIndex !== null) {\n        log.transactionIndex = hexToNumber(log.transactionIndex);\n    }\n    if (log.logIndex !== null) {\n        log.logIndex = hexToNumber(log.logIndex);\n    }\n    if (log.address) {\n        log.address = (0, address_2.toChecksumAddress)(log.address);\n    }\n    return log;\n}\nexports.outputLogFormatter = outputLogFormatter;\nfunction outputBigNumberFormatter(hex) {\n    return new bignumber_js_1.default(hex).toString(10);\n}\nexports.outputBigNumberFormatter = outputBigNumberFormatter;\nfunction isHash(value) {\n    return isHex(value) && value.length === 32;\n}\nfunction parseAccessList(accessListRaw) {\n    var accessList = [];\n    if (!accessListRaw) {\n        return accessList;\n    }\n    for (var _i = 0, accessListRaw_1 = accessListRaw; _i < accessListRaw_1.length; _i++) {\n        var entry = accessListRaw_1[_i];\n        var address = entry[0], storageKeys = entry[1];\n        throwIfInvalidAddress(address);\n        accessList.push({\n            address: address,\n            storageKeys: storageKeys.map(function (key) {\n                if (isHash(key)) {\n                    return key;\n                }\n                else {\n                    // same behavior as web3\n                    throw new Error(\"Invalid storage key: \".concat(key));\n                }\n            }),\n        });\n    }\n    return accessList;\n}\nexports.parseAccessList = parseAccessList;\nfunction throwIfInvalidAddress(address) {\n    if (!(0, address_2.isValidAddress)(address)) {\n        throw new Error(\"Invalid address: \".concat(address));\n    }\n}\nfunction inputAccessListFormatter(accessList) {\n    if (!accessList || accessList.length === 0) {\n        return [];\n    }\n    return accessList.reduce(function (acc, _a) {\n        var address = _a.address, storageKeys = _a.storageKeys;\n        throwIfInvalidAddress(address);\n        storageKeys.forEach(function (storageKey) {\n            if (storageKey.length - 2 !== 64) {\n                throw new Error(\"Invalid storage key: \".concat(storageKey));\n            }\n        });\n        acc.push([address, storageKeys]);\n        return acc;\n    }, []);\n}\nexports.inputAccessListFormatter = inputAccessListFormatter;\nfunction inputAddressFormatter(address) {\n    if (!address || address === '0x') {\n        return undefined;\n    }\n    if ((0, address_2.isValidAddress)(address)) {\n        return (0, address_1.ensureLeading0x)(address).toLocaleLowerCase();\n    }\n    throw new Error(\"Provided address \".concat(address, \" is invalid, the capitalization checksum test failed\"));\n}\nexports.inputAddressFormatter = inputAddressFormatter;\nfunction inputSignFormatter(data) {\n    return isHexStrict(data) ? data : utf8ToHex(data);\n}\nexports.inputSignFormatter = inputSignFormatter;\nfunction utf8ToHex(str) {\n    str = (0, utf8_1.encode)(str);\n    var hex = '';\n    // remove \\u0000 padding from either side\n    str = str.replace(/^(?:\\u0000)*/, '');\n    str = str.split('').reverse().join('');\n    str = str.replace(/^(?:\\u0000)*/, '');\n    str = str.split('').reverse().join('');\n    for (var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        // if (code !== 0) {\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n        // }\n    }\n    return (0, address_1.ensureLeading0x)(hex);\n}\nfunction isHex(hex) {\n    return /^(-0x|0x)?[0-9a-f]*$/i.test(hex);\n}\nfunction isHexStrict(hex) {\n    return /^(-)?0x[0-9a-f]*$/i.test(hex);\n}\nfunction numberToHex(value) {\n    if (value) {\n        var numberValue = new bignumber_js_1.default(value);\n        var result = (0, address_1.ensureLeading0x)(new bignumber_js_1.default(value).toString(16));\n        // Seen in web3, copied just in case\n        return (numberValue.lt(new bignumber_js_1.default(0)) ? \"-\".concat(result) : result);\n    }\n    return undefined;\n}\nfunction isPredefinedBlockNumber(blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n}\n//# sourceMappingURL=formatter.js.map"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,MAAM,GAAI,IAAI,IAAI,IAAI,CAACA,MAAM,IAAK,UAAUC,CAAC,EAAEC,CAAC,EAAE;EAClD,IAAIC,CAAC,GAAG,CAAC,CAAC;EACV,KAAK,IAAIC,CAAC,IAAIH,CAAC,EAAE,IAAII,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACP,CAAC,EAAEG,CAAC,CAAC,IAAIF,CAAC,CAACO,OAAO,CAACL,CAAC,CAAC,GAAG,CAAC,EAC/ED,CAAC,CAACC,CAAC,CAAC,GAAGH,CAAC,CAACG,CAAC,CAAC;EACf,IAAIH,CAAC,IAAI,IAAI,IAAI,OAAOI,MAAM,CAACK,qBAAqB,KAAK,UAAU,EAC/D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEP,CAAC,GAAGC,MAAM,CAACK,qBAAqB,CAACT,CAAC,CAAC,EAAEU,CAAC,GAAGP,CAAC,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IACpE,IAAIT,CAAC,CAACO,OAAO,CAACL,CAAC,CAACO,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIN,MAAM,CAACC,SAAS,CAACO,oBAAoB,CAACL,IAAI,CAACP,CAAC,EAAEG,CAAC,CAACO,CAAC,CAAC,CAAC,EAC1ER,CAAC,CAACC,CAAC,CAACO,CAAC,CAAC,CAAC,GAAGV,CAAC,CAACG,CAAC,CAACO,CAAC,CAAC,CAAC;EACzB;EACJ,OAAOR,CAAC;AACZ,CAAC;AACD,IAAIW,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDV,MAAM,CAACY,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAGF,OAAO,CAACG,qBAAqB,GAAGH,OAAO,CAACI,wBAAwB,GAAGJ,OAAO,CAACK,eAAe,GAAGL,OAAO,CAACM,wBAAwB,GAAGN,OAAO,CAACO,kBAAkB,GAAGP,OAAO,CAACQ,WAAW,GAAGR,OAAO,CAACS,oBAAoB,GAAGT,OAAO,CAACU,0BAA0B,GAAGV,OAAO,CAACW,yBAAyB,GAAGX,OAAO,CAACY,gCAAgC,GAAGZ,OAAO,CAACa,4BAA4B,GAAGb,OAAO,CAACc,qBAAqB,GAAGd,OAAO,CAACe,oBAAoB,GAAG,KAAK,CAAC;AAC/c,IAAIC,SAAS,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACjD,IAAIC,SAAS,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AAClD,IAAIE,UAAU,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AACpD,IAAIG,cAAc,GAAGxB,eAAe,CAACqB,OAAO,CAAC,cAAc,CAAC,CAAC;AAC7D,IAAII,MAAM,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAC5B;AACA;AACA;AACA,SAASF,oBAAoBA,CAACO,EAAE,EAAE;EAC9B,IAAIC,IAAI,GAAGD,EAAE,CAACC,IAAI;IAAEC,OAAO,GAAGF,EAAE,CAACE,OAAO;IAAEC,KAAK,GAAGH,EAAE,CAACG,KAAK;IAAEC,EAAE,GAAGJ,EAAE,CAACI,EAAE;IAAEC,GAAG,GAAGL,EAAE,CAACK,GAAG;IAAEC,QAAQ,GAAGN,EAAE,CAACM,QAAQ;IAAEC,YAAY,GAAGP,EAAE,CAACO,YAAY;IAAEC,oBAAoB,GAAGR,EAAE,CAACQ,oBAAoB;IAAEC,WAAW,GAAGT,EAAE,CAACS,WAAW;IAAEC,UAAU,GAAGV,EAAE,CAACU,UAAU;IAAEC,mBAAmB,GAAGX,EAAE,CAACW,mBAAmB;IAAEC,IAAI,GAAGZ,EAAE,CAACY,IAAI;IAAEjC,KAAK,GAAGqB,EAAE,CAACrB,KAAK;IAAEkC,UAAU,GAAGb,EAAE,CAACa,UAAU;IAAEC,MAAM,GAAGd,EAAE,CAACc,MAAM;IAAEC,KAAK,GAAGf,EAAE,CAACe,KAAK;IAAEC,QAAQ,GAAGhB,EAAE,CAACgB,QAAQ;IAAEC,IAAI,GAAGzD,MAAM,CAACwC,EAAE,EAAE,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,sBAAsB,EAAE,aAAa,EAAE,YAAY,EAAE,qBAAqB,EAAE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;EACpoB,IAAIkB,WAAW,GAAGD,IAAI;EACtBC,WAAW,CAACjB,IAAI,GAAGpB,qBAAqB,CAACoB,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACkB,QAAQ,CAAC,CAAC,CAAC;EACrGD,WAAW,CAACd,EAAE,GAAGvB,qBAAqB,CAACuB,EAAE,CAAC;EAC1Cc,WAAW,CAACb,GAAG,GAAGe,WAAW,CAACf,GAAG,CAAC;EAClCa,WAAW,CAACvC,KAAK,GAAGyC,WAAW,CAACzC,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACwC,QAAQ,CAAC,CAAC,CAAC;EAC/FD,WAAW,CAACf,KAAK,GAAGiB,WAAW,CAACjB,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACgB,QAAQ,CAAC,CAAC,CAAC;EAC/F,IAAIV,WAAW,EAAE;IACbS,WAAW,CAACT,WAAW,GAAG5B,qBAAqB,CAAC4B,WAAW,CAAC;EAChE;EACA,IAAIE,mBAAmB,EAAE;IACrBO,WAAW,CAACP,mBAAmB,GAAG9B,qBAAqB,CAAC8B,mBAAmB,CAAC;EAChF;EACA,IAAID,UAAU,EAAE;IACZQ,WAAW,CAACR,UAAU,GAAGU,WAAW,CAACV,UAAU,CAAC;EACpD;EACA,IAAIE,IAAI,IAAI,CAACS,KAAK,CAACT,IAAI,CAAC,EAAE;IACtB,MAAM,IAAIU,KAAK,CAAC,0CAA0C,CAAC;EAC/D,CAAC,MACI,IAAIV,IAAI,EAAE;IACXM,WAAW,CAACN,IAAI,GAAG,CAAC,CAAC,EAAElB,SAAS,CAAC6B,eAAe,EAAEX,IAAI,CAAC;EAC3D;EACA,IAAIN,QAAQ,EAAE;IACVY,WAAW,CAACZ,QAAQ,GAAGc,WAAW,CAACd,QAAQ,CAACa,QAAQ,CAAC,CAAC,CAAC;EAC3D;EACA,IAAIZ,YAAY,EAAE;IACdW,WAAW,CAACX,YAAY,GAAGa,WAAW,CAACb,YAAY,CAACY,QAAQ,CAAC,CAAC,CAAC;EACnE;EACA,IAAIX,oBAAoB,EAAE;IACtBU,WAAW,CAACV,oBAAoB,GAAGY,WAAW,CAACZ,oBAAoB,CAACW,QAAQ,CAAC,CAAC,CAAC;EACnF;EACA,IAAIN,UAAU,EAAE;IACZK,WAAW,CAACL,UAAU,GAAG/B,wBAAwB,CAAC+B,UAAU,CAAC;EACjE;EACA,OAAOK,WAAW;AACtB;AACAxC,OAAO,CAACe,oBAAoB,GAAGA,oBAAoB;AACnD,SAASD,qBAAqBA,CAACQ,EAAE,EAAE;EAC/B,IAAIA,EAAE,CAACwB,WAAW,KAAK,IAAI,EAAE;IACzBxB,EAAE,CAACwB,WAAW,GAAGtC,WAAW,CAACc,EAAE,CAACwB,WAAW,CAAC;EAChD;EACA,IAAIxB,EAAE,CAACyB,gBAAgB,KAAK,IAAI,EAAE;IAC9BzB,EAAE,CAACyB,gBAAgB,GAAGvC,WAAW,CAACc,EAAE,CAACyB,gBAAgB,CAAC;EAC1D;EACAzB,EAAE,CAACG,KAAK,GAAGjB,WAAW,CAACc,EAAE,CAACG,KAAK,CAAC;EAChCH,EAAE,CAACK,GAAG,GAAGnB,WAAW,CAACc,EAAE,CAACK,GAAG,CAAC;EAC5BL,EAAE,CAACrB,KAAK,GAAGK,wBAAwB,CAACgB,EAAE,CAACrB,KAAK,CAAC;EAC7C,IAAIqB,EAAE,CAACU,UAAU,EAAE;IACfV,EAAE,CAACU,UAAU,GAAG1B,wBAAwB,CAACgB,EAAE,CAACU,UAAU,CAAC;EAC3D;EACA,IAAIV,EAAE,CAACM,QAAQ,EAAE;IACbN,EAAE,CAACM,QAAQ,GAAGtB,wBAAwB,CAACgB,EAAE,CAACM,QAAQ,CAAC;EACvD;EACA,IAAIN,EAAE,CAACO,YAAY,EAAE;IACjBP,EAAE,CAACO,YAAY,GAAGvB,wBAAwB,CAACgB,EAAE,CAACO,YAAY,CAAC;EAC/D;EACA,IAAIP,EAAE,CAACQ,oBAAoB,EAAE;IACzBR,EAAE,CAACQ,oBAAoB,GAAGxB,wBAAwB,CAACgB,EAAE,CAACQ,oBAAoB,CAAC;EAC/E;EACAR,EAAE,CAACI,EAAE,GACDJ,EAAE,CAACI,EAAE,IAAI,CAAC,CAAC,EAAER,SAAS,CAAC8B,cAAc,EAAE1B,EAAE,CAACI,EAAE,CAAC;EACvC;EACGJ,EAAE,CAACI,EAAE,GAAG,CAAC,CAAC,EAAER,SAAS,CAAC+B,iBAAiB,EAAE3B,EAAE,CAACI,EAAE,CAAC,GAClD,IAAI,CAAC,CAAC;EAChB,IAAIJ,EAAE,CAACC,IAAI,EAAE;IACTD,EAAE,CAACC,IAAI,GAAG,CAAC,CAAC,EAAEL,SAAS,CAAC+B,iBAAiB,EAAE3B,EAAE,CAACC,IAAI,CAAC;EACvD;EACA,IAAID,EAAE,CAACS,WAAW,EAAE;IAChBT,EAAE,CAACS,WAAW,GAAG,CAAC,CAAC,EAAEb,SAAS,CAAC+B,iBAAiB,EAAE3B,EAAE,CAACS,WAAW,CAAC;EACrE;EACA,IAAIT,EAAE,CAACW,mBAAmB,EAAE;IACxBX,EAAE,CAACW,mBAAmB,GAAG,CAAC,CAAC,EAAEf,SAAS,CAAC+B,iBAAiB,EAAE3B,EAAE,CAACW,mBAAmB,CAAC;EACrF;EACA,OAAOX,EAAE;AACb;AACAtB,OAAO,CAACc,qBAAqB,GAAGA,qBAAqB;AACrD,SAASD,4BAA4BA,CAACqC,OAAO,EAAE;EAC3C,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC7B,MAAM,IAAIN,KAAK,CAAC,+BAA+B,GAAGM,OAAO,CAAC;EAC9D;EACA,IAAIA,OAAO,CAACJ,WAAW,KAAK,IAAI,EAAE;IAC9BI,OAAO,CAACJ,WAAW,GAAGtC,WAAW,CAAC0C,OAAO,CAACJ,WAAW,CAAC;EAC1D;EACA,IAAII,OAAO,CAACH,gBAAgB,KAAK,IAAI,EAAE;IACnCG,OAAO,CAACH,gBAAgB,GAAGvC,WAAW,CAAC0C,OAAO,CAACH,gBAAgB,CAAC;EACpE;EACAG,OAAO,CAACC,iBAAiB,GAAG3C,WAAW,CAAC0C,OAAO,CAACC,iBAAiB,CAAC;EAClED,OAAO,CAACE,OAAO,GAAG5C,WAAW,CAAC0C,OAAO,CAACE,OAAO,CAAC;EAC9C,IAAIC,KAAK,CAACC,OAAO,CAACJ,OAAO,CAACK,IAAI,CAAC,EAAE;IAC7BL,OAAO,CAACK,IAAI,GAAGL,OAAO,CAACK,IAAI,CAACC,GAAG,CAACjD,kBAAkB,CAAC;EACvD;EACA,IAAI2C,OAAO,CAACO,eAAe,EAAE;IACzBP,OAAO,CAACO,eAAe,GAAG,CAAC,CAAC,EAAEvC,SAAS,CAAC+B,iBAAiB,EAAEC,OAAO,CAACO,eAAe,CAAC;EACvF;EACA,IAAI,OAAOP,OAAO,CAACQ,MAAM,KAAK,WAAW,IAAIR,OAAO,CAACQ,MAAM,KAAK,IAAI,EAAE;IAClER,OAAO,CAACQ,MAAM,GAAGC,OAAO,CAACC,QAAQ,CAAC,CAAC,CAAC,EAAE5C,SAAS,CAAC6C,aAAa,EAAEX,OAAO,CAACQ,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;EACxF;EACA,OAAOR,OAAO;AAClB;AACAlD,OAAO,CAACa,4BAA4B,GAAGA,4BAA4B;AACnE,SAASD,gCAAgCA,CAACkC,WAAW,EAAE;EACnD,IAAIA,WAAW,IAAI,IAAI,EAAE;IACrBA,WAAW,GAAG,QAAQ;EAC1B;EACA,OAAOnC,yBAAyB,CAACmC,WAAW,CAAC;AACjD;AACA9C,OAAO,CAACY,gCAAgC,GAAGA,gCAAgC;AAC3E,SAASD,yBAAyBA,CAACmC,WAAW,EAAE;EAC5C,IAAIA,WAAW,IAAI,IAAI,EAAE;IACrB,OAAOgB,SAAS;EACpB;EACA,IAAIC,uBAAuB,CAACjB,WAAW,CAAC,EAAE;IACtC,OAAOA,WAAW;EACtB;EACA,IAAIA,WAAW,KAAK,SAAS,EAAE;IAC3B,OAAO,KAAK;EAChB;EACA,OAAOkB,WAAW,CAAClB,WAAW,CAACL,QAAQ,CAAC,CAAC,CAAC,GACpCK,WAAW,CAACL,QAAQ,CAAC,CAAC,CAACwB,iBAAiB,CAAC,CAAC,GAC1CvB,WAAW,CAACI,WAAW,CAACL,QAAQ,CAAC,CAAC,CAAC;AAC7C;AACAzC,OAAO,CAACW,yBAAyB,GAAGA,yBAAyB;AAC7D;AACA,SAASD,0BAA0BA,CAACwD,WAAW,EAAE;EAC7C;EACAA,WAAW,CAACC,QAAQ,GAAG3D,WAAW,CAAC0D,WAAW,CAACC,QAAQ,CAAC;EACxDD,WAAW,CAACd,OAAO,GAAG5C,WAAW,CAAC0D,WAAW,CAACd,OAAO,CAAC;EACtDc,WAAW,CAACE,IAAI,GAAG5D,WAAW,CAAC0D,WAAW,CAACE,IAAI,CAAC;EAChDF,WAAW,CAACG,SAAS,GAAG7D,WAAW,CAAC0D,WAAW,CAACG,SAAS,CAAC;EAC1D,IAAIH,WAAW,CAACI,MAAM,KAAK,IAAI,EAAE;IAC7BJ,WAAW,CAACI,MAAM,GAAG9D,WAAW,CAAC0D,WAAW,CAACI,MAAM,CAAC;EACxD;EACA,IAAIJ,WAAW,CAACK,KAAK,EAAE;IACnBL,WAAW,CAACK,KAAK,GAAG,CAAC,CAAC,EAAErD,SAAS,CAAC+B,iBAAiB,EAAEiB,WAAW,CAACK,KAAK,CAAC;EAC3E;EACA,OAAOL,WAAW;AACtB;AACAlE,OAAO,CAACU,0BAA0B,GAAGA,0BAA0B;AAC/D,SAASD,oBAAoBA,CAAC+D,KAAK,EAAE;EACjCA,KAAK,GAAG9D,0BAA0B,CAAC8D,KAAK,CAAC;EACzC,IAAIA,KAAK,CAACC,UAAU,EAAE;IAClBD,KAAK,CAACC,UAAU,GAAGnE,wBAAwB,CAACkE,KAAK,CAACC,UAAU,CAAC;EACjE;EACA,IAAID,KAAK,CAACE,eAAe,EAAE;IACvBF,KAAK,CAACE,eAAe,GAAGpE,wBAAwB,CAACkE,KAAK,CAACE,eAAe,CAAC;EAC3E;EACA,IAAIrB,KAAK,CAACC,OAAO,CAACkB,KAAK,CAACG,YAAY,CAAC,EAAE;IACnCH,KAAK,CAACG,YAAY,CAACC,OAAO,CAAC,UAAUC,IAAI,EAAE;MACvC,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,EAAEA,IAAI,YAAYC,MAAM,CAAC,EAAE;QACvD,OAAOhE,qBAAqB,CAAC+D,IAAI,CAAC;MACtC;IACJ,CAAC,CAAC;EACN;EACA,OAAOL,KAAK;AAChB;AACAxE,OAAO,CAACS,oBAAoB,GAAGA,oBAAoB;AACnD,SAASD,WAAWA,CAACuE,GAAG,EAAE;EACtB,IAAIA,GAAG,EAAE;IACL,OAAO,IAAI3D,cAAc,CAAC4D,OAAO,CAACD,GAAG,CAAC,CAACE,QAAQ,CAAC,CAAC;EACrD;EACA,OAAOnB,SAAS;AACpB;AACA9D,OAAO,CAACQ,WAAW,GAAGA,WAAW;AACjC,SAASD,kBAAkBA,CAAC2E,GAAG,EAAE;EAC7B;EACA,IAAI,OAAOA,GAAG,CAACC,SAAS,KAAK,QAAQ,IACjC,OAAOD,GAAG,CAACE,eAAe,KAAK,QAAQ,IACvC,OAAOF,GAAG,CAACG,QAAQ,KAAK,QAAQ,EAAE;IAClC,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAEnE,UAAU,CAACoE,IAAI,EAAE,CAAC,CAAC,EAAEvE,SAAS,CAAC6C,aAAa,EAAEqB,GAAG,CAACC,SAAS,CAAC,GACxE,CAAC,CAAC,EAAEnE,SAAS,CAAC6C,aAAa,EAAEqB,GAAG,CAACE,eAAe,CAAC,GACjD,CAAC,CAAC,EAAEpE,SAAS,CAAC6C,aAAa,EAAEqB,GAAG,CAACG,QAAQ,CAAC,CAAC;IAC/CH,GAAG,CAACM,EAAE,GAAG,MAAM,GAAG,CAAC,CAAC,EAAExE,SAAS,CAAC6C,aAAa,EAAEyB,KAAK,CAAC,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;EACzE,CAAC,MACI,IAAI,CAACP,GAAG,CAACM,EAAE,EAAE;IACdN,GAAG,CAACM,EAAE,GAAG,IAAI;EACjB;EACA,IAAIN,GAAG,CAACpC,WAAW,KAAK,IAAI,EAAE;IAC1BoC,GAAG,CAACpC,WAAW,GAAGtC,WAAW,CAAC0E,GAAG,CAACpC,WAAW,CAAC;EAClD;EACA,IAAIoC,GAAG,CAACnC,gBAAgB,KAAK,IAAI,EAAE;IAC/BmC,GAAG,CAACnC,gBAAgB,GAAGvC,WAAW,CAAC0E,GAAG,CAACnC,gBAAgB,CAAC;EAC5D;EACA,IAAImC,GAAG,CAACG,QAAQ,KAAK,IAAI,EAAE;IACvBH,GAAG,CAACG,QAAQ,GAAG7E,WAAW,CAAC0E,GAAG,CAACG,QAAQ,CAAC;EAC5C;EACA,IAAIH,GAAG,CAACQ,OAAO,EAAE;IACbR,GAAG,CAACQ,OAAO,GAAG,CAAC,CAAC,EAAExE,SAAS,CAAC+B,iBAAiB,EAAEiC,GAAG,CAACQ,OAAO,CAAC;EAC/D;EACA,OAAOR,GAAG;AACd;AACAlF,OAAO,CAACO,kBAAkB,GAAGA,kBAAkB;AAC/C,SAASD,wBAAwBA,CAACyE,GAAG,EAAE;EACnC,OAAO,IAAI3D,cAAc,CAAC4D,OAAO,CAACD,GAAG,CAAC,CAACtC,QAAQ,CAAC,EAAE,CAAC;AACvD;AACAzC,OAAO,CAACM,wBAAwB,GAAGA,wBAAwB;AAC3D,SAASqF,MAAMA,CAAC1F,KAAK,EAAE;EACnB,OAAO0C,KAAK,CAAC1C,KAAK,CAAC,IAAIA,KAAK,CAACP,MAAM,KAAK,EAAE;AAC9C;AACA,SAASW,eAAeA,CAACuF,aAAa,EAAE;EACpC,IAAIzD,UAAU,GAAG,EAAE;EACnB,IAAI,CAACyD,aAAa,EAAE;IAChB,OAAOzD,UAAU;EACrB;EACA,KAAK,IAAI0D,EAAE,GAAG,CAAC,EAAEC,eAAe,GAAGF,aAAa,EAAEC,EAAE,GAAGC,eAAe,CAACpG,MAAM,EAAEmG,EAAE,EAAE,EAAE;IACjF,IAAIE,KAAK,GAAGD,eAAe,CAACD,EAAE,CAAC;IAC/B,IAAIH,OAAO,GAAGK,KAAK,CAAC,CAAC,CAAC;MAAEC,WAAW,GAAGD,KAAK,CAAC,CAAC,CAAC;IAC9CE,qBAAqB,CAACP,OAAO,CAAC;IAC9BvD,UAAU,CAAC+D,IAAI,CAAC;MACZR,OAAO,EAAEA,OAAO;MAChBM,WAAW,EAAEA,WAAW,CAACxC,GAAG,CAAC,UAAU2C,GAAG,EAAE;QACxC,IAAIR,MAAM,CAACQ,GAAG,CAAC,EAAE;UACb,OAAOA,GAAG;QACd,CAAC,MACI;UACD;UACA,MAAM,IAAIvD,KAAK,CAAC,uBAAuB,CAACwD,MAAM,CAACD,GAAG,CAAC,CAAC;QACxD;MACJ,CAAC;IACL,CAAC,CAAC;EACN;EACA,OAAOhE,UAAU;AACrB;AACAnC,OAAO,CAACK,eAAe,GAAGA,eAAe;AACzC,SAAS4F,qBAAqBA,CAACP,OAAO,EAAE;EACpC,IAAI,CAAC,CAAC,CAAC,EAAExE,SAAS,CAAC8B,cAAc,EAAE0C,OAAO,CAAC,EAAE;IACzC,MAAM,IAAI9C,KAAK,CAAC,mBAAmB,CAACwD,MAAM,CAACV,OAAO,CAAC,CAAC;EACxD;AACJ;AACA,SAAStF,wBAAwBA,CAAC+B,UAAU,EAAE;EAC1C,IAAI,CAACA,UAAU,IAAIA,UAAU,CAACzC,MAAM,KAAK,CAAC,EAAE;IACxC,OAAO,EAAE;EACb;EACA,OAAOyC,UAAU,CAACkE,MAAM,CAAC,UAAUC,GAAG,EAAEC,EAAE,EAAE;IACxC,IAAIb,OAAO,GAAGa,EAAE,CAACb,OAAO;MAAEM,WAAW,GAAGO,EAAE,CAACP,WAAW;IACtDC,qBAAqB,CAACP,OAAO,CAAC;IAC9BM,WAAW,CAACpB,OAAO,CAAC,UAAU4B,UAAU,EAAE;MACtC,IAAIA,UAAU,CAAC9G,MAAM,GAAG,CAAC,KAAK,EAAE,EAAE;QAC9B,MAAM,IAAIkD,KAAK,CAAC,uBAAuB,CAACwD,MAAM,CAACI,UAAU,CAAC,CAAC;MAC/D;IACJ,CAAC,CAAC;IACFF,GAAG,CAACJ,IAAI,CAAC,CAACR,OAAO,EAAEM,WAAW,CAAC,CAAC;IAChC,OAAOM,GAAG;EACd,CAAC,EAAE,EAAE,CAAC;AACV;AACAtG,OAAO,CAACI,wBAAwB,GAAGA,wBAAwB;AAC3D,SAASD,qBAAqBA,CAACuF,OAAO,EAAE;EACpC,IAAI,CAACA,OAAO,IAAIA,OAAO,KAAK,IAAI,EAAE;IAC9B,OAAO5B,SAAS;EACpB;EACA,IAAI,CAAC,CAAC,EAAE5C,SAAS,CAAC8B,cAAc,EAAE0C,OAAO,CAAC,EAAE;IACxC,OAAO,CAAC,CAAC,EAAE1E,SAAS,CAAC6B,eAAe,EAAE6C,OAAO,CAAC,CAACzB,iBAAiB,CAAC,CAAC;EACtE;EACA,MAAM,IAAIrB,KAAK,CAAC,mBAAmB,CAACwD,MAAM,CAACV,OAAO,EAAE,sDAAsD,CAAC,CAAC;AAChH;AACA1F,OAAO,CAACG,qBAAqB,GAAGA,qBAAqB;AACrD,SAASD,kBAAkBA,CAACgC,IAAI,EAAE;EAC9B,OAAO8B,WAAW,CAAC9B,IAAI,CAAC,GAAGA,IAAI,GAAGuE,SAAS,CAACvE,IAAI,CAAC;AACrD;AACAlC,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB;AAC/C,SAASuG,SAASA,CAACC,GAAG,EAAE;EACpBA,GAAG,GAAG,CAAC,CAAC,EAAErF,MAAM,CAACsF,MAAM,EAAED,GAAG,CAAC;EAC7B,IAAI3B,GAAG,GAAG,EAAE;EACZ;EACA2B,GAAG,GAAGA,GAAG,CAACE,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;EACrCF,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EACtCL,GAAG,GAAGA,GAAG,CAACE,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;EACrCF,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EACtC,KAAK,IAAItH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiH,GAAG,CAAChH,MAAM,EAAED,CAAC,EAAE,EAAE;IACjC,IAAIuH,IAAI,GAAGN,GAAG,CAACO,UAAU,CAACxH,CAAC,CAAC;IAC5B;IACA,IAAIyH,CAAC,GAAGF,IAAI,CAACvE,QAAQ,CAAC,EAAE,CAAC;IACzBsC,GAAG,IAAImC,CAAC,CAACxH,MAAM,GAAG,CAAC,GAAG,GAAG,GAAGwH,CAAC,GAAGA,CAAC;IACjC;EACJ;;EACA,OAAO,CAAC,CAAC,EAAElG,SAAS,CAAC6B,eAAe,EAAEkC,GAAG,CAAC;AAC9C;AACA,SAASpC,KAAKA,CAACoC,GAAG,EAAE;EAChB,OAAO,uBAAuB,CAACoC,IAAI,CAACpC,GAAG,CAAC;AAC5C;AACA,SAASf,WAAWA,CAACe,GAAG,EAAE;EACtB,OAAO,oBAAoB,CAACoC,IAAI,CAACpC,GAAG,CAAC;AACzC;AACA,SAASrC,WAAWA,CAACzC,KAAK,EAAE;EACxB,IAAIA,KAAK,EAAE;IACP,IAAImH,WAAW,GAAG,IAAIhG,cAAc,CAAC4D,OAAO,CAAC/E,KAAK,CAAC;IACnD,IAAIoH,MAAM,GAAG,CAAC,CAAC,EAAErG,SAAS,CAAC6B,eAAe,EAAE,IAAIzB,cAAc,CAAC4D,OAAO,CAAC/E,KAAK,CAAC,CAACwC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC3F;IACA,OAAQ2E,WAAW,CAACE,EAAE,CAAC,IAAIlG,cAAc,CAAC4D,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAACoB,MAAM,CAACiB,MAAM,CAAC,GAAGA,MAAM;EACvF;EACA,OAAOvD,SAAS;AACpB;AACA,SAASC,uBAAuBA,CAACjB,WAAW,EAAE;EAC1C,OAAOA,WAAW,KAAK,QAAQ,IAAIA,WAAW,KAAK,SAAS,IAAIA,WAAW,KAAK,UAAU;AAC9F"},"metadata":{},"sourceType":"script"}