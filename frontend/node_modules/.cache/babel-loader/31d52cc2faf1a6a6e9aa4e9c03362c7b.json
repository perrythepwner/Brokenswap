{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWalletChainId = exports.networkHasUpdated = exports.switchToNetwork = exports.addNetworksToMetamask = exports.addNetworkToMetamask = exports.addTokensToMetamask = exports.makeAddCeloTokensParams = exports.tokenToParam = exports.makeNetworkParams = exports.MetamaskRPCErrorCode = void 0;\nconst mini_kit_1 = require(\"@celo/contractkit/lib/mini-kit\");\nconst constants_1 = require(\"../constants\");\nconst types_1 = require(\"../types\");\nconst CELO_PARAMS = Object.freeze({\n  chainName: 'Celo',\n  testnet: false,\n  nativeCurrency: {\n    name: 'CELO'\n  }\n});\nconst ALFAJORES_PARAMS = Object.freeze({\n  chainName: 'Alfajores Testnet',\n  testnet: true,\n  nativeCurrency: {\n    name: 'A-CELO'\n  }\n});\nconst BAKLAVA_PARAMS = Object.freeze({\n  chainName: 'Baklava Testnet',\n  testnet: true,\n  nativeCurrency: {\n    name: 'B-CELO'\n  }\n});\nconst CANNOLI_PARAMS = Object.freeze({\n  chainName: 'Cannoli Testnet',\n  testnet: true,\n  nativeCurrency: {\n    name: 'C-CELO'\n  }\n});\nconst PARAMS = {\n  [types_1.ChainId.Mainnet]: CELO_PARAMS,\n  [types_1.ChainId.Alfajores]: ALFAJORES_PARAMS,\n  [types_1.ChainId.Baklava]: BAKLAVA_PARAMS,\n  [types_1.ChainId.Cannoli]: CANNOLI_PARAMS\n};\n// First Class Supported Networks\nconst NETWORKS = {\n  [types_1.ChainId.Mainnet]: constants_1.Mainnet,\n  [types_1.ChainId.Alfajores]: constants_1.Alfajores,\n  [types_1.ChainId.Baklava]: constants_1.Baklava,\n  [types_1.ChainId.Cannoli]: constants_1.Cannoli\n};\nvar MetamaskRPCErrorCode;\n(function (MetamaskRPCErrorCode) {\n  MetamaskRPCErrorCode[MetamaskRPCErrorCode[\"AwaitingUserConfirmation\"] = -32002] = \"AwaitingUserConfirmation\";\n  MetamaskRPCErrorCode[MetamaskRPCErrorCode[\"UnrecognizedChainID\"] = -32603] = \"UnrecognizedChainID\";\n  MetamaskRPCErrorCode[MetamaskRPCErrorCode[\"UnknownNetwork\"] = 4902] = \"UnknownNetwork\";\n})(MetamaskRPCErrorCode = exports.MetamaskRPCErrorCode || (exports.MetamaskRPCErrorCode = {}));\nconst makeNetworkParams = (info, CELO) => __awaiter(void 0, void 0, void 0, function* () {\n  var _a;\n  const [symbol, decimals] = yield Promise.all([CELO.symbol(), CELO.decimals()]);\n  return {\n    chainId: \"0x\".concat(info.chainId.toString(16)),\n    chainName: (_a = PARAMS[info.chainId].chainName) !== null && _a !== void 0 ? _a : info.name,\n    nativeCurrency: {\n      name: PARAMS[info.chainId].nativeCurrency.name,\n      symbol,\n      decimals\n    },\n    rpcUrls: [info.rpcUrl],\n    blockExplorerUrls: [info.explorer],\n    iconUrls: [\"https://celoreserve.org/assets/tokens/\".concat(symbol, \".svg\")] // unfortunately unused\n  };\n});\n\nexports.makeNetworkParams = makeNetworkParams;\nconst tokenToParam = token => __awaiter(void 0, void 0, void 0, function* () {\n  const [symbol, decimals, name] = yield Promise.all([token.symbol(), token.decimals(), token.name()]);\n  return {\n    type: 'ERC20',\n    options: {\n      address: token.address,\n      name,\n      symbol,\n      decimals,\n      image: \"https://reserve.mento.org/assets/tokens/\".concat(symbol, \".svg\")\n    }\n  };\n});\nexports.tokenToParam = tokenToParam;\nconst makeAddCeloTokensParams = tokens => __awaiter(void 0, void 0, void 0, function* () {\n  return Promise.all(Object.values(tokens).map(exports.tokenToParam));\n});\nexports.makeAddCeloTokensParams = makeAddCeloTokensParams;\nconst addTokensToMetamask = (ethereum, tokens) => __awaiter(void 0, void 0, void 0, function* () {\n  const tokenParams = yield (0, exports.makeAddCeloTokensParams)(tokens);\n  const added = (yield Promise.all(tokenParams.map(params => ethereum === null || ethereum === void 0 ? void 0 : ethereum.request({\n    method: 'wallet_watchAsset',\n    params\n  })))).every(Boolean);\n  return added;\n});\nexports.addTokensToMetamask = addTokensToMetamask;\nconst addNetworkToMetamask = (ethereum, networkConfig) => __awaiter(void 0, void 0, void 0, function* () {\n  try {\n    // For Celo Chains\n    if (Object.keys(NETWORKS).includes(networkConfig.chainId.toString())) {\n      const _b = yield (0, mini_kit_1.newKit)(networkConfig.rpcUrl).celoTokens.getWrappers(),\n        {\n          CELO\n        } = _b,\n        tokens = __rest(_b, [\"CELO\"]);\n      yield ethereum === null || ethereum === void 0 ? void 0 : ethereum.request({\n        method: 'wallet_addEthereumChain',\n        params: [yield (0, exports.makeNetworkParams)(networkConfig, CELO)]\n      });\n      yield (0, exports.addTokensToMetamask)(ethereum, tokens);\n      // For other chains\n    } else {\n      yield ethereum === null || ethereum === void 0 ? void 0 : ethereum.request({\n        method: 'wallet_addEthereumChain',\n        params: [{\n          chainId: networkConfig.chainId,\n          chainName: networkConfig.name,\n          rpcUrls: [networkConfig.rpcUrl],\n          blockExplorerUrls: [networkConfig.explorer],\n          nativeCurrency: networkConfig.nativeCurrency\n        }]\n      });\n    }\n  } catch (err) {\n    const {\n      code\n    } = err;\n    if (code === MetamaskRPCErrorCode.AwaitingUserConfirmation) {\n      // user has already been requested to add the network\n      // maybe add a user CTA\n      throw new Error(\"Please check your Metamask window to add \".concat(networkConfig.name, \" to Metamask\"));\n    } else {\n      throw err;\n    }\n  }\n});\nexports.addNetworkToMetamask = addNetworkToMetamask;\nfunction addNetworksToMetamask(ethereum) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield Promise.all(Object.values(NETWORKS).map(network => (0, exports.addNetworkToMetamask)(ethereum, network)));\n  });\n}\nexports.addNetworksToMetamask = addNetworksToMetamask;\nfunction switchToNetwork(network, ethereum, getChainId) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [chainId, walletChainId] = yield Promise.all([getChainId(), getWalletChainId(ethereum)]);\n    if (network.chainId !== chainId || network.chainId !== walletChainId) {\n      try {\n        yield ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: \"0x\".concat(network.chainId.toString(16))\n          }]\n        });\n        yield (0, exports.networkHasUpdated)(getChainId, network.chainId);\n      } catch (err) {\n        const {\n          code\n        } = err;\n        if (code === MetamaskRPCErrorCode.UnknownNetwork || code === MetamaskRPCErrorCode.UnrecognizedChainID) {\n          // ChainId not yet added to metamask\n          yield (0, exports.addNetworkToMetamask)(ethereum, network);\n          return switchToNetwork(network, ethereum, getChainId);\n        } else if (code === MetamaskRPCErrorCode.AwaitingUserConfirmation) {\n          // user has already been requested to switch the network\n          return;\n        } else {\n          throw err;\n        }\n      }\n    }\n  });\n}\nexports.switchToNetwork = switchToNetwork;\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\nconst SLEEP = 500;\nconst MAX_WAIT_MINUTES = 3;\nconst MAX_RETRY = Math.round(MAX_WAIT_MINUTES * 1000 / SLEEP);\n// Hacky workaround to wait for the network to change.\\\nconst networkHasUpdated = (getChainId, expectedChainId) => __awaiter(void 0, void 0, void 0, function* () {\n  let attempts = 0;\n  let isNetworkUpdated = false;\n  while (!isNetworkUpdated) {\n    attempts++;\n    if (attempts >= MAX_RETRY) {\n      throw new Error('Network did not change');\n    }\n    const chainId = yield getChainId();\n    if (chainId === expectedChainId) {\n      isNetworkUpdated = true;\n      return true;\n    }\n    yield sleep(SLEEP);\n  }\n});\nexports.networkHasUpdated = networkHasUpdated;\nfunction getWalletChainId(ethereum) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const walletChainId = ethereum.chainId ? ethereum.chainId : yield ethereum.request({\n      method: 'eth_chainId'\n    });\n    return parseInt(walletChainId, 16);\n  });\n}\nexports.getWalletChainId = getWalletChainId;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__rest","s","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","defineProperty","exports","getWalletChainId","networkHasUpdated","switchToNetwork","addNetworksToMetamask","addNetworkToMetamask","addTokensToMetamask","makeAddCeloTokensParams","tokenToParam","makeNetworkParams","MetamaskRPCErrorCode","mini_kit_1","require","constants_1","types_1","CELO_PARAMS","freeze","chainName","testnet","nativeCurrency","name","ALFAJORES_PARAMS","BAKLAVA_PARAMS","CANNOLI_PARAMS","PARAMS","ChainId","Mainnet","Alfajores","Baklava","Cannoli","NETWORKS","info","CELO","_a","symbol","decimals","all","chainId","concat","toString","rpcUrls","rpcUrl","blockExplorerUrls","explorer","iconUrls","token","type","options","address","image","tokens","values","map","ethereum","tokenParams","added","params","request","method","every","Boolean","networkConfig","keys","includes","_b","newKit","celoTokens","getWrappers","err","code","AwaitingUserConfirmation","Error","network","getChainId","walletChainId","UnknownNetwork","UnrecognizedChainID","sleep","ms","setTimeout","SLEEP","MAX_WAIT_MINUTES","MAX_RETRY","Math","round","expectedChainId","attempts","isNetworkUpdated","parseInt"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@celo/react-celo/lib/utils/metamask.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getWalletChainId = exports.networkHasUpdated = exports.switchToNetwork = exports.addNetworksToMetamask = exports.addNetworkToMetamask = exports.addTokensToMetamask = exports.makeAddCeloTokensParams = exports.tokenToParam = exports.makeNetworkParams = exports.MetamaskRPCErrorCode = void 0;\nconst mini_kit_1 = require(\"@celo/contractkit/lib/mini-kit\");\nconst constants_1 = require(\"../constants\");\nconst types_1 = require(\"../types\");\nconst CELO_PARAMS = Object.freeze({\n    chainName: 'Celo',\n    testnet: false,\n    nativeCurrency: {\n        name: 'CELO',\n    },\n});\nconst ALFAJORES_PARAMS = Object.freeze({\n    chainName: 'Alfajores Testnet',\n    testnet: true,\n    nativeCurrency: {\n        name: 'A-CELO',\n    },\n});\nconst BAKLAVA_PARAMS = Object.freeze({\n    chainName: 'Baklava Testnet',\n    testnet: true,\n    nativeCurrency: {\n        name: 'B-CELO',\n    },\n});\nconst CANNOLI_PARAMS = Object.freeze({\n    chainName: 'Cannoli Testnet',\n    testnet: true,\n    nativeCurrency: {\n        name: 'C-CELO',\n    },\n});\nconst PARAMS = {\n    [types_1.ChainId.Mainnet]: CELO_PARAMS,\n    [types_1.ChainId.Alfajores]: ALFAJORES_PARAMS,\n    [types_1.ChainId.Baklava]: BAKLAVA_PARAMS,\n    [types_1.ChainId.Cannoli]: CANNOLI_PARAMS,\n};\n// First Class Supported Networks\nconst NETWORKS = {\n    [types_1.ChainId.Mainnet]: constants_1.Mainnet,\n    [types_1.ChainId.Alfajores]: constants_1.Alfajores,\n    [types_1.ChainId.Baklava]: constants_1.Baklava,\n    [types_1.ChainId.Cannoli]: constants_1.Cannoli,\n};\nvar MetamaskRPCErrorCode;\n(function (MetamaskRPCErrorCode) {\n    MetamaskRPCErrorCode[MetamaskRPCErrorCode[\"AwaitingUserConfirmation\"] = -32002] = \"AwaitingUserConfirmation\";\n    MetamaskRPCErrorCode[MetamaskRPCErrorCode[\"UnrecognizedChainID\"] = -32603] = \"UnrecognizedChainID\";\n    MetamaskRPCErrorCode[MetamaskRPCErrorCode[\"UnknownNetwork\"] = 4902] = \"UnknownNetwork\";\n})(MetamaskRPCErrorCode = exports.MetamaskRPCErrorCode || (exports.MetamaskRPCErrorCode = {}));\nconst makeNetworkParams = (info, CELO) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    const [symbol, decimals] = yield Promise.all([\n        CELO.symbol(),\n        CELO.decimals(),\n    ]);\n    return {\n        chainId: `0x${info.chainId.toString(16)}`,\n        chainName: (_a = PARAMS[info.chainId].chainName) !== null && _a !== void 0 ? _a : info.name,\n        nativeCurrency: {\n            name: PARAMS[info.chainId].nativeCurrency.name,\n            symbol,\n            decimals,\n        },\n        rpcUrls: [info.rpcUrl],\n        blockExplorerUrls: [info.explorer],\n        iconUrls: [`https://celoreserve.org/assets/tokens/${symbol}.svg`], // unfortunately unused\n    };\n});\nexports.makeNetworkParams = makeNetworkParams;\nconst tokenToParam = (token) => __awaiter(void 0, void 0, void 0, function* () {\n    const [symbol, decimals, name] = yield Promise.all([\n        token.symbol(),\n        token.decimals(),\n        token.name(),\n    ]);\n    return {\n        type: 'ERC20',\n        options: {\n            address: token.address,\n            name,\n            symbol,\n            decimals,\n            image: `https://reserve.mento.org/assets/tokens/${symbol}.svg`,\n        },\n    };\n});\nexports.tokenToParam = tokenToParam;\nconst makeAddCeloTokensParams = (tokens) => __awaiter(void 0, void 0, void 0, function* () { return Promise.all(Object.values(tokens).map(exports.tokenToParam)); });\nexports.makeAddCeloTokensParams = makeAddCeloTokensParams;\nconst addTokensToMetamask = (ethereum, tokens) => __awaiter(void 0, void 0, void 0, function* () {\n    const tokenParams = yield (0, exports.makeAddCeloTokensParams)(tokens);\n    const added = (yield Promise.all(tokenParams.map((params) => ethereum === null || ethereum === void 0 ? void 0 : ethereum.request({\n        method: 'wallet_watchAsset',\n        params,\n    })))).every(Boolean);\n    return added;\n});\nexports.addTokensToMetamask = addTokensToMetamask;\nconst addNetworkToMetamask = (ethereum, networkConfig) => __awaiter(void 0, void 0, void 0, function* () {\n    try {\n        // For Celo Chains\n        if (Object.keys(NETWORKS).includes(networkConfig.chainId.toString())) {\n            const _b = (yield (0, mini_kit_1.newKit)(networkConfig.rpcUrl).celoTokens.getWrappers()), { CELO } = _b, tokens = __rest(_b, [\"CELO\"]);\n            yield (ethereum === null || ethereum === void 0 ? void 0 : ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [yield (0, exports.makeNetworkParams)(networkConfig, CELO)],\n            }));\n            yield (0, exports.addTokensToMetamask)(ethereum, tokens);\n            // For other chains\n        }\n        else {\n            yield (ethereum === null || ethereum === void 0 ? void 0 : ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [\n                    {\n                        chainId: networkConfig.chainId,\n                        chainName: networkConfig.name,\n                        rpcUrls: [networkConfig.rpcUrl],\n                        blockExplorerUrls: [networkConfig.explorer],\n                        nativeCurrency: networkConfig.nativeCurrency,\n                    },\n                ],\n            }));\n        }\n    }\n    catch (err) {\n        const { code } = err;\n        if (code === MetamaskRPCErrorCode.AwaitingUserConfirmation) {\n            // user has already been requested to add the network\n            // maybe add a user CTA\n            throw new Error(`Please check your Metamask window to add ${networkConfig.name} to Metamask`);\n        }\n        else {\n            throw err;\n        }\n    }\n});\nexports.addNetworkToMetamask = addNetworkToMetamask;\nfunction addNetworksToMetamask(ethereum) {\n    return __awaiter(this, void 0, void 0, function* () {\n        yield Promise.all(Object.values(NETWORKS).map((network) => (0, exports.addNetworkToMetamask)(ethereum, network)));\n    });\n}\nexports.addNetworksToMetamask = addNetworksToMetamask;\nfunction switchToNetwork(network, ethereum, getChainId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [chainId, walletChainId] = yield Promise.all([\n            getChainId(),\n            getWalletChainId(ethereum),\n        ]);\n        if (network.chainId !== chainId || network.chainId !== walletChainId) {\n            try {\n                yield ethereum.request({\n                    method: 'wallet_switchEthereumChain',\n                    params: [\n                        {\n                            chainId: `0x${network.chainId.toString(16)}`,\n                        },\n                    ],\n                });\n                yield (0, exports.networkHasUpdated)(getChainId, network.chainId);\n            }\n            catch (err) {\n                const { code } = err;\n                if (code === MetamaskRPCErrorCode.UnknownNetwork ||\n                    code === MetamaskRPCErrorCode.UnrecognizedChainID) {\n                    // ChainId not yet added to metamask\n                    yield (0, exports.addNetworkToMetamask)(ethereum, network);\n                    return switchToNetwork(network, ethereum, getChainId);\n                }\n                else if (code === MetamaskRPCErrorCode.AwaitingUserConfirmation) {\n                    // user has already been requested to switch the network\n                    return;\n                }\n                else {\n                    throw err;\n                }\n            }\n        }\n    });\n}\nexports.switchToNetwork = switchToNetwork;\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\nconst SLEEP = 500;\nconst MAX_WAIT_MINUTES = 3;\nconst MAX_RETRY = Math.round((MAX_WAIT_MINUTES * 1000) / SLEEP);\n// Hacky workaround to wait for the network to change.\\\nconst networkHasUpdated = (getChainId, expectedChainId) => __awaiter(void 0, void 0, void 0, function* () {\n    let attempts = 0;\n    let isNetworkUpdated = false;\n    while (!isNetworkUpdated) {\n        attempts++;\n        if (attempts >= MAX_RETRY) {\n            throw new Error('Network did not change');\n        }\n        const chainId = yield getChainId();\n        if (chainId === expectedChainId) {\n            isNetworkUpdated = true;\n            return true;\n        }\n        yield sleep(SLEEP);\n    }\n});\nexports.networkHasUpdated = networkHasUpdated;\nfunction getWalletChainId(ethereum) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const walletChainId = ethereum.chainId\n            ? ethereum.chainId\n            : yield ethereum.request({ method: 'eth_chainId' });\n        return parseInt(walletChainId, 16);\n    });\n}\nexports.getWalletChainId = getWalletChainId;\n//# sourceMappingURL=metamask.js.map"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAK,UAAUC,OAAO,EAAEC,UAAU,EAAEC,CAAC,EAAEC,SAAS,EAAE;EACrF,SAASC,KAAKA,CAACC,KAAK,EAAE;IAAE,OAAOA,KAAK,YAAYH,CAAC,GAAGG,KAAK,GAAG,IAAIH,CAAC,CAAC,UAAUI,OAAO,EAAE;MAAEA,OAAO,CAACD,KAAK,CAAC;IAAE,CAAC,CAAC;EAAE;EAC3G,OAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAO,CAAC,EAAE,UAAUD,OAAO,EAAEE,MAAM,EAAE;IACvD,SAASC,SAASA,CAACJ,KAAK,EAAE;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAACQ,IAAI,CAACN,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOO,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAE;IAAE;IAC1F,SAASC,QAAQA,CAACR,KAAK,EAAE;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAAC,OAAO,CAAC,CAACE,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOO,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAE;IAAE;IAC7F,SAASF,IAAIA,CAACI,MAAM,EAAE;MAAEA,MAAM,CAACC,IAAI,GAAGT,OAAO,CAACQ,MAAM,CAACT,KAAK,CAAC,GAAGD,KAAK,CAACU,MAAM,CAACT,KAAK,CAAC,CAACW,IAAI,CAACP,SAAS,EAAEI,QAAQ,CAAC;IAAE;IAC7GH,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAK,CAACjB,OAAO,EAAEC,UAAU,IAAI,EAAE,CAAC,EAAEU,IAAI,CAAC,CAAC,CAAC;EACzE,CAAC,CAAC;AACN,CAAC;AACD,IAAIO,MAAM,GAAI,IAAI,IAAI,IAAI,CAACA,MAAM,IAAK,UAAUC,CAAC,EAAEP,CAAC,EAAE;EAClD,IAAIQ,CAAC,GAAG,CAAC,CAAC;EACV,KAAK,IAAIC,CAAC,IAAIF,CAAC,EAAE,IAAIG,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACN,CAAC,EAAEE,CAAC,CAAC,IAAIT,CAAC,CAACc,OAAO,CAACL,CAAC,CAAC,GAAG,CAAC,EAC/ED,CAAC,CAACC,CAAC,CAAC,GAAGF,CAAC,CAACE,CAAC,CAAC;EACf,IAAIF,CAAC,IAAI,IAAI,IAAI,OAAOG,MAAM,CAACK,qBAAqB,KAAK,UAAU,EAC/D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEP,CAAC,GAAGC,MAAM,CAACK,qBAAqB,CAACR,CAAC,CAAC,EAAES,CAAC,GAAGP,CAAC,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IACpE,IAAIhB,CAAC,CAACc,OAAO,CAACL,CAAC,CAACO,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIN,MAAM,CAACC,SAAS,CAACO,oBAAoB,CAACL,IAAI,CAACN,CAAC,EAAEE,CAAC,CAACO,CAAC,CAAC,CAAC,EAC1ER,CAAC,CAACC,CAAC,CAACO,CAAC,CAAC,CAAC,GAAGT,CAAC,CAACE,CAAC,CAACO,CAAC,CAAC,CAAC;EACzB;EACJ,OAAOR,CAAC;AACZ,CAAC;AACDE,MAAM,CAACS,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAE3B,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D2B,OAAO,CAACC,gBAAgB,GAAGD,OAAO,CAACE,iBAAiB,GAAGF,OAAO,CAACG,eAAe,GAAGH,OAAO,CAACI,qBAAqB,GAAGJ,OAAO,CAACK,oBAAoB,GAAGL,OAAO,CAACM,mBAAmB,GAAGN,OAAO,CAACO,uBAAuB,GAAGP,OAAO,CAACQ,YAAY,GAAGR,OAAO,CAACS,iBAAiB,GAAGT,OAAO,CAACU,oBAAoB,GAAG,KAAK,CAAC;AACxS,MAAMC,UAAU,GAAGC,OAAO,CAAC,gCAAgC,CAAC;AAC5D,MAAMC,WAAW,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC3C,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAU,CAAC;AACnC,MAAMG,WAAW,GAAGzB,MAAM,CAAC0B,MAAM,CAAC;EAC9BC,SAAS,EAAE,MAAM;EACjBC,OAAO,EAAE,KAAK;EACdC,cAAc,EAAE;IACZC,IAAI,EAAE;EACV;AACJ,CAAC,CAAC;AACF,MAAMC,gBAAgB,GAAG/B,MAAM,CAAC0B,MAAM,CAAC;EACnCC,SAAS,EAAE,mBAAmB;EAC9BC,OAAO,EAAE,IAAI;EACbC,cAAc,EAAE;IACZC,IAAI,EAAE;EACV;AACJ,CAAC,CAAC;AACF,MAAME,cAAc,GAAGhC,MAAM,CAAC0B,MAAM,CAAC;EACjCC,SAAS,EAAE,iBAAiB;EAC5BC,OAAO,EAAE,IAAI;EACbC,cAAc,EAAE;IACZC,IAAI,EAAE;EACV;AACJ,CAAC,CAAC;AACF,MAAMG,cAAc,GAAGjC,MAAM,CAAC0B,MAAM,CAAC;EACjCC,SAAS,EAAE,iBAAiB;EAC5BC,OAAO,EAAE,IAAI;EACbC,cAAc,EAAE;IACZC,IAAI,EAAE;EACV;AACJ,CAAC,CAAC;AACF,MAAMI,MAAM,GAAG;EACX,CAACV,OAAO,CAACW,OAAO,CAACC,OAAO,GAAGX,WAAW;EACtC,CAACD,OAAO,CAACW,OAAO,CAACE,SAAS,GAAGN,gBAAgB;EAC7C,CAACP,OAAO,CAACW,OAAO,CAACG,OAAO,GAAGN,cAAc;EACzC,CAACR,OAAO,CAACW,OAAO,CAACI,OAAO,GAAGN;AAC/B,CAAC;AACD;AACA,MAAMO,QAAQ,GAAG;EACb,CAAChB,OAAO,CAACW,OAAO,CAACC,OAAO,GAAGb,WAAW,CAACa,OAAO;EAC9C,CAACZ,OAAO,CAACW,OAAO,CAACE,SAAS,GAAGd,WAAW,CAACc,SAAS;EAClD,CAACb,OAAO,CAACW,OAAO,CAACG,OAAO,GAAGf,WAAW,CAACe,OAAO;EAC9C,CAACd,OAAO,CAACW,OAAO,CAACI,OAAO,GAAGhB,WAAW,CAACgB;AAC3C,CAAC;AACD,IAAInB,oBAAoB;AACxB,CAAC,UAAUA,oBAAoB,EAAE;EAC7BA,oBAAoB,CAACA,oBAAoB,CAAC,0BAA0B,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,0BAA0B;EAC5GA,oBAAoB,CAACA,oBAAoB,CAAC,qBAAqB,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,qBAAqB;EAClGA,oBAAoB,CAACA,oBAAoB,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC,GAAG,gBAAgB;AAC1F,CAAC,EAAEA,oBAAoB,GAAGV,OAAO,CAACU,oBAAoB,KAAKV,OAAO,CAACU,oBAAoB,GAAG,CAAC,CAAC,CAAC,CAAC;AAC9F,MAAMD,iBAAiB,GAAGA,CAACsB,IAAI,EAAEC,IAAI,KAAKjE,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;EACrF,IAAIkE,EAAE;EACN,MAAM,CAACC,MAAM,EAAEC,QAAQ,CAAC,GAAG,MAAM5D,OAAO,CAAC6D,GAAG,CAAC,CACzCJ,IAAI,CAACE,MAAM,CAAC,CAAC,EACbF,IAAI,CAACG,QAAQ,CAAC,CAAC,CAClB,CAAC;EACF,OAAO;IACHE,OAAO,OAAAC,MAAA,CAAOP,IAAI,CAACM,OAAO,CAACE,QAAQ,CAAC,EAAE,CAAC,CAAE;IACzCtB,SAAS,EAAE,CAACgB,EAAE,GAAGT,MAAM,CAACO,IAAI,CAACM,OAAO,CAAC,CAACpB,SAAS,MAAM,IAAI,IAAIgB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGF,IAAI,CAACX,IAAI;IAC3FD,cAAc,EAAE;MACZC,IAAI,EAAEI,MAAM,CAACO,IAAI,CAACM,OAAO,CAAC,CAAClB,cAAc,CAACC,IAAI;MAC9Cc,MAAM;MACNC;IACJ,CAAC;IACDK,OAAO,EAAE,CAACT,IAAI,CAACU,MAAM,CAAC;IACtBC,iBAAiB,EAAE,CAACX,IAAI,CAACY,QAAQ,CAAC;IAClCC,QAAQ,EAAE,0CAAAN,MAAA,CAA0CJ,MAAM,UAAO,CAAE;EACvE,CAAC;AACL,CAAC,CAAC;;AACFlC,OAAO,CAACS,iBAAiB,GAAGA,iBAAiB;AAC7C,MAAMD,YAAY,GAAIqC,KAAK,IAAK9E,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;EAC3E,MAAM,CAACmE,MAAM,EAAEC,QAAQ,EAAEf,IAAI,CAAC,GAAG,MAAM7C,OAAO,CAAC6D,GAAG,CAAC,CAC/CS,KAAK,CAACX,MAAM,CAAC,CAAC,EACdW,KAAK,CAACV,QAAQ,CAAC,CAAC,EAChBU,KAAK,CAACzB,IAAI,CAAC,CAAC,CACf,CAAC;EACF,OAAO;IACH0B,IAAI,EAAE,OAAO;IACbC,OAAO,EAAE;MACLC,OAAO,EAAEH,KAAK,CAACG,OAAO;MACtB5B,IAAI;MACJc,MAAM;MACNC,QAAQ;MACRc,KAAK,6CAAAX,MAAA,CAA6CJ,MAAM;IAC5D;EACJ,CAAC;AACL,CAAC,CAAC;AACFlC,OAAO,CAACQ,YAAY,GAAGA,YAAY;AACnC,MAAMD,uBAAuB,GAAI2C,MAAM,IAAKnF,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;EAAE,OAAOQ,OAAO,CAAC6D,GAAG,CAAC9C,MAAM,CAAC6D,MAAM,CAACD,MAAM,CAAC,CAACE,GAAG,CAACpD,OAAO,CAACQ,YAAY,CAAC,CAAC;AAAE,CAAC,CAAC;AACpKR,OAAO,CAACO,uBAAuB,GAAGA,uBAAuB;AACzD,MAAMD,mBAAmB,GAAGA,CAAC+C,QAAQ,EAAEH,MAAM,KAAKnF,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;EAC7F,MAAMuF,WAAW,GAAG,MAAM,CAAC,CAAC,EAAEtD,OAAO,CAACO,uBAAuB,EAAE2C,MAAM,CAAC;EACtE,MAAMK,KAAK,GAAG,CAAC,MAAMhF,OAAO,CAAC6D,GAAG,CAACkB,WAAW,CAACF,GAAG,CAAEI,MAAM,IAAKH,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACI,OAAO,CAAC;IAC9HC,MAAM,EAAE,mBAAmB;IAC3BF;EACJ,CAAC,CAAC,CAAC,CAAC,EAAEG,KAAK,CAACC,OAAO,CAAC;EACpB,OAAOL,KAAK;AAChB,CAAC,CAAC;AACFvD,OAAO,CAACM,mBAAmB,GAAGA,mBAAmB;AACjD,MAAMD,oBAAoB,GAAGA,CAACgD,QAAQ,EAAEQ,aAAa,KAAK9F,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;EACrG,IAAI;IACA;IACA,IAAIuB,MAAM,CAACwE,IAAI,CAAChC,QAAQ,CAAC,CAACiC,QAAQ,CAACF,aAAa,CAACxB,OAAO,CAACE,QAAQ,CAAC,CAAC,CAAC,EAAE;MAClE,MAAMyB,EAAE,GAAI,MAAM,CAAC,CAAC,EAAErD,UAAU,CAACsD,MAAM,EAAEJ,aAAa,CAACpB,MAAM,CAAC,CAACyB,UAAU,CAACC,WAAW,CAAC,CAAE;QAAE;UAAEnC;QAAK,CAAC,GAAGgC,EAAE;QAAEd,MAAM,GAAGhE,MAAM,CAAC8E,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;MACtI,MAAOX,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACI,OAAO,CAAC;QACxEC,MAAM,EAAE,yBAAyB;QACjCF,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,EAAExD,OAAO,CAACS,iBAAiB,EAAEoD,aAAa,EAAE7B,IAAI,CAAC;MACtE,CAAC,CAAE;MACH,MAAM,CAAC,CAAC,EAAEhC,OAAO,CAACM,mBAAmB,EAAE+C,QAAQ,EAAEH,MAAM,CAAC;MACxD;IACJ,CAAC,MACI;MACD,MAAOG,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACI,OAAO,CAAC;QACxEC,MAAM,EAAE,yBAAyB;QACjCF,MAAM,EAAE,CACJ;UACInB,OAAO,EAAEwB,aAAa,CAACxB,OAAO;UAC9BpB,SAAS,EAAE4C,aAAa,CAACzC,IAAI;UAC7BoB,OAAO,EAAE,CAACqB,aAAa,CAACpB,MAAM,CAAC;UAC/BC,iBAAiB,EAAE,CAACmB,aAAa,CAAClB,QAAQ,CAAC;UAC3CxB,cAAc,EAAE0C,aAAa,CAAC1C;QAClC,CAAC;MAET,CAAC,CAAE;IACP;EACJ,CAAC,CACD,OAAOiD,GAAG,EAAE;IACR,MAAM;MAAEC;IAAK,CAAC,GAAGD,GAAG;IACpB,IAAIC,IAAI,KAAK3D,oBAAoB,CAAC4D,wBAAwB,EAAE;MACxD;MACA;MACA,MAAM,IAAIC,KAAK,6CAAAjC,MAAA,CAA6CuB,aAAa,CAACzC,IAAI,iBAAc,CAAC;IACjG,CAAC,MACI;MACD,MAAMgD,GAAG;IACb;EACJ;AACJ,CAAC,CAAC;AACFpE,OAAO,CAACK,oBAAoB,GAAGA,oBAAoB;AACnD,SAASD,qBAAqBA,CAACiD,QAAQ,EAAE;EACrC,OAAOtF,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;IAChD,MAAMQ,OAAO,CAAC6D,GAAG,CAAC9C,MAAM,CAAC6D,MAAM,CAACrB,QAAQ,CAAC,CAACsB,GAAG,CAAEoB,OAAO,IAAK,CAAC,CAAC,EAAExE,OAAO,CAACK,oBAAoB,EAAEgD,QAAQ,EAAEmB,OAAO,CAAC,CAAC,CAAC;EACrH,CAAC,CAAC;AACN;AACAxE,OAAO,CAACI,qBAAqB,GAAGA,qBAAqB;AACrD,SAASD,eAAeA,CAACqE,OAAO,EAAEnB,QAAQ,EAAEoB,UAAU,EAAE;EACpD,OAAO1G,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;IAChD,MAAM,CAACsE,OAAO,EAAEqC,aAAa,CAAC,GAAG,MAAMnG,OAAO,CAAC6D,GAAG,CAAC,CAC/CqC,UAAU,CAAC,CAAC,EACZxE,gBAAgB,CAACoD,QAAQ,CAAC,CAC7B,CAAC;IACF,IAAImB,OAAO,CAACnC,OAAO,KAAKA,OAAO,IAAImC,OAAO,CAACnC,OAAO,KAAKqC,aAAa,EAAE;MAClE,IAAI;QACA,MAAMrB,QAAQ,CAACI,OAAO,CAAC;UACnBC,MAAM,EAAE,4BAA4B;UACpCF,MAAM,EAAE,CACJ;YACInB,OAAO,OAAAC,MAAA,CAAOkC,OAAO,CAACnC,OAAO,CAACE,QAAQ,CAAC,EAAE,CAAC;UAC9C,CAAC;QAET,CAAC,CAAC;QACF,MAAM,CAAC,CAAC,EAAEvC,OAAO,CAACE,iBAAiB,EAAEuE,UAAU,EAAED,OAAO,CAACnC,OAAO,CAAC;MACrE,CAAC,CACD,OAAO+B,GAAG,EAAE;QACR,MAAM;UAAEC;QAAK,CAAC,GAAGD,GAAG;QACpB,IAAIC,IAAI,KAAK3D,oBAAoB,CAACiE,cAAc,IAC5CN,IAAI,KAAK3D,oBAAoB,CAACkE,mBAAmB,EAAE;UACnD;UACA,MAAM,CAAC,CAAC,EAAE5E,OAAO,CAACK,oBAAoB,EAAEgD,QAAQ,EAAEmB,OAAO,CAAC;UAC1D,OAAOrE,eAAe,CAACqE,OAAO,EAAEnB,QAAQ,EAAEoB,UAAU,CAAC;QACzD,CAAC,MACI,IAAIJ,IAAI,KAAK3D,oBAAoB,CAAC4D,wBAAwB,EAAE;UAC7D;UACA;QACJ,CAAC,MACI;UACD,MAAMF,GAAG;QACb;MACJ;IACJ;EACJ,CAAC,CAAC;AACN;AACApE,OAAO,CAACG,eAAe,GAAGA,eAAe;AACzC,MAAM0E,KAAK,GAAIC,EAAE,IAAK,IAAIvG,OAAO,CAAED,OAAO,IAAKyG,UAAU,CAACzG,OAAO,EAAEwG,EAAE,CAAC,CAAC;AACvE,MAAME,KAAK,GAAG,GAAG;AACjB,MAAMC,gBAAgB,GAAG,CAAC;AAC1B,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAAEH,gBAAgB,GAAG,IAAI,GAAID,KAAK,CAAC;AAC/D;AACA,MAAM9E,iBAAiB,GAAGA,CAACuE,UAAU,EAAEY,eAAe,KAAKtH,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;EACtG,IAAIuH,QAAQ,GAAG,CAAC;EAChB,IAAIC,gBAAgB,GAAG,KAAK;EAC5B,OAAO,CAACA,gBAAgB,EAAE;IACtBD,QAAQ,EAAE;IACV,IAAIA,QAAQ,IAAIJ,SAAS,EAAE;MACvB,MAAM,IAAIX,KAAK,CAAC,wBAAwB,CAAC;IAC7C;IACA,MAAMlC,OAAO,GAAG,MAAMoC,UAAU,CAAC,CAAC;IAClC,IAAIpC,OAAO,KAAKgD,eAAe,EAAE;MAC7BE,gBAAgB,GAAG,IAAI;MACvB,OAAO,IAAI;IACf;IACA,MAAMV,KAAK,CAACG,KAAK,CAAC;EACtB;AACJ,CAAC,CAAC;AACFhF,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB;AAC7C,SAASD,gBAAgBA,CAACoD,QAAQ,EAAE;EAChC,OAAOtF,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;IAChD,MAAM2G,aAAa,GAAGrB,QAAQ,CAAChB,OAAO,GAChCgB,QAAQ,CAAChB,OAAO,GAChB,MAAMgB,QAAQ,CAACI,OAAO,CAAC;MAAEC,MAAM,EAAE;IAAc,CAAC,CAAC;IACvD,OAAO8B,QAAQ,CAACd,aAAa,EAAE,EAAE,CAAC;EACtC,CAAC,CAAC;AACN;AACA1E,OAAO,CAACC,gBAAgB,GAAGA,gBAAgB"},"metadata":{},"sourceType":"script"}