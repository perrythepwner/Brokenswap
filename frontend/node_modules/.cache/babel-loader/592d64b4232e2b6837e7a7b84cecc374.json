{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VectorCompositeType = void 0;\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nconst arrayComposite_2 = require(\"../view/arrayComposite\");\nconst arrayComposite_3 = require(\"../viewDU/arrayComposite\");\nconst array_1 = require(\"./array\");\n/**\n * Vector: Ordered fixed-length homogeneous collection, with N values\n *\n * Array of Composite type:\n * - Composite types always take at least one chunk\n * - Composite types are always returned as views\n */\nclass VectorCompositeType extends array_1.ArrayType {\n  constructor(elementType, length, opts) {\n    var _opts$typeName;\n    super(elementType);\n    this.elementType = elementType;\n    this.length = length;\n    this.itemsPerChunk = 1;\n    this.isList = false;\n    this.isViewMutable = true;\n    if (elementType.isBasic) throw Error(\"elementType must not be basic\");\n    if (length === 0) throw Error(\"Vector length must be > 0\");\n    this.typeName = (_opts$typeName = opts === null || opts === void 0 ? void 0 : opts.typeName) !== null && _opts$typeName !== void 0 ? _opts$typeName : \"Vector[\".concat(elementType.typeName, \", \").concat(length, \"]\");\n    this.maxChunkCount = length;\n    this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n    this.depth = this.chunkDepth;\n    this.fixedSize = elementType.fixedSize === null ? null : length * elementType.fixedSize;\n    this.minSize = arrayComposite_1.minSizeArrayComposite(elementType, length);\n    this.maxSize = arrayComposite_1.maxSizeArrayComposite(elementType, length);\n    this.defaultLen = length;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static named(elementType, limit, opts) {\n    return new (named_1.namedClass(VectorCompositeType, opts.typeName))(elementType, limit, opts);\n  }\n  getView(tree) {\n    return new arrayComposite_2.ArrayCompositeTreeView(this, tree);\n  }\n  getViewDU(node, cache) {\n    // cache type should be validated (if applicate) in the view\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new arrayComposite_3.ArrayCompositeTreeViewDU(this, node, cache);\n  }\n  commitView(view) {\n    return view.node;\n  }\n  commitViewDU(view) {\n    view.commit();\n    return view.node;\n  }\n  cacheOfViewDU(view) {\n    return view.cache;\n  }\n  // Serialization + deserialization\n  value_serializedSize(value) {\n    return arrayComposite_1.value_serializedSizeArrayComposite(this.elementType, this.length, value);\n  }\n  value_serializeToBytes(output, offset, value) {\n    return arrayComposite_1.value_serializeToBytesArrayComposite(this.elementType, this.length, output, offset, value);\n  }\n  value_deserializeFromBytes(data, start, end) {\n    return arrayComposite_1.value_deserializeFromBytesArrayComposite(this.elementType, data, start, end, this);\n  }\n  tree_serializedSize(node) {\n    return arrayComposite_1.tree_serializedSizeArrayComposite(this.elementType, this.length, this.depth, node);\n  }\n  tree_serializeToBytes(output, offset, node) {\n    return arrayComposite_1.tree_serializeToBytesArrayComposite(this.elementType, this.length, this.depth, node, output, offset);\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    return arrayComposite_1.tree_deserializeFromBytesArrayComposite(this.elementType, this.depth, data, start, end, this);\n  }\n  // Helpers for TreeView\n  tree_getLength() {\n    return this.length;\n  }\n  tree_setLength() {\n    // Vector's length is immutable, ignore this call\n  }\n  tree_getChunksNode(node) {\n    return node;\n  }\n  tree_setChunksNode(rootNode, chunksNode) {\n    return chunksNode;\n  }\n  // Merkleization\n  getRoots(value) {\n    return arrayComposite_1.value_getRootsArrayComposite(this.elementType, this.length, value);\n  }\n}\nexports.VectorCompositeType = VectorCompositeType;","map":{"version":3,"sources":["../../src/type/vectorComposite.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VectorCompositeType = void 0;\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nconst arrayComposite_2 = require(\"../view/arrayComposite\");\nconst arrayComposite_3 = require(\"../viewDU/arrayComposite\");\nconst array_1 = require(\"./array\");\n/**\n * Vector: Ordered fixed-length homogeneous collection, with N values\n *\n * Array of Composite type:\n * - Composite types always take at least one chunk\n * - Composite types are always returned as views\n */\nclass VectorCompositeType extends array_1.ArrayType {\n    constructor(elementType, length, opts) {\n        super(elementType);\n        this.elementType = elementType;\n        this.length = length;\n        this.itemsPerChunk = 1;\n        this.isList = false;\n        this.isViewMutable = true;\n        if (elementType.isBasic)\n            throw Error(\"elementType must not be basic\");\n        if (length === 0)\n            throw Error(\"Vector length must be > 0\");\n        this.typeName = opts?.typeName ?? `Vector[${elementType.typeName}, ${length}]`;\n        this.maxChunkCount = length;\n        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n        this.depth = this.chunkDepth;\n        this.fixedSize = elementType.fixedSize === null ? null : length * elementType.fixedSize;\n        this.minSize = arrayComposite_1.minSizeArrayComposite(elementType, length);\n        this.maxSize = arrayComposite_1.maxSizeArrayComposite(elementType, length);\n        this.defaultLen = length;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static named(elementType, limit, opts) {\n        return new (named_1.namedClass(VectorCompositeType, opts.typeName))(elementType, limit, opts);\n    }\n    getView(tree) {\n        return new arrayComposite_2.ArrayCompositeTreeView(this, tree);\n    }\n    getViewDU(node, cache) {\n        // cache type should be validated (if applicate) in the view\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new arrayComposite_3.ArrayCompositeTreeViewDU(this, node, cache);\n    }\n    commitView(view) {\n        return view.node;\n    }\n    commitViewDU(view) {\n        view.commit();\n        return view.node;\n    }\n    cacheOfViewDU(view) {\n        return view.cache;\n    }\n    // Serialization + deserialization\n    value_serializedSize(value) {\n        return arrayComposite_1.value_serializedSizeArrayComposite(this.elementType, this.length, value);\n    }\n    value_serializeToBytes(output, offset, value) {\n        return arrayComposite_1.value_serializeToBytesArrayComposite(this.elementType, this.length, output, offset, value);\n    }\n    value_deserializeFromBytes(data, start, end) {\n        return arrayComposite_1.value_deserializeFromBytesArrayComposite(this.elementType, data, start, end, this);\n    }\n    tree_serializedSize(node) {\n        return arrayComposite_1.tree_serializedSizeArrayComposite(this.elementType, this.length, this.depth, node);\n    }\n    tree_serializeToBytes(output, offset, node) {\n        return arrayComposite_1.tree_serializeToBytesArrayComposite(this.elementType, this.length, this.depth, node, output, offset);\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        return arrayComposite_1.tree_deserializeFromBytesArrayComposite(this.elementType, this.depth, data, start, end, this);\n    }\n    // Helpers for TreeView\n    tree_getLength() {\n        return this.length;\n    }\n    tree_setLength() {\n        // Vector's length is immutable, ignore this call\n    }\n    tree_getChunksNode(node) {\n        return node;\n    }\n    tree_setChunksNode(rootNode, chunksNode) {\n        return chunksNode;\n    }\n    // Merkleization\n    getRoots(value) {\n        return arrayComposite_1.value_getRootsArrayComposite(this.elementType, this.length, value);\n    }\n}\nexports.VectorCompositeType = VectorCompositeType;\n//# sourceMappingURL=vectorComposite.js.map"]},"metadata":{},"sourceType":"script"}