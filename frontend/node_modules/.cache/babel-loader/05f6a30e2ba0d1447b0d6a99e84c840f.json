{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AttestationServiceStatusResponseType = exports.SaltType = exports.SignatureType = exports.PublicKeyType = exports.AddressType = exports.JSONStringType = exports.UrlType = exports.URL_REGEX = exports.isValidUrl = void 0;\nvar io_1 = require(\"@celo/base/lib/io\");\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar Either_1 = require(\"fp-ts/lib/Either\");\nvar t = __importStar(require(\"io-ts\"));\nvar address_1 = require(\"./address\");\n// Exports moved to @celo/base, forwarding them\n// here for backwards compatibility\nvar io_2 = require(\"@celo/base/lib/io\");\nObject.defineProperty(exports, \"isValidUrl\", {\n  enumerable: true,\n  get: function get() {\n    return io_2.isValidUrl;\n  }\n});\nObject.defineProperty(exports, \"URL_REGEX\", {\n  enumerable: true,\n  get: function get() {\n    return io_2.URL_REGEX;\n  }\n});\nexports.UrlType = new t.Type('Url', t.string.is, function (input, context) {\n  return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n    return io_1.URL_REGEX.test(stringValue) ? t.success(stringValue) : t.failure(stringValue, context, 'is not a valid url');\n  });\n}, String);\nexports.JSONStringType = new t.Type('JSONString', t.string.is, function (input, context) {\n  return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n    try {\n      JSON.parse(stringValue);\n      return t.success(stringValue);\n    } catch (error) {\n      return t.failure(stringValue, context, 'can not be parsed as JSON');\n    }\n  });\n}, String);\nexports.AddressType = new t.Type('Address', t.string.is, function (input, context) {\n  return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n    return (0, address_1.isValidAddress)(stringValue) ? t.success((0, ethereumjs_util_1.toChecksumAddress)(stringValue)) : t.failure(stringValue, context, 'is not a valid address');\n  });\n}, String);\nexports.PublicKeyType = new t.Type('Public Key', t.string.is, function (input, context) {\n  return Either_1.either.chain(t.string.validate(input, context), function (stringValue) {\n    return stringValue.startsWith('0x') && (0, ethereumjs_util_1.isValidPublic)(Buffer.from(stringValue.slice(2), 'hex'), true) ? t.success((0, ethereumjs_util_1.toChecksumAddress)(stringValue)) : t.failure(stringValue, context, 'is not a valid public key');\n  });\n}, String);\nexports.SignatureType = t.string;\nexports.SaltType = t.string;\nexports.AttestationServiceStatusResponseType = t.type({\n  status: t.literal('ok'),\n  smsProviders: t.array(t.string),\n  blacklistedRegionCodes: t.union([t.array(t.string), t.undefined]),\n  accountAddress: exports.AddressType,\n  signature: t.union([exports.SignatureType, t.undefined]),\n  version: t.string,\n  latestBlock: t.number,\n  ageOfLatestBlock: t.number,\n  isNodeSyncing: t.boolean,\n  appSignature: t.string,\n  smsProvidersRandomized: t.boolean,\n  maxDeliveryAttempts: t.number,\n  maxRerequestMins: t.number,\n  twilioVerifySidProvided: t.boolean\n});","map":null,"metadata":{},"sourceType":"script"}