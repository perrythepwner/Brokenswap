{"ast":null,"code":"import _asyncToGenerator from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{useCelo}from'@celo/react-celo';import{JSBI,TokenAmount}from'@ubeswap/sdk';import{UBE}from'constants/tokens';import{BigNumber}from'ethers';import{useReleaseUbeContract,useTokenContract}from'hooks/useContract';import{useEffect,useState}from'react';import{useSingleContractMultipleData}from'state/multicall/hooks';import{useUnclaimedStakingRewards}from'state/stake/hooks';const DECIMALS=BigNumber.from(10).pow(18);const HARDCAP=BigNumber.from(100000000).mul(DECIMALS);const RELEASED=BigNumber.from(25700000).mul(DECIMALS);// Addresses that do not contribute to circulating supply\nconst nonCirculatingAddresses={MiningReleaseEscrow:'0x9d0a92AA8832518328D14Ed5930eC6B44448165e',PoolManager:'0x9Ee3600543eCcc85020D6bc77EB553d1747a65D2'};/**\n * Fetches the circulating supply\n */export const useCirculatingSupply=()=>{const{network}=useCelo();const chainId=network.chainId;const ube=chainId?UBE[chainId]:undefined;const ubeContract=useTokenContract(ube===null||ube===void 0?void 0:ube.address);const releaseUbe=useReleaseUbeContract();// compute amount that is locked up\nconst balancesRaw=useSingleContractMultipleData(ubeContract,'balanceOf',Object.values(nonCirculatingAddresses).map(addr=>[addr]));// if we are still loading, do not load\nconst balances=balancesRaw!==null&&balancesRaw!==void 0&&balancesRaw.find(result=>!result.result)?null:balancesRaw.map(b=>{var _b$result$,_b$result;return(_b$result$=(_b$result=b.result)===null||_b$result===void 0?void 0:_b$result[0])!==null&&_b$result$!==void 0?_b$result$:BigNumber.from(0);});const lockedBalancesSum=balances===null||balances===void 0?void 0:balances.reduce((sum,b)=>b.add(sum),BigNumber.from(0));// add amount of tokens that could be claimed but are not being claimed\nconst{noncirculatingSupply}=useUnclaimedStakingRewards();// compute amount that has been released\nconst[released,setReleased]=useState(null);useEffect(()=>{void _asyncToGenerator(function*(){if(releaseUbe){setReleased(RELEASED.sub(yield releaseUbe.releasableSupplyOfPrincipal(RELEASED)));}})();},[releaseUbe]);if(!lockedBalancesSum||!released||!noncirculatingSupply){return undefined;}return ube?new TokenAmount(ube,JSBI.BigInt(HARDCAP.sub(lockedBalancesSum).sub(released).sub(noncirculatingSupply).toString())):undefined;};","map":{"version":3,"names":["useCelo","JSBI","TokenAmount","UBE","BigNumber","useReleaseUbeContract","useTokenContract","useEffect","useState","useSingleContractMultipleData","useUnclaimedStakingRewards","DECIMALS","from","pow","HARDCAP","mul","RELEASED","nonCirculatingAddresses","MiningReleaseEscrow","PoolManager","useCirculatingSupply","network","chainId","ube","undefined","ubeContract","address","releaseUbe","balancesRaw","Object","values","map","addr","balances","find","result","b","_b$result$","_b$result","lockedBalancesSum","reduce","sum","add","noncirculatingSupply","released","setReleased","_asyncToGenerator","sub","releasableSupplyOfPrincipal","BigInt","toString"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/components/Header/useCirculatingSupply.ts"],"sourcesContent":["import { useCelo } from '@celo/react-celo'\nimport { ChainId as UbeswapChainId, JSBI, TokenAmount } from '@ubeswap/sdk'\nimport { UBE } from 'constants/tokens'\nimport { BigNumber } from 'ethers'\nimport { useReleaseUbeContract, useTokenContract } from 'hooks/useContract'\nimport { useEffect, useState } from 'react'\nimport { useSingleContractMultipleData } from 'state/multicall/hooks'\nimport { useUnclaimedStakingRewards } from 'state/stake/hooks'\n\nconst DECIMALS = BigNumber.from(10).pow(18)\nconst HARDCAP = BigNumber.from(100_000_000).mul(DECIMALS)\nconst RELEASED = BigNumber.from(25_700_000).mul(DECIMALS)\n\n// Addresses that do not contribute to circulating supply\nconst nonCirculatingAddresses = {\n  MiningReleaseEscrow: '0x9d0a92AA8832518328D14Ed5930eC6B44448165e',\n  PoolManager: '0x9Ee3600543eCcc85020D6bc77EB553d1747a65D2',\n}\n\n/**\n * Fetches the circulating supply\n */\nexport const useCirculatingSupply = (): TokenAmount | undefined => {\n  const { network } = useCelo()\n  const chainId = network.chainId\n  const ube = chainId ? UBE[chainId as unknown as UbeswapChainId] : undefined\n  const ubeContract = useTokenContract(ube?.address)\n  const releaseUbe = useReleaseUbeContract()\n\n  // compute amount that is locked up\n  const balancesRaw = useSingleContractMultipleData(\n    ubeContract,\n    'balanceOf',\n    Object.values(nonCirculatingAddresses).map((addr) => [addr])\n  )\n  // if we are still loading, do not load\n  const balances = balancesRaw?.find((result) => !result.result)\n    ? null\n    : (balancesRaw.map((b) => b.result?.[0] ?? BigNumber.from(0)) as readonly BigNumber[])\n  const lockedBalancesSum = balances?.reduce((sum, b) => b.add(sum), BigNumber.from(0))\n\n  // add amount of tokens that could be claimed but are not being claimed\n  const { noncirculatingSupply } = useUnclaimedStakingRewards()\n\n  // compute amount that has been released\n  const [released, setReleased] = useState<BigNumber | null>(null)\n  useEffect(() => {\n    void (async () => {\n      if (releaseUbe) {\n        setReleased(RELEASED.sub(await releaseUbe.releasableSupplyOfPrincipal(RELEASED)))\n      }\n    })()\n  }, [releaseUbe])\n\n  if (!lockedBalancesSum || !released || !noncirculatingSupply) {\n    return undefined\n  }\n\n  return ube\n    ? new TokenAmount(\n        ube,\n        JSBI.BigInt(HARDCAP.sub(lockedBalancesSum).sub(released).sub(noncirculatingSupply).toString())\n      )\n    : undefined\n}\n"],"mappings":"kLAAA,OAASA,OAAO,KAAQ,kBAAkB,CAC1C,OAAoCC,IAAI,CAAEC,WAAW,KAAQ,cAAc,CAC3E,OAASC,GAAG,KAAQ,kBAAkB,CACtC,OAASC,SAAS,KAAQ,QAAQ,CAClC,OAASC,qBAAqB,CAAEC,gBAAgB,KAAQ,mBAAmB,CAC3E,OAASC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,OAASC,6BAA6B,KAAQ,uBAAuB,CACrE,OAASC,0BAA0B,KAAQ,mBAAmB,CAE9D,KAAM,CAAAC,QAAQ,CAAGP,SAAS,CAACQ,IAAI,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,EAAE,CAAC,CAC3C,KAAM,CAAAC,OAAO,CAAGV,SAAS,CAACQ,IAAI,CAAC,SAAW,CAAC,CAACG,GAAG,CAACJ,QAAQ,CAAC,CACzD,KAAM,CAAAK,QAAQ,CAAGZ,SAAS,CAACQ,IAAI,CAAC,QAAU,CAAC,CAACG,GAAG,CAACJ,QAAQ,CAAC,CAEzD;AACA,KAAM,CAAAM,uBAAuB,CAAG,CAC9BC,mBAAmB,CAAE,4CAA4C,CACjEC,WAAW,CAAE,4CACf,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,oBAAoB,CAAGA,CAAA,GAA+B,CACjE,KAAM,CAAEC,OAAQ,CAAC,CAAGrB,OAAO,CAAC,CAAC,CAC7B,KAAM,CAAAsB,OAAO,CAAGD,OAAO,CAACC,OAAO,CAC/B,KAAM,CAAAC,GAAG,CAAGD,OAAO,CAAGnB,GAAG,CAACmB,OAAO,CAA8B,CAAGE,SAAS,CAC3E,KAAM,CAAAC,WAAW,CAAGnB,gBAAgB,CAACiB,GAAG,SAAHA,GAAG,iBAAHA,GAAG,CAAEG,OAAO,CAAC,CAClD,KAAM,CAAAC,UAAU,CAAGtB,qBAAqB,CAAC,CAAC,CAE1C;AACA,KAAM,CAAAuB,WAAW,CAAGnB,6BAA6B,CAC/CgB,WAAW,CACX,WAAW,CACXI,MAAM,CAACC,MAAM,CAACb,uBAAuB,CAAC,CAACc,GAAG,CAAEC,IAAI,EAAK,CAACA,IAAI,CAAC,CAC7D,CAAC,CACD;AACA,KAAM,CAAAC,QAAQ,CAAGL,WAAW,SAAXA,WAAW,WAAXA,WAAW,CAAEM,IAAI,CAAEC,MAAM,EAAK,CAACA,MAAM,CAACA,MAAM,CAAC,CAC1D,IAAI,CACHP,WAAW,CAACG,GAAG,CAAEK,CAAC,OAAAC,UAAA,CAAAC,SAAA,QAAAD,UAAA,EAAAC,SAAA,CAAKF,CAAC,CAACD,MAAM,UAAAG,SAAA,iBAARA,SAAA,CAAW,CAAC,CAAC,UAAAD,UAAA,UAAAA,UAAA,CAAIjC,SAAS,CAACQ,IAAI,CAAC,CAAC,CAAC,GAA0B,CACxF,KAAM,CAAA2B,iBAAiB,CAAGN,QAAQ,SAARA,QAAQ,iBAARA,QAAQ,CAAEO,MAAM,CAAC,CAACC,GAAG,CAAEL,CAAC,GAAKA,CAAC,CAACM,GAAG,CAACD,GAAG,CAAC,CAAErC,SAAS,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC,CAErF;AACA,KAAM,CAAE+B,oBAAqB,CAAC,CAAGjC,0BAA0B,CAAC,CAAC,CAE7D;AACA,KAAM,CAACkC,QAAQ,CAAEC,WAAW,CAAC,CAAGrC,QAAQ,CAAmB,IAAI,CAAC,CAChED,SAAS,CAAC,IAAM,CACd,IAAK,CAAAuC,iBAAA,CAAC,WAAY,CAChB,GAAInB,UAAU,CAAE,CACdkB,WAAW,CAAC7B,QAAQ,CAAC+B,GAAG,MAAO,CAAApB,UAAU,CAACqB,2BAA2B,CAAChC,QAAQ,CAAC,CAAC,CAAC,CACnF,CACF,CAAC,EAAE,CAAC,CACN,CAAC,CAAE,CAACW,UAAU,CAAC,CAAC,CAEhB,GAAI,CAACY,iBAAiB,EAAI,CAACK,QAAQ,EAAI,CAACD,oBAAoB,CAAE,CAC5D,MAAO,CAAAnB,SAAS,CAClB,CAEA,MAAO,CAAAD,GAAG,CACN,GAAI,CAAArB,WAAW,CACbqB,GAAG,CACHtB,IAAI,CAACgD,MAAM,CAACnC,OAAO,CAACiC,GAAG,CAACR,iBAAiB,CAAC,CAACQ,GAAG,CAACH,QAAQ,CAAC,CAACG,GAAG,CAACJ,oBAAoB,CAAC,CAACO,QAAQ,CAAC,CAAC,CAC/F,CAAC,CACD1B,SAAS,CACf,CAAC"},"metadata":{},"sourceType":"module"}