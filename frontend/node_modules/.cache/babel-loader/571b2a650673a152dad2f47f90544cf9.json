{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ElectionWrapper = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar async_1 = require(\"@celo/base/lib/async\");\nvar collections_1 = require(\"@celo/base/lib/collections\");\nvar connect_1 = require(\"@celo/connect\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\nvar BaseWrapperForGoverning_1 = require(\"./BaseWrapperForGoverning\");\n/**\n * Contract for voting for validators and managing validator groups.\n */\nvar ElectionWrapper = /** @class */function (_super) {\n  __extends(ElectionWrapper, _super);\n  function ElectionWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Returns the current election threshold.\n     * @returns Election threshold.\n     */\n    _this.electabilityThreshold = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getElectabilityThreshold, undefined, BaseWrapper_1.fixidityValueToBigNumber);\n    /**\n     * Gets a validator address from the validator set at the given block number.\n     * @param index Index of requested validator in the validator set.\n     * @param blockNumber Block number to retrieve the validator set from.\n     * @return Address of validator at the requested index.\n     */\n    _this.validatorSignerAddressFromSet = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.validatorSignerAddressFromSet);\n    /**\n     * Gets a validator address from the current validator set.\n     * @param index Index of requested validator in the validator set.\n     * @return Address of validator at the requested index.\n     */\n    _this.validatorSignerAddressFromCurrentSet = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.validatorSignerAddressFromCurrentSet, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.identity));\n    /**\n     * Gets the size of the validator set that must sign the given block number.\n     * @param blockNumber Block number to retrieve the validator set from.\n     * @return Size of the validator set.\n     */\n    _this.numberValidatorsInSet = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.numberValidatorsInSet, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * Gets the size of the current elected validator set.\n     * @return Size of the current elected validator set.\n     */\n    _this.numberValidatorsInCurrentSet = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.numberValidatorsInCurrentSet, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * Returns the total votes received across all groups.\n     * @return The total votes received across all groups.\n     */\n    _this.getTotalVotes = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getTotalVotes, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the current validator signers using the precompiles.\n     * @return List of current validator signers.\n     */\n    _this.getCurrentValidatorSigners = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getCurrentValidatorSigners);\n    /**\n     * Returns the total votes for `group` made by `account`.\n     * @param group The address of the validator group.\n     * @param account The address of the voting account.\n     * @return The total votes for `group` made by `account`.\n     */\n    _this.getTotalVotesForGroupByAccount = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getTotalVotesForGroupByAccount, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the groups that `account` has voted for.\n     * @param account The address of the account casting votes.\n     * @return The groups that `account` has voted for.\n     */\n    _this.getGroupsVotedForByAccount = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getGroupsVotedForByAccount);\n    _this.getTotalVotesByAccount = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getTotalVotesByAccount, undefined, BaseWrapper_1.valueToBigNumber);\n    _this._activate = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.activate);\n    return _this;\n  }\n  /**\n   * Returns the minimum and maximum number of validators that can be elected.\n   * @returns The minimum and maximum number of validators that can be elected.\n   */\n  ElectionWrapper.prototype.electableValidators = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, min, max;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.electableValidators().call()];\n          case 1:\n            _a = _b.sent(), min = _a.min, max = _a.max;\n            return [2 /*return*/, {\n              min: (0, BaseWrapper_1.valueToBigNumber)(min),\n              max: (0, BaseWrapper_1.valueToBigNumber)(max)\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the validator signers for block `blockNumber`.\n   * @param blockNumber Block number to retrieve signers for.\n   * @return Address of each signer in the validator set.\n   */\n  ElectionWrapper.prototype.getValidatorSigners = function (blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var numValidators;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.numberValidatorsInSet(blockNumber)];\n          case 1:\n            numValidators = _a.sent();\n            return [2 /*return*/, (0, async_1.concurrentMap)(10, (0, collections_1.zeroRange)(numValidators), function (i) {\n              return _this.validatorSignerAddressFromSet(i, blockNumber);\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a list of elected validators with seats allocated to groups via the D'Hondt method.\n   * @return The list of elected validators.\n   * @dev See https://en.wikipedia.org/wiki/D%27Hondt_method#Allocation for more information.\n   */\n  ElectionWrapper.prototype.electValidatorSigners = function (min, max) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config, minArg, maxArg;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(min !== undefined || max !== undefined)) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.getConfig()];\n          case 1:\n            config = _a.sent();\n            minArg = min === undefined ? config.electableValidators.min : min;\n            maxArg = max === undefined ? config.electableValidators.max : max;\n            return [2 /*return*/, this.contract.methods.electNValidatorSigners(minArg.toString(10), maxArg.toString(10)).call()];\n          case 2:\n            return [2 /*return*/, this.contract.methods.electValidatorSigners().call()];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the total votes for `group`.\n   * @param group The address of the validator group.\n   * @return The total votes for `group`.\n   */\n  ElectionWrapper.prototype.getTotalVotesForGroup = function (group, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var votes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getTotalVotesForGroup(group).call({}, blockNumber)];\n          case 1:\n            votes = _a.sent();\n            return [2 /*return*/, (0, BaseWrapper_1.valueToBigNumber)(votes)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the active votes for `group`.\n   * @param group The address of the validator group.\n   * @return The active votes for `group`.\n   */\n  ElectionWrapper.prototype.getActiveVotesForGroup = function (group, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var votes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getActiveVotesForGroup(group).call({}, blockNumber)];\n          case 1:\n            votes = _a.sent();\n            return [2 /*return*/, (0, BaseWrapper_1.valueToBigNumber)(votes)];\n        }\n      });\n    });\n  };\n  ElectionWrapper.prototype.getVotesForGroupByAccount = function (account, group, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pending, active;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getPendingVotesForGroupByAccount(group, account)\n            // @ts-ignore: Expected 0-1 arguments, but got 2\n            .call({}, blockNumber)];\n          case 1:\n            pending = _a.sent();\n            return [4 /*yield*/, this.contract.methods.getActiveVotesForGroupByAccount(group, account)\n            // @ts-ignore: Expected 0-1 arguments, but got 2\n            .call({}, blockNumber)];\n          case 2:\n            active = _a.sent();\n            return [2 /*return*/, {\n              group: group,\n              pending: (0, BaseWrapper_1.valueToBigNumber)(pending),\n              active: (0, BaseWrapper_1.valueToBigNumber)(active)\n            }];\n        }\n      });\n    });\n  };\n  ElectionWrapper.prototype.getVoter = function (account, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, votes;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getGroupsVotedForByAccount(account)\n            // @ts-ignore: Expected 0-1 arguments, but got 2\n            .call({}, blockNumber)];\n          case 1:\n            groups = _a.sent();\n            return [4 /*yield*/, (0, async_1.concurrentMap)(10, groups, function (g) {\n              return _this.getVotesForGroupByAccount(account, g, blockNumber);\n            })];\n          case 2:\n            votes = _a.sent();\n            return [2 /*return*/, {\n              address: account,\n              votes: votes\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns whether or not the account has any pending votes.\n   * @param account The address of the account casting votes.\n   * @return The groups that `account` has voted for.\n   */\n  ElectionWrapper.prototype.hasPendingVotes = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, isPending;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getGroupsVotedForByAccount(account).call()];\n          case 1:\n            groups = _a.sent();\n            return [4 /*yield*/, Promise.all(groups.map(function (g) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _a = BaseWrapper_1.valueToBigNumber;\n                      return [4 /*yield*/, this.contract.methods.getPendingVotesForGroupByAccount(g, account).call()];\n                    case 1:\n                      return [2 /*return*/, _a.apply(void 0, [_b.sent()]).isGreaterThan(0)];\n                  }\n                });\n              });\n            }))];\n          case 2:\n            isPending = _a.sent();\n            return [2 /*return*/, isPending.some(function (a) {\n              return a;\n            })];\n        }\n      });\n    });\n  };\n  ElectionWrapper.prototype.hasActivatablePendingVotes = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, isActivatable;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getGroupsVotedForByAccount(account).call()];\n          case 1:\n            groups = _a.sent();\n            return [4 /*yield*/, Promise.all(groups.map(function (g) {\n              return _this.contract.methods.hasActivatablePendingVotes(account, g).call();\n            }))];\n          case 2:\n            isActivatable = _a.sent();\n            return [2 /*return*/, isActivatable.some(function (a) {\n              return a;\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns current configuration parameters.\n   */\n  ElectionWrapper.prototype.getConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, Promise.all([this.electableValidators(), this.electabilityThreshold(), this.contract.methods.maxNumGroupsVotedFor().call(), this.getTotalVotes()])];\n          case 1:\n            res = _a.sent();\n            return [2 /*return*/, {\n              electableValidators: res[0],\n              electabilityThreshold: res[1],\n              maxNumGroupsVotedFor: (0, BaseWrapper_1.valueToBigNumber)(res[2]),\n              totalVotes: res[3],\n              currentThreshold: res[3].multipliedBy(res[1])\n            }];\n        }\n      });\n    });\n  };\n  ElectionWrapper.prototype.getValidatorGroupVotes = function (address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var votes, eligible, numVotesReceivable, accounts, name;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getTotalVotesForGroup(address).call()];\n          case 1:\n            votes = _a.sent();\n            return [4 /*yield*/, this.contract.methods.getGroupEligibility(address).call()];\n          case 2:\n            eligible = _a.sent();\n            return [4 /*yield*/, this.contract.methods.getNumVotesReceivable(address).call()];\n          case 3:\n            numVotesReceivable = _a.sent();\n            return [4 /*yield*/, this.contracts.getAccounts()];\n          case 4:\n            accounts = _a.sent();\n            return [4 /*yield*/, accounts.getName(address)];\n          case 5:\n            name = _a.sent() || '';\n            return [2 /*return*/, {\n              address: address,\n              name: name,\n              votes: (0, BaseWrapper_1.valueToBigNumber)(votes),\n              capacity: (0, BaseWrapper_1.valueToBigNumber)(numVotesReceivable).minus(votes),\n              eligible: eligible\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current registered validator groups and their total votes and eligibility.\n   */\n  ElectionWrapper.prototype.getValidatorGroupsVotes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var validators, groups;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getValidators()];\n          case 1:\n            validators = _a.sent();\n            return [4 /*yield*/, validators.getRegisteredValidatorGroupsAddresses()];\n          case 2:\n            groups = _a.sent();\n            return [2 /*return*/, (0, async_1.concurrentMap)(5, groups, function (g) {\n              return _this.getValidatorGroupVotes(g);\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Activates any activatable pending votes.\n   * @param account The account with pending votes to activate.\n   */\n  ElectionWrapper.prototype.activate = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, isActivatable, groupsActivatable;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getGroupsVotedForByAccount(account).call()];\n          case 1:\n            groups = _a.sent();\n            return [4 /*yield*/, Promise.all(groups.map(function (g) {\n              return _this.contract.methods.hasActivatablePendingVotes(account, g).call();\n            }))];\n          case 2:\n            isActivatable = _a.sent();\n            groupsActivatable = groups.filter(function (_, i) {\n              return isActivatable[i];\n            });\n            return [2 /*return*/, groupsActivatable.map(function (g) {\n              return _this._activate(g);\n            })];\n        }\n      });\n    });\n  };\n  ElectionWrapper.prototype.revokePending = function (account, group, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var groups, index, _a, lesser, greater;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getGroupsVotedForByAccount(account).call()];\n          case 1:\n            groups = _b.sent();\n            index = (0, address_1.findAddressIndex)(group, groups);\n            return [4 /*yield*/, this.findLesserAndGreaterAfterVote(group, value.times(-1))];\n          case 2:\n            _a = _b.sent(), lesser = _a.lesser, greater = _a.greater;\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.revokePending(group, value.toFixed(), lesser, greater, index))];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a transaction object for revoking active votes.\n   * @param account Account to revoke votes for.\n   * @param group Validator group to revoke votes from.\n   * @param value Amount to be removed from active votes.\n   * @param lesserAfterVote First group address with less vote than `account`.\n   * @param greaterAfterVote First group address with more vote than `account`.\n   * @dev Must pass both `lesserAfterVote` and `greaterAfterVote` or neither.\n   */\n  ElectionWrapper.prototype.revokeActive = function (account, group, value, lesserAfterVote, greaterAfterVote) {\n    return __awaiter(this, void 0, void 0, function () {\n      var lesser, greater, groups, index, res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getGroupsVotedForByAccount(account).call()];\n          case 1:\n            groups = _a.sent();\n            index = (0, address_1.findAddressIndex)(group, groups);\n            if (!(lesserAfterVote !== undefined && greaterAfterVote !== undefined)) return [3 /*break*/, 2];\n            lesser = lesserAfterVote;\n            greater = greaterAfterVote;\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, this.findLesserAndGreaterAfterVote(group, value.times(-1))];\n          case 3:\n            res = _a.sent();\n            lesser = res.lesser;\n            greater = res.greater;\n            _a.label = 4;\n          case 4:\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.revokeActive(group, value.toFixed(), lesser, greater, index))];\n        }\n      });\n    });\n  };\n  ElectionWrapper.prototype.revoke = function (account, group, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var vote, txos, pendingValue, _a, _b, activeValue, _c, lesser, greater, _d, _e;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4 /*yield*/, this.getVotesForGroupByAccount(account, group)];\n          case 1:\n            vote = _f.sent();\n            if (value.gt(vote.pending.plus(vote.active))) {\n              throw new Error(\"can't revoke more votes for \".concat(group, \" than have been made by \").concat(account));\n            }\n            txos = [];\n            pendingValue = bignumber_js_1.default.minimum(vote.pending, value);\n            if (!!pendingValue.isZero()) return [3 /*break*/, 3];\n            _b = (_a = txos).push;\n            return [4 /*yield*/, this.revokePending(account, group, pendingValue)];\n          case 2:\n            _b.apply(_a, [_f.sent()]);\n            _f.label = 3;\n          case 3:\n            if (!pendingValue.lt(value)) return [3 /*break*/, 6];\n            activeValue = value.minus(pendingValue);\n            return [4 /*yield*/, this.findLesserAndGreaterAfterVote(group, value.times(-1))];\n          case 4:\n            _c = _f.sent(), lesser = _c.lesser, greater = _c.greater;\n            _e = (_d = txos).push;\n            return [4 /*yield*/, this.revokeActive(account, group, activeValue, lesser, greater)];\n          case 5:\n            _e.apply(_d, [_f.sent()]);\n            _f.label = 6;\n          case 6:\n            return [2 /*return*/, txos];\n        }\n      });\n    });\n  };\n  /**\n   * Increments the number of total and pending votes for `group`.\n   * @param validatorGroup The validator group to vote for.\n   * @param value The amount of gold to use to vote.\n   */\n  ElectionWrapper.prototype.vote = function (validatorGroup, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, lesser, greater;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.findLesserAndGreaterAfterVote(validatorGroup, value)];\n          case 1:\n            _a = _b.sent(), lesser = _a.lesser, greater = _a.greater;\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.vote(validatorGroup, value.toFixed(), lesser, greater))];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current eligible validator groups and their total votes.\n   */\n  ElectionWrapper.prototype.getEligibleValidatorGroupsVotes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getTotalVotesForEligibleValidatorGroups().call()];\n          case 1:\n            res = _a.sent();\n            return [2 /*return*/, (0, collections_1.zip)(function (a, b) {\n              return {\n                address: a,\n                name: '',\n                votes: new bignumber_js_1.default(b),\n                capacity: new bignumber_js_1.default(0),\n                eligible: true\n              };\n            }, res[0], res[1])];\n        }\n      });\n    });\n  };\n  ElectionWrapper.prototype.findLesserAndGreaterAfterVote = function (votedGroup, voteWeight) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentVotes, selectedGroup, voteTotal, greaterKey, lesserKey, _i, currentVotes_1, vote;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getEligibleValidatorGroupsVotes()];\n          case 1:\n            currentVotes = _a.sent();\n            selectedGroup = currentVotes.find(function (votes) {\n              return (0, address_1.eqAddress)(votes.address, votedGroup);\n            });\n            voteTotal = selectedGroup ? selectedGroup.votes.plus(voteWeight) : voteWeight;\n            greaterKey = address_1.NULL_ADDRESS;\n            lesserKey = address_1.NULL_ADDRESS;\n            // This leverages the fact that the currentVotes are already sorted from\n            // greatest to lowest value\n            for (_i = 0, currentVotes_1 = currentVotes; _i < currentVotes_1.length; _i++) {\n              vote = currentVotes_1[_i];\n              if (!(0, address_1.eqAddress)(vote.address, votedGroup)) {\n                if (vote.votes.isLessThanOrEqualTo(voteTotal)) {\n                  lesserKey = vote.address;\n                  break;\n                }\n                greaterKey = vote.address;\n              }\n            }\n            return [2 /*return*/, {\n              lesser: lesserKey,\n              greater: greaterKey\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves the set of validatorsparticipating in BFT at epochNumber.\n   * @param epochNumber The epoch to retrieve the elected validator set at.\n   */\n  ElectionWrapper.prototype.getElectedValidators = function (epochNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockchainParamsWrapper, blockNumber, signers, validators;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getBlockchainParameters()];\n          case 1:\n            blockchainParamsWrapper = _a.sent();\n            return [4 /*yield*/, blockchainParamsWrapper.getFirstBlockNumberForEpoch(epochNumber)];\n          case 2:\n            blockNumber = _a.sent();\n            return [4 /*yield*/, this.getValidatorSigners(blockNumber)];\n          case 3:\n            signers = _a.sent();\n            return [4 /*yield*/, this.contracts.getValidators()];\n          case 4:\n            validators = _a.sent();\n            return [2 /*return*/, (0, async_1.concurrentMap)(10, signers, function (addr) {\n              return validators.getValidatorFromSigner(addr);\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves GroupVoterRewards at epochNumber.\n   * @param epochNumber The epoch to retrieve GroupVoterRewards at.\n   */\n  ElectionWrapper.prototype.getGroupVoterRewards = function (epochNumber, useBlockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockchainParamsWrapper, blockNumber, events, validators, validatorGroup;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getBlockchainParameters()];\n          case 1:\n            blockchainParamsWrapper = _a.sent();\n            return [4 /*yield*/, blockchainParamsWrapper.getLastBlockNumberForEpoch(epochNumber)];\n          case 2:\n            blockNumber = _a.sent();\n            return [4 /*yield*/, this.getPastEvents('EpochRewardsDistributedToVoters', {\n              fromBlock: blockNumber,\n              toBlock: blockNumber\n            })];\n          case 3:\n            events = _a.sent();\n            return [4 /*yield*/, this.contracts.getValidators()];\n          case 4:\n            validators = _a.sent();\n            return [4 /*yield*/, (0, async_1.concurrentMap)(10, events, function (e) {\n              return validators.getValidatorGroup(e.returnValues.group, false, useBlockNumber ? blockNumber : undefined);\n            })];\n          case 5:\n            validatorGroup = _a.sent();\n            return [2 /*return*/, events.map(function (e, index) {\n              return {\n                epochNumber: epochNumber,\n                group: validatorGroup[index],\n                groupVoterPayment: (0, BaseWrapper_1.valueToBigNumber)(e.returnValues.value)\n              };\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves VoterRewards for address at epochNumber.\n   * @param address The address to retrieve VoterRewards for.\n   * @param epochNumber The epoch to retrieve VoterRewards at.\n   * @param voterShare Optionally address' share of group rewards.\n   */\n  ElectionWrapper.prototype.getVoterRewards = function (address, epochNumber, useBlockNumber, voterShare) {\n    return __awaiter(this, void 0, void 0, function () {\n      var activeVoteShare, _a, _b, _c, groupVoterRewards, voterRewards;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = voterShare;\n            if (_a) return [3 /*break*/, 4];\n            _b = this.getVoterShare;\n            _c = [address];\n            return [4 /*yield*/, this.contracts.getBlockchainParameters()];\n          case 1:\n            return [4 /*yield*/, _d.sent().getLastBlockNumberForEpoch(epochNumber)];\n          case 2:\n            return [4 /*yield*/, _b.apply(this, _c.concat([_d.sent()]))];\n          case 3:\n            _a = _d.sent();\n            _d.label = 4;\n          case 4:\n            activeVoteShare = _a;\n            return [4 /*yield*/, this.getGroupVoterRewards(epochNumber, useBlockNumber)];\n          case 5:\n            groupVoterRewards = _d.sent();\n            voterRewards = groupVoterRewards.filter(function (e) {\n              return (0, address_1.normalizeAddressWith0x)(e.group.address) in activeVoteShare;\n            });\n            return [2 /*return*/, voterRewards.map(function (e) {\n              var group = (0, address_1.normalizeAddressWith0x)(e.group.address);\n              return {\n                address: address,\n                addressPayment: e.groupVoterPayment.times(activeVoteShare[group]),\n                group: e.group,\n                epochNumber: e.epochNumber\n              };\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves a voter's share of active votes.\n   * @param address The voter to retrieve share for.\n   * @param blockNumber The block to retrieve the voter's share at.\n   */\n  ElectionWrapper.prototype.getVoterShare = function (address, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var activeVoterVotes, voter, _i, _a, vote, group;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            activeVoterVotes = {};\n            return [4 /*yield*/, this.getVoter(address, blockNumber)];\n          case 1:\n            voter = _b.sent();\n            for (_i = 0, _a = voter.votes; _i < _a.length; _i++) {\n              vote = _a[_i];\n              group = (0, address_1.normalizeAddressWith0x)(vote.group);\n              activeVoterVotes[group] = vote.active;\n            }\n            return [2 /*return*/, (0, async_1.concurrentValuesMap)(10, activeVoterVotes, function (voterVotes, group) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, _b;\n                return __generator(this, function (_c) {\n                  switch (_c.label) {\n                    case 0:\n                      _b = (_a = voterVotes).dividedBy;\n                      return [4 /*yield*/, this.getActiveVotesForGroup(group, blockNumber)];\n                    case 1:\n                      return [2 /*return*/, _b.apply(_a, [_c.sent()])];\n                  }\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  return ElectionWrapper;\n}(BaseWrapperForGoverning_1.BaseWrapperForGoverning);\nexports.ElectionWrapper = ElectionWrapper;","map":null,"metadata":{},"sourceType":"script"}