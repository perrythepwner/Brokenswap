{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListBasicType = void 0;\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst listBasic_1 = require(\"../view/listBasic\");\nconst listBasic_2 = require(\"../viewDU/listBasic\");\nconst array_1 = require(\"./array\");\n/**\n * List: ordered variable-length homogeneous collection, limited to N values\n *\n * Array of Basic type:\n * - Basic types are max 32 bytes long so multiple values may be packed in the same node.\n * - Basic types are never returned in a view wrapper, but their value representation\n */\nclass ListBasicType extends array_1.ArrayType {\n  constructor(elementType, limit, opts) {\n    var _opts$typeName;\n    super(elementType);\n    this.elementType = elementType;\n    this.limit = limit;\n    this.fixedSize = null;\n    this.isList = true;\n    this.isViewMutable = true;\n    this.defaultLen = 0;\n    if (!elementType.isBasic) throw Error(\"elementType must be basic\");\n    if (limit === 0) throw Error(\"List limit must be > 0\");\n    this.typeName = (_opts$typeName = opts === null || opts === void 0 ? void 0 : opts.typeName) !== null && _opts$typeName !== void 0 ? _opts$typeName : \"List[\".concat(elementType.typeName, \", \").concat(limit, \"]\");\n    // TODO Check that itemsPerChunk is an integer\n    this.itemsPerChunk = 32 / elementType.byteLength;\n    this.maxChunkCount = Math.ceil(this.limit * elementType.byteLength / 32);\n    this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n    // Depth includes the extra level for the length node\n    this.depth = this.chunkDepth + 1;\n    this.minSize = 0;\n    this.maxSize = this.limit * elementType.maxSize;\n  }\n  static named(elementType, limit, opts) {\n    return new (named_1.namedClass(ListBasicType, opts.typeName))(elementType, limit, opts);\n  }\n  getView(tree) {\n    return new listBasic_1.ListBasicTreeView(this, tree);\n  }\n  getViewDU(node, cache) {\n    // cache type should be validated (if applicate) in the view\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new listBasic_2.ListBasicTreeViewDU(this, node, cache);\n  }\n  commitView(view) {\n    return view.node;\n  }\n  commitViewDU(view) {\n    view.commit();\n    return view.node;\n  }\n  cacheOfViewDU(view) {\n    return view.cache;\n  }\n  // Serialization + deserialization\n  value_serializedSize(value) {\n    return value.length * this.elementType.byteLength;\n  }\n  value_serializeToBytes(output, offset, value) {\n    return arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, value.length, output, offset, value);\n  }\n  value_deserializeFromBytes(data, start, end) {\n    return arrayBasic_1.value_deserializeFromBytesArrayBasic(this.elementType, data, start, end, this);\n  }\n  tree_serializedSize(node) {\n    return this.tree_getLength(node) * this.elementType.byteLength;\n  }\n  tree_serializeToBytes(output, offset, node) {\n    const chunksNode = this.tree_getChunksNode(node);\n    const length = this.tree_getLength(node);\n    return arrayBasic_1.tree_serializeToBytesArrayBasic(this.elementType, length, this.chunkDepth, output, offset, chunksNode);\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    return arrayBasic_1.tree_deserializeFromBytesArrayBasic(this.elementType, this.chunkDepth, data, start, end, this);\n  }\n  // Helpers for TreeView\n  tree_getLength(node) {\n    return node.right.getUint(4, 0);\n  }\n  tree_setLength(tree, length) {\n    tree.rootNode = arrayBasic_1.addLengthNode(tree.rootNode.left, length);\n  }\n  tree_getChunksNode(node) {\n    return node.left;\n  }\n  tree_setChunksNode(rootNode, chunksNode, newLength) {\n    return arrayBasic_1.setChunksNode(rootNode, chunksNode, newLength);\n  }\n  // Merkleization\n  hashTreeRoot(value) {\n    return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n  }\n  getRoots(value) {\n    const uint8Array = new Uint8Array(this.value_serializedSize(value));\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, value.length, {\n      uint8Array,\n      dataView\n    }, 0, value);\n    return merkleize_1.splitIntoRootChunks(uint8Array);\n  }\n}\nexports.ListBasicType = ListBasicType;","map":{"version":3,"sources":["../../src/type/listBasic.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListBasicType = void 0;\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst listBasic_1 = require(\"../view/listBasic\");\nconst listBasic_2 = require(\"../viewDU/listBasic\");\nconst array_1 = require(\"./array\");\n/**\n * List: ordered variable-length homogeneous collection, limited to N values\n *\n * Array of Basic type:\n * - Basic types are max 32 bytes long so multiple values may be packed in the same node.\n * - Basic types are never returned in a view wrapper, but their value representation\n */\nclass ListBasicType extends array_1.ArrayType {\n    constructor(elementType, limit, opts) {\n        super(elementType);\n        this.elementType = elementType;\n        this.limit = limit;\n        this.fixedSize = null;\n        this.isList = true;\n        this.isViewMutable = true;\n        this.defaultLen = 0;\n        if (!elementType.isBasic)\n            throw Error(\"elementType must be basic\");\n        if (limit === 0)\n            throw Error(\"List limit must be > 0\");\n        this.typeName = opts?.typeName ?? `List[${elementType.typeName}, ${limit}]`;\n        // TODO Check that itemsPerChunk is an integer\n        this.itemsPerChunk = 32 / elementType.byteLength;\n        this.maxChunkCount = Math.ceil((this.limit * elementType.byteLength) / 32);\n        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n        // Depth includes the extra level for the length node\n        this.depth = this.chunkDepth + 1;\n        this.minSize = 0;\n        this.maxSize = this.limit * elementType.maxSize;\n    }\n    static named(elementType, limit, opts) {\n        return new (named_1.namedClass(ListBasicType, opts.typeName))(elementType, limit, opts);\n    }\n    getView(tree) {\n        return new listBasic_1.ListBasicTreeView(this, tree);\n    }\n    getViewDU(node, cache) {\n        // cache type should be validated (if applicate) in the view\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new listBasic_2.ListBasicTreeViewDU(this, node, cache);\n    }\n    commitView(view) {\n        return view.node;\n    }\n    commitViewDU(view) {\n        view.commit();\n        return view.node;\n    }\n    cacheOfViewDU(view) {\n        return view.cache;\n    }\n    // Serialization + deserialization\n    value_serializedSize(value) {\n        return value.length * this.elementType.byteLength;\n    }\n    value_serializeToBytes(output, offset, value) {\n        return arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, value.length, output, offset, value);\n    }\n    value_deserializeFromBytes(data, start, end) {\n        return arrayBasic_1.value_deserializeFromBytesArrayBasic(this.elementType, data, start, end, this);\n    }\n    tree_serializedSize(node) {\n        return this.tree_getLength(node) * this.elementType.byteLength;\n    }\n    tree_serializeToBytes(output, offset, node) {\n        const chunksNode = this.tree_getChunksNode(node);\n        const length = this.tree_getLength(node);\n        return arrayBasic_1.tree_serializeToBytesArrayBasic(this.elementType, length, this.chunkDepth, output, offset, chunksNode);\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        return arrayBasic_1.tree_deserializeFromBytesArrayBasic(this.elementType, this.chunkDepth, data, start, end, this);\n    }\n    // Helpers for TreeView\n    tree_getLength(node) {\n        return node.right.getUint(4, 0);\n    }\n    tree_setLength(tree, length) {\n        tree.rootNode = arrayBasic_1.addLengthNode(tree.rootNode.left, length);\n    }\n    tree_getChunksNode(node) {\n        return node.left;\n    }\n    tree_setChunksNode(rootNode, chunksNode, newLength) {\n        return arrayBasic_1.setChunksNode(rootNode, chunksNode, newLength);\n    }\n    // Merkleization\n    hashTreeRoot(value) {\n        return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n    }\n    getRoots(value) {\n        const uint8Array = new Uint8Array(this.value_serializedSize(value));\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, value.length, { uint8Array, dataView }, 0, value);\n        return merkleize_1.splitIntoRootChunks(uint8Array);\n    }\n}\nexports.ListBasicType = ListBasicType;\n//# sourceMappingURL=listBasic.js.map"]},"metadata":{},"sourceType":"script"}