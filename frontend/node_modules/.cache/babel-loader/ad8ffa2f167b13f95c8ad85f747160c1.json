{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _FrozenMap_map, _FrozenSet_set;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FrozenSet = exports.FrozenMap = void 0;\n/**\n * A {@link ReadonlyMap} that cannot be modified after instantiation.\n * The implementation uses an inner map hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this map.\n */\nclass FrozenMap {\n  constructor(entries) {\n    _FrozenMap_map.set(this, void 0);\n    __classPrivateFieldSet(this, _FrozenMap_map, new Map(entries), \"f\");\n    Object.freeze(this);\n  }\n  get size() {\n    return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").size;\n  }\n  [(_FrozenMap_map = new WeakMap(), Symbol.iterator)]() {\n    return __classPrivateFieldGet(this, _FrozenMap_map, \"f\")[Symbol.iterator]();\n  }\n  entries() {\n    return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").entries();\n  }\n  forEach(callbackfn, thisArg) {\n    // We have to wrap the specified callback in order to prevent it from\n    // receiving a reference to the inner map.\n    return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").forEach((value, key, _map) => callbackfn.call(thisArg, value, key, this));\n  }\n  get(key) {\n    return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").get(key);\n  }\n  has(key) {\n    return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").has(key);\n  }\n  keys() {\n    return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").keys();\n  }\n  values() {\n    return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").values();\n  }\n  toString() {\n    return \"FrozenMap(\".concat(this.size, \") {\").concat(this.size > 0 ? \" \".concat([...this.entries()].map(_ref => {\n      let [key, value] = _ref;\n      return \"\".concat(String(key), \" => \").concat(String(value));\n    }).join(', '), \" \") : '', \"}\");\n  }\n}\nexports.FrozenMap = FrozenMap;\n/**\n * A {@link ReadonlySet} that cannot be modified after instantiation.\n * The implementation uses an inner set hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this set.\n */\nclass FrozenSet {\n  constructor(values) {\n    _FrozenSet_set.set(this, void 0);\n    __classPrivateFieldSet(this, _FrozenSet_set, new Set(values), \"f\");\n    Object.freeze(this);\n  }\n  get size() {\n    return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").size;\n  }\n  [(_FrozenSet_set = new WeakMap(), Symbol.iterator)]() {\n    return __classPrivateFieldGet(this, _FrozenSet_set, \"f\")[Symbol.iterator]();\n  }\n  entries() {\n    return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").entries();\n  }\n  forEach(callbackfn, thisArg) {\n    // We have to wrap the specified callback in order to prevent it from\n    // receiving a reference to the inner set.\n    return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").forEach((value, value2, _set) => callbackfn.call(thisArg, value, value2, this));\n  }\n  has(value) {\n    return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").has(value);\n  }\n  keys() {\n    return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").keys();\n  }\n  values() {\n    return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").values();\n  }\n  toString() {\n    return \"FrozenSet(\".concat(this.size, \") {\").concat(this.size > 0 ? \" \".concat([...this.values()].map(member => String(member)).join(', '), \" \") : '', \"}\");\n  }\n}\nexports.FrozenSet = FrozenSet;\nObject.freeze(FrozenMap);\nObject.freeze(FrozenMap.prototype);\nObject.freeze(FrozenSet);\nObject.freeze(FrozenSet.prototype);","map":null,"metadata":{},"sourceType":"script"}