{"ast":null,"code":"import{useCelo,useProvider}from'@celo/react-celo';import{useEffect,useMemo}from'react';import{useDispatch,useSelector}from'react-redux';import{useAddPopup,useBlockNumber}from'../application/hooks';import{checkedTransaction,finalizeTransaction}from'./actions';export function shouldCheck(lastBlockNumber,tx){if(tx.receipt)return false;if(!tx.lastCheckedBlockNumber)return true;const blocksSinceCheck=lastBlockNumber-tx.lastCheckedBlockNumber;if(blocksSinceCheck<1)return false;const minutesPending=(new Date().getTime()-tx.addedTime)/1000/60;if(minutesPending>60){// every 10 blocks if pending for longer than an hour\nreturn blocksSinceCheck>9;}else if(minutesPending>5){// every 3 blocks if pending more than 5 minutes\nreturn blocksSinceCheck>2;}else{// otherwise every block\nreturn true;}}export default function Updater(){const{network}=useCelo();const chainId=network.chainId;const library=useProvider();const lastBlockNumber=useBlockNumber();const dispatch=useDispatch();const state=useSelector(state=>state.transactions);const transactions=useMemo(()=>{var _state$chainId;return chainId?(_state$chainId=state[chainId])!==null&&_state$chainId!==void 0?_state$chainId:{}:{};},[chainId,state]);// show popup on confirm\nconst addPopup=useAddPopup();useEffect(()=>{if(!chainId||!library||!lastBlockNumber)return;Object.keys(transactions).filter(hash=>shouldCheck(lastBlockNumber,transactions[hash])).forEach(hash=>{library.getTransactionReceipt(hash).then(receipt=>{if(receipt){var _transactions$hash;dispatch(finalizeTransaction({chainId,hash,receipt:{blockHash:receipt.blockHash,blockNumber:receipt.blockNumber,contractAddress:receipt.contractAddress,from:receipt.from,status:receipt.status,to:receipt.to,transactionHash:receipt.transactionHash,transactionIndex:receipt.transactionIndex}}));addPopup({txn:{hash,success:receipt.status===1,summary:(_transactions$hash=transactions[hash])===null||_transactions$hash===void 0?void 0:_transactions$hash.summary}},hash);}else{dispatch(checkedTransaction({chainId,hash,blockNumber:lastBlockNumber}));}}).catch(error=>{console.error(\"failed to check transaction hash: \".concat(hash),error);});});},[chainId,library,transactions,lastBlockNumber,dispatch,addPopup]);return null;}","map":null,"metadata":{},"sourceType":"module"}