{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PollingBlockTracker = void 0;\nconst json_rpc_random_id_1 = __importDefault(require(\"json-rpc-random-id\"));\nconst pify_1 = __importDefault(require(\"pify\"));\nconst BaseBlockTracker_1 = require(\"./BaseBlockTracker\");\nconst logging_utils_1 = require(\"./logging-utils\");\nconst log = (0, logging_utils_1.createModuleLogger)(logging_utils_1.projectLogger, 'polling-block-tracker');\nconst createRandomId = (0, json_rpc_random_id_1.default)();\nconst sec = 1000;\nclass PollingBlockTracker extends BaseBlockTracker_1.BaseBlockTracker {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a;\n    // parse + validate args\n    if (!opts.provider) {\n      throw new Error('PollingBlockTracker - no provider specified.');\n    }\n    super({\n      blockResetDuration: (_a = opts.blockResetDuration) !== null && _a !== void 0 ? _a : opts.pollingInterval\n    });\n    // config\n    this._provider = opts.provider;\n    this._pollingInterval = opts.pollingInterval || 20 * sec;\n    this._retryTimeout = opts.retryTimeout || this._pollingInterval / 10;\n    this._keepEventLoopActive = opts.keepEventLoopActive === undefined ? true : opts.keepEventLoopActive;\n    this._setSkipCacheFlag = opts.setSkipCacheFlag || false;\n  }\n  // trigger block polling\n  checkForLatestBlock() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this._updateLatestBlock();\n      return yield _this.getLatestBlock();\n    })();\n  }\n  _start() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2._synchronize();\n    })();\n  }\n  _end() {\n    return _asyncToGenerator(function* () {})();\n  } // No-op\n\n  _synchronize() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      var _a;\n      while (_this3._isRunning) {\n        try {\n          yield _this3._updateLatestBlock();\n          const promise = timeout(_this3._pollingInterval, !_this3._keepEventLoopActive);\n          _this3.emit('_waitingForNextIteration');\n          yield promise;\n        } catch (err) {\n          const newErr = new Error(\"PollingBlockTracker - encountered an error while attempting to update latest block:\\n\".concat((_a = err.stack) !== null && _a !== void 0 ? _a : err));\n          try {\n            _this3.emit('error', newErr);\n          } catch (emitErr) {\n            console.error(newErr);\n          }\n          const promise = timeout(_this3._retryTimeout, !_this3._keepEventLoopActive);\n          _this3.emit('_waitingForNextIteration');\n          yield promise;\n        }\n      }\n    })();\n  }\n  _updateLatestBlock() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      // fetch + set latest block\n      const latestBlock = yield _this4._fetchLatestBlock();\n      _this4._newPotentialLatest(latestBlock);\n    })();\n  }\n  _fetchLatestBlock() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const req = {\n        jsonrpc: '2.0',\n        id: createRandomId(),\n        method: 'eth_blockNumber',\n        params: []\n      };\n      if (_this5._setSkipCacheFlag) {\n        req.skipCache = true;\n      }\n      log('Making request', req);\n      const res = yield (0, pify_1.default)(cb => _this5._provider.sendAsync(req, cb))();\n      log('Got response', res);\n      if (res.error) {\n        throw new Error(\"PollingBlockTracker - encountered error fetching block:\\n\".concat(res.error.message));\n      }\n      return res.result;\n    })();\n  }\n}\nexports.PollingBlockTracker = PollingBlockTracker;\n/**\n * Waits for the specified amount of time.\n *\n * @param duration - The amount of time in milliseconds.\n * @param unref - Assuming this function is run in a Node context, governs\n * whether Node should wait before the `setTimeout` has completed before ending\n * the process (true for no, false for yes). Defaults to false.\n * @returns A promise that can be used to wait.\n */\nfunction timeout(duration, unref) {\n  return new Promise(resolve => {\n    const timeoutRef = setTimeout(resolve, duration);\n    // don't keep process open\n    if (timeoutRef.unref && unref) {\n      timeoutRef.unref();\n    }\n  });\n}","map":{"version":3,"sources":["../src/PollingBlockTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import getCreateRandomId from 'json-rpc-random-id';\nimport pify from 'pify';\nimport { JsonRpcRequest } from 'json-rpc-engine';\nimport { BaseBlockTracker } from './BaseBlockTracker';\nimport { projectLogger, createModuleLogger } from './logging-utils';\nimport { Provider } from './types';\n\nconst log = createModuleLogger(projectLogger, 'polling-block-tracker');\nconst createRandomId = getCreateRandomId();\nconst sec = 1000;\n\nexport interface PollingBlockTrackerOptions {\n  provider?: Provider;\n  pollingInterval?: number;\n  retryTimeout?: number;\n  keepEventLoopActive?: boolean;\n  setSkipCacheFlag?: boolean;\n  blockResetDuration?: number;\n}\n\ninterface ExtendedJsonRpcRequest<T> extends JsonRpcRequest<T> {\n  skipCache?: boolean;\n}\n\nexport class PollingBlockTracker extends BaseBlockTracker {\n  private _provider: Provider;\n\n  private _pollingInterval: number;\n\n  private _retryTimeout: number;\n\n  private _keepEventLoopActive: boolean;\n\n  private _setSkipCacheFlag: boolean;\n\n  constructor(opts: PollingBlockTrackerOptions = {}) {\n    // parse + validate args\n    if (!opts.provider) {\n      throw new Error('PollingBlockTracker - no provider specified.');\n    }\n\n    super({\n      blockResetDuration: opts.blockResetDuration ?? opts.pollingInterval,\n    });\n\n    // config\n    this._provider = opts.provider;\n    this._pollingInterval = opts.pollingInterval || 20 * sec;\n    this._retryTimeout = opts.retryTimeout || this._pollingInterval / 10;\n    this._keepEventLoopActive =\n      opts.keepEventLoopActive === undefined ? true : opts.keepEventLoopActive;\n    this._setSkipCacheFlag = opts.setSkipCacheFlag || false;\n  }\n\n  // trigger block polling\n  async checkForLatestBlock() {\n    await this._updateLatestBlock();\n    return await this.getLatestBlock();\n  }\n\n  protected async _start(): Promise<void> {\n    this._synchronize();\n  }\n\n  protected async _end(): Promise<void> {\n    // No-op\n  }\n\n  private async _synchronize(): Promise<void> {\n    while (this._isRunning) {\n      try {\n        await this._updateLatestBlock();\n        const promise = timeout(\n          this._pollingInterval,\n          !this._keepEventLoopActive,\n        );\n        this.emit('_waitingForNextIteration');\n        await promise;\n      } catch (err: any) {\n        const newErr = new Error(\n          `PollingBlockTracker - encountered an error while attempting to update latest block:\\n${\n            err.stack ?? err\n          }`,\n        );\n        try {\n          this.emit('error', newErr);\n        } catch (emitErr) {\n          console.error(newErr);\n        }\n        const promise = timeout(this._retryTimeout, !this._keepEventLoopActive);\n        this.emit('_waitingForNextIteration');\n        await promise;\n      }\n    }\n  }\n\n  private async _updateLatestBlock(): Promise<void> {\n    // fetch + set latest block\n    const latestBlock = await this._fetchLatestBlock();\n    this._newPotentialLatest(latestBlock);\n  }\n\n  private async _fetchLatestBlock(): Promise<string> {\n    const req: ExtendedJsonRpcRequest<[]> = {\n      jsonrpc: '2.0',\n      id: createRandomId(),\n      method: 'eth_blockNumber',\n      params: [],\n    };\n    if (this._setSkipCacheFlag) {\n      req.skipCache = true;\n    }\n\n    log('Making request', req);\n    const res = await pify((cb) => this._provider.sendAsync(req, cb))();\n    log('Got response', res);\n    if (res.error) {\n      throw new Error(\n        `PollingBlockTracker - encountered error fetching block:\\n${res.error.message}`,\n      );\n    }\n    return res.result;\n  }\n}\n\n/**\n * Waits for the specified amount of time.\n *\n * @param duration - The amount of time in milliseconds.\n * @param unref - Assuming this function is run in a Node context, governs\n * whether Node should wait before the `setTimeout` has completed before ending\n * the process (true for no, false for yes). Defaults to false.\n * @returns A promise that can be used to wait.\n */\nfunction timeout(duration: number, unref: boolean) {\n  return new Promise((resolve) => {\n    const timeoutRef = setTimeout(resolve, duration);\n    // don't keep process open\n    if (timeoutRef.unref && unref) {\n      timeoutRef.unref();\n    }\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}