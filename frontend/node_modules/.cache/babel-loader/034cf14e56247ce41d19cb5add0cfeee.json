{"ast":null,"code":"import{currencyEquals}from'@ubeswap/sdk';import React,{useCallback,useMemo}from'react';import TransactionConfirmationModal,{ConfirmationModalContent,TransactionErrorContent}from'../TransactionConfirmationModal';import{describeTrade}from'./routing/describeTrade';import SwapModalFooter from'./SwapModalFooter';import SwapModalHeader from'./SwapModalHeader';/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */import{jsx as _jsx}from\"react/jsx-runtime\";function tradeMeaningfullyDiffers(tradeA,tradeB){return tradeA.tradeType!==tradeB.tradeType||!currencyEquals(tradeA.inputAmount.currency,tradeB.inputAmount.currency)||!tradeA.inputAmount.equalTo(tradeB.inputAmount)||!currencyEquals(tradeA.outputAmount.currency,tradeB.outputAmount.currency)||!tradeA.outputAmount.equalTo(tradeB.outputAmount);}export default function ConfirmSwapModal(_ref){var _trade$inputAmount,_trade$inputAmount2,_trade$inputAmount2$c,_trade$outputAmount,_trade$outputAmount2,_trade$outputAmount2$;let{trade,originalTrade,onAcceptChanges,allowedSlippage,onConfirm,onDismiss,recipient,swapErrorMessage,isOpen,attemptingTxn,txHash}=_ref;const showAcceptChanges=useMemo(()=>Boolean(trade&&originalTrade&&tradeMeaningfullyDiffers(trade,originalTrade)),[originalTrade,trade]);const{label}=describeTrade(trade);const modalHeader=useCallback(()=>{return trade?/*#__PURE__*/_jsx(SwapModalHeader,{trade:trade,allowedSlippage:allowedSlippage,recipient:recipient,showAcceptChanges:showAcceptChanges,onAcceptChanges:onAcceptChanges}):null;},[allowedSlippage,onAcceptChanges,recipient,showAcceptChanges,trade]);const modalBottom=useCallback(()=>{return trade?/*#__PURE__*/_jsx(SwapModalFooter,{onConfirm:onConfirm,trade:trade,disabledConfirm:showAcceptChanges,swapErrorMessage:swapErrorMessage,allowedSlippage:allowedSlippage}):null;},[allowedSlippage,onConfirm,showAcceptChanges,swapErrorMessage,trade]);// text to show while loading\nconst pendingText=\"Swapping \".concat(trade===null||trade===void 0?void 0:(_trade$inputAmount=trade.inputAmount)===null||_trade$inputAmount===void 0?void 0:_trade$inputAmount.toSignificant(6),\" \").concat(trade===null||trade===void 0?void 0:(_trade$inputAmount2=trade.inputAmount)===null||_trade$inputAmount2===void 0?void 0:(_trade$inputAmount2$c=_trade$inputAmount2.currency)===null||_trade$inputAmount2$c===void 0?void 0:_trade$inputAmount2$c.symbol,\" for \").concat(trade===null||trade===void 0?void 0:(_trade$outputAmount=trade.outputAmount)===null||_trade$outputAmount===void 0?void 0:_trade$outputAmount.toSignificant(6),\" \").concat(trade===null||trade===void 0?void 0:(_trade$outputAmount2=trade.outputAmount)===null||_trade$outputAmount2===void 0?void 0:(_trade$outputAmount2$=_trade$outputAmount2.currency)===null||_trade$outputAmount2$===void 0?void 0:_trade$outputAmount2$.symbol);const confirmationContent=useCallback(()=>swapErrorMessage?/*#__PURE__*/_jsx(TransactionErrorContent,{onDismiss:onDismiss,message:swapErrorMessage}):/*#__PURE__*/_jsx(ConfirmationModalContent,{title:\"Confirm \".concat(label),onDismiss:onDismiss,topContent:modalHeader,bottomContent:modalBottom}),[onDismiss,modalBottom,modalHeader,swapErrorMessage,label]);return/*#__PURE__*/_jsx(TransactionConfirmationModal,{isOpen:isOpen,onDismiss:onDismiss,attemptingTxn:attemptingTxn,hash:txHash,content:confirmationContent,pendingText:pendingText});}","map":null,"metadata":{},"sourceType":"module"}