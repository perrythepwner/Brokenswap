{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n  message: \"property name must be valid\",\n  params: _ref => {\n    let {\n      params: _params\n    } = _ref;\n    return (0, codegen_1._)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"{propertyName: \", \"}\"])), _params.propertyName);\n  }\n};\nconst def = {\n  keyword: \"propertyNames\",\n  type: \"object\",\n  schemaType: [\"object\", \"boolean\"],\n  error,\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      data,\n      it\n    } = cxt;\n    if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n    const valid = gen.name(\"valid\");\n    gen.forIn(\"key\", data, key => {\n      cxt.setParams({\n        propertyName: key\n      });\n      cxt.subschema({\n        keyword: \"propertyNames\",\n        data: key,\n        dataTypes: [\"string\"],\n        propertyName: key,\n        compositeRule: true\n      }, valid);\n      gen.if((0, codegen_1.not)(valid), () => {\n        cxt.error(true);\n        if (!it.allErrors) gen.break();\n      });\n    });\n    cxt.ok(valid);\n  }\n};\nexports.default = def;","map":null,"metadata":{},"sourceType":"script"}