{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\n// @ts-nocheck\n\nimport { parseUnits } from '@ethersproject/units';\nimport { cUSD, JSBI, Token, TokenAmount } from '@ubeswap/sdk';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useCurrency } from '../../hooks/Tokens';\nimport useENS from '../../hooks/useENS';\nimport useParsedQueryString from '../../hooks/useParsedQueryString';\nimport { isAddress } from '../../utils';\nimport { useCurrencyBalances } from '../wallet/hooks';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nexport function useSwapState() {\n  _s();\n  return useSelector(state => state.swap);\n}\n_s(useSwapState, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\nexport function useSwapActionHandlers() {\n  _s2();\n  const dispatch = useDispatch();\n  const onCurrencySelection = useCallback((field, currency) => {\n    dispatch(selectCurrency({\n      field,\n      currencyId: currency instanceof Token ? currency.address : ''\n    }));\n  }, [dispatch]);\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies());\n  }, [dispatch]);\n  const onUserInput = useCallback((field, typedValue) => {\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  const onChangeRecipient = useCallback(recipient => {\n    dispatch(setRecipient({\n      recipient\n    }));\n  }, [dispatch]);\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  };\n}\n\n// try to parse a user entered amount for a given token\n_s2(useSwapActionHandlers, \"oIW3xZhV8GZLW5UVB2t9AN9x/ck=\", false, function () {\n  return [useDispatch];\n});\nexport function tryParseAmount(value, currency) {\n  if (!value || !currency) {\n    return undefined;\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString();\n    if (typedValueParsed !== '0') {\n      return new TokenAmount(currency, JSBI.BigInt(typedValueParsed));\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(\"Failed to parse input amount: \\\"\".concat(value, \"\\\"\"), error);\n  }\n  // necessary for all paths to return a value\n  return new TokenAmount(currency, JSBI.BigInt(0));\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo() {\n  _s3();\n  var _ref;\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId\n    },\n    recipient\n  } = useSwapState();\n  const inputCurrency = useCurrency(inputCurrencyId);\n  const outputCurrency = useCurrency(outputCurrencyId);\n  const recipientLookup = useENS(recipient !== null && recipient !== void 0 ? recipient : undefined);\n  const to = null;\n  const relevantTokenBalances = useCurrencyBalances(undefined, [inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined]);\n  const isExactIn = independentField === Field.INPUT;\n  const parsedAmount = tryParseAmount(typedValue, (_ref = isExactIn ? inputCurrency : outputCurrency) !== null && _ref !== void 0 ? _ref : undefined);\n\n  //const minimaBestTradeExactIn = useMinimaTrade(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  //const ubeBestTradeExactIn = useUbeswapTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  //const bestTradeExactIn =\n  //  minimaBestTradeExactIn === undefined ? undefined : minimaBestTradeExactIn ?? ubeBestTradeExactIn\n  //const bestTradeExactOut = useUbeswapTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\n\n  //const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1]\n  };\n  const currencies = {\n    [Field.INPUT]: inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined,\n    [Field.OUTPUT]: outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined\n  };\n  let inputError;\n  if (!parsedAmount) {\n    var _inputError;\n    inputError = (_inputError = inputError) !== null && _inputError !== void 0 ? _inputError : 'Enter an amount';\n  }\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    var _inputError2;\n    inputError = (_inputError2 = inputError) !== null && _inputError2 !== void 0 ? _inputError2 : 'Select a token';\n  }\n  const showRamp = false;\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    undefined,\n    showRamp,\n    inputError\n  };\n}\n_s3(useDerivedSwapInfo, \"t1v8gsJ1w9SiaRo6bSIRNNPZXv0=\", false, function () {\n  return [useSwapState, useCurrency, useCurrency, useENS, useCurrencyBalances];\n});\nfunction parseCurrencyFromURLParameter(urlParam, chainId) {\n  var _cUSD$chainId$address;\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam);\n    if (valid) return valid;\n    if (urlParam.toUpperCase() === 'CUSD') return cUSD[chainId].address;\n    if (valid === false) return cUSD[chainId].address;\n  }\n  return (_cUSD$chainId$address = cUSD[chainId].address) !== null && _cUSD$chainId$address !== void 0 ? _cUSD$chainId$address : '';\n}\nfunction parseTokenAmountURLParameter(urlParam) {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : '';\n}\nfunction parseIndependentFieldURLParameter(urlParam) {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT;\n}\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\nfunction validatedRecipient(recipient) {\n  if (typeof recipient !== 'string') return null;\n  const address = isAddress(recipient);\n  if (address) return address;\n  if (ENS_NAME_REGEX.test(recipient)) return recipient;\n  if (ADDRESS_REGEX.test(recipient)) return recipient;\n  return null;\n}\nexport function queryParametersToSwapState(parsedQs, chainId) {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency, chainId);\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency, chainId);\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = '';\n    } else {\n      outputCurrency = '';\n    }\n  }\n  const recipient = validatedRecipient(parsedQs.recipient);\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient\n  };\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch() {\n  _s4();\n  const chainId = 62;\n  const dispatch = useDispatch();\n  const parsedQs = useParsedQueryString();\n  const [result, setResult] = useState();\n  useEffect(() => {\n    if (!chainId) return;\n    const parsed = queryParametersToSwapState(parsedQs, chainId);\n    dispatch(replaceSwapState({\n      typedValue: parsed.typedValue,\n      field: parsed.independentField,\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n      recipient: parsed.recipient\n    }));\n    setResult({\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId]);\n  return result;\n}\n_s4(useDefaultsFromURLSearch, \"RIUOOh7MWuwUlOjZ0AE53szvhx4=\", false, function () {\n  return [useDispatch, useParsedQueryString];\n});","map":{"version":3,"names":["parseUnits","cUSD","JSBI","Token","TokenAmount","useCallback","useEffect","useState","useDispatch","useSelector","useCurrency","useENS","useParsedQueryString","isAddress","useCurrencyBalances","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","useSwapState","_s","state","swap","useSwapActionHandlers","_s2","dispatch","onCurrencySelection","field","currency","currencyId","address","onSwitchTokens","onUserInput","typedValue","onChangeRecipient","recipient","tryParseAmount","value","undefined","typedValueParsed","decimals","toString","BigInt","error","console","debug","concat","useDerivedSwapInfo","_s3","_ref","independentField","INPUT","inputCurrencyId","OUTPUT","outputCurrencyId","inputCurrency","outputCurrency","recipientLookup","to","relevantTokenBalances","isExactIn","parsedAmount","currencyBalances","currencies","inputError","_inputError","_inputError2","showRamp","parseCurrencyFromURLParameter","urlParam","chainId","_cUSD$chainId$address","valid","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","test","queryParametersToSwapState","parsedQs","exactAmount","exactField","useDefaultsFromURLSearch","_s4","result","setResult","parsed"],"sources":["/app/src/state/swap/hooks.ts"],"sourcesContent":["// @ts-nocheck\nimport { useCelo } from '@celo/react-celo'\nimport { parseUnits } from '@ethersproject/units'\nimport { CELO, cEUR, ChainId as UbeswapChainId, cUSD, JSBI, Token, TokenAmount, Trade } from '@ubeswap/sdk'\nimport { ParsedQs } from 'qs'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useCurrency } from '../../hooks/Tokens'\nimport useENS from '../../hooks/useENS'\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\nimport { isAddress } from '../../utils'\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices'\nimport { AppDispatch, AppState } from '../index'\nimport { useUserSlippageTolerance } from '../user/hooks'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { SwapState } from './reducer'\n\nexport function useSwapState(): AppState['swap'] {\n  return useSelector<AppState, AppState['swap']>((state) => state.swap)\n}\n\nexport function useSwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Token) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Token) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency instanceof Token ? currency.address : '',\n        })\n      )\n    },\n    [dispatch]\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n  }\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(value?: string, currency?: Token): TokenAmount | undefined {\n  if (!value || !currency) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return new TokenAmount(currency as Token, JSBI.BigInt(typedValueParsed))\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return new TokenAmount(currency as Token, JSBI.BigInt(0))\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(): {\n  currencies: { [field in Field]?: Token }\n  currencyBalances: { [field in Field]?: TokenAmount }\n  parsedAmount: TokenAmount | undefined\n  v2Trade: undefined\n  inputError?: string\n  showRamp: boolean\n} {\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient,\n  } = useSwapState()\n\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const recipientLookup = useENS(recipient ?? undefined)\n  const to: string | null = null\n\n  const relevantTokenBalances = useCurrencyBalances(undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined,\n  ])\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n\n  //const minimaBestTradeExactIn = useMinimaTrade(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  //const ubeBestTradeExactIn = useUbeswapTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  //const bestTradeExactIn =\n  //  minimaBestTradeExactIn === undefined ? undefined : minimaBestTradeExactIn ?? ubeBestTradeExactIn\n  //const bestTradeExactOut = useUbeswapTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\n\n  //const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  }\n\n  const currencies: { [field in Field]?: Token } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined,\n  }\n\n  let inputError: string | undefined\n\n  if (!parsedAmount) {\n    inputError = inputError ?? 'Enter an amount'\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? 'Select a token'\n  }\n\n  const showRamp = false\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    undefined,\n    showRamp,\n    inputError,\n  }\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any, chainId: UbeswapChainId): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'CUSD') return cUSD[chainId].address\n    if (valid === false) return cUSD[chainId].address\n  }\n  return cUSD[chainId].address ?? ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs, chainId: UbeswapChainId): SwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency, chainId)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency, chainId)\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = ''\n    } else {\n      outputCurrency = ''\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency,\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient,\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch():\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\n  | undefined {\n  const chainId = 62\n  const dispatch = useDispatch<AppDispatch>()\n  const parsedQs = useParsedQueryString()\n  const [result, setResult] = useState<\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\n  >()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToSwapState(parsedQs, chainId)\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: parsed.recipient,\n      })\n    )\n\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId])\n\n  return result\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}