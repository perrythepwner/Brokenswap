{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeContenthash = decodeContenthash;\nexports.encodeContenthash = encodeContenthash;\nexports.isValidContenthash = isValidContenthash;\nexports.validateContent = validateContent;\nvar _contentHash = _interopRequireDefault(require(\"content-hash\"));\nvar _ethers = require(\"ethers\");\nvar _bs = _interopRequireDefault(require(\"bs58\"));\nvar supportedCodecs = ['ipns-ns', 'ipfs-ns', 'swarm-ns', 'onion', 'onion3'];\nvar utils = _ethers.ethers.utils;\nfunction decodeContenthash(encoded) {\n  var decoded, protocolType, error;\n  if (encoded.error) {\n    return {\n      protocolType: null,\n      decoded: encoded.error\n    };\n  }\n  if (encoded) {\n    try {\n      decoded = _contentHash[\"default\"].decode(encoded);\n      var codec = _contentHash[\"default\"].getCodec(encoded);\n      if (codec === 'ipfs-ns') {\n        protocolType = 'ipfs';\n      } else if (codec === 'ipns-ns') {\n        decoded = _bs[\"default\"].decode(decoded).slice(2).toString();\n        protocolType = 'ipns';\n      } else if (codec === 'swarm-ns') {\n        protocolType = 'bzz';\n      } else if (codec === 'onion') {\n        protocolType = 'onion';\n      } else if (codec === 'onion3') {\n        protocolType = 'onion3';\n      } else {\n        decoded = encoded;\n      }\n    } catch (e) {\n      error = e.message;\n    }\n  }\n  return {\n    protocolType: protocolType,\n    decoded: decoded,\n    error: error\n  };\n}\nfunction validateContent(encoded) {\n  return _contentHash[\"default\"].isHashOfType(encoded, _contentHash[\"default\"].Types.ipfs) || _contentHash[\"default\"].isHashOfType(encoded, _contentHash[\"default\"].Types.swarm);\n}\nfunction isValidContenthash(encoded) {\n  try {\n    var codec = _contentHash[\"default\"].getCodec(encoded);\n    return utils.isHexString(encoded) && supportedCodecs.includes(codec);\n  } catch (e) {\n    console.log(e);\n  }\n}\nfunction encodeContenthash(text) {\n  var content, contentType;\n  var encoded = false;\n  if (!!text) {\n    var matched = text.match(/^(ipfs|ipns|bzz|onion|onion3):\\/\\/(.*)/) || text.match(/\\/(ipfs)\\/(.*)/) || text.match(/\\/(ipns)\\/(.*)/);\n    if (matched) {\n      contentType = matched[1];\n      content = matched[2];\n    }\n    try {\n      if (contentType === 'ipfs') {\n        if (content.length >= 4) {\n          encoded = '0x' + _contentHash[\"default\"].encode('ipfs-ns', content);\n        }\n      } else if (contentType === 'ipns') {\n        var bs58content = _bs[\"default\"].encode(Buffer.concat([Buffer.from([0, content.length]), Buffer.from(content)]));\n        encoded = '0x' + _contentHash[\"default\"].encode('ipns-ns', bs58content);\n      } else if (contentType === 'bzz') {\n        if (content.length >= 4) {\n          encoded = '0x' + _contentHash[\"default\"].fromSwarm(content);\n        }\n      } else if (contentType === 'onion') {\n        if (content.length == 16) {\n          encoded = '0x' + _contentHash[\"default\"].encode('onion', content);\n        }\n      } else if (contentType === 'onion3') {\n        if (content.length == 56) {\n          encoded = '0x' + _contentHash[\"default\"].encode('onion3', content);\n        }\n      } else {\n        console.warn('Unsupported protocol or invalid value', {\n          contentType: contentType,\n          text: text\n        });\n      }\n    } catch (err) {\n      console.warn('Error encoding content hash', {\n        text: text,\n        encoded: encoded\n      }); //throw 'Error encoding content hash'\n    }\n  }\n\n  return encoded;\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","decodeContenthash","encodeContenthash","isValidContenthash","validateContent","_contentHash","_ethers","_bs","supportedCodecs","utils","ethers","encoded","decoded","protocolType","error","decode","codec","getCodec","slice","toString","e","message","isHashOfType","Types","ipfs","swarm","isHexString","includes","console","log","text","content","contentType","matched","match","length","encode","bs58content","Buffer","concat","from","fromSwarm","warn","err"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@ensdomains/ensjs/dist/utils/contents.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeContenthash = decodeContenthash;\nexports.encodeContenthash = encodeContenthash;\nexports.isValidContenthash = isValidContenthash;\nexports.validateContent = validateContent;\n\nvar _contentHash = _interopRequireDefault(require(\"content-hash\"));\n\nvar _ethers = require(\"ethers\");\n\nvar _bs = _interopRequireDefault(require(\"bs58\"));\n\nvar supportedCodecs = ['ipns-ns', 'ipfs-ns', 'swarm-ns', 'onion', 'onion3'];\nvar utils = _ethers.ethers.utils;\n\nfunction decodeContenthash(encoded) {\n  var decoded, protocolType, error;\n\n  if (encoded.error) {\n    return {\n      protocolType: null,\n      decoded: encoded.error\n    };\n  }\n\n  if (encoded) {\n    try {\n      decoded = _contentHash[\"default\"].decode(encoded);\n\n      var codec = _contentHash[\"default\"].getCodec(encoded);\n\n      if (codec === 'ipfs-ns') {\n        protocolType = 'ipfs';\n      } else if (codec === 'ipns-ns') {\n        decoded = _bs[\"default\"].decode(decoded).slice(2).toString();\n        protocolType = 'ipns';\n      } else if (codec === 'swarm-ns') {\n        protocolType = 'bzz';\n      } else if (codec === 'onion') {\n        protocolType = 'onion';\n      } else if (codec === 'onion3') {\n        protocolType = 'onion3';\n      } else {\n        decoded = encoded;\n      }\n    } catch (e) {\n      error = e.message;\n    }\n  }\n\n  return {\n    protocolType: protocolType,\n    decoded: decoded,\n    error: error\n  };\n}\n\nfunction validateContent(encoded) {\n  return _contentHash[\"default\"].isHashOfType(encoded, _contentHash[\"default\"].Types.ipfs) || _contentHash[\"default\"].isHashOfType(encoded, _contentHash[\"default\"].Types.swarm);\n}\n\nfunction isValidContenthash(encoded) {\n  try {\n    var codec = _contentHash[\"default\"].getCodec(encoded);\n\n    return utils.isHexString(encoded) && supportedCodecs.includes(codec);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction encodeContenthash(text) {\n  var content, contentType;\n  var encoded = false;\n\n  if (!!text) {\n    var matched = text.match(/^(ipfs|ipns|bzz|onion|onion3):\\/\\/(.*)/) || text.match(/\\/(ipfs)\\/(.*)/) || text.match(/\\/(ipns)\\/(.*)/);\n\n    if (matched) {\n      contentType = matched[1];\n      content = matched[2];\n    }\n\n    try {\n      if (contentType === 'ipfs') {\n        if (content.length >= 4) {\n          encoded = '0x' + _contentHash[\"default\"].encode('ipfs-ns', content);\n        }\n      } else if (contentType === 'ipns') {\n        var bs58content = _bs[\"default\"].encode(Buffer.concat([Buffer.from([0, content.length]), Buffer.from(content)]));\n\n        encoded = '0x' + _contentHash[\"default\"].encode('ipns-ns', bs58content);\n      } else if (contentType === 'bzz') {\n        if (content.length >= 4) {\n          encoded = '0x' + _contentHash[\"default\"].fromSwarm(content);\n        }\n      } else if (contentType === 'onion') {\n        if (content.length == 16) {\n          encoded = '0x' + _contentHash[\"default\"].encode('onion', content);\n        }\n      } else if (contentType === 'onion3') {\n        if (content.length == 56) {\n          encoded = '0x' + _contentHash[\"default\"].encode('onion3', content);\n        }\n      } else {\n        console.warn('Unsupported protocol or invalid value', {\n          contentType: contentType,\n          text: text\n        });\n      }\n    } catch (err) {\n      console.warn('Error encoding content hash', {\n        text: text,\n        encoded: encoded\n      }); //throw 'Error encoding content hash'\n    }\n  }\n\n  return encoded;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}