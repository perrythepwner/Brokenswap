{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidatorsWrapper = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar async_1 = require(\"@celo/base/lib/async\");\nvar collections_1 = require(\"@celo/base/lib/collections\");\nvar connect_1 = require(\"@celo/connect\");\nvar fixidity_1 = require(\"@celo/utils/lib/fixidity\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\nvar BaseWrapperForGoverning_1 = require(\"./BaseWrapperForGoverning\");\n/**\n * Contract for voting for validators and managing validator groups.\n */\n// TODO(asa): Support validator signers\nvar ValidatorsWrapper = /** @class */function (_super) {\n  __extends(ValidatorsWrapper, _super);\n  function ValidatorsWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Queues an update to a validator group's commission.\n     * @param commission Fixidity representation of the commission this group receives on epoch\n     *   payments made to its members. Must be in the range [0, 1.0].\n     */\n    _this.setNextCommissionUpdate = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.setNextCommissionUpdate, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.valueToFixidityString));\n    /**\n     * Updates a validator group's commission based on the previously queued update\n     */\n    _this.updateCommission = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.updateCommission);\n    /**\n     * Returns the Locked Gold requirements for specific account.\n     * @returns The Locked Gold requirements for a specific account.\n     */\n    _this.getAccountLockedGoldRequirement = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAccountLockedGoldRequirement, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the reset period, in seconds, for slashing multiplier.\n     */\n    _this.getSlashingMultiplierResetPeriod = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.slashingMultiplierResetPeriod, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the update delay, in blocks, for the group commission.\n     */\n    _this.getCommissionUpdateDelay = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.commissionUpdateDelay, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the validator downtime grace period\n     */\n    _this.getDowntimeGracePeriod = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.downtimeGracePeriod, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Updates a validator's BLS key.\n     * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass proof\n     *   of possession. 48 bytes.\n     * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\n     *   account address. 96 bytes.\n     * @return True upon success.\n     */\n    _this.updateBlsPublicKey = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.updateBlsPublicKey, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.stringToSolidityBytes, BaseWrapper_1.stringToSolidityBytes));\n    /**\n     * Returns whether a particular account has a registered validator.\n     * @param account The account.\n     * @return Whether a particular address is a registered validator.\n     */\n    _this.isValidator = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.isValidator);\n    /**\n     * Returns whether a particular account has a registered validator group.\n     * @param account The account.\n     * @return Whether a particular address is a registered validator group.\n     */\n    _this.isValidatorGroup = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.isValidatorGroup);\n    /**\n     * Returns whether an account meets the requirements to register a validator.\n     * @param account The account.\n     * @return Whether an account meets the requirements to register a validator.\n     */\n    _this.meetsValidatorBalanceRequirements = function (address) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var lockedGold, total, reqs;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.contracts.getLockedGold()];\n            case 1:\n              lockedGold = _a.sent();\n              return [4 /*yield*/, lockedGold.getAccountTotalLockedGold(address)];\n            case 2:\n              total = _a.sent();\n              return [4 /*yield*/, this.getValidatorLockedGoldRequirements()];\n            case 3:\n              reqs = _a.sent();\n              return [2 /*return*/, reqs.value.lte(total)];\n          }\n        });\n      });\n    };\n    /**\n     * Returns whether an account meets the requirements to register a group.\n     * @param account The account.\n     * @return Whether an account meets the requirements to register a group.\n     */\n    _this.meetsValidatorGroupBalanceRequirements = function (address) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var lockedGold, total, reqs;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.contracts.getLockedGold()];\n            case 1:\n              lockedGold = _a.sent();\n              return [4 /*yield*/, lockedGold.getAccountTotalLockedGold(address)];\n            case 2:\n              total = _a.sent();\n              return [4 /*yield*/, this.getGroupLockedGoldRequirements()];\n            case 3:\n              reqs = _a.sent();\n              return [2 /*return*/, reqs.value.lte(total)];\n          }\n        });\n      });\n    };\n    /**\n     * Returns the Validator's group membership history\n     * @param validator The validator whose membership history to return.\n     * @return The group membership history of a validator.\n     */\n    _this.getValidatorMembershipHistory = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getMembershipHistory, undefined, function (res) {\n      return (0, collections_1.zip)(function (epoch, group) {\n        return {\n          epoch: (0, BaseWrapper_1.valueToInt)(epoch),\n          group: group\n        };\n      }, res[0], res[1]);\n    });\n    /**\n     * Returns extra data from the Validator's group membership history\n     * @param validator The validator whose membership history to return.\n     * @return The group membership history of a validator.\n     */\n    _this.getValidatorMembershipHistoryExtraData = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getMembershipHistory, undefined, function (res) {\n      return {\n        lastRemovedFromGroupTimestamp: (0, BaseWrapper_1.valueToInt)(res[2]),\n        tail: (0, BaseWrapper_1.valueToInt)(res[3])\n      };\n    });\n    /** Get the size (amount of members) of a ValidatorGroup */\n    _this.getValidatorGroupSize = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getGroupNumMembers, undefined, BaseWrapper_1.valueToInt);\n    /** Get list of registered validator group addresses */\n    _this.getRegisteredValidatorGroupsAddresses = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getRegisteredValidatorGroups);\n    /**\n     * Registers a validator unaffiliated with any validator group.\n     *\n     * Fails if the account is already a validator or validator group.\n     *\n     * @param validatorAddress The address that the validator is using for consensus, should match\n     *   the validator signer.\n     * @param ecdsaPublicKey The ECDSA public key that the validator is using for consensus. 64 bytes.\n     * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass proof\n     *   of possession. 48 bytes.\n     * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\n     *   account address. 96 bytes.\n     */\n    _this.registerValidator = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.registerValidator, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.stringToSolidityBytes, BaseWrapper_1.stringToSolidityBytes, BaseWrapper_1.stringToSolidityBytes));\n    _this.getEpochNumber = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getEpochNumber, undefined, BaseWrapper_1.valueToBigNumber);\n    _this.getEpochSize = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getEpochSize, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Affiliates a validator with a group, allowing it to be added as a member.\n     * De-affiliates with the previously affiliated group if present.\n     * @param group The validator group with which to affiliate.\n     */\n    _this.affiliate = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.affiliate);\n    /**\n     * De-affiliates a validator, removing it from the group for which it is a member.\n     * Fails if the account is not a validator with non-zero affiliation.\n     */\n    _this.deaffiliate = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.deaffiliate);\n    /**\n     * Removes a validator from the group for which it is a member.\n     * @param validatorAccount The validator to deaffiliate from their affiliated validator group.\n     */\n    _this.forceDeaffiliateIfValidator = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.forceDeaffiliateIfValidator);\n    /**\n     * Resets a group's slashing multiplier if it has been >= the reset period since\n     * the last time the group was slashed.\n     */\n    _this.resetSlashingMultiplier = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.resetSlashingMultiplier);\n    /**\n     * Removes a member from a ValidatorGroup\n     * The ValidatorGroup is specified by the `from` of the tx.\n     *\n     * @param validator The Validator to remove from the group\n     */\n    _this.removeMember = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.removeMember);\n    return _this;\n  }\n  /**\n   * Returns the Locked Gold requirements for validators.\n   * @returns The Locked Gold requirements for validators.\n   */\n  ValidatorsWrapper.prototype.getValidatorLockedGoldRequirements = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getValidatorLockedGoldRequirements().call()];\n          case 1:\n            res = _a.sent();\n            return [2 /*return*/, {\n              value: (0, BaseWrapper_1.valueToBigNumber)(res[0]),\n              duration: (0, BaseWrapper_1.valueToBigNumber)(res[1])\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the Locked Gold requirements for validator groups.\n   * @returns The Locked Gold requirements for validator groups.\n   */\n  ValidatorsWrapper.prototype.getGroupLockedGoldRequirements = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getGroupLockedGoldRequirements().call()];\n          case 1:\n            res = _a.sent();\n            return [2 /*return*/, {\n              value: (0, BaseWrapper_1.valueToBigNumber)(res[0]),\n              duration: (0, BaseWrapper_1.valueToBigNumber)(res[1])\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns current configuration parameters.\n   */\n  ValidatorsWrapper.prototype.getConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, Promise.all([this.getValidatorLockedGoldRequirements(), this.getGroupLockedGoldRequirements(), this.contract.methods.maxGroupSize().call(), this.contract.methods.membershipHistoryLength().call(), this.getSlashingMultiplierResetPeriod(), this.getCommissionUpdateDelay(), this.getDowntimeGracePeriod()])];\n          case 1:\n            res = _a.sent();\n            return [2 /*return*/, {\n              validatorLockedGoldRequirements: res[0],\n              groupLockedGoldRequirements: res[1],\n              maxGroupSize: (0, BaseWrapper_1.valueToBigNumber)(res[2]),\n              membershipHistoryLength: (0, BaseWrapper_1.valueToBigNumber)(res[3]),\n              slashingMultiplierResetPeriod: res[4],\n              commissionUpdateDelay: res[5],\n              downtimeGracePeriod: res[6]\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @dev Returns human readable configuration of the validators contract\n   * @return ValidatorsConfig object\n   */\n  ValidatorsWrapper.prototype.getHumanReadableConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var config, validatorLockedGoldRequirements, groupLockedGoldRequirements;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getConfig()];\n          case 1:\n            config = _a.sent();\n            validatorLockedGoldRequirements = __assign(__assign({}, config.validatorLockedGoldRequirements), {\n              duration: (0, BaseWrapper_1.secondsToDurationString)(config.validatorLockedGoldRequirements.duration)\n            });\n            groupLockedGoldRequirements = __assign(__assign({}, config.groupLockedGoldRequirements), {\n              duration: (0, BaseWrapper_1.secondsToDurationString)(config.groupLockedGoldRequirements.duration)\n            });\n            return [2 /*return*/, __assign(__assign({}, config), {\n              slashingMultiplierResetPeriod: (0, BaseWrapper_1.secondsToDurationString)(config.slashingMultiplierResetPeriod),\n              commissionUpdateDelay: (0, BaseWrapper_1.blocksToDurationString)(config.commissionUpdateDelay),\n              validatorLockedGoldRequirements: validatorLockedGoldRequirements,\n              groupLockedGoldRequirements: groupLockedGoldRequirements\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the account associated with `signer`.\n   * @param signer The address of an account or currently authorized validator signer.\n   * @dev Fails if the `signer` is not an account or currently authorized validator.\n   * @return The associated account.\n   */\n  ValidatorsWrapper.prototype.validatorSignerToAccount = function (signerAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getAccounts()];\n          case 1:\n            accounts = _a.sent();\n            return [2 /*return*/, accounts.validatorSignerToAccount(signerAddress)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the account associated with `signer`.\n   * @param signer The address of the account or previously authorized signer.\n   * @dev Fails if the `signer` is not an account or previously authorized signer.\n   * @return The associated account.\n   */\n  ValidatorsWrapper.prototype.signerToAccount = function (signerAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getAccounts()];\n          case 1:\n            accounts = _a.sent();\n            return [2 /*return*/, accounts.signerToAccount(signerAddress)];\n        }\n      });\n    });\n  };\n  /** Get Validator information */\n  ValidatorsWrapper.prototype.getValidator = function (address, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res, accounts, name;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getValidator(address).call({}, blockNumber)];\n          case 1:\n            res = _a.sent();\n            return [4 /*yield*/, this.contracts.getAccounts()];\n          case 2:\n            accounts = _a.sent();\n            return [4 /*yield*/, accounts.getName(address, blockNumber)];\n          case 3:\n            name = _a.sent() || '';\n            return [2 /*return*/, {\n              name: name,\n              address: address,\n              ecdsaPublicKey: res.ecdsaPublicKey,\n              blsPublicKey: res.blsPublicKey,\n              affiliation: res.affiliation,\n              score: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res.score)),\n              signer: res.signer\n            }];\n        }\n      });\n    });\n  };\n  ValidatorsWrapper.prototype.getValidatorFromSigner = function (address, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.signerToAccount(address)];\n          case 1:\n            account = _b.sent();\n            _a = (0, address_1.eqAddress)(account, address_1.NULL_ADDRESS);\n            if (_a) return [3 /*break*/, 3];\n            return [4 /*yield*/, this.isValidator(account)];\n          case 2:\n            _a = !_b.sent();\n            _b.label = 3;\n          case 3:\n            if (_a) {\n              return [2 /*return*/, {\n                name: 'Unregistered validator',\n                address: address,\n                ecdsaPublicKey: '',\n                blsPublicKey: '',\n                affiliation: '',\n                score: new bignumber_js_1.default(0),\n                signer: address\n              }];\n            } else {\n              return [2 /*return*/, this.getValidator(account, blockNumber)];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /** Get ValidatorGroup information */\n  ValidatorsWrapper.prototype.getValidatorGroup = function (address, getAffiliates, blockNumber) {\n    if (getAffiliates === void 0) {\n      getAffiliates = true;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var res, accounts, name, affiliates, validators;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getValidatorGroup(address).call({}, blockNumber)];\n          case 1:\n            res = _a.sent();\n            return [4 /*yield*/, this.contracts.getAccounts()];\n          case 2:\n            accounts = _a.sent();\n            return [4 /*yield*/, accounts.getName(address, blockNumber)];\n          case 3:\n            name = _a.sent() || '';\n            affiliates = [];\n            if (!getAffiliates) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.getRegisteredValidators(blockNumber)];\n          case 4:\n            validators = _a.sent();\n            affiliates = validators.filter(function (v) {\n              return v.affiliation && (0, address_1.eqAddress)(v.affiliation, address);\n            }).filter(function (v) {\n              return !res[0].includes(v.address);\n            });\n            _a.label = 5;\n          case 5:\n            return [2 /*return*/, {\n              name: name,\n              address: address,\n              members: Array.from(res[0]),\n              commission: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res[1])),\n              nextCommission: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res[2])),\n              nextCommissionBlock: new bignumber_js_1.default(res[3]),\n              membersUpdated: res[4].reduce(function (a, b) {\n                return Math.max(a, new bignumber_js_1.default(b).toNumber());\n              }, 0),\n              affiliates: affiliates.map(function (v) {\n                return v.address;\n              }),\n              slashingMultiplier: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res[5])),\n              lastSlashed: (0, BaseWrapper_1.valueToBigNumber)(res[6])\n            }];\n        }\n      });\n    });\n  };\n  /** Get list of registered validator addresses */\n  ValidatorsWrapper.prototype.getRegisteredValidatorsAddresses = function (blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        // @ts-ignore: Expected 0-1 arguments, but got 2\n        return [2 /*return*/, this.contract.methods.getRegisteredValidators().call({}, blockNumber)];\n      });\n    });\n  };\n  /** Get list of registered validators */\n  ValidatorsWrapper.prototype.getRegisteredValidators = function (blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var vgAddresses;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getRegisteredValidatorsAddresses(blockNumber)];\n          case 1:\n            vgAddresses = _a.sent();\n            return [2 /*return*/, (0, async_1.concurrentMap)(10, vgAddresses, function (addr) {\n              return _this.getValidator(addr, blockNumber);\n            })];\n        }\n      });\n    });\n  };\n  /** Get list of registered validator groups */\n  ValidatorsWrapper.prototype.getRegisteredValidatorGroups = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var vgAddresses;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getRegisteredValidatorGroupsAddresses()];\n          case 1:\n            vgAddresses = _a.sent();\n            return [2 /*return*/, (0, async_1.concurrentMap)(10, vgAddresses, function (addr) {\n              return _this.getValidatorGroup(addr, false);\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * De-registers a validator, removing it from the group for which it is a member.\n   * @param validatorAddress Address of the validator to deregister\n   */\n  ValidatorsWrapper.prototype.deregisterValidator = function (validatorAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allValidators, idx;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getRegisteredValidatorsAddresses()];\n          case 1:\n            allValidators = _a.sent();\n            idx = (0, address_1.findAddressIndex)(validatorAddress, allValidators);\n            if (idx < 0) {\n              throw new Error(\"\".concat(validatorAddress, \" is not a registered validator\"));\n            }\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.deregisterValidator(idx))];\n        }\n      });\n    });\n  };\n  /**\n   * Registers a validator group with no member validators.\n   * Fails if the account is already a validator or validator group.\n   * Fails if the account does not have sufficient weight.\n   *\n   * @param commission the commission this group receives on epoch payments made to its members.\n   */\n  ValidatorsWrapper.prototype.registerValidatorGroup = function (commission) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.registerValidatorGroup((0, fixidity_1.toFixed)(commission).toFixed()))];\n      });\n    });\n  };\n  /**\n   * De-registers a validator Group\n   * @param validatorGroupAddress Address of the validator group to deregister\n   */\n  ValidatorsWrapper.prototype.deregisterValidatorGroup = function (validatorGroupAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allGroups, idx;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getRegisteredValidatorGroupsAddresses()];\n          case 1:\n            allGroups = _a.sent();\n            idx = (0, address_1.findAddressIndex)(validatorGroupAddress, allGroups);\n            if (idx < 0) {\n              throw new Error(\"\".concat(validatorGroupAddress, \" is not a registered validator\"));\n            }\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.deregisterValidatorGroup(idx))];\n        }\n      });\n    });\n  };\n  /**\n   * Adds a member to the end of a validator group's list of members.\n   * Fails if `validator` has not set their affiliation to this account.\n   * @param validator The validator to add to the group\n   */\n  ValidatorsWrapper.prototype.addMember = function (group, validator) {\n    return __awaiter(this, void 0, void 0, function () {\n      var numMembers, election, voteWeight, _a, lesser, greater;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.getValidatorGroupSize(group)];\n          case 1:\n            numMembers = _b.sent();\n            if (!(numMembers === 0)) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.contracts.getElection()];\n          case 2:\n            election = _b.sent();\n            return [4 /*yield*/, election.getTotalVotesForGroup(group)];\n          case 3:\n            voteWeight = _b.sent();\n            return [4 /*yield*/, election.findLesserAndGreaterAfterVote(group, voteWeight)];\n          case 4:\n            _a = _b.sent(), lesser = _a.lesser, greater = _a.greater;\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.addFirstMember(validator, lesser, greater))];\n          case 5:\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.addMember(validator))];\n        }\n      });\n    });\n  };\n  /**\n   * Reorders a member within a validator group.\n   * Fails if `validator` is not a member of the account's validator group.\n   * @param groupAddr The validator group\n   * @param validator The validator to reorder.\n   * @param newIndex New position for the validator\n   */\n  ValidatorsWrapper.prototype.reorderMember = function (groupAddr, validator, newIndex) {\n    return __awaiter(this, void 0, void 0, function () {\n      var group, currentIdx, nextMember, prevMember;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getValidatorGroup(groupAddr)];\n          case 1:\n            group = _a.sent();\n            if (newIndex < 0 || newIndex >= group.members.length) {\n              throw new Error(\"Invalid index \".concat(newIndex, \"; max index is \").concat(group.members.length - 1));\n            }\n            currentIdx = (0, address_1.findAddressIndex)(validator, group.members);\n            if (currentIdx < 0) {\n              throw new Error(\"ValidatorGroup \".concat(groupAddr, \" does not include \").concat(validator));\n            } else if (currentIdx === newIndex) {\n              throw new Error(\"Validator is already in position \".concat(newIndex));\n            }\n            // remove the element\n            group.members.splice(currentIdx, 1);\n            // add it on new position\n            group.members.splice(newIndex, 0, validator);\n            nextMember = newIndex === group.members.length - 1 ? address_1.NULL_ADDRESS : group.members[newIndex + 1];\n            prevMember = newIndex === 0 ? address_1.NULL_ADDRESS : group.members[newIndex - 1];\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.reorderMember(validator, nextMember, prevMember))];\n        }\n      });\n    });\n  };\n  ValidatorsWrapper.prototype.getEpochSizeNumber = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var epochSize;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getEpochSize()];\n          case 1:\n            epochSize = _a.sent();\n            return [2 /*return*/, epochSize.toNumber()];\n        }\n      });\n    });\n  };\n  ValidatorsWrapper.prototype.getLastBlockNumberForEpoch = function (epochNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockchainParamsWrapper;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getBlockchainParameters()];\n          case 1:\n            blockchainParamsWrapper = _a.sent();\n            return [2 /*return*/, blockchainParamsWrapper.getLastBlockNumberForEpoch(epochNumber)];\n        }\n      });\n    });\n  };\n  ValidatorsWrapper.prototype.getEpochNumberOfBlock = function (blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockchainParamsWrapper;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getBlockchainParameters()];\n          case 1:\n            blockchainParamsWrapper = _a.sent();\n            return [2 /*return*/, blockchainParamsWrapper.getEpochNumberOfBlock(blockNumber)];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves ValidatorRewards for epochNumber.\n   * @param epochNumber The epoch to retrieve ValidatorRewards at.\n   */\n  ValidatorsWrapper.prototype.getValidatorRewards = function (epochNumber, useBlockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockNumber, events, validator, validatorGroup;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getLastBlockNumberForEpoch(epochNumber)];\n          case 1:\n            blockNumber = _a.sent();\n            return [4 /*yield*/, this.getPastEvents('ValidatorEpochPaymentDistributed', {\n              fromBlock: blockNumber,\n              toBlock: blockNumber\n            })];\n          case 2:\n            events = _a.sent();\n            return [4 /*yield*/, (0, async_1.concurrentMap)(10, events, function (e) {\n              return _this.getValidator(e.returnValues.validator, useBlockNumber ? blockNumber : undefined);\n            })];\n          case 3:\n            validator = _a.sent();\n            return [4 /*yield*/, (0, async_1.concurrentMap)(10, events, function (e) {\n              return _this.getValidatorGroup(e.returnValues.group, false, useBlockNumber ? blockNumber : undefined);\n            })];\n          case 4:\n            validatorGroup = _a.sent();\n            return [2 /*return*/, events.map(function (e, index) {\n              return {\n                epochNumber: epochNumber,\n                validator: validator[index],\n                validatorPayment: (0, BaseWrapper_1.valueToBigNumber)(e.returnValues.validatorPayment),\n                group: validatorGroup[index],\n                groupPayment: (0, BaseWrapper_1.valueToBigNumber)(e.returnValues.groupPayment)\n              };\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current set of validator signer addresses\n   */\n  ValidatorsWrapper.prototype.currentSignerSet = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var n, _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = BaseWrapper_1.valueToInt;\n            return [4 /*yield*/, this.contract.methods.numberValidatorsInCurrentSet().call()];\n          case 1:\n            n = _a.apply(void 0, [_b.sent()]);\n            return [2 /*return*/, (0, async_1.concurrentMap)(5, (0, collections_1.zeroRange)(n), function (idx) {\n              return _this.contract.methods.validatorSignerAddressFromCurrentSet(idx).call();\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current set of validator signer and account addresses\n   */\n  ValidatorsWrapper.prototype.currentValidatorAccountsSet = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var signerAddresses, accountAddresses;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.currentSignerSet()];\n          case 1:\n            signerAddresses = _a.sent();\n            return [4 /*yield*/, (0, async_1.concurrentMap)(5, signerAddresses, function (signer) {\n              return _this.validatorSignerToAccount(signer);\n            })];\n          case 2:\n            accountAddresses = _a.sent();\n            return [2 /*return*/, (0, collections_1.zip)(function (signer, account) {\n              return {\n                signer: signer,\n                account: account\n              };\n            }, signerAddresses, accountAddresses)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the group membership for validator account.\n   * @param account Address of validator account to retrieve group membership for.\n   * @param blockNumber Block number to retrieve group membership at.\n   * @return Group and membership history index for `validator`.\n   */\n  ValidatorsWrapper.prototype.getValidatorMembershipHistoryIndex = function (account, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockEpoch, _a, _b, membershipHistory, historyIndex, group;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _a = this.getEpochNumberOfBlock;\n            _b = blockNumber;\n            if (_b) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.connection.getBlockNumber()];\n          case 1:\n            _b = _c.sent();\n            _c.label = 2;\n          case 2:\n            return [4 /*yield*/, _a.apply(this, [_b])];\n          case 3:\n            blockEpoch = _c.sent();\n            return [4 /*yield*/, this.getValidatorMembershipHistory(account)];\n          case 4:\n            membershipHistory = _c.sent();\n            historyIndex = this.findValidatorMembershipHistoryIndex(blockEpoch, membershipHistory);\n            group = membershipHistory[historyIndex].group;\n            return [2 /*return*/, {\n              group: group,\n              historyIndex: historyIndex\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the index into `history` for `epoch`.\n   * @param epoch The needle.\n   * @param history The haystack.\n   * @return Index for epoch or -1.\n   */\n  ValidatorsWrapper.prototype.findValidatorMembershipHistoryIndex = function (epoch, history) {\n    var revIndex = history.slice().reverse().findIndex(function (x) {\n      return x.epoch <= epoch;\n    });\n    return revIndex < 0 ? -1 : history.length - revIndex - 1;\n  };\n  return ValidatorsWrapper;\n}(BaseWrapperForGoverning_1.BaseWrapperForGoverning);\nexports.ValidatorsWrapper = ValidatorsWrapper;","map":null,"metadata":{},"sourceType":"script"}