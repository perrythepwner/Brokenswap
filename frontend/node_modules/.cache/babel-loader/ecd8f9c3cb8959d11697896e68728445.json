{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number(value >> _32n & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n  constructor(blockLen, outputLen, padOffset, isLE) {\n    super();\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.padOffset = padOffset;\n    this.isLE = isLE;\n    this.finished = false;\n    this.length = 0;\n    this.pos = 0;\n    this.destroyed = false;\n    this.buffer = new Uint8Array(blockLen);\n    this.view = (0, utils_js_1.createView)(this.buffer);\n  }\n  update(data) {\n    _assert_js_1.default.exists(this);\n    const {\n      view,\n      buffer,\n      blockLen\n    } = this;\n    data = (0, utils_js_1.toBytes)(data);\n    const len = data.length;\n    for (let pos = 0; pos < len;) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = (0, utils_js_1.createView)(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out) {\n    _assert_js_1.default.exists(this);\n    _assert_js_1.default.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const {\n      buffer,\n      view,\n      blockLen,\n      isLE\n    } = this;\n    let {\n      pos\n    } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = (0, utils_js_1.createView)(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const {\n      buffer,\n      outputLen\n    } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to) {\n    to || (to = new this.constructor());\n    to.set(...this.get());\n    const {\n      blockLen,\n      buffer,\n      length,\n      finished,\n      destroyed,\n      pos\n    } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\nexports.SHA2 = SHA2;","map":{"version":3,"sources":["src/_sha2.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n//# sourceMappingURL=_sha2.js.map"]},"metadata":{},"sourceType":"script"}