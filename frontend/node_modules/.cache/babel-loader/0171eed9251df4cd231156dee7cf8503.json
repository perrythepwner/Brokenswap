{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createHex = exports.createBytes = exports.createBigInt = exports.createNumber = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\nconst bytes_1 = require(\"./bytes\");\nconst hex_1 = require(\"./hex\");\nconst NumberLikeStruct = (0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.bigint)(), (0, superstruct_1.string)(), hex_1.StrictHexStruct]);\nconst NumberCoercer = (0, superstruct_1.coerce)((0, superstruct_1.number)(), NumberLikeStruct, Number);\nconst BigIntCoercer = (0, superstruct_1.coerce)((0, superstruct_1.bigint)(), NumberLikeStruct, BigInt);\nconst BytesLikeStruct = (0, superstruct_1.union)([hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array)]);\nconst BytesCoercer = (0, superstruct_1.coerce)((0, superstruct_1.instance)(Uint8Array), (0, superstruct_1.union)([hex_1.StrictHexStruct]), bytes_1.hexToBytes);\nconst HexCoercer = (0, superstruct_1.coerce)(hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array), bytes_1.bytesToHex);\n/**\n * Create a number from a number-like value.\n *\n * - If the value is a number, it is returned as-is.\n * - If the value is a `bigint`, it is converted to a number.\n * - If the value is a string, it is interpreted as a decimal number.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number.\n *\n * This validates that the value is a number-like value, and that the resulting\n * number is not `NaN` or `Infinity`.\n *\n * @example\n * ```typescript\n * const value = createNumber('0x010203');\n * console.log(value); // 66051\n *\n * const otherValue = createNumber(123n);\n * console.log(otherValue); // 123\n * ```\n * @param value - The value to create the number from.\n * @returns The created number.\n * @throws If the value is not a number-like value, or if the resulting number\n * is `NaN` or `Infinity`.\n */\nfunction createNumber(value) {\n  try {\n    const result = (0, superstruct_1.create)(value, NumberCoercer);\n    (0, assert_1.assert)(Number.isFinite(result), \"Expected a number-like value, got \\\"\".concat(value, \"\\\".\"));\n    return result;\n  } catch (error) {\n    if (error instanceof superstruct_1.StructError) {\n      throw new Error(\"Expected a number-like value, got \\\"\".concat(value, \"\\\".\"));\n    }\n    /* istanbul ignore next */\n    throw error;\n  }\n}\nexports.createNumber = createNumber;\n/**\n * Create a `bigint` from a number-like value.\n *\n * - If the value is a number, it is converted to a `bigint`.\n * - If the value is a `bigint`, it is returned as-is.\n * - If the value is a string, it is interpreted as a decimal number and\n * converted to a `bigint`.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number and converted to a `bigint`.\n *\n * @example\n * ```typescript\n * const value = createBigInt('0x010203');\n * console.log(value); // 16909060n\n *\n * const otherValue = createBigInt(123);\n * console.log(otherValue); // 123n\n * ```\n * @param value - The value to create the bigint from.\n * @returns The created bigint.\n * @throws If the value is not a number-like value.\n */\nfunction createBigInt(value) {\n  try {\n    // The `BigInt` constructor throws if the value is not a number-like value.\n    // There is no need to validate the value manually.\n    return (0, superstruct_1.create)(value, BigIntCoercer);\n  } catch (error) {\n    if (error instanceof superstruct_1.StructError) {\n      throw new Error(\"Expected a number-like value, got \\\"\".concat(String(error.value), \"\\\".\"));\n    }\n    /* istanbul ignore next */\n    throw error;\n  }\n}\nexports.createBigInt = createBigInt;\n/**\n * Create a byte array from a bytes-like value.\n *\n * - If the value is a byte array, it is returned as-is.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is interpreted\n * as a hexadecimal number and converted to a byte array.\n *\n * @example\n * ```typescript\n * const value = createBytes('0x010203');\n * console.log(value); // Uint8Array [ 1, 2, 3 ]\n *\n * const otherValue = createBytes('0x010203');\n * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]\n * ```\n * @param value - The value to create the byte array from.\n * @returns The created byte array.\n * @throws If the value is not a bytes-like value.\n */\nfunction createBytes(value) {\n  if (typeof value === 'string' && value.toLowerCase() === '0x') {\n    return new Uint8Array();\n  }\n  try {\n    return (0, superstruct_1.create)(value, BytesCoercer);\n  } catch (error) {\n    if (error instanceof superstruct_1.StructError) {\n      throw new Error(\"Expected a bytes-like value, got \\\"\".concat(String(error.value), \"\\\".\"));\n    }\n    /* istanbul ignore next */\n    throw error;\n  }\n}\nexports.createBytes = createBytes;\n/**\n * Create a hexadecimal string from a bytes-like value.\n *\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is returned\n * as-is.\n * - If the value is a `Uint8Array`, it is converted to a hex string.\n *\n * @example\n * ```typescript\n * const value = createHex(new Uint8Array([1, 2, 3]));\n * console.log(value); // '0x010203'\n *\n * const otherValue = createHex('0x010203');\n * console.log(otherValue); // '0x010203'\n * ```\n * @param value - The value to create the hex string from.\n * @returns The created hex string.\n * @throws If the value is not a bytes-like value.\n */\nfunction createHex(value) {\n  if (value instanceof Uint8Array && value.length === 0 || typeof value === 'string' && value.toLowerCase() === '0x') {\n    return '0x';\n  }\n  try {\n    return (0, superstruct_1.create)(value, HexCoercer);\n  } catch (error) {\n    if (error instanceof superstruct_1.StructError) {\n      throw new Error(\"Expected a bytes-like value, got \\\"\".concat(String(error.value), \"\\\".\"));\n    }\n    /* istanbul ignore next */\n    throw error;\n  }\n}\nexports.createHex = createHex;","map":{"version":3,"sources":["../src/coercers.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  bigint,\n  coerce,\n  create,\n  Infer,\n  instance,\n  number,\n  string,\n  StructError,\n  union,\n} from 'superstruct';\n\nimport { assert } from './assert';\nimport { bytesToHex, hexToBytes } from './bytes';\nimport { Hex, StrictHexStruct } from './hex';\n\nconst NumberLikeStruct = union([number(), bigint(), string(), StrictHexStruct]);\nconst NumberCoercer = coerce(number(), NumberLikeStruct, Number);\nconst BigIntCoercer = coerce(bigint(), NumberLikeStruct, BigInt);\n\nconst BytesLikeStruct = union([StrictHexStruct, instance(Uint8Array)]);\nconst BytesCoercer = coerce(\n  instance(Uint8Array),\n  union([StrictHexStruct]),\n  hexToBytes,\n);\n\nconst HexCoercer = coerce(StrictHexStruct, instance(Uint8Array), bytesToHex);\n\nexport type NumberLike = Infer<typeof NumberLikeStruct>;\nexport type BytesLike = Infer<typeof BytesLikeStruct>;\n\n/**\n * Create a number from a number-like value.\n *\n * - If the value is a number, it is returned as-is.\n * - If the value is a `bigint`, it is converted to a number.\n * - If the value is a string, it is interpreted as a decimal number.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number.\n *\n * This validates that the value is a number-like value, and that the resulting\n * number is not `NaN` or `Infinity`.\n *\n * @example\n * ```typescript\n * const value = createNumber('0x010203');\n * console.log(value); // 66051\n *\n * const otherValue = createNumber(123n);\n * console.log(otherValue); // 123\n * ```\n * @param value - The value to create the number from.\n * @returns The created number.\n * @throws If the value is not a number-like value, or if the resulting number\n * is `NaN` or `Infinity`.\n */\nexport function createNumber(value: NumberLike): number {\n  try {\n    const result = create(value, NumberCoercer);\n\n    assert(\n      Number.isFinite(result),\n      `Expected a number-like value, got \"${value}\".`,\n    );\n\n    return result;\n  } catch (error) {\n    if (error instanceof StructError) {\n      throw new Error(`Expected a number-like value, got \"${value}\".`);\n    }\n\n    /* istanbul ignore next */\n    throw error;\n  }\n}\n\n/**\n * Create a `bigint` from a number-like value.\n *\n * - If the value is a number, it is converted to a `bigint`.\n * - If the value is a `bigint`, it is returned as-is.\n * - If the value is a string, it is interpreted as a decimal number and\n * converted to a `bigint`.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number and converted to a `bigint`.\n *\n * @example\n * ```typescript\n * const value = createBigInt('0x010203');\n * console.log(value); // 16909060n\n *\n * const otherValue = createBigInt(123);\n * console.log(otherValue); // 123n\n * ```\n * @param value - The value to create the bigint from.\n * @returns The created bigint.\n * @throws If the value is not a number-like value.\n */\nexport function createBigInt(value: NumberLike): bigint {\n  try {\n    // The `BigInt` constructor throws if the value is not a number-like value.\n    // There is no need to validate the value manually.\n    return create(value, BigIntCoercer);\n  } catch (error) {\n    if (error instanceof StructError) {\n      throw new Error(\n        `Expected a number-like value, got \"${String(error.value)}\".`,\n      );\n    }\n\n    /* istanbul ignore next */\n    throw error;\n  }\n}\n\n/**\n * Create a byte array from a bytes-like value.\n *\n * - If the value is a byte array, it is returned as-is.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is interpreted\n * as a hexadecimal number and converted to a byte array.\n *\n * @example\n * ```typescript\n * const value = createBytes('0x010203');\n * console.log(value); // Uint8Array [ 1, 2, 3 ]\n *\n * const otherValue = createBytes('0x010203');\n * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]\n * ```\n * @param value - The value to create the byte array from.\n * @returns The created byte array.\n * @throws If the value is not a bytes-like value.\n */\nexport function createBytes(value: BytesLike): Uint8Array {\n  if (typeof value === 'string' && value.toLowerCase() === '0x') {\n    return new Uint8Array();\n  }\n\n  try {\n    return create(value, BytesCoercer);\n  } catch (error) {\n    if (error instanceof StructError) {\n      throw new Error(\n        `Expected a bytes-like value, got \"${String(error.value)}\".`,\n      );\n    }\n\n    /* istanbul ignore next */\n    throw error;\n  }\n}\n\n/**\n * Create a hexadecimal string from a bytes-like value.\n *\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is returned\n * as-is.\n * - If the value is a `Uint8Array`, it is converted to a hex string.\n *\n * @example\n * ```typescript\n * const value = createHex(new Uint8Array([1, 2, 3]));\n * console.log(value); // '0x010203'\n *\n * const otherValue = createHex('0x010203');\n * console.log(otherValue); // '0x010203'\n * ```\n * @param value - The value to create the hex string from.\n * @returns The created hex string.\n * @throws If the value is not a bytes-like value.\n */\nexport function createHex(value: BytesLike): Hex {\n  if (\n    (value instanceof Uint8Array && value.length === 0) ||\n    (typeof value === 'string' && value.toLowerCase() === '0x')\n  ) {\n    return '0x';\n  }\n\n  try {\n    return create(value, HexCoercer);\n  } catch (error) {\n    if (error instanceof StructError) {\n      throw new Error(\n        `Expected a bytes-like value, got \"${String(error.value)}\".`,\n      );\n    }\n\n    /* istanbul ignore next */\n    throw error;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}