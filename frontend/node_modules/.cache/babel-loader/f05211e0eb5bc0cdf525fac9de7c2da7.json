{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AttestationServiceStatusState = exports.AttestationsWrapper = exports.AttestationState = exports.getSecurityCodePrefix = void 0;\nvar base_1 = require(\"@celo/base\");\nvar address_1 = require(\"@celo/base/lib/address\");\nvar async_1 = require(\"@celo/base/lib/async\");\nvar collections_1 = require(\"@celo/base/lib/collections\");\nvar parsing_1 = require(\"@celo/base/lib/parsing\");\nvar string_1 = require(\"@celo/base/lib/string\");\nvar connect_1 = require(\"@celo/connect\");\nvar lib_1 = require(\"@celo/utils/lib\");\nvar typed_data_constructors_1 = require(\"@celo/utils/lib/typed-data-constructors\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar cross_fetch_1 = __importDefault(require(\"cross-fetch\"));\nvar identity_1 = require(\"../identity\");\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\nfunction hashAddressToSingleDigit(address) {\n  return new bignumber_js_1.default(address.toLowerCase()).modulo(10).toNumber();\n}\nfunction getSecurityCodePrefix(issuerAddress) {\n  return \"\".concat(hashAddressToSingleDigit(issuerAddress));\n}\nexports.getSecurityCodePrefix = getSecurityCodePrefix;\n/**\n * Contract for managing identities\n */\nvar AttestationState;\n(function (AttestationState) {\n  AttestationState[AttestationState[\"None\"] = 0] = \"None\";\n  AttestationState[AttestationState[\"Incomplete\"] = 1] = \"Incomplete\";\n  AttestationState[AttestationState[\"Complete\"] = 2] = \"Complete\";\n})(AttestationState = exports.AttestationState || (exports.AttestationState = {}));\nfunction parseGetCompletableAttestations(response) {\n  var metadataURLs = (0, parsing_1.parseSolidityStringArray)(response[2].map(BaseWrapper_1.valueToInt), response[3]);\n  return (0, collections_1.zip3)(response[0].map(BaseWrapper_1.valueToInt), response[1], metadataURLs).map(function (_a) {\n    var blockNumber = _a[0],\n      issuer = _a[1],\n      metadataURL = _a[2];\n    return {\n      blockNumber: blockNumber,\n      issuer: issuer,\n      metadataURL: metadataURL\n    };\n  });\n}\nvar AttestationsWrapper = /** @class */function (_super) {\n  __extends(AttestationsWrapper, _super);\n  function AttestationsWrapper(connection, contract, contracts) {\n    var _this = _super.call(this, connection, contract) || this;\n    _this.connection = connection;\n    _this.contract = contract;\n    _this.contracts = contracts;\n    /**\n     *  Returns the time an attestation can be completable before it is considered expired\n     */\n    _this.attestationExpiryBlocks = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.attestationExpiryBlocks, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * Returns the attestation request fee in a given currency.\n     * @param address Token address.\n     * @returns The fee as big number.\n     */\n    _this.attestationRequestFees = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.attestationRequestFees, undefined, BaseWrapper_1.valueToBigNumber);\n    _this.selectIssuersWaitBlocks = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.selectIssuersWaitBlocks, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * @notice Returns the unselected attestation request for an identifier/account pair, if any.\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    _this.getUnselectedRequest = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getUnselectedRequest, undefined, function (res) {\n      return {\n        blockNumber: (0, BaseWrapper_1.valueToInt)(res[0]),\n        attestationsRequested: (0, BaseWrapper_1.valueToInt)(res[1]),\n        attestationRequestFeeToken: res[2]\n      };\n    });\n    /**\n     * @notice Checks if attestation request is expired.\n     * @param attestationRequestBlockNumber Attestation Request Block Number to be checked\n     */\n    _this.isAttestationExpired = function (attestationRequestBlockNumber) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var attestationExpiryBlocks, blockNumber;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.attestationExpiryBlocks()];\n            case 1:\n              attestationExpiryBlocks = _a.sent();\n              return [4 /*yield*/, this.connection.getBlockNumber()];\n            case 2:\n              blockNumber = _a.sent();\n              return [2 /*return*/, blockNumber >= attestationRequestBlockNumber + attestationExpiryBlocks];\n          }\n        });\n      });\n    };\n    /**\n     * @notice Waits for appropriate block numbers for before issuer can be selected\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    _this.waitForSelectingIssuers = function (identifier, account, timeoutSeconds, pollDurationSeconds) {\n      if (timeoutSeconds === void 0) {\n        timeoutSeconds = 120;\n      }\n      if (pollDurationSeconds === void 0) {\n        pollDurationSeconds = 1;\n      }\n      return __awaiter(_this, void 0, void 0, function () {\n        var startTime, unselectedRequest, waitBlocks, blockNumber;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              startTime = Date.now();\n              return [4 /*yield*/, this.getUnselectedRequest(identifier, account)];\n            case 1:\n              unselectedRequest = _a.sent();\n              return [4 /*yield*/, this.selectIssuersWaitBlocks()];\n            case 2:\n              waitBlocks = _a.sent();\n              if (unselectedRequest.blockNumber === 0) {\n                throw new Error('No unselectedRequest to wait for');\n              }\n              _a.label = 3;\n            case 3:\n              if (!(Date.now() - startTime < timeoutSeconds * 1000)) return [3 /*break*/, 6];\n              return [4 /*yield*/, this.connection.getBlockNumber()];\n            case 4:\n              blockNumber = _a.sent();\n              if (blockNumber >= unselectedRequest.blockNumber + waitBlocks) {\n                return [2 /*return*/];\n              }\n\n              return [4 /*yield*/, (0, async_1.sleep)(pollDurationSeconds * 1000)];\n            case 5:\n              _a.sent();\n              return [3 /*break*/, 3];\n            case 6:\n              throw new Error('Timeout while waiting for selecting issuers');\n          }\n        });\n      });\n    };\n    /**\n     * Returns the issuers of attestations for a phoneNumber/account combo\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    _this.getAttestationIssuers = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationIssuers);\n    /**\n     * Returns the attestation state of a phone number/account/issuer tuple\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    _this.getAttestationState = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationState, undefined, function (state) {\n      return {\n        attestationState: (0, BaseWrapper_1.valueToInt)(state[0])\n      };\n    });\n    /**\n     * Returns the attestation stats of a identifer/account pair\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    _this.getAttestationStat = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationStats, undefined, function (stat) {\n      return {\n        completed: (0, BaseWrapper_1.valueToInt)(stat[0]),\n        total: (0, BaseWrapper_1.valueToInt)(stat[1])\n      };\n    });\n    _this.makeIsIssuerRunningAttestationService = function (tries) {\n      if (tries === void 0) {\n        tries = 3;\n      }\n      return function (arg) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var metadata, _a, _b, attestationServiceURLClaim, nameClaim, resp, _c, status_1, version, error_1;\n          return __generator(this, function (_d) {\n            switch (_d.label) {\n              case 0:\n                _d.trys.push([0, 5,, 6]);\n                _b = (_a = identity_1.IdentityMetadataWrapper).fetchFromURL;\n                return [4 /*yield*/, this.contracts.getAccounts()];\n              case 1:\n                return [4 /*yield*/, _b.apply(_a, [_d.sent(), arg.metadataURL, tries])];\n              case 2:\n                metadata = _d.sent();\n                attestationServiceURLClaim = metadata.findClaim(identity_1.ClaimTypes.ATTESTATION_SERVICE_URL);\n                if (attestationServiceURLClaim === undefined) {\n                  throw new Error(\"No attestation service URL registered for \".concat(arg.issuer));\n                }\n                nameClaim = metadata.findClaim(identity_1.ClaimTypes.NAME);\n                return [4 /*yield*/, (0, cross_fetch_1.default)(\"\".concat(attestationServiceURLClaim.url).concat(attestationServiceURLClaim.url.substr(-1) === '/' ? '' : '/', \"status\"))];\n              case 3:\n                resp = _d.sent();\n                if (!resp.ok) {\n                  throw new Error(\"Request failed with status \".concat(resp.status));\n                }\n                return [4 /*yield*/, resp.json()];\n              case 4:\n                _c = _d.sent(), status_1 = _c.status, version = _c.version;\n                if (status_1 !== 'ok') {\n                  return [2 /*return*/, {\n                    isValid: false,\n                    issuer: arg.issuer\n                  }];\n                }\n                return [2 /*return*/, {\n                  isValid: true,\n                  result: {\n                    blockNumber: arg.blockNumber,\n                    issuer: arg.issuer,\n                    attestationServiceURL: attestationServiceURLClaim.url,\n                    name: nameClaim ? nameClaim.name : undefined,\n                    version: version\n                  }\n                }];\n              case 5:\n                error_1 = _d.sent();\n                return [2 /*return*/, {\n                  isValid: false,\n                  issuer: arg.issuer\n                }];\n              case 6:\n                return [2 /*return*/];\n            }\n          });\n        });\n      };\n    };\n    /**\n     * Returns the attestation signer for the specified account.\n     * @param account The address of token rewards are accumulated in.\n     * @param account The address of the account.\n     * @return The reward amount.\n     */\n    _this.getPendingWithdrawals = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.pendingWithdrawals, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Allows issuers to withdraw accumulated attestation rewards\n     * @param address The address of the token that will be withdrawn\n     */\n    _this.withdraw = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.withdraw);\n    /**\n     * Returns the list of accounts associated with an identifier.\n     * @param identifier Attestation identifier (e.g. phone hash)\n     */\n    _this.lookupAccountsForIdentifier = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.lookupAccountsForIdentifier);\n    /**\n     * Updates sender's approval status on whether to allow an attestation identifier\n     * mapping to be transfered from one address to another.\n     * @param identifier The identifier for this attestation.\n     * @param index The index of the account in the accounts array.\n     * @param from The current attestation address to which the identifier is mapped.\n     * @param to The new address to map to identifier.\n     * @param status The approval status\n     */\n    _this.approveTransfer = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.approveTransfer);\n    return _this;\n  }\n  /**\n   * Returns the verified status of an identifier/account pair indicating whether the attestation\n   * stats for a given pair are completed beyond a certain threshold of confidence (aka \"verified\")\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   * @param numAttestationsRequired Optional number of attestations required.  Will default to\n   *  hardcoded value if absent.\n   * @param attestationThreshold Optional threshold for fraction attestations completed. Will\n   *  default to hardcoded value if absent.\n   */\n  AttestationsWrapper.prototype.getVerifiedStatus = function (identifier, account, numAttestationsRequired, attestationThreshold) {\n    return __awaiter(this, void 0, void 0, function () {\n      var attestationStats;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getAttestationStat(identifier, account)];\n          case 1:\n            attestationStats = _a.sent();\n            return [2 /*return*/, lib_1.AttestationUtils.isAccountConsideredVerified(attestationStats, numAttestationsRequired, attestationThreshold)];\n        }\n      });\n    });\n  };\n  /**\n   * Calculates the amount of StableToken required to request Attestations\n   * @param attestationsRequested  The number of attestations to request\n   */\n  AttestationsWrapper.prototype.getAttestationFeeRequired = function (attestationsRequested) {\n    return __awaiter(this, void 0, void 0, function () {\n      var contract, attestationFee;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getStableToken(base_1.StableToken.cUSD)];\n          case 1:\n            contract = _a.sent();\n            return [4 /*yield*/, this.contract.methods.getAttestationRequestFee(contract.address).call()];\n          case 2:\n            attestationFee = _a.sent();\n            return [2 /*return*/, new bignumber_js_1.default(attestationFee).times(attestationsRequested)];\n        }\n      });\n    });\n  };\n  /**\n   * Approves the necessary amount of StableToken to request Attestations\n   * @param attestationsRequested The number of attestations to request\n   */\n  AttestationsWrapper.prototype.approveAttestationFee = function (attestationsRequested) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenContract, fee;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getStableToken(base_1.StableToken.cUSD)];\n          case 1:\n            tokenContract = _a.sent();\n            return [4 /*yield*/, this.getAttestationFeeRequired(attestationsRequested)];\n          case 2:\n            fee = _a.sent();\n            return [2 /*return*/, tokenContract.approve(this.address, fee.toFixed())];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an array of attestations that can be completed, along with the issuers' attestation\n   * service urls\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   */\n  AttestationsWrapper.prototype.getActionableAttestations = function (identifier, account, tries) {\n    if (tries === void 0) {\n      tries = 3;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var result, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getCompletableAttestations(identifier, account).call()];\n          case 1:\n            result = _a.sent();\n            return [4 /*yield*/, (0, async_1.concurrentMap)(5, parseGetCompletableAttestations(result), this.makeIsIssuerRunningAttestationService(tries))];\n          case 2:\n            results = _a.sent();\n            return [2 /*return*/, results.map(function (_) {\n              return _.isValid ? _.result : null;\n            }).filter(collections_1.notEmpty)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an array of issuer addresses that were found to not run the attestation service\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   */\n  AttestationsWrapper.prototype.getNonCompliantIssuers = function (identifier, account, tries) {\n    if (tries === void 0) {\n      tries = 3;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var result, withAttestationServiceURLs;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getCompletableAttestations(identifier, account).call()];\n          case 1:\n            result = _a.sent();\n            return [4 /*yield*/, (0, async_1.concurrentMap)(5, parseGetCompletableAttestations(result), this.makeIsIssuerRunningAttestationService(tries))];\n          case 2:\n            withAttestationServiceURLs = _a.sent();\n            return [2 /*return*/, withAttestationServiceURLs.map(function (_) {\n              return _.isValid ? null : _.issuer;\n            }).filter(collections_1.notEmpty)];\n        }\n      });\n    });\n  };\n  /**\n   * Completes an attestation with the corresponding code\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   * @param issuer The issuer of the attestation\n   * @param code The code received by the validator\n   */\n  AttestationsWrapper.prototype.complete = function (identifier, account, issuer, code) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, attestationSigner, expectedSourceMessage, _a, r, s, v;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getAccounts()];\n          case 1:\n            accounts = _b.sent();\n            return [4 /*yield*/, accounts.getAttestationSigner(issuer)];\n          case 2:\n            attestationSigner = _b.sent();\n            expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n            _a = lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner), r = _a.r, s = _a.s, v = _a.v;\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.complete(identifier, v, r, s))];\n        }\n      });\n    });\n  };\n  /**\n   * Given a list of issuers, finds the matching issuer for a given code\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   * @param code The code received by the validator\n   * @param issuers The list of potential issuers\n   */\n  AttestationsWrapper.prototype.findMatchingIssuer = function (identifier, account, code, issuers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, expectedSourceMessage, _i, issuers_1, issuer, attestationSigner;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getAccounts()];\n          case 1:\n            accounts = _a.sent();\n            expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n            _i = 0, issuers_1 = issuers;\n            _a.label = 2;\n          case 2:\n            if (!(_i < issuers_1.length)) return [3 /*break*/, 5];\n            issuer = issuers_1[_i];\n            return [4 /*yield*/, accounts.getAttestationSigner(issuer)];\n          case 3:\n            attestationSigner = _a.sent();\n            try {\n              lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner);\n              return [2 /*return*/, issuer];\n            } catch (error) {\n              return [3 /*break*/, 4];\n            }\n            _a.label = 4;\n          case 4:\n            _i++;\n            return [3 /*break*/, 2];\n          case 5:\n            return [2 /*return*/, null];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current configuration parameters for the contract.\n   * @param tokens List of tokens used for attestation fees. use CeloTokens.getAddresses() to get\n   * @return AttestationsConfig object\n   */\n  AttestationsWrapper.prototype.getConfig = function (tokens) {\n    return __awaiter(this, void 0, void 0, function () {\n      var feeTokens, fees;\n      var _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            feeTokens = tokens;\n            return [4 /*yield*/, Promise.all(feeTokens.map(function (token) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var fee;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4 /*yield*/, this.attestationRequestFees(token)];\n                    case 1:\n                      fee = _a.sent();\n                      return [2 /*return*/, {\n                        fee: fee,\n                        address: token\n                      }];\n                  }\n                });\n              });\n            }))];\n          case 1:\n            fees = _b.sent();\n            _a = {};\n            return [4 /*yield*/, this.attestationExpiryBlocks()];\n          case 2:\n            return [2 /*return*/, (_a.attestationExpiryBlocks = _b.sent(), _a.attestationRequestFees = fees, _a)];\n        }\n      });\n    });\n  };\n  /**\n   * @dev Returns human readable configuration of the attestations contract\n   * @param tokens List of tokens used for attestation fees. use CeloTokens.getAddresses() to get\n   * @return AttestationsConfig object\n   */\n  AttestationsWrapper.prototype.getHumanReadableConfig = function (tokens) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getConfig(tokens)];\n          case 1:\n            config = _a.sent();\n            return [2 /*return*/, {\n              attestationRequestFees: config.attestationRequestFees,\n              attestationExpiry: (0, BaseWrapper_1.blocksToDurationString)(config.attestationExpiryBlocks)\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Lookup mapped wallet addresses for a given list of identifiers\n   * @param identifiers Attestation identifiers (e.g. phone hashes)\n   */\n  AttestationsWrapper.prototype.lookupIdentifiers = function (identifiers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stats, matches, addresses, completed, total, result, rIndex, pIndex, pHash, numberOfMatches, matchingAddresses, mIndex, matchingAddress;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.batchGetAttestationStats(identifiers).call()];\n          case 1:\n            stats = _a.sent();\n            matches = stats[0].map(BaseWrapper_1.valueToInt);\n            addresses = stats[1];\n            completed = stats[2].map(BaseWrapper_1.valueToInt);\n            total = stats[3].map(BaseWrapper_1.valueToInt);\n            result = {};\n            rIndex = 0;\n            for (pIndex = 0; pIndex < identifiers.length; pIndex++) {\n              pHash = identifiers[pIndex];\n              numberOfMatches = matches[pIndex];\n              if (numberOfMatches === 0) {\n                continue;\n              }\n              matchingAddresses = {};\n              for (mIndex = 0; mIndex < numberOfMatches; mIndex++) {\n                matchingAddress = addresses[rIndex];\n                matchingAddresses[matchingAddress] = {\n                  completed: completed[rIndex],\n                  total: total[rIndex]\n                };\n                rIndex++;\n              }\n              result[pHash] = matchingAddresses;\n            }\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  /**\n   * Requests a new attestation\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param attestationsRequested The number of attestations to request\n   */\n  AttestationsWrapper.prototype.request = function (identifier, attestationsRequested) {\n    return __awaiter(this, void 0, void 0, function () {\n      var contract;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getStableToken(base_1.StableToken.cUSD)];\n          case 1:\n            contract = _a.sent();\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.request(identifier, attestationsRequested, contract.address))];\n        }\n      });\n    });\n  };\n  /**\n   * Selects the issuers for previously requested attestations for a phone number\n   * @param identifier Attestation identifier (e.g. phone hash)\n   */\n  AttestationsWrapper.prototype.selectIssuers = function (identifier) {\n    return (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.selectIssuers(identifier));\n  };\n  /**\n   * Waits appropriate number of blocks, then selects issuers for previously requested phone number attestations\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   */\n  AttestationsWrapper.prototype.selectIssuersAfterWait = function (identifier, account, timeoutSeconds, pollDurationSeconds) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.waitForSelectingIssuers(identifier, account, timeoutSeconds, pollDurationSeconds)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, this.selectIssuers(identifier)];\n        }\n      });\n    });\n  };\n  /**\n   * Reveal phone number to issuer\n   * @param serviceURL: validator's attestation service URL\n   * @param body\n   */\n  AttestationsWrapper.prototype.revealPhoneNumberToIssuer = function (serviceURL, requestBody) {\n    return (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'attestations'), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n  };\n  /**\n   * Returns reveal status from validator's attestation service\n   * @param phoneNumber: attestation's phone number\n   * @param account: attestation's account\n   * @param issuer: validator's address\n   * @param serviceURL: validator's attestation service URL\n   * @param pepper: phone number privacy pepper\n   */\n  AttestationsWrapper.prototype.getRevealStatus = function (phoneNumber, account, issuer, serviceURL, pepper) {\n    var urlParams = new URLSearchParams({\n      phoneNumber: phoneNumber,\n      salt: pepper !== null && pepper !== void 0 ? pepper : '',\n      issuer: issuer,\n      account: account\n    });\n    return (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'get_attestations') + '?' + urlParams, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  };\n  /**\n   * Returns attestation code for provided security code from validator's attestation service\n   * @param serviceURL: validator's attestation service URL\n   * @param body\n   */\n  AttestationsWrapper.prototype.getAttestationForSecurityCode = function (serviceURL, requestBody, signer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var urlParams, additionalHeaders, signature, response, ok, status, body, _a, _b, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            urlParams = new URLSearchParams({\n              phoneNumber: requestBody.phoneNumber,\n              account: requestBody.account,\n              issuer: requestBody.issuer\n            });\n            additionalHeaders = {};\n            if (requestBody.salt) {\n              urlParams.set('salt', requestBody.salt);\n            }\n            if (!requestBody.securityCode) return [3 /*break*/, 2];\n            urlParams.set('securityCode', requestBody.securityCode);\n            return [4 /*yield*/, this.connection.signTypedData(signer, (0, typed_data_constructors_1.attestationSecurityCode)(requestBody.securityCode))];\n          case 1:\n            signature = _d.sent();\n            additionalHeaders = {\n              Authentication: lib_1.SignatureUtils.serializeSignature(signature)\n            };\n            _d.label = 2;\n          case 2:\n            return [4 /*yield*/, (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'get_attestations') + '?' + urlParams, {\n              method: 'GET',\n              headers: __assign({\n                'Content-Type': 'application/json'\n              }, additionalHeaders)\n            })];\n          case 3:\n            response = _d.sent();\n            ok = response.ok, status = response.status;\n            if (!ok) return [3 /*break*/, 5];\n            return [4 /*yield*/, response.json()];\n          case 4:\n            body = _d.sent();\n            if (body.attestationCode) {\n              return [2 /*return*/, body.attestationCode];\n            }\n            _d.label = 5;\n          case 5:\n            _a = Error.bind;\n            _c = (_b = \"Error getting security code for \".concat(requestBody.issuer, \". \").concat(status, \": \")).concat;\n            return [4 /*yield*/, response.text()];\n          case 6:\n            throw new (_a.apply(Error, [void 0, _c.apply(_b, [_d.sent()])]))();\n        }\n      });\n    });\n  };\n  /**\n   * Validates a given code by the issuer on-chain\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account The address of the account which requested attestation\n   * @param issuer The address of the issuer of the attestation\n   * @param code The code send by the issuer\n   */\n  AttestationsWrapper.prototype.validateAttestationCode = function (identifier, account, issuer, code) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, attestationSigner, expectedSourceMessage, _a, r, s, v, result;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getAccounts()];\n          case 1:\n            accounts = _b.sent();\n            return [4 /*yield*/, accounts.getAttestationSigner(issuer)];\n          case 2:\n            attestationSigner = _b.sent();\n            expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n            _a = lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner), r = _a.r, s = _a.s, v = _a.v;\n            return [4 /*yield*/, this.contract.methods.validateAttestationCode(identifier, account, v, r, s).call()];\n          case 3:\n            result = _b.sent();\n            return [2 /*return*/, result.toLowerCase() !== address_1.NULL_ADDRESS];\n        }\n      });\n    });\n  };\n  /**\n   * Gets the relevant attestation service status for a validator\n   * @param validator Validator to get the attestation service status for\n   */\n  AttestationsWrapper.prototype.getAttestationServiceStatus = function (validator) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, hasAttestationSigner, attestationSigner, attestationServiceURL, ret, metadataURL, metadata, _a, _b, attestationServiceURLClaim, error_2, statusResponse, statusResponseBody, healthzResponse, healthzResponseBody, error_3, error_4;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getAccounts()];\n          case 1:\n            accounts = _c.sent();\n            return [4 /*yield*/, accounts.hasAuthorizedAttestationSigner(validator.address)];\n          case 2:\n            hasAttestationSigner = _c.sent();\n            return [4 /*yield*/, accounts.getAttestationSigner(validator.address)];\n          case 3:\n            attestationSigner = _c.sent();\n            ret = __assign(__assign({}, validator), {\n              hasAttestationSigner: hasAttestationSigner,\n              attestationSigner: attestationSigner,\n              attestationServiceURL: null,\n              okStatus: false,\n              error: null,\n              smsProviders: [],\n              blacklistedRegionCodes: [],\n              rightAccount: false,\n              metadataURL: null,\n              state: AttestationServiceStatusState.NoAttestationSigner,\n              version: null,\n              ageOfLatestBlock: null,\n              smsProvidersRandomized: null,\n              maxDeliveryAttempts: null,\n              maxRerequestMins: null,\n              twilioVerifySidProvided: null\n            });\n            if (!hasAttestationSigner) {\n              return [2 /*return*/, ret];\n            }\n            return [4 /*yield*/, accounts.getMetadataURL(validator.address)];\n          case 4:\n            metadataURL = _c.sent();\n            ret.metadataURL = metadataURL;\n            if (!metadataURL) {\n              ret.state = AttestationServiceStatusState.NoMetadataURL;\n              return [2 /*return*/, ret];\n            }\n            if (metadataURL.startsWith('http://')) {\n              ret.state = AttestationServiceStatusState.InvalidAttestationServiceURL;\n              return [2 /*return*/, ret];\n            }\n            _c.label = 5;\n          case 5:\n            _c.trys.push([5, 8,, 9]);\n            _b = (_a = identity_1.IdentityMetadataWrapper).fetchFromURL;\n            return [4 /*yield*/, this.contracts.getAccounts()];\n          case 6:\n            return [4 /*yield*/, _b.apply(_a, [_c.sent(), metadataURL])];\n          case 7:\n            metadata = _c.sent();\n            attestationServiceURLClaim = metadata.findClaim(identity_1.ClaimTypes.ATTESTATION_SERVICE_URL);\n            if (!attestationServiceURLClaim) {\n              ret.state = AttestationServiceStatusState.NoAttestationServiceURL;\n              return [2 /*return*/, ret];\n            }\n            attestationServiceURL = attestationServiceURLClaim.url;\n            return [3 /*break*/, 9];\n          case 8:\n            error_2 = _c.sent();\n            ret.state = error_2.type === 'system' ? AttestationServiceStatusState.MetadataTimeout : AttestationServiceStatusState.InvalidMetadata;\n            ret.error = error_2;\n            return [2 /*return*/, ret];\n          case 9:\n            ret.attestationServiceURL = attestationServiceURL;\n            _c.label = 10;\n          case 10:\n            _c.trys.push([10, 20,, 21]);\n            return [4 /*yield*/, (0, cross_fetch_1.default)((0, string_1.appendPath)(attestationServiceURL, 'status'))];\n          case 11:\n            statusResponse = _c.sent();\n            if (!statusResponse.ok) {\n              ret.state = AttestationServiceStatusState.UnreachableAttestationService;\n              return [2 /*return*/, ret];\n            }\n            ret.okStatus = true;\n            return [4 /*yield*/, statusResponse.json()];\n          case 12:\n            statusResponseBody = _c.sent();\n            ret.smsProviders = statusResponseBody.smsProviders;\n            ret.rightAccount = (0, address_1.eqAddress)(validator.address, statusResponseBody.accountAddress);\n            ret.state = ret.rightAccount ? AttestationServiceStatusState.Valid : AttestationServiceStatusState.WrongAccount;\n            ret.ageOfLatestBlock = statusResponseBody.ageOfLatestBlock;\n            ret.smsProvidersRandomized = statusResponseBody.smsProvidersRandomized;\n            ret.maxDeliveryAttempts = statusResponseBody.maxDeliveryAttempts;\n            ret.maxRerequestMins = statusResponseBody.maxRerequestMins;\n            ret.twilioVerifySidProvided = statusResponseBody.twilioVerifySidProvided;\n            if (!statusResponseBody.version) return [3 /*break*/, 18];\n            ret.version = statusResponseBody.version;\n            _c.label = 13;\n          case 13:\n            _c.trys.push([13, 16,, 17]);\n            return [4 /*yield*/, (0, cross_fetch_1.default)((0, string_1.appendPath)(attestationServiceURL, 'healthz'))];\n          case 14:\n            healthzResponse = _c.sent();\n            return [4 /*yield*/, healthzResponse.json()];\n          case 15:\n            healthzResponseBody = _c.sent();\n            if (!healthzResponse.ok) {\n              ret.state = AttestationServiceStatusState.Unhealthy;\n              if (healthzResponseBody.error) {\n                ret.error = healthzResponseBody.error;\n              }\n            }\n            return [3 /*break*/, 17];\n          case 16:\n            error_3 = _c.sent();\n            ret.state = AttestationServiceStatusState.UnreachableHealthz;\n            return [3 /*break*/, 17];\n          case 17:\n            // Whether or not health check is reachable, also check full node status\n            // (overrides UnreachableHealthz status)\n            if (statusResponseBody.ageOfLatestBlock !== null && statusResponseBody.ageOfLatestBlock > 10 || statusResponseBody.isNodeSyncing === true) {\n              ret.state = AttestationServiceStatusState.Unhealthy;\n            }\n            return [3 /*break*/, 19];\n          case 18:\n            // No version implies 1.0.0\n            ret.version = '1.0.0';\n            _c.label = 19;\n          case 19:\n            return [3 /*break*/, 21];\n          case 20:\n            error_4 = _c.sent();\n            ret.state = AttestationServiceStatusState.UnreachableAttestationService;\n            ret.error = error_4;\n            return [3 /*break*/, 21];\n          case 21:\n            return [2 /*return*/, ret];\n        }\n      });\n    });\n  };\n  AttestationsWrapper.prototype.revoke = function (identifer, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, idx;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.lookupAccountsForIdentifier(identifer)];\n          case 1:\n            accounts = _a.sent();\n            idx = accounts.findIndex(function (acc) {\n              return (0, address_1.eqAddress)(acc, account);\n            });\n            if (idx < 0) {\n              throw new Error(\"Account not found in identifier's accounts\");\n            }\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.revoke(identifer, idx))];\n        }\n      });\n    });\n  };\n  return AttestationsWrapper;\n}(BaseWrapper_1.BaseWrapper);\nexports.AttestationsWrapper = AttestationsWrapper;\nvar AttestationServiceStatusState;\n(function (AttestationServiceStatusState) {\n  AttestationServiceStatusState[\"NoAttestationSigner\"] = \"NoAttestationSigner\";\n  AttestationServiceStatusState[\"NoMetadataURL\"] = \"NoMetadataURL\";\n  AttestationServiceStatusState[\"InvalidMetadata\"] = \"InvalidMetadata\";\n  AttestationServiceStatusState[\"NoAttestationServiceURL\"] = \"NoAttestationServiceURL\";\n  AttestationServiceStatusState[\"InvalidAttestationServiceURL\"] = \"InvalidAttestationServiceURL\";\n  AttestationServiceStatusState[\"UnreachableAttestationService\"] = \"UnreachableAttestationService\";\n  AttestationServiceStatusState[\"Valid\"] = \"Valid\";\n  AttestationServiceStatusState[\"UnreachableHealthz\"] = \"UnreachableHealthz\";\n  AttestationServiceStatusState[\"Unhealthy\"] = \"Unhealthy\";\n  AttestationServiceStatusState[\"WrongAccount\"] = \"WrongAccount\";\n  AttestationServiceStatusState[\"MetadataTimeout\"] = \"MetadataTimeout\";\n})(AttestationServiceStatusState = exports.AttestationServiceStatusState || (exports.AttestationServiceStatusState = {}));","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","apply","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","__generator","body","_","label","sent","trys","ops","f","y","g","verb","Symbol","iterator","v","op","pop","push","__importDefault","mod","__esModule","defineProperty","exports","AttestationServiceStatusState","AttestationsWrapper","AttestationState","getSecurityCodePrefix","base_1","require","address_1","async_1","collections_1","parsing_1","string_1","connect_1","lib_1","typed_data_constructors_1","bignumber_js_1","cross_fetch_1","identity_1","BaseWrapper_1","hashAddressToSingleDigit","address","default","toLowerCase","modulo","toNumber","issuerAddress","concat","parseGetCompletableAttestations","response","metadataURLs","parseSolidityStringArray","map","valueToInt","zip3","_a","blockNumber","issuer","metadataURL","_super","connection","contract","contracts","_this","attestationExpiryBlocks","proxyCall","methods","undefined","attestationRequestFees","valueToBigNumber","selectIssuersWaitBlocks","getUnselectedRequest","res","attestationsRequested","attestationRequestFeeToken","isAttestationExpired","attestationRequestBlockNumber","getBlockNumber","waitForSelectingIssuers","identifier","account","timeoutSeconds","pollDurationSeconds","startTime","unselectedRequest","waitBlocks","Date","now","Error","sleep","getAttestationIssuers","getAttestationState","state","attestationState","getAttestationStat","getAttestationStats","stat","completed","total","makeIsIssuerRunningAttestationService","tries","arg","metadata","_b","attestationServiceURLClaim","nameClaim","resp","_c","status_1","version","error_1","_d","IdentityMetadataWrapper","fetchFromURL","getAccounts","findClaim","ClaimTypes","ATTESTATION_SERVICE_URL","NAME","url","substr","ok","status","json","isValid","attestationServiceURL","name","getPendingWithdrawals","pendingWithdrawals","withdraw","proxySend","lookupAccountsForIdentifier","approveTransfer","getVerifiedStatus","numAttestationsRequired","attestationThreshold","attestationStats","AttestationUtils","isAccountConsideredVerified","getAttestationFeeRequired","attestationFee","getStableToken","StableToken","cUSD","getAttestationRequestFee","times","approveAttestationFee","tokenContract","fee","approve","toFixed","getActionableAttestations","results","getCompletableAttestations","concurrentMap","filter","notEmpty","getNonCompliantIssuers","withAttestationServiceURLs","complete","code","accounts","attestationSigner","expectedSourceMessage","r","getAttestationSigner","getAttestationMessageToSignFromIdentifier","SignatureUtils","parseSignature","toTransactionObject","findMatchingIssuer","issuers","_i","issuers_1","error","getConfig","tokens","feeTokens","fees","all","token","getHumanReadableConfig","config","attestationExpiry","blocksToDurationString","lookupIdentifiers","identifiers","stats","matches","addresses","rIndex","pIndex","pHash","numberOfMatches","matchingAddresses","mIndex","matchingAddress","batchGetAttestationStats","request","selectIssuers","selectIssuersAfterWait","revealPhoneNumberToIssuer","serviceURL","requestBody","appendPath","method","headers","JSON","stringify","getRevealStatus","phoneNumber","pepper","urlParams","URLSearchParams","salt","getAttestationForSecurityCode","signer","additionalHeaders","signature","set","securityCode","signTypedData","attestationSecurityCode","Authentication","serializeSignature","attestationCode","bind","text","validateAttestationCode","NULL_ADDRESS","getAttestationServiceStatus","validator","hasAttestationSigner","ret","error_2","statusResponse","statusResponseBody","healthzResponse","healthzResponseBody","error_3","error_4","hasAuthorizedAttestationSigner","okStatus","smsProviders","blacklistedRegionCodes","rightAccount","NoAttestationSigner","ageOfLatestBlock","smsProvidersRandomized","maxDeliveryAttempts","maxRerequestMins","twilioVerifySidProvided","getMetadataURL","NoMetadataURL","startsWith","InvalidAttestationServiceURL","NoAttestationServiceURL","type","MetadataTimeout","InvalidMetadata","UnreachableAttestationService","eqAddress","accountAddress","Valid","WrongAccount","Unhealthy","UnreachableHealthz","isNodeSyncing","revoke","identifer","idx","findIndex","acc","BaseWrapper"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@celo/contractkit/lib/wrappers/Attestations.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AttestationServiceStatusState = exports.AttestationsWrapper = exports.AttestationState = exports.getSecurityCodePrefix = void 0;\nvar base_1 = require(\"@celo/base\");\nvar address_1 = require(\"@celo/base/lib/address\");\nvar async_1 = require(\"@celo/base/lib/async\");\nvar collections_1 = require(\"@celo/base/lib/collections\");\nvar parsing_1 = require(\"@celo/base/lib/parsing\");\nvar string_1 = require(\"@celo/base/lib/string\");\nvar connect_1 = require(\"@celo/connect\");\nvar lib_1 = require(\"@celo/utils/lib\");\nvar typed_data_constructors_1 = require(\"@celo/utils/lib/typed-data-constructors\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar cross_fetch_1 = __importDefault(require(\"cross-fetch\"));\nvar identity_1 = require(\"../identity\");\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\nfunction hashAddressToSingleDigit(address) {\n    return new bignumber_js_1.default(address.toLowerCase()).modulo(10).toNumber();\n}\nfunction getSecurityCodePrefix(issuerAddress) {\n    return \"\".concat(hashAddressToSingleDigit(issuerAddress));\n}\nexports.getSecurityCodePrefix = getSecurityCodePrefix;\n/**\n * Contract for managing identities\n */\nvar AttestationState;\n(function (AttestationState) {\n    AttestationState[AttestationState[\"None\"] = 0] = \"None\";\n    AttestationState[AttestationState[\"Incomplete\"] = 1] = \"Incomplete\";\n    AttestationState[AttestationState[\"Complete\"] = 2] = \"Complete\";\n})(AttestationState = exports.AttestationState || (exports.AttestationState = {}));\nfunction parseGetCompletableAttestations(response) {\n    var metadataURLs = (0, parsing_1.parseSolidityStringArray)(response[2].map(BaseWrapper_1.valueToInt), response[3]);\n    return (0, collections_1.zip3)(response[0].map(BaseWrapper_1.valueToInt), response[1], metadataURLs).map(function (_a) {\n        var blockNumber = _a[0], issuer = _a[1], metadataURL = _a[2];\n        return ({ blockNumber: blockNumber, issuer: issuer, metadataURL: metadataURL });\n    });\n}\nvar AttestationsWrapper = /** @class */ (function (_super) {\n    __extends(AttestationsWrapper, _super);\n    function AttestationsWrapper(connection, contract, contracts) {\n        var _this = _super.call(this, connection, contract) || this;\n        _this.connection = connection;\n        _this.contract = contract;\n        _this.contracts = contracts;\n        /**\n         *  Returns the time an attestation can be completable before it is considered expired\n         */\n        _this.attestationExpiryBlocks = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.attestationExpiryBlocks, undefined, BaseWrapper_1.valueToInt);\n        /**\n         * Returns the attestation request fee in a given currency.\n         * @param address Token address.\n         * @returns The fee as big number.\n         */\n        _this.attestationRequestFees = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.attestationRequestFees, undefined, BaseWrapper_1.valueToBigNumber);\n        _this.selectIssuersWaitBlocks = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.selectIssuersWaitBlocks, undefined, BaseWrapper_1.valueToInt);\n        /**\n         * @notice Returns the unselected attestation request for an identifier/account pair, if any.\n         * @param identifier Attestation identifier (e.g. phone hash)\n         * @param account Address of the account\n         */\n        _this.getUnselectedRequest = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getUnselectedRequest, undefined, function (res) { return ({\n            blockNumber: (0, BaseWrapper_1.valueToInt)(res[0]),\n            attestationsRequested: (0, BaseWrapper_1.valueToInt)(res[1]),\n            attestationRequestFeeToken: res[2],\n        }); });\n        /**\n         * @notice Checks if attestation request is expired.\n         * @param attestationRequestBlockNumber Attestation Request Block Number to be checked\n         */\n        _this.isAttestationExpired = function (attestationRequestBlockNumber) { return __awaiter(_this, void 0, void 0, function () {\n            var attestationExpiryBlocks, blockNumber;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.attestationExpiryBlocks()];\n                    case 1:\n                        attestationExpiryBlocks = _a.sent();\n                        return [4 /*yield*/, this.connection.getBlockNumber()];\n                    case 2:\n                        blockNumber = _a.sent();\n                        return [2 /*return*/, blockNumber >= attestationRequestBlockNumber + attestationExpiryBlocks];\n                }\n            });\n        }); };\n        /**\n         * @notice Waits for appropriate block numbers for before issuer can be selected\n         * @param identifier Attestation identifier (e.g. phone hash)\n         * @param account Address of the account\n         */\n        _this.waitForSelectingIssuers = function (identifier, account, timeoutSeconds, pollDurationSeconds) {\n            if (timeoutSeconds === void 0) { timeoutSeconds = 120; }\n            if (pollDurationSeconds === void 0) { pollDurationSeconds = 1; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var startTime, unselectedRequest, waitBlocks, blockNumber;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            startTime = Date.now();\n                            return [4 /*yield*/, this.getUnselectedRequest(identifier, account)];\n                        case 1:\n                            unselectedRequest = _a.sent();\n                            return [4 /*yield*/, this.selectIssuersWaitBlocks()];\n                        case 2:\n                            waitBlocks = _a.sent();\n                            if (unselectedRequest.blockNumber === 0) {\n                                throw new Error('No unselectedRequest to wait for');\n                            }\n                            _a.label = 3;\n                        case 3:\n                            if (!(Date.now() - startTime < timeoutSeconds * 1000)) return [3 /*break*/, 6];\n                            return [4 /*yield*/, this.connection.getBlockNumber()];\n                        case 4:\n                            blockNumber = _a.sent();\n                            if (blockNumber >= unselectedRequest.blockNumber + waitBlocks) {\n                                return [2 /*return*/];\n                            }\n                            return [4 /*yield*/, (0, async_1.sleep)(pollDurationSeconds * 1000)];\n                        case 5:\n                            _a.sent();\n                            return [3 /*break*/, 3];\n                        case 6: throw new Error('Timeout while waiting for selecting issuers');\n                    }\n                });\n            });\n        };\n        /**\n         * Returns the issuers of attestations for a phoneNumber/account combo\n         * @param identifier Attestation identifier (e.g. phone hash)\n         * @param account Address of the account\n         */\n        _this.getAttestationIssuers = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationIssuers);\n        /**\n         * Returns the attestation state of a phone number/account/issuer tuple\n         * @param identifier Attestation identifier (e.g. phone hash)\n         * @param account Address of the account\n         */\n        _this.getAttestationState = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationState, undefined, function (state) { return ({ attestationState: (0, BaseWrapper_1.valueToInt)(state[0]) }); });\n        /**\n         * Returns the attestation stats of a identifer/account pair\n         * @param identifier Attestation identifier (e.g. phone hash)\n         * @param account Address of the account\n         */\n        _this.getAttestationStat = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationStats, undefined, function (stat) { return ({ completed: (0, BaseWrapper_1.valueToInt)(stat[0]), total: (0, BaseWrapper_1.valueToInt)(stat[1]) }); });\n        _this.makeIsIssuerRunningAttestationService = function (tries) {\n            if (tries === void 0) { tries = 3; }\n            return function (arg) { return __awaiter(_this, void 0, void 0, function () {\n                var metadata, _a, _b, attestationServiceURLClaim, nameClaim, resp, _c, status_1, version, error_1;\n                return __generator(this, function (_d) {\n                    switch (_d.label) {\n                        case 0:\n                            _d.trys.push([0, 5, , 6]);\n                            _b = (_a = identity_1.IdentityMetadataWrapper).fetchFromURL;\n                            return [4 /*yield*/, this.contracts.getAccounts()];\n                        case 1: return [4 /*yield*/, _b.apply(_a, [_d.sent(), arg.metadataURL,\n                                tries])];\n                        case 2:\n                            metadata = _d.sent();\n                            attestationServiceURLClaim = metadata.findClaim(identity_1.ClaimTypes.ATTESTATION_SERVICE_URL);\n                            if (attestationServiceURLClaim === undefined) {\n                                throw new Error(\"No attestation service URL registered for \".concat(arg.issuer));\n                            }\n                            nameClaim = metadata.findClaim(identity_1.ClaimTypes.NAME);\n                            return [4 /*yield*/, (0, cross_fetch_1.default)(\"\".concat(attestationServiceURLClaim.url).concat(attestationServiceURLClaim.url.substr(-1) === '/' ? '' : '/', \"status\"))];\n                        case 3:\n                            resp = _d.sent();\n                            if (!resp.ok) {\n                                throw new Error(\"Request failed with status \".concat(resp.status));\n                            }\n                            return [4 /*yield*/, resp.json()];\n                        case 4:\n                            _c = _d.sent(), status_1 = _c.status, version = _c.version;\n                            if (status_1 !== 'ok') {\n                                return [2 /*return*/, { isValid: false, issuer: arg.issuer }];\n                            }\n                            return [2 /*return*/, {\n                                    isValid: true,\n                                    result: {\n                                        blockNumber: arg.blockNumber,\n                                        issuer: arg.issuer,\n                                        attestationServiceURL: attestationServiceURLClaim.url,\n                                        name: nameClaim ? nameClaim.name : undefined,\n                                        version: version,\n                                    },\n                                }];\n                        case 5:\n                            error_1 = _d.sent();\n                            return [2 /*return*/, { isValid: false, issuer: arg.issuer }];\n                        case 6: return [2 /*return*/];\n                    }\n                });\n            }); };\n        };\n        /**\n         * Returns the attestation signer for the specified account.\n         * @param account The address of token rewards are accumulated in.\n         * @param account The address of the account.\n         * @return The reward amount.\n         */\n        _this.getPendingWithdrawals = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.pendingWithdrawals, undefined, BaseWrapper_1.valueToBigNumber);\n        /**\n         * Allows issuers to withdraw accumulated attestation rewards\n         * @param address The address of the token that will be withdrawn\n         */\n        _this.withdraw = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.withdraw);\n        /**\n         * Returns the list of accounts associated with an identifier.\n         * @param identifier Attestation identifier (e.g. phone hash)\n         */\n        _this.lookupAccountsForIdentifier = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.lookupAccountsForIdentifier);\n        /**\n         * Updates sender's approval status on whether to allow an attestation identifier\n         * mapping to be transfered from one address to another.\n         * @param identifier The identifier for this attestation.\n         * @param index The index of the account in the accounts array.\n         * @param from The current attestation address to which the identifier is mapped.\n         * @param to The new address to map to identifier.\n         * @param status The approval status\n         */\n        _this.approveTransfer = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.approveTransfer);\n        return _this;\n    }\n    /**\n     * Returns the verified status of an identifier/account pair indicating whether the attestation\n     * stats for a given pair are completed beyond a certain threshold of confidence (aka \"verified\")\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     * @param numAttestationsRequired Optional number of attestations required.  Will default to\n     *  hardcoded value if absent.\n     * @param attestationThreshold Optional threshold for fraction attestations completed. Will\n     *  default to hardcoded value if absent.\n     */\n    AttestationsWrapper.prototype.getVerifiedStatus = function (identifier, account, numAttestationsRequired, attestationThreshold) {\n        return __awaiter(this, void 0, void 0, function () {\n            var attestationStats;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getAttestationStat(identifier, account)];\n                    case 1:\n                        attestationStats = _a.sent();\n                        return [2 /*return*/, lib_1.AttestationUtils.isAccountConsideredVerified(attestationStats, numAttestationsRequired, attestationThreshold)];\n                }\n            });\n        });\n    };\n    /**\n     * Calculates the amount of StableToken required to request Attestations\n     * @param attestationsRequested  The number of attestations to request\n     */\n    AttestationsWrapper.prototype.getAttestationFeeRequired = function (attestationsRequested) {\n        return __awaiter(this, void 0, void 0, function () {\n            var contract, attestationFee;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contracts.getStableToken(base_1.StableToken.cUSD)];\n                    case 1:\n                        contract = _a.sent();\n                        return [4 /*yield*/, this.contract.methods\n                                .getAttestationRequestFee(contract.address)\n                                .call()];\n                    case 2:\n                        attestationFee = _a.sent();\n                        return [2 /*return*/, new bignumber_js_1.default(attestationFee).times(attestationsRequested)];\n                }\n            });\n        });\n    };\n    /**\n     * Approves the necessary amount of StableToken to request Attestations\n     * @param attestationsRequested The number of attestations to request\n     */\n    AttestationsWrapper.prototype.approveAttestationFee = function (attestationsRequested) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tokenContract, fee;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contracts.getStableToken(base_1.StableToken.cUSD)];\n                    case 1:\n                        tokenContract = _a.sent();\n                        return [4 /*yield*/, this.getAttestationFeeRequired(attestationsRequested)];\n                    case 2:\n                        fee = _a.sent();\n                        return [2 /*return*/, tokenContract.approve(this.address, fee.toFixed())];\n                }\n            });\n        });\n    };\n    /**\n     * Returns an array of attestations that can be completed, along with the issuers' attestation\n     * service urls\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    AttestationsWrapper.prototype.getActionableAttestations = function (identifier, account, tries) {\n        if (tries === void 0) { tries = 3; }\n        return __awaiter(this, void 0, void 0, function () {\n            var result, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods\n                            .getCompletableAttestations(identifier, account)\n                            .call()];\n                    case 1:\n                        result = _a.sent();\n                        return [4 /*yield*/, (0, async_1.concurrentMap)(5, parseGetCompletableAttestations(result), this.makeIsIssuerRunningAttestationService(tries))];\n                    case 2:\n                        results = _a.sent();\n                        return [2 /*return*/, results.map(function (_) { return (_.isValid ? _.result : null); }).filter(collections_1.notEmpty)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns an array of issuer addresses that were found to not run the attestation service\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    AttestationsWrapper.prototype.getNonCompliantIssuers = function (identifier, account, tries) {\n        if (tries === void 0) { tries = 3; }\n        return __awaiter(this, void 0, void 0, function () {\n            var result, withAttestationServiceURLs;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods\n                            .getCompletableAttestations(identifier, account)\n                            .call()];\n                    case 1:\n                        result = _a.sent();\n                        return [4 /*yield*/, (0, async_1.concurrentMap)(5, parseGetCompletableAttestations(result), this.makeIsIssuerRunningAttestationService(tries))];\n                    case 2:\n                        withAttestationServiceURLs = _a.sent();\n                        return [2 /*return*/, withAttestationServiceURLs.map(function (_) { return (_.isValid ? null : _.issuer); }).filter(collections_1.notEmpty)];\n                }\n            });\n        });\n    };\n    /**\n     * Completes an attestation with the corresponding code\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     * @param issuer The issuer of the attestation\n     * @param code The code received by the validator\n     */\n    AttestationsWrapper.prototype.complete = function (identifier, account, issuer, code) {\n        return __awaiter(this, void 0, void 0, function () {\n            var accounts, attestationSigner, expectedSourceMessage, _a, r, s, v;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.contracts.getAccounts()];\n                    case 1:\n                        accounts = _b.sent();\n                        return [4 /*yield*/, accounts.getAttestationSigner(issuer)];\n                    case 2:\n                        attestationSigner = _b.sent();\n                        expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n                        _a = lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner), r = _a.r, s = _a.s, v = _a.v;\n                        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.complete(identifier, v, r, s))];\n                }\n            });\n        });\n    };\n    /**\n     * Given a list of issuers, finds the matching issuer for a given code\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     * @param code The code received by the validator\n     * @param issuers The list of potential issuers\n     */\n    AttestationsWrapper.prototype.findMatchingIssuer = function (identifier, account, code, issuers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var accounts, expectedSourceMessage, _i, issuers_1, issuer, attestationSigner;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contracts.getAccounts()];\n                    case 1:\n                        accounts = _a.sent();\n                        expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n                        _i = 0, issuers_1 = issuers;\n                        _a.label = 2;\n                    case 2:\n                        if (!(_i < issuers_1.length)) return [3 /*break*/, 5];\n                        issuer = issuers_1[_i];\n                        return [4 /*yield*/, accounts.getAttestationSigner(issuer)];\n                    case 3:\n                        attestationSigner = _a.sent();\n                        try {\n                            lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner);\n                            return [2 /*return*/, issuer];\n                        }\n                        catch (error) {\n                            return [3 /*break*/, 4];\n                        }\n                        _a.label = 4;\n                    case 4:\n                        _i++;\n                        return [3 /*break*/, 2];\n                    case 5: return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the current configuration parameters for the contract.\n     * @param tokens List of tokens used for attestation fees. use CeloTokens.getAddresses() to get\n     * @return AttestationsConfig object\n     */\n    AttestationsWrapper.prototype.getConfig = function (tokens) {\n        return __awaiter(this, void 0, void 0, function () {\n            var feeTokens, fees;\n            var _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        feeTokens = tokens;\n                        return [4 /*yield*/, Promise.all(feeTokens.map(function (token) { return __awaiter(_this, void 0, void 0, function () {\n                                var fee;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0: return [4 /*yield*/, this.attestationRequestFees(token)];\n                                        case 1:\n                                            fee = _a.sent();\n                                            return [2 /*return*/, { fee: fee, address: token }];\n                                    }\n                                });\n                            }); }))];\n                    case 1:\n                        fees = _b.sent();\n                        _a = {};\n                        return [4 /*yield*/, this.attestationExpiryBlocks()];\n                    case 2: return [2 /*return*/, (_a.attestationExpiryBlocks = _b.sent(),\n                            _a.attestationRequestFees = fees,\n                            _a)];\n                }\n            });\n        });\n    };\n    /**\n     * @dev Returns human readable configuration of the attestations contract\n     * @param tokens List of tokens used for attestation fees. use CeloTokens.getAddresses() to get\n     * @return AttestationsConfig object\n     */\n    AttestationsWrapper.prototype.getHumanReadableConfig = function (tokens) {\n        return __awaiter(this, void 0, void 0, function () {\n            var config;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getConfig(tokens)];\n                    case 1:\n                        config = _a.sent();\n                        return [2 /*return*/, {\n                                attestationRequestFees: config.attestationRequestFees,\n                                attestationExpiry: (0, BaseWrapper_1.blocksToDurationString)(config.attestationExpiryBlocks),\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Lookup mapped wallet addresses for a given list of identifiers\n     * @param identifiers Attestation identifiers (e.g. phone hashes)\n     */\n    AttestationsWrapper.prototype.lookupIdentifiers = function (identifiers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var stats, matches, addresses, completed, total, result, rIndex, pIndex, pHash, numberOfMatches, matchingAddresses, mIndex, matchingAddress;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.batchGetAttestationStats(identifiers).call()];\n                    case 1:\n                        stats = _a.sent();\n                        matches = stats[0].map(BaseWrapper_1.valueToInt);\n                        addresses = stats[1];\n                        completed = stats[2].map(BaseWrapper_1.valueToInt);\n                        total = stats[3].map(BaseWrapper_1.valueToInt);\n                        result = {};\n                        rIndex = 0;\n                        for (pIndex = 0; pIndex < identifiers.length; pIndex++) {\n                            pHash = identifiers[pIndex];\n                            numberOfMatches = matches[pIndex];\n                            if (numberOfMatches === 0) {\n                                continue;\n                            }\n                            matchingAddresses = {};\n                            for (mIndex = 0; mIndex < numberOfMatches; mIndex++) {\n                                matchingAddress = addresses[rIndex];\n                                matchingAddresses[matchingAddress] = {\n                                    completed: completed[rIndex],\n                                    total: total[rIndex],\n                                };\n                                rIndex++;\n                            }\n                            result[pHash] = matchingAddresses;\n                        }\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * Requests a new attestation\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param attestationsRequested The number of attestations to request\n     */\n    AttestationsWrapper.prototype.request = function (identifier, attestationsRequested) {\n        return __awaiter(this, void 0, void 0, function () {\n            var contract;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contracts.getStableToken(base_1.StableToken.cUSD)];\n                    case 1:\n                        contract = _a.sent();\n                        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.request(identifier, attestationsRequested, contract.address))];\n                }\n            });\n        });\n    };\n    /**\n     * Selects the issuers for previously requested attestations for a phone number\n     * @param identifier Attestation identifier (e.g. phone hash)\n     */\n    AttestationsWrapper.prototype.selectIssuers = function (identifier) {\n        return (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.selectIssuers(identifier));\n    };\n    /**\n     * Waits appropriate number of blocks, then selects issuers for previously requested phone number attestations\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    AttestationsWrapper.prototype.selectIssuersAfterWait = function (identifier, account, timeoutSeconds, pollDurationSeconds) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.waitForSelectingIssuers(identifier, account, timeoutSeconds, pollDurationSeconds)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, this.selectIssuers(identifier)];\n                }\n            });\n        });\n    };\n    /**\n     * Reveal phone number to issuer\n     * @param serviceURL: validator's attestation service URL\n     * @param body\n     */\n    AttestationsWrapper.prototype.revealPhoneNumberToIssuer = function (serviceURL, requestBody) {\n        return (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'attestations'), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n        });\n    };\n    /**\n     * Returns reveal status from validator's attestation service\n     * @param phoneNumber: attestation's phone number\n     * @param account: attestation's account\n     * @param issuer: validator's address\n     * @param serviceURL: validator's attestation service URL\n     * @param pepper: phone number privacy pepper\n     */\n    AttestationsWrapper.prototype.getRevealStatus = function (phoneNumber, account, issuer, serviceURL, pepper) {\n        var urlParams = new URLSearchParams({\n            phoneNumber: phoneNumber,\n            salt: pepper !== null && pepper !== void 0 ? pepper : '',\n            issuer: issuer,\n            account: account,\n        });\n        return (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'get_attestations') + '?' + urlParams, {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' },\n        });\n    };\n    /**\n     * Returns attestation code for provided security code from validator's attestation service\n     * @param serviceURL: validator's attestation service URL\n     * @param body\n     */\n    AttestationsWrapper.prototype.getAttestationForSecurityCode = function (serviceURL, requestBody, signer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var urlParams, additionalHeaders, signature, response, ok, status, body, _a, _b, _c;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        urlParams = new URLSearchParams({\n                            phoneNumber: requestBody.phoneNumber,\n                            account: requestBody.account,\n                            issuer: requestBody.issuer,\n                        });\n                        additionalHeaders = {};\n                        if (requestBody.salt) {\n                            urlParams.set('salt', requestBody.salt);\n                        }\n                        if (!requestBody.securityCode) return [3 /*break*/, 2];\n                        urlParams.set('securityCode', requestBody.securityCode);\n                        return [4 /*yield*/, this.connection.signTypedData(signer, (0, typed_data_constructors_1.attestationSecurityCode)(requestBody.securityCode))];\n                    case 1:\n                        signature = _d.sent();\n                        additionalHeaders = {\n                            Authentication: lib_1.SignatureUtils.serializeSignature(signature),\n                        };\n                        _d.label = 2;\n                    case 2: return [4 /*yield*/, (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'get_attestations') + '?' + urlParams, {\n                            method: 'GET',\n                            headers: __assign({ 'Content-Type': 'application/json' }, additionalHeaders),\n                        })];\n                    case 3:\n                        response = _d.sent();\n                        ok = response.ok, status = response.status;\n                        if (!ok) return [3 /*break*/, 5];\n                        return [4 /*yield*/, response.json()];\n                    case 4:\n                        body = _d.sent();\n                        if (body.attestationCode) {\n                            return [2 /*return*/, body.attestationCode];\n                        }\n                        _d.label = 5;\n                    case 5:\n                        _a = Error.bind;\n                        _c = (_b = \"Error getting security code for \".concat(requestBody.issuer, \". \").concat(status, \": \")).concat;\n                        return [4 /*yield*/, response.text()];\n                    case 6: throw new (_a.apply(Error, [void 0, _c.apply(_b, [_d.sent()])]))();\n                }\n            });\n        });\n    };\n    /**\n     * Validates a given code by the issuer on-chain\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account The address of the account which requested attestation\n     * @param issuer The address of the issuer of the attestation\n     * @param code The code send by the issuer\n     */\n    AttestationsWrapper.prototype.validateAttestationCode = function (identifier, account, issuer, code) {\n        return __awaiter(this, void 0, void 0, function () {\n            var accounts, attestationSigner, expectedSourceMessage, _a, r, s, v, result;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.contracts.getAccounts()];\n                    case 1:\n                        accounts = _b.sent();\n                        return [4 /*yield*/, accounts.getAttestationSigner(issuer)];\n                    case 2:\n                        attestationSigner = _b.sent();\n                        expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n                        _a = lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner), r = _a.r, s = _a.s, v = _a.v;\n                        return [4 /*yield*/, this.contract.methods\n                                .validateAttestationCode(identifier, account, v, r, s)\n                                .call()];\n                    case 3:\n                        result = _b.sent();\n                        return [2 /*return*/, result.toLowerCase() !== address_1.NULL_ADDRESS];\n                }\n            });\n        });\n    };\n    /**\n     * Gets the relevant attestation service status for a validator\n     * @param validator Validator to get the attestation service status for\n     */\n    AttestationsWrapper.prototype.getAttestationServiceStatus = function (validator) {\n        return __awaiter(this, void 0, void 0, function () {\n            var accounts, hasAttestationSigner, attestationSigner, attestationServiceURL, ret, metadataURL, metadata, _a, _b, attestationServiceURLClaim, error_2, statusResponse, statusResponseBody, healthzResponse, healthzResponseBody, error_3, error_4;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, this.contracts.getAccounts()];\n                    case 1:\n                        accounts = _c.sent();\n                        return [4 /*yield*/, accounts.hasAuthorizedAttestationSigner(validator.address)];\n                    case 2:\n                        hasAttestationSigner = _c.sent();\n                        return [4 /*yield*/, accounts.getAttestationSigner(validator.address)];\n                    case 3:\n                        attestationSigner = _c.sent();\n                        ret = __assign(__assign({}, validator), { hasAttestationSigner: hasAttestationSigner, attestationSigner: attestationSigner, attestationServiceURL: null, okStatus: false, error: null, smsProviders: [], blacklistedRegionCodes: [], rightAccount: false, metadataURL: null, state: AttestationServiceStatusState.NoAttestationSigner, version: null, ageOfLatestBlock: null, smsProvidersRandomized: null, maxDeliveryAttempts: null, maxRerequestMins: null, twilioVerifySidProvided: null });\n                        if (!hasAttestationSigner) {\n                            return [2 /*return*/, ret];\n                        }\n                        return [4 /*yield*/, accounts.getMetadataURL(validator.address)];\n                    case 4:\n                        metadataURL = _c.sent();\n                        ret.metadataURL = metadataURL;\n                        if (!metadataURL) {\n                            ret.state = AttestationServiceStatusState.NoMetadataURL;\n                            return [2 /*return*/, ret];\n                        }\n                        if (metadataURL.startsWith('http://')) {\n                            ret.state = AttestationServiceStatusState.InvalidAttestationServiceURL;\n                            return [2 /*return*/, ret];\n                        }\n                        _c.label = 5;\n                    case 5:\n                        _c.trys.push([5, 8, , 9]);\n                        _b = (_a = identity_1.IdentityMetadataWrapper).fetchFromURL;\n                        return [4 /*yield*/, this.contracts.getAccounts()];\n                    case 6: return [4 /*yield*/, _b.apply(_a, [_c.sent(), metadataURL])];\n                    case 7:\n                        metadata = _c.sent();\n                        attestationServiceURLClaim = metadata.findClaim(identity_1.ClaimTypes.ATTESTATION_SERVICE_URL);\n                        if (!attestationServiceURLClaim) {\n                            ret.state = AttestationServiceStatusState.NoAttestationServiceURL;\n                            return [2 /*return*/, ret];\n                        }\n                        attestationServiceURL = attestationServiceURLClaim.url;\n                        return [3 /*break*/, 9];\n                    case 8:\n                        error_2 = _c.sent();\n                        ret.state =\n                            error_2.type === 'system'\n                                ? AttestationServiceStatusState.MetadataTimeout\n                                : AttestationServiceStatusState.InvalidMetadata;\n                        ret.error = error_2;\n                        return [2 /*return*/, ret];\n                    case 9:\n                        ret.attestationServiceURL = attestationServiceURL;\n                        _c.label = 10;\n                    case 10:\n                        _c.trys.push([10, 20, , 21]);\n                        return [4 /*yield*/, (0, cross_fetch_1.default)((0, string_1.appendPath)(attestationServiceURL, 'status'))];\n                    case 11:\n                        statusResponse = _c.sent();\n                        if (!statusResponse.ok) {\n                            ret.state = AttestationServiceStatusState.UnreachableAttestationService;\n                            return [2 /*return*/, ret];\n                        }\n                        ret.okStatus = true;\n                        return [4 /*yield*/, statusResponse.json()];\n                    case 12:\n                        statusResponseBody = _c.sent();\n                        ret.smsProviders = statusResponseBody.smsProviders;\n                        ret.rightAccount = (0, address_1.eqAddress)(validator.address, statusResponseBody.accountAddress);\n                        ret.state = ret.rightAccount\n                            ? AttestationServiceStatusState.Valid\n                            : AttestationServiceStatusState.WrongAccount;\n                        ret.ageOfLatestBlock = statusResponseBody.ageOfLatestBlock;\n                        ret.smsProvidersRandomized = statusResponseBody.smsProvidersRandomized;\n                        ret.maxDeliveryAttempts = statusResponseBody.maxDeliveryAttempts;\n                        ret.maxRerequestMins = statusResponseBody.maxRerequestMins;\n                        ret.twilioVerifySidProvided = statusResponseBody.twilioVerifySidProvided;\n                        if (!statusResponseBody.version) return [3 /*break*/, 18];\n                        ret.version = statusResponseBody.version;\n                        _c.label = 13;\n                    case 13:\n                        _c.trys.push([13, 16, , 17]);\n                        return [4 /*yield*/, (0, cross_fetch_1.default)((0, string_1.appendPath)(attestationServiceURL, 'healthz'))];\n                    case 14:\n                        healthzResponse = _c.sent();\n                        return [4 /*yield*/, healthzResponse.json()];\n                    case 15:\n                        healthzResponseBody = _c.sent();\n                        if (!healthzResponse.ok) {\n                            ret.state = AttestationServiceStatusState.Unhealthy;\n                            if (healthzResponseBody.error) {\n                                ret.error = healthzResponseBody.error;\n                            }\n                        }\n                        return [3 /*break*/, 17];\n                    case 16:\n                        error_3 = _c.sent();\n                        ret.state = AttestationServiceStatusState.UnreachableHealthz;\n                        return [3 /*break*/, 17];\n                    case 17:\n                        // Whether or not health check is reachable, also check full node status\n                        // (overrides UnreachableHealthz status)\n                        if ((statusResponseBody.ageOfLatestBlock !== null &&\n                            statusResponseBody.ageOfLatestBlock > 10) ||\n                            statusResponseBody.isNodeSyncing === true) {\n                            ret.state = AttestationServiceStatusState.Unhealthy;\n                        }\n                        return [3 /*break*/, 19];\n                    case 18:\n                        // No version implies 1.0.0\n                        ret.version = '1.0.0';\n                        _c.label = 19;\n                    case 19: return [3 /*break*/, 21];\n                    case 20:\n                        error_4 = _c.sent();\n                        ret.state = AttestationServiceStatusState.UnreachableAttestationService;\n                        ret.error = error_4;\n                        return [3 /*break*/, 21];\n                    case 21: return [2 /*return*/, ret];\n                }\n            });\n        });\n    };\n    AttestationsWrapper.prototype.revoke = function (identifer, account) {\n        return __awaiter(this, void 0, void 0, function () {\n            var accounts, idx;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.lookupAccountsForIdentifier(identifer)];\n                    case 1:\n                        accounts = _a.sent();\n                        idx = accounts.findIndex(function (acc) { return (0, address_1.eqAddress)(acc, account); });\n                        if (idx < 0) {\n                            throw new Error(\"Account not found in identifier's accounts\");\n                        }\n                        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.revoke(identifer, idx))];\n                }\n            });\n        });\n    };\n    return AttestationsWrapper;\n}(BaseWrapper_1.BaseWrapper));\nexports.AttestationsWrapper = AttestationsWrapper;\nvar AttestationServiceStatusState;\n(function (AttestationServiceStatusState) {\n    AttestationServiceStatusState[\"NoAttestationSigner\"] = \"NoAttestationSigner\";\n    AttestationServiceStatusState[\"NoMetadataURL\"] = \"NoMetadataURL\";\n    AttestationServiceStatusState[\"InvalidMetadata\"] = \"InvalidMetadata\";\n    AttestationServiceStatusState[\"NoAttestationServiceURL\"] = \"NoAttestationServiceURL\";\n    AttestationServiceStatusState[\"InvalidAttestationServiceURL\"] = \"InvalidAttestationServiceURL\";\n    AttestationServiceStatusState[\"UnreachableAttestationService\"] = \"UnreachableAttestationService\";\n    AttestationServiceStatusState[\"Valid\"] = \"Valid\";\n    AttestationServiceStatusState[\"UnreachableHealthz\"] = \"UnreachableHealthz\";\n    AttestationServiceStatusState[\"Unhealthy\"] = \"Unhealthy\";\n    AttestationServiceStatusState[\"WrongAccount\"] = \"WrongAccount\";\n    AttestationServiceStatusState[\"MetadataTimeout\"] = \"MetadataTimeout\";\n})(AttestationServiceStatusState = exports.AttestationServiceStatusState || (exports.AttestationServiceStatusState = {}));\n//# sourceMappingURL=Attestations.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}