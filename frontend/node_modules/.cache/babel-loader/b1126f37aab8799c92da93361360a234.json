{"ast":null,"code":"import _objectSpread from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { createReducer } from '@reduxjs/toolkit';\nimport { Field, resetMintState, typeInput } from './actions';\nconst initialState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: ''\n};\nexport default createReducer(initialState, builder => builder.addCase(resetMintState, () => initialState).addCase(typeInput, (state, _ref) => {\n  let {\n    payload: {\n      field,\n      typedValue,\n      noLiquidity\n    }\n  } = _ref;\n  if (noLiquidity) {\n    // they're typing into the field they've last typed in\n    if (field === state.independentField) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        independentField: field,\n        typedValue\n      });\n    }\n    // they're typing into a new field, store the other value\n    else {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        independentField: field,\n        typedValue,\n        otherTypedValue: state.typedValue\n      });\n    }\n  } else {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      independentField: field,\n      typedValue,\n      otherTypedValue: ''\n    });\n  }\n}));","map":{"version":3,"names":["createReducer","Field","resetMintState","typeInput","initialState","independentField","CURRENCY_A","typedValue","otherTypedValue","builder","addCase","state","_ref","payload","field","noLiquidity","_objectSpread"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/state/mint/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\n\nimport { Field, resetMintState, typeInput } from './actions'\n\nexport interface MintState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly otherTypedValue: string // for the case when there's no liquidity\n}\n\nconst initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: '',\n}\n\nexport default createReducer<MintState>(initialState, (builder) =>\n  builder\n    .addCase(resetMintState, () => initialState)\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\n      if (noLiquidity) {\n        // they're typing into the field they've last typed in\n        if (field === state.independentField) {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          }\n        }\n        // they're typing into a new field, store the other value\n        else {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n            otherTypedValue: state.typedValue,\n          }\n        }\n      } else {\n        return {\n          ...state,\n          independentField: field,\n          typedValue,\n          otherTypedValue: '',\n        }\n      }\n    })\n)\n"],"mappings":";AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAEhD,SAASC,KAAK,EAAEC,cAAc,EAAEC,SAAS,QAAQ,WAAW;AAQ5D,MAAMC,YAAuB,GAAG;EAC9BC,gBAAgB,EAAEJ,KAAK,CAACK,UAAU;EAClCC,UAAU,EAAE,EAAE;EACdC,eAAe,EAAE;AACnB,CAAC;AAED,eAAeR,aAAa,CAAYI,YAAY,EAAGK,OAAO,IAC5DA,OAAO,CACJC,OAAO,CAACR,cAAc,EAAE,MAAME,YAAY,CAAC,CAC3CM,OAAO,CAACP,SAAS,EAAE,CAACQ,KAAK,EAAAC,IAAA,KAAsD;EAAA,IAApD;IAAEC,OAAO,EAAE;MAAEC,KAAK;MAAEP,UAAU;MAAEQ;IAAY;EAAE,CAAC,GAAAH,IAAA;EACzE,IAAIG,WAAW,EAAE;IACf;IACA,IAAID,KAAK,KAAKH,KAAK,CAACN,gBAAgB,EAAE;MACpC,OAAAW,aAAA,CAAAA,aAAA,KACKL,KAAK;QACRN,gBAAgB,EAAES,KAAK;QACvBP;MAAU;IAEd;IACA;IAAA,KACK;MACH,OAAAS,aAAA,CAAAA,aAAA,KACKL,KAAK;QACRN,gBAAgB,EAAES,KAAK;QACvBP,UAAU;QACVC,eAAe,EAAEG,KAAK,CAACJ;MAAU;IAErC;EACF,CAAC,MAAM;IACL,OAAAS,aAAA,CAAAA,aAAA,KACKL,KAAK;MACRN,gBAAgB,EAAES,KAAK;MACvBP,UAAU;MACVC,eAAe,EAAE;IAAE;EAEvB;AACF,CAAC,CACL,CAAC"},"metadata":{},"sourceType":"module"}