{"ast":null,"code":"import _objectSpread from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _s = $RefreshSig$();\nimport { useCelo, useConnectedSigner } from '@celo/react-celo';\nimport { ChainId } from '@ubeswap/sdk';\nimport { useCallback } from 'react';\nimport { useTransactionAdder } from 'state/transactions/hooks';\nimport { calculateGasMargin } from 'utils';\nconst estimateGas = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (call) {\n    const {\n      contract,\n      methodName,\n      args,\n      value\n    } = call;\n    const fullArgs = value ? [...args, {\n      value\n    }] : args;\n    try {\n      return yield contract.estimateGas[methodName](...fullArgs);\n    } catch (gasError) {\n      console.debug('Gas estimate failed, trying eth_call to extract error', call);\n      try {\n        const result = yield contract.callStatic[methodName](...fullArgs);\n        console.debug('Unexpected successful call after failed estimate gas', call, gasError, result);\n        throw new Error('Unexpected issue with estimating the gas. Please try again.');\n      } catch (callError) {\n        console.debug('Call threw error', call, callError);\n        let errorMessage;\n        switch (callError.reason) {\n          case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n          case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n            errorMessage = 'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.';\n            break;\n          default:\n            errorMessage = \"The transaction cannot succeed due to error: \".concat(callError.reason, \". This is probably an issue with one of the tokens you are swapping.\");\n        }\n        throw new Error(errorMessage);\n      }\n    }\n  });\n  return function estimateGas(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * Allows performing transactions.\n * @returns\n */\nexport const useDoTransaction = () => {\n  _s();\n  const addTransaction = useTransactionAdder();\n  const {\n    network\n  } = useCelo();\n  const connectedSigner = useConnectedSigner();\n  const chainId = network.chainId;\n  return useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* (contractDisconnected, methodName, args) {\n      var _args$overrides;\n      if (chainId === ChainId.BAKLAVA) {\n        throw new Error('baklava not supported');\n      }\n      if (!connectedSigner) {\n        throw new Error('no signer');\n      }\n      const contract = contractDisconnected.connect(connectedSigner);\n      const call = {\n        contract,\n        methodName,\n        args: args.args,\n        value: (_args$overrides = args.overrides) === null || _args$overrides === void 0 ? void 0 : _args$overrides.value\n      };\n      const gasEstimate = yield estimateGas(call);\n      try {\n        let response;\n        if (args.raw) {\n          response = yield connectedSigner.sendTransaction(args.raw);\n        } else {\n          response = yield contract[methodName](...args.args, _objectSpread({\n            gasLimit: calculateGasMargin(gasEstimate)\n          }, args.overrides));\n        }\n        addTransaction(response, {\n          summary: args.summary,\n          approval: args.approval,\n          claim: args.claim\n        });\n        return response;\n      } catch (error) {\n        // if the user rejected the tx, pass this along\n        if ((error === null || error === void 0 ? void 0 : error.code) === 4001) {\n          throw new Error('Transaction rejected.');\n        } else {\n          // otherwise, the error was unexpected and we need to convey that\n          console.error(\"Transaction failed\", error, methodName, args, call.value);\n          throw new Error(\"Transaction failed: \".concat(error.message));\n        }\n      }\n    });\n    return function (_x2, _x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [addTransaction, chainId, connectedSigner]);\n};\n_s(useDoTransaction, \"1nFLGTLwha8wzF9dLuxNM3Fs6WQ=\", false, function () {\n  return [useTransactionAdder, useCelo, useConnectedSigner];\n});","map":{"version":3,"names":["useCelo","useConnectedSigner","ChainId","useCallback","useTransactionAdder","calculateGasMargin","estimateGas","_ref","_asyncToGenerator","call","contract","methodName","args","value","fullArgs","gasError","console","debug","result","callStatic","Error","callError","errorMessage","reason","concat","_x","apply","arguments","useDoTransaction","_s","addTransaction","network","connectedSigner","chainId","_ref2","contractDisconnected","_args$overrides","BAKLAVA","connect","overrides","gasEstimate","response","raw","sendTransaction","_objectSpread","gasLimit","summary","approval","claim","error","code","message","_x2","_x3","_x4"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/components/swap/routing/index.ts"],"sourcesContent":["import { useCelo, useConnectedSigner } from '@celo/react-celo'\nimport { JsonRpcSigner, TransactionRequest } from '@ethersproject/providers'\nimport { ChainId, Trade } from '@ubeswap/sdk'\nimport { BigNumber, BigNumberish, CallOverrides, Contract, ContractTransaction, PayableOverrides } from 'ethers'\nimport { useCallback } from 'react'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport { calculateGasMargin } from 'utils'\n\ntype Head<T extends any[]> = Required<T> extends [...infer H, any] ? H : never\ntype Last<T extends Array<unknown>> = Required<T> extends [...unknown[], infer L] ? L : never\ntype MethodArgs<C extends Contract, M extends keyof C['estimateGas']> = Head<Parameters<C['estimateGas'][M]>>\n\nexport type DoTransactionFn = <\n  C extends Contract,\n  M extends string & keyof C['estimateGas'],\n  O extends Last<Parameters<C['estimateGas'][M]>> & (PayableOverrides | CallOverrides)\n>(\n  contract: C,\n  methodName: M,\n  args: {\n    args: MethodArgs<C, M>\n    raw?: TransactionRequest\n    overrides?: O\n    summary?: string\n    approval?: { tokenAddress: string; spender: string }\n    claim?: { recipient: string }\n  }\n) => Promise<ContractTransaction>\n\nexport interface TradeExecutor<T extends Trade> {\n  (args: {\n    trade: T\n    signer: JsonRpcSigner\n    chainId: ChainId.MAINNET | ChainId.ALFAJORES\n    doTransaction: DoTransactionFn\n    recipient?: string | null\n    withRecipient?: string\n  }): Promise<{\n    hash: string\n  }>\n}\n\nexport interface CancelLimitOrderExecutor {\n  (args: {\n    orderHash: string\n    signer: JsonRpcSigner\n    chainId: ChainId.MAINNET | ChainId.ALFAJORES\n    doTransaction: DoTransactionFn\n  }): Promise<{\n    hash: string\n  }>\n}\n\ntype ContractCall = {\n  contract: Contract\n  methodName: string\n  args: unknown[]\n  value?: BigNumberish | Promise<BigNumberish>\n}\n\nconst estimateGas = async (call: ContractCall): Promise<BigNumber> => {\n  const { contract, methodName, args, value } = call\n  const fullArgs = value ? [...args, { value }] : args\n  try {\n    return await contract.estimateGas[methodName](...fullArgs)\n  } catch (gasError) {\n    console.debug('Gas estimate failed, trying eth_call to extract error', call)\n    try {\n      const result = await contract.callStatic[methodName](...fullArgs)\n      console.debug('Unexpected successful call after failed estimate gas', call, gasError, result)\n      throw new Error('Unexpected issue with estimating the gas. Please try again.')\n    } catch (callError: any) {\n      console.debug('Call threw error', call, callError)\n      let errorMessage: string\n      switch (callError.reason) {\n        case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n        case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n          errorMessage =\n            'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\n          break\n        default:\n          errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`\n      }\n      throw new Error(errorMessage)\n    }\n  }\n}\n\n/**\n * Allows performing transactions.\n * @returns\n */\nexport const useDoTransaction = (): DoTransactionFn => {\n  const addTransaction = useTransactionAdder()\n  const { network } = useCelo()\n  const connectedSigner = useConnectedSigner()\n  const chainId = network.chainId as unknown as ChainId\n  return useCallback(\n    async (contractDisconnected, methodName, args): Promise<ContractTransaction> => {\n      if (chainId === ChainId.BAKLAVA) {\n        throw new Error('baklava not supported')\n      }\n      if (!connectedSigner) {\n        throw new Error('no signer')\n      }\n      const contract = contractDisconnected.connect(connectedSigner)\n      const call = { contract, methodName, args: args.args, value: args.overrides?.value }\n      const gasEstimate = await estimateGas(call)\n\n      try {\n        let response: ContractTransaction\n        if (args.raw) {\n          response = await connectedSigner.sendTransaction(args.raw)\n        } else {\n          response = await contract[methodName](...args.args, {\n            gasLimit: calculateGasMargin(gasEstimate),\n            ...args.overrides,\n          })\n        }\n        addTransaction(response, {\n          summary: args.summary,\n          approval: args.approval,\n          claim: args.claim,\n        })\n        return response\n      } catch (error: any) {\n        // if the user rejected the tx, pass this along\n        if (error?.code === 4001) {\n          throw new Error('Transaction rejected.')\n        } else {\n          // otherwise, the error was unexpected and we need to convey that\n          console.error(`Transaction failed`, error, methodName, args, call.value)\n          throw new Error(`Transaction failed: ${error.message}`)\n        }\n      }\n    },\n    [addTransaction, chainId, connectedSigner]\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}