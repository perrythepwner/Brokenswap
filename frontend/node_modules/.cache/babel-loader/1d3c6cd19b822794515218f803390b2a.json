{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.linkedListChanges = exports.linkedListChange = exports.intersection = exports.notEmpty = exports.zeroRange = exports.zip3 = exports.zip = void 0;\nvar address_1 = require(\"./address\");\nfunction zip(fn, as, bs) {\n  var len = Math.min(as.length, bs.length);\n  var res = [];\n  for (var i = 0; i < len; i++) {\n    res.push(fn(as[i], bs[i]));\n  }\n  return res;\n}\nexports.zip = zip;\nfunction zip3(as, bs, cs) {\n  var len = Math.min(as.length, bs.length, cs.length);\n  var res = [];\n  for (var i = 0; i < len; i++) {\n    res.push([as[i], bs[i], cs[i]]);\n  }\n  return res;\n}\nexports.zip3 = zip3;\nfunction zeroRange(to) {\n  return Array.from(Array(to).keys());\n}\nexports.zeroRange = zeroRange;\n// https://stackoverflow.com/questions/43118692/typescript-filter-out-nulls-from-an-array\nfunction notEmpty(value) {\n  return value !== null && value !== undefined;\n}\nexports.notEmpty = notEmpty;\nfunction intersection(arrays) {\n  if (arrays.length === 0) {\n    return [];\n  }\n  var sets = arrays.map(function (array) {\n    return new Set(array);\n  });\n  var res = [];\n  var _loop_1 = function _loop_1(elem) {\n    if (sets.every(function (set) {\n      return set.has(elem);\n    })) {\n      res.push(elem);\n    }\n  };\n  for (var _i = 0, _a = arrays[0]; _i < _a.length; _i++) {\n    var elem = _a[_i];\n    _loop_1(elem);\n  }\n  return res;\n}\nexports.intersection = intersection;\nfunction upsert(sortedList, change, comparator) {\n  var oldIdx = sortedList.findIndex(function (a) {\n    return (0, address_1.eqAddress)(a.address, change.address);\n  });\n  if (oldIdx === -1) {\n    throw new Error('');\n  }\n  sortedList.splice(oldIdx, 1);\n  var newIdx = sortedList.findIndex(function (a) {\n    return comparator(a.value, change.value);\n  });\n  if (newIdx === -1) {\n    sortedList.push(change);\n    return sortedList.length - 1;\n  } else {\n    sortedList.splice(newIdx, 0, change);\n    return newIdx;\n  }\n}\n// Warning: sortedList is modified\nfunction _linkedListChange(sortedList, change, comparator) {\n  var idx = upsert(sortedList, change, comparator);\n  var greater = idx === 0 ? address_1.NULL_ADDRESS : sortedList[idx - 1].address;\n  var lesser = idx === sortedList.length - 1 ? address_1.NULL_ADDRESS : sortedList[idx + 1].address;\n  return {\n    lesser: lesser,\n    greater: greater\n  };\n}\nfunction linkedListChange(sortedList, change, comparator) {\n  var list = sortedList.concat();\n  var _a = _linkedListChange(list, change, comparator),\n    lesser = _a.lesser,\n    greater = _a.greater;\n  return {\n    lesser: lesser,\n    greater: greater,\n    list: list\n  };\n}\nexports.linkedListChange = linkedListChange;\nfunction linkedListChanges(sortedList, changeList, comparator) {\n  var listClone = __spreadArray([], sortedList, true);\n  var lessers = [];\n  var greaters = [];\n  for (var _i = 0, changeList_1 = changeList; _i < changeList_1.length; _i++) {\n    var it_1 = changeList_1[_i];\n    var _a = _linkedListChange(listClone, it_1, comparator),\n      lesser = _a.lesser,\n      greater = _a.greater;\n    lessers.push(lesser);\n    greaters.push(greater);\n  }\n  return {\n    lessers: lessers,\n    greaters: greaters,\n    list: listClone\n  };\n}\nexports.linkedListChanges = linkedListChanges;","map":null,"metadata":{},"sourceType":"script"}