{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timeout = exports.concurrentValuesMap = exports.concurrentMap = exports.retryAsyncWithBackOffAndTimeout = exports.selectiveRetryAsyncWithBackOff = exports.retryAsyncWithBackOff = exports.retryAsync = exports.sleep = void 0;\nvar TAG = 'utils/src/async';\n/** Sleep for a number of milliseconds */\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\nexports.sleep = sleep;\n// Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\nvar retryAsync = function retryAsync(inFunction, tries, params, delay, logger) {\n  if (delay === void 0) {\n    delay = 100;\n  }\n  if (logger === void 0) {\n    logger = null;\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    var saveError, i, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          i = 0;\n          _a.label = 1;\n        case 1:\n          if (!(i < tries)) return [3 /*break*/, 7];\n          _a.label = 2;\n        case 2:\n          _a.trys.push([2, 4,, 6]);\n          return [4 /*yield*/, inFunction.apply(void 0, params)];\n        case 3:\n          // it awaits otherwise it'd always do all the retries\n          return [2 /*return*/, _a.sent()];\n        case 4:\n          error_1 = _a.sent();\n          return [4 /*yield*/, sleep(delay)];\n        case 5:\n          _a.sent();\n          saveError = error_1;\n          if (logger) {\n            logger(\"\".concat(TAG, \"/@retryAsync, Failed to execute function on try #\").concat(i, \":\"), error_1);\n          }\n          return [3 /*break*/, 6];\n        case 6:\n          i++;\n          return [3 /*break*/, 1];\n        case 7:\n          throw saveError;\n      }\n    });\n  });\n};\nexports.retryAsync = retryAsync;\n// Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\nvar retryAsyncWithBackOff = function retryAsyncWithBackOff(inFunction, tries, params, delay, factor, logger) {\n  if (delay === void 0) {\n    delay = 100;\n  }\n  if (factor === void 0) {\n    factor = 1.5;\n  }\n  if (logger === void 0) {\n    logger = null;\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    var saveError, i, error_2;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          i = 0;\n          _a.label = 1;\n        case 1:\n          if (!(i < tries)) return [3 /*break*/, 7];\n          _a.label = 2;\n        case 2:\n          _a.trys.push([2, 4,, 6]);\n          return [4 /*yield*/, inFunction.apply(void 0, params)];\n        case 3:\n          // it awaits otherwise it'd always do all the retries\n          return [2 /*return*/, _a.sent()];\n        case 4:\n          error_2 = _a.sent();\n          return [4 /*yield*/, sleep(Math.pow(factor, i) * delay)];\n        case 5:\n          _a.sent();\n          saveError = error_2;\n          if (logger) {\n            logger(\"\".concat(TAG, \"/@retryAsync, Failed to execute function on try #\").concat(i), error_2);\n          }\n          return [3 /*break*/, 6];\n        case 6:\n          i++;\n          return [3 /*break*/, 1];\n        case 7:\n          throw saveError;\n      }\n    });\n  });\n};\nexports.retryAsyncWithBackOff = retryAsyncWithBackOff;\n// Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\n// throws automatically on specified errors\nvar selectiveRetryAsyncWithBackOff = function selectiveRetryAsyncWithBackOff(inFunction, tries, dontRetry, params, delay, factor, logger) {\n  if (delay === void 0) {\n    delay = 100;\n  }\n  if (factor === void 0) {\n    factor = 1.5;\n  }\n  if (logger === void 0) {\n    logger = null;\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    var saveError, i, error_3;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          i = 0;\n          _a.label = 1;\n        case 1:\n          if (!(i < tries)) return [3 /*break*/, 8];\n          _a.label = 2;\n        case 2:\n          _a.trys.push([2, 4,, 5]);\n          return [4 /*yield*/, inFunction.apply(void 0, params)];\n        case 3:\n          // it awaits otherwise it'd always do all the retries\n          return [2 /*return*/, _a.sent()];\n        case 4:\n          error_3 = _a.sent();\n          if (dontRetry.some(function (msg) {\n            return error_3.message.includes(msg);\n          })) {\n            throw error_3;\n          }\n          saveError = error_3;\n          if (logger) {\n            logger(\"\".concat(TAG, \"/@retryAsync, Failed to execute function on try #\").concat(i), error_3);\n          }\n          return [3 /*break*/, 5];\n        case 5:\n          if (!(i < tries - 1)) return [3 /*break*/, 7];\n          return [4 /*yield*/, sleep(Math.pow(factor, i) * delay)];\n        case 6:\n          _a.sent();\n          _a.label = 7;\n        case 7:\n          i++;\n          return [3 /*break*/, 1];\n        case 8:\n          throw saveError;\n      }\n    });\n  });\n};\nexports.selectiveRetryAsyncWithBackOff = selectiveRetryAsyncWithBackOff;\n// Retries an async function when it raises an exeption\n// Terminates any ongoing request when the timeout is reached\n// if all the tries fail it raises the last thrown exeption\nvar retryAsyncWithBackOffAndTimeout = function retryAsyncWithBackOffAndTimeout(inFunction, tries, params, delayMs, factor, timeoutMs, logger) {\n  if (delayMs === void 0) {\n    delayMs = 100;\n  }\n  if (factor === void 0) {\n    factor = 1.5;\n  }\n  if (timeoutMs === void 0) {\n    timeoutMs = 2000;\n  }\n  if (logger === void 0) {\n    logger = null;\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2 /*return*/, (0, exports.timeout)(exports.retryAsyncWithBackOff, [inFunction, tries, params, delayMs, factor, logger], timeoutMs, new Error(\"Timed out after \".concat(timeoutMs, \"ms\")), \"\".concat(TAG, \"/@retryAsyncWithBackOffAndTimeout, Timed out after \").concat(timeoutMs, \"ms\"), logger)];\n    });\n  });\n};\nexports.retryAsyncWithBackOffAndTimeout = retryAsyncWithBackOffAndTimeout;\n/**\n * Map an async function over a list xs with a given concurrency level\n *\n * @param concurrency number of `mapFn` concurrent executions\n * @param xs list of value\n * @param mapFn mapping function\n */\nfunction concurrentMap(concurrency, xs, mapFn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var res, _loop_1, i;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          res = [];\n          _loop_1 = function _loop_1(i) {\n            var remaining, sliceSize, slice, _b, _c;\n            return __generator(this, function (_d) {\n              switch (_d.label) {\n                case 0:\n                  remaining = xs.length - i;\n                  sliceSize = Math.min(remaining, concurrency);\n                  slice = xs.slice(i, i + sliceSize);\n                  _c = (_b = res).concat;\n                  return [4 /*yield*/, Promise.all(slice.map(function (elem, index) {\n                    return mapFn(elem, i + index);\n                  }))];\n                case 1:\n                  res = _c.apply(_b, [_d.sent()]);\n                  return [2 /*return*/];\n              }\n            });\n          };\n\n          i = 0;\n          _a.label = 1;\n        case 1:\n          if (!(i < xs.length)) return [3 /*break*/, 4];\n          return [5 /*yield**/, _loop_1(i)];\n        case 2:\n          _a.sent();\n          _a.label = 3;\n        case 3:\n          i += concurrency;\n          return [3 /*break*/, 1];\n        case 4:\n          return [2 /*return*/, res];\n      }\n    });\n  });\n}\nexports.concurrentMap = concurrentMap;\n/**\n * Map an async function over the values in Object x with a given concurrency level\n *\n * @param concurrency number of `mapFn` concurrent executions\n * @param x associative array of values\n * @param mapFn mapping function\n */\nfunction concurrentValuesMap(concurrency, x, mapFn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var xk, xv, res;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          xk = Object.keys(x);\n          xv = [];\n          xk.forEach(function (k) {\n            return xv.push(x[k]);\n          });\n          return [4 /*yield*/, concurrentMap(concurrency, xv, function (val, idx) {\n            return mapFn(val, xk[idx]);\n          })];\n        case 1:\n          res = _a.sent();\n          return [2 /*return*/, res.reduce(function (output, value, index) {\n            output[xk[index]] = value;\n            return output;\n          }, {})];\n      }\n    });\n  });\n}\nexports.concurrentValuesMap = concurrentValuesMap;\n/**\n * Wraps an async function in a timeout before calling it.\n *\n * @param inFunction The async function to call\n * @param params The parameters of the async function\n * @param timeoutMs The timeout in milliseconds\n * @param timeoutError The value to which the returned Promise should reject to\n */\nvar timeout = function timeout(inFunction, params, timeoutMs, timeoutError, timeoutLogMsg, logger) {\n  if (timeoutLogMsg === void 0) {\n    timeoutLogMsg = null;\n  }\n  if (logger === void 0) {\n    logger = null;\n  }\n  var timer;\n  return Promise.race([inFunction.apply(void 0, params), new Promise(function (_resolve, reject) {\n    timer = setTimeout(function () {\n      if (logger) {\n        logger(timeoutLogMsg || \"\".concat(TAG, \"/@timeout Timed out after \").concat(timeoutMs, \"ms\"));\n      }\n      reject(timeoutError);\n    }, timeoutMs);\n  })]).finally(function () {\n    clearTimeout(timer);\n  });\n};\nexports.timeout = timeout;","map":null,"metadata":{},"sourceType":"script"}