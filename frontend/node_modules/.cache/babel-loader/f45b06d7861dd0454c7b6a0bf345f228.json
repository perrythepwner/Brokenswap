{"ast":null,"code":"import { assertType } from \"./misc\";\nimport { isPublishMethod, isPublishParams, isSubscribeMethod, isSubscribeParams, isSubscriptionMethod, isSubscriptionParams, isUnsubscribeMethod, isUnsubscribeParams } from \"./validators\";\nexport function parseSubscribeRequest(request) {\n  if (!isSubscribeMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid subscribe method\");\n  }\n  if (!isSubscribeParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid subscribe params\");\n  }\n  const params = request.params;\n  assertType(params, \"topic\");\n  return params;\n}\nexport function parsePublishRequest(request) {\n  if (!isPublishMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid publish method\");\n  }\n  if (!isPublishParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid publish params\");\n  }\n  const params = request.params;\n  assertType(params, \"topic\");\n  assertType(params, \"message\");\n  assertType(params, \"ttl\", \"number\");\n  return params;\n}\nexport function parseUnsubscribeRequest(request) {\n  if (!isUnsubscribeMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid unsubscribe method\");\n  }\n  if (!isUnsubscribeParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid unsubscribe params\");\n  }\n  const params = request.params;\n  assertType(params, \"id\");\n  return params;\n}\nexport function parseSubscriptionRequest(request) {\n  if (!isSubscriptionMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid subscription method\");\n  }\n  if (!isSubscriptionParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid subscription params\");\n  }\n  const params = request.params;\n  assertType(params, \"id\");\n  assertType(params, \"data\");\n  return params;\n}","map":{"version":3,"sources":["../../src/parsers.ts"],"names":[],"mappings":"AAGA,SAAS,UAAU,QAAQ,QAAQ;AACnC,SACE,eAAe,EACf,eAAe,EACf,iBAAiB,EACjB,iBAAiB,EACjB,oBAAoB,EACpB,oBAAoB,EACpB,mBAAmB,EACnB,mBAAmB,QACd,cAAc;AAErB,OAAM,SAAU,qBAAqB,CACnC,OAAuB,EAAA;EAEvB,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;IACtC,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC;EACjE;EACD,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;IACtC,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC;EACjE;EACD,MAAM,MAAM,GAAG,OAAO,CAAC,MAAsC;EAE7D,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC;EAE3B,OAAO,MAAM;AACf;AAEA,OAAM,SAAU,mBAAmB,CACjC,OAAuB,EAAA;EAEvB,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;IACpC,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC;EAC/D;EACD,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;IACpC,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC;EAC/D;EACD,MAAM,MAAM,GAAG,OAAO,CAAC,MAAoC;EAE3D,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC;EAC3B,UAAU,CAAC,MAAM,EAAE,SAAS,CAAC;EAC7B,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC;EAEnC,OAAO,MAAM;AACf;AAEA,OAAM,SAAU,uBAAuB,CACrC,OAAuB,EAAA;EAEvB,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;IACxC,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC;EACnE;EACD,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;IACxC,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC;EACnE;EACD,MAAM,MAAM,GAAG,OAAO,CAAC,MAAwC;EAE/D,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC;EAExB,OAAO,MAAM;AACf;AAEA,OAAM,SAAU,wBAAwB,CACtC,OAAuB,EAAA;EAEvB,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;IACzC,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC;EACpE;EACD,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;IACzC,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC;EACpE;EACD,MAAM,MAAM,GAAG,OAAO,CAAC,MAAyC;EAEhE,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC;EACxB,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC;EAE1B,OAAO,MAAM;AACf","sourceRoot":"","sourcesContent":["import { assertType } from \"./misc\";\nimport { isPublishMethod, isPublishParams, isSubscribeMethod, isSubscribeParams, isSubscriptionMethod, isSubscriptionParams, isUnsubscribeMethod, isUnsubscribeParams, } from \"./validators\";\nexport function parseSubscribeRequest(request) {\n    if (!isSubscribeMethod(request.method)) {\n        throw new Error(\"JSON-RPC Request has invalid subscribe method\");\n    }\n    if (!isSubscribeParams(request.params)) {\n        throw new Error(\"JSON-RPC Request has invalid subscribe params\");\n    }\n    const params = request.params;\n    assertType(params, \"topic\");\n    return params;\n}\nexport function parsePublishRequest(request) {\n    if (!isPublishMethod(request.method)) {\n        throw new Error(\"JSON-RPC Request has invalid publish method\");\n    }\n    if (!isPublishParams(request.params)) {\n        throw new Error(\"JSON-RPC Request has invalid publish params\");\n    }\n    const params = request.params;\n    assertType(params, \"topic\");\n    assertType(params, \"message\");\n    assertType(params, \"ttl\", \"number\");\n    return params;\n}\nexport function parseUnsubscribeRequest(request) {\n    if (!isUnsubscribeMethod(request.method)) {\n        throw new Error(\"JSON-RPC Request has invalid unsubscribe method\");\n    }\n    if (!isUnsubscribeParams(request.params)) {\n        throw new Error(\"JSON-RPC Request has invalid unsubscribe params\");\n    }\n    const params = request.params;\n    assertType(params, \"id\");\n    return params;\n}\nexport function parseSubscriptionRequest(request) {\n    if (!isSubscriptionMethod(request.method)) {\n        throw new Error(\"JSON-RPC Request has invalid subscription method\");\n    }\n    if (!isSubscriptionParams(request.params)) {\n        throw new Error(\"JSON-RPC Request has invalid subscription params\");\n    }\n    const params = request.params;\n    assertType(params, \"id\");\n    assertType(params, \"data\");\n    return params;\n}\n//# sourceMappingURL=parsers.js.map"]},"metadata":{},"sourceType":"module"}