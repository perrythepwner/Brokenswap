{"ast":null,"code":"import{useCelo}from'@celo/react-celo';import{useCallback,useMemo}from'react';import{useDispatch,useSelector}from'react-redux';import{addTransaction}from'./actions';// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(){const{network,address:account}=useCelo();const chainId=network.chainId;const dispatch=useDispatch();return useCallback(function(response){let{summary,approval,claim}=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!account)return;if(!chainId)return;const{hash}=response;if(!hash){throw Error('No transaction hash found.');}dispatch(addTransaction({hash,from:account,chainId,approval,summary,claim}));},[dispatch,chainId,account]);}// returns all the transactions for the current chain\nexport function useAllTransactions(){var _state$chainId;const{network}=useCelo();const chainId=network.chainId;const state=useSelector(state=>state.transactions);return chainId?(_state$chainId=state[chainId])!==null&&_state$chainId!==void 0?_state$chainId:{}:{};}export function useIsTransactionPending(transactionHash){const transactions=useAllTransactions();if(!transactionHash||!transactions[transactionHash])return false;return!transactions[transactionHash].receipt;}/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */export function isTransactionRecent(tx){return new Date().getTime()-tx.addedTime<86400000;}// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress,spender){const allTransactions=useAllTransactions();return useMemo(()=>typeof tokenAddress==='string'&&typeof spender==='string'&&Object.keys(allTransactions).some(hash=>{const tx=allTransactions[hash];if(!tx)return false;if(tx.receipt){return false;}else{const approval=tx.approval;if(!approval)return false;return approval.spender===spender&&approval.tokenAddress===tokenAddress&&isTransactionRecent(tx);}}),[allTransactions,spender,tokenAddress]);}// watch for submissions to claim\n// return null if not done loading, return undefined if not found\nexport function useUserHasSubmittedClaim(account){const allTransactions=useAllTransactions();// get the txn if it has been submitted\nconst claimTxn=useMemo(()=>{const txnIndex=Object.keys(allTransactions).find(hash=>{const tx=allTransactions[hash];return tx.claim&&tx.claim.recipient===account;});return txnIndex&&allTransactions[txnIndex]?allTransactions[txnIndex]:undefined;},[account,allTransactions]);return{claimSubmitted:Boolean(claimTxn),claimTxn};}","map":{"version":3,"names":["useCelo","useCallback","useMemo","useDispatch","useSelector","addTransaction","useTransactionAdder","network","address","account","chainId","dispatch","response","summary","approval","claim","arguments","length","undefined","hash","Error","from","useAllTransactions","_state$chainId","state","transactions","useIsTransactionPending","transactionHash","receipt","isTransactionRecent","tx","Date","getTime","addedTime","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some","useUserHasSubmittedClaim","claimTxn","txnIndex","find","recipient","claimSubmitted","Boolean"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/state/transactions/hooks.tsx"],"sourcesContent":["import { useCelo } from '@celo/react-celo'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { ChainId } from '@ubeswap/sdk'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { AppDispatch, AppState } from '../index'\nimport { addTransaction } from './actions'\nimport { TransactionDetails } from './reducer'\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string }; claim?: { recipient: string } }\n) => void {\n  const { network, address: account } = useCelo()\n  const chainId = network.chainId as unknown as ChainId\n  const dispatch = useDispatch<AppDispatch>()\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      {\n        summary,\n        approval,\n        claim,\n      }: { summary?: string; claim?: { recipient: string }; approval?: { tokenAddress: string; spender: string } } = {}\n    ) => {\n      if (!account) return\n      if (!chainId) return\n\n      const { hash } = response\n      if (!hash) {\n        throw Error('No transaction hash found.')\n      }\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary, claim }))\n    },\n    [dispatch, chainId, account]\n  )\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { network } = useCelo()\n  const chainId = network.chainId\n\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions)\n\n  return chainId ? state[chainId] ?? {} : {}\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions()\n\n  if (!transactionHash || !transactions[transactionHash]) return false\n\n  return !transactions[transactionHash].receipt\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions()\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some((hash) => {\n        const tx = allTransactions[hash]\n        if (!tx) return false\n        if (tx.receipt) {\n          return false\n        } else {\n          const approval = tx.approval\n          if (!approval) return false\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx)\n        }\n      }),\n    [allTransactions, spender, tokenAddress]\n  )\n}\n\n// watch for submissions to claim\n// return null if not done loading, return undefined if not found\nexport function useUserHasSubmittedClaim(account?: string): {\n  claimSubmitted: boolean\n  claimTxn: TransactionDetails | undefined\n} {\n  const allTransactions = useAllTransactions()\n\n  // get the txn if it has been submitted\n  const claimTxn = useMemo(() => {\n    const txnIndex = Object.keys(allTransactions).find((hash) => {\n      const tx = allTransactions[hash]\n      return tx.claim && tx.claim.recipient === account\n    })\n    return txnIndex && allTransactions[txnIndex] ? allTransactions[txnIndex] : undefined\n  }, [account, allTransactions])\n\n  return { claimSubmitted: Boolean(claimTxn), claimTxn }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}