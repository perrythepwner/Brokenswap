{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContainerTreeViewDUClass = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst basic_1 = require(\"../type/basic\");\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\nclass ContainerTreeViewDU extends abstract_1.TreeViewDU {\n  constructor(type, _rootNode, cache) {\n    super();\n    this.type = type;\n    this._rootNode = _rootNode;\n    this.nodes = [];\n    this.nodesChanged = new Set();\n    this.viewsChanged = new Map();\n    if (cache) {\n      this.nodes = cache.nodes;\n      this.caches = cache.caches;\n      this.nodesPopulated = cache.nodesPopulated;\n    } else {\n      this.nodes = [];\n      this.caches = [];\n      this.nodesPopulated = false;\n    }\n  }\n  get node() {\n    return this._rootNode;\n  }\n  get cache() {\n    return {\n      nodes: this.nodes,\n      caches: this.caches,\n      nodesPopulated: this.nodesPopulated\n    };\n  }\n  commit() {\n    if (this.nodesChanged.size === 0 && this.viewsChanged.size === 0) {\n      return;\n    }\n    const nodesChanged = [];\n    for (const [index, view] of this.viewsChanged) {\n      const fieldType = this.type.fieldsEntries[index].fieldType;\n      const node = fieldType.commitViewDU(view);\n      // Set new node in nodes array to ensure data represented in the tree and fast nodes access is equal\n      this.nodes[index] = node;\n      nodesChanged.push({\n        index,\n        node\n      });\n      // Cache the view's caches to preserve it's data after 'this.viewsChanged.clear()'\n      const cache = fieldType.cacheOfViewDU(view);\n      if (cache) this.caches[index] = cache;\n    }\n    for (const index of this.nodesChanged) {\n      nodesChanged.push({\n        index,\n        node: this.nodes[index]\n      });\n    }\n    // TODO: Optimize to loop only once, Numerical sort ascending\n    const nodesChangedSorted = nodesChanged.sort((a, b) => a.index - b.index);\n    const indexes = nodesChangedSorted.map(entry => entry.index);\n    const nodes = nodesChangedSorted.map(entry => entry.node);\n    this._rootNode = persistent_merkle_tree_1.setNodesAtDepth(this._rootNode, this.type.depth, indexes, nodes);\n    this.nodesChanged.clear();\n    this.viewsChanged.clear();\n  }\n  clearCache() {\n    this.nodes = [];\n    this.caches = [];\n    this.nodesPopulated = false;\n    // Must clear nodesChanged, otherwise a subsequent commit call will break, because it assumes a node is there\n    this.nodesChanged.clear();\n    // It's not necessary to clear this.viewsChanged since they have no effect on the cache.\n    // However preserving _SOME_ caches results in a very unpredictable experience.\n    this.viewsChanged.clear();\n  }\n}\nfunction getContainerTreeViewDUClass(type) {\n  class CustomContainerTreeViewDU extends ContainerTreeViewDU {}\n  // Dynamically define prototype methods\n  for (let index = 0; index < type.fieldsEntries.length; index++) {\n    const {\n      fieldName,\n      fieldType\n    } = type.fieldsEntries[index];\n    // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n    // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n    // and use the cached views array to store the new node.\n    if (basic_1.isBasicType(fieldType)) {\n      Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // TODO: Review the memory cost of this closures\n        get: function get() {\n          // First walk through the tree to get the root node for that index\n          let node = this.nodes[index];\n          if (node === undefined) {\n            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n            this.nodes[index] = node;\n          }\n          return fieldType.tree_getFromNode(node);\n        },\n        set: function set(value) {\n          // Create new node if current leafNode is not dirty\n          let nodeChanged;\n          if (this.nodesChanged.has(index)) {\n            // TODO: This assumes that node has already been populated\n            nodeChanged = this.nodes[index];\n          } else {\n            var _this$nodes$index;\n            const nodePrev = (_this$nodes$index = this.nodes[index]) !== null && _this$nodes$index !== void 0 ? _this$nodes$index : persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n            nodeChanged = nodePrev.clone();\n            // Store the changed node in the nodes cache\n            this.nodes[index] = nodeChanged;\n            this.nodesChanged.add(index);\n          }\n          fieldType.tree_setToNode(nodeChanged, value);\n        }\n      });\n    }\n    // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n    // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n    // set it to the parent tree in the field gindex.\n    else if (composite_1.isCompositeType(fieldType)) {\n      Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // Returns TreeViewDU of fieldName\n        get: function get() {\n          const viewChanged = this.viewsChanged.get(index);\n          if (viewChanged) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return viewChanged;\n          }\n          let node = this.nodes[index];\n          if (node === undefined) {\n            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n            this.nodes[index] = node;\n          }\n          // Keep a reference to the new view to call .commit on it latter, only if mutable\n          const view = fieldType.getViewDU(node, this.caches[index]);\n          if (fieldType.isViewMutable) {\n            this.viewsChanged.set(index, view);\n          }\n          // No need to persist the child's view cache since a second get returns this view instance.\n          // The cache is only persisted on commit where the viewsChanged map is dropped.\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n          return view;\n        },\n        // Expects TreeViewDU of fieldName\n        set: function set(view) {\n          // When setting a view:\n          // - Not necessary to commit node\n          // - Not necessary to persist cache\n          // Just keeping a reference to the view in this.viewsChanged ensures consistency\n          this.viewsChanged.set(index, view);\n        }\n      });\n    }\n    // Should never happen\n    else {\n      /* istanbul ignore next - unreachable code */\n      throw Error(\"Unknown fieldType \".concat(fieldType.typeName, \" for fieldName \").concat(fieldName));\n    }\n  }\n  // Change class name\n  Object.defineProperty(CustomContainerTreeViewDU, \"name\", {\n    value: type.typeName,\n    writable: false\n  });\n  return CustomContainerTreeViewDU;\n}\nexports.getContainerTreeViewDUClass = getContainerTreeViewDUClass;","map":{"version":3,"sources":["../../src/viewDU/container.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContainerTreeViewDUClass = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst basic_1 = require(\"../type/basic\");\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\nclass ContainerTreeViewDU extends abstract_1.TreeViewDU {\n    constructor(type, _rootNode, cache) {\n        super();\n        this.type = type;\n        this._rootNode = _rootNode;\n        this.nodes = [];\n        this.nodesChanged = new Set();\n        this.viewsChanged = new Map();\n        if (cache) {\n            this.nodes = cache.nodes;\n            this.caches = cache.caches;\n            this.nodesPopulated = cache.nodesPopulated;\n        }\n        else {\n            this.nodes = [];\n            this.caches = [];\n            this.nodesPopulated = false;\n        }\n    }\n    get node() {\n        return this._rootNode;\n    }\n    get cache() {\n        return {\n            nodes: this.nodes,\n            caches: this.caches,\n            nodesPopulated: this.nodesPopulated,\n        };\n    }\n    commit() {\n        if (this.nodesChanged.size === 0 && this.viewsChanged.size === 0) {\n            return;\n        }\n        const nodesChanged = [];\n        for (const [index, view] of this.viewsChanged) {\n            const fieldType = this.type.fieldsEntries[index].fieldType;\n            const node = fieldType.commitViewDU(view);\n            // Set new node in nodes array to ensure data represented in the tree and fast nodes access is equal\n            this.nodes[index] = node;\n            nodesChanged.push({ index, node });\n            // Cache the view's caches to preserve it's data after 'this.viewsChanged.clear()'\n            const cache = fieldType.cacheOfViewDU(view);\n            if (cache)\n                this.caches[index] = cache;\n        }\n        for (const index of this.nodesChanged) {\n            nodesChanged.push({ index, node: this.nodes[index] });\n        }\n        // TODO: Optimize to loop only once, Numerical sort ascending\n        const nodesChangedSorted = nodesChanged.sort((a, b) => a.index - b.index);\n        const indexes = nodesChangedSorted.map((entry) => entry.index);\n        const nodes = nodesChangedSorted.map((entry) => entry.node);\n        this._rootNode = persistent_merkle_tree_1.setNodesAtDepth(this._rootNode, this.type.depth, indexes, nodes);\n        this.nodesChanged.clear();\n        this.viewsChanged.clear();\n    }\n    clearCache() {\n        this.nodes = [];\n        this.caches = [];\n        this.nodesPopulated = false;\n        // Must clear nodesChanged, otherwise a subsequent commit call will break, because it assumes a node is there\n        this.nodesChanged.clear();\n        // It's not necessary to clear this.viewsChanged since they have no effect on the cache.\n        // However preserving _SOME_ caches results in a very unpredictable experience.\n        this.viewsChanged.clear();\n    }\n}\nfunction getContainerTreeViewDUClass(type) {\n    class CustomContainerTreeViewDU extends ContainerTreeViewDU {\n    }\n    // Dynamically define prototype methods\n    for (let index = 0; index < type.fieldsEntries.length; index++) {\n        const { fieldName, fieldType } = type.fieldsEntries[index];\n        // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n        // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n        // and use the cached views array to store the new node.\n        if (basic_1.isBasicType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // TODO: Review the memory cost of this closures\n                get: function () {\n                    // First walk through the tree to get the root node for that index\n                    let node = this.nodes[index];\n                    if (node === undefined) {\n                        node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n                        this.nodes[index] = node;\n                    }\n                    return fieldType.tree_getFromNode(node);\n                },\n                set: function (value) {\n                    // Create new node if current leafNode is not dirty\n                    let nodeChanged;\n                    if (this.nodesChanged.has(index)) {\n                        // TODO: This assumes that node has already been populated\n                        nodeChanged = this.nodes[index];\n                    }\n                    else {\n                        const nodePrev = (this.nodes[index] ?? persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index));\n                        nodeChanged = nodePrev.clone();\n                        // Store the changed node in the nodes cache\n                        this.nodes[index] = nodeChanged;\n                        this.nodesChanged.add(index);\n                    }\n                    fieldType.tree_setToNode(nodeChanged, value);\n                },\n            });\n        }\n        // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n        // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n        // set it to the parent tree in the field gindex.\n        else if (composite_1.isCompositeType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // Returns TreeViewDU of fieldName\n                get: function () {\n                    const viewChanged = this.viewsChanged.get(index);\n                    if (viewChanged) {\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                        return viewChanged;\n                    }\n                    let node = this.nodes[index];\n                    if (node === undefined) {\n                        node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n                        this.nodes[index] = node;\n                    }\n                    // Keep a reference to the new view to call .commit on it latter, only if mutable\n                    const view = fieldType.getViewDU(node, this.caches[index]);\n                    if (fieldType.isViewMutable) {\n                        this.viewsChanged.set(index, view);\n                    }\n                    // No need to persist the child's view cache since a second get returns this view instance.\n                    // The cache is only persisted on commit where the viewsChanged map is dropped.\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return view;\n                },\n                // Expects TreeViewDU of fieldName\n                set: function (view) {\n                    // When setting a view:\n                    // - Not necessary to commit node\n                    // - Not necessary to persist cache\n                    // Just keeping a reference to the view in this.viewsChanged ensures consistency\n                    this.viewsChanged.set(index, view);\n                },\n            });\n        }\n        // Should never happen\n        else {\n            /* istanbul ignore next - unreachable code */\n            throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);\n        }\n    }\n    // Change class name\n    Object.defineProperty(CustomContainerTreeViewDU, \"name\", { value: type.typeName, writable: false });\n    return CustomContainerTreeViewDU;\n}\nexports.getContainerTreeViewDUClass = getContainerTreeViewDUClass;\n//# sourceMappingURL=container.js.map"]},"metadata":{},"sourceType":"script"}