{"ast":null,"code":"import _asyncToGenerator from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import schema from'@uniswap/token-lists/src/tokenlist.schema.json';import Ajv from'ajv';import addFormats from'ajv-formats';import uriToHttp from'./uriToHttp';const tokenListValidator=addFormats(new Ajv({allErrors:true})).compile(schema);/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */export default function getTokenList(_x){return _getTokenList.apply(this,arguments);}function _getTokenList(){_getTokenList=_asyncToGenerator(function*(listUrl){const urls=uriToHttp(listUrl);for(let i=0;i<urls.length;i++){const url=urls[i];const isLast=i===urls.length-1;let response;try{response=yield fetch(url);}catch(error){console.debug('Failed to fetch list',listUrl,error);if(isLast)throw new Error(\"Failed to download list \".concat(listUrl));continue;}if(!response.ok){if(isLast)throw new Error(\"Failed to download list \".concat(listUrl));continue;}const json=yield response.json();if(!tokenListValidator(json)){var _tokenListValidator$e,_tokenListValidator$e2;const validationErrors=(_tokenListValidator$e=(_tokenListValidator$e2=tokenListValidator.errors)===null||_tokenListValidator$e2===void 0?void 0:_tokenListValidator$e2.reduce((memo,error)=>{var _error$message;const add=\"\".concat(error.instancePath,\" \").concat((_error$message=error.message)!==null&&_error$message!==void 0?_error$message:'');return memo.length>0?\"\".concat(memo,\"; \").concat(add):\"\".concat(add);},''))!==null&&_tokenListValidator$e!==void 0?_tokenListValidator$e:'unknown error';throw new Error(\"Token list failed validation: \".concat(validationErrors));}return json;}throw new Error('Unrecognized list URL protocol.');});return _getTokenList.apply(this,arguments);}","map":null,"metadata":{},"sourceType":"module"}