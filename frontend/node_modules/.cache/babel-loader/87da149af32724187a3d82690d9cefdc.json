{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.celoReactReducer = void 0;\nconst logger_1 = require(\"./utils/logger\");\nfunction celoReactReducer(state, action) {\n  switch (action.type) {\n    case 'decrementPendingActionCount':\n      return Object.assign(Object.assign({}, state), {\n        pendingActionCount: state.pendingActionCount - 1\n      });\n    case 'setAddress':\n      if (action.payload === state.address) {\n        return state;\n      }\n      return Object.assign(Object.assign({}, state), {\n        address: action.payload\n      });\n    case 'setWalletChainId':\n      return Object.assign(Object.assign({}, state), {\n        walletChainId: action.payload\n      });\n    case 'setNetwork':\n      if (action.payload === state.network) {\n        return state;\n      }\n      return Object.assign(Object.assign({}, state), {\n        network: action.payload\n      });\n    case 'setNetworkByName':\n      {\n        const network = state.networks.find(net => net.name === action.payload);\n        if (network) {\n          return Object.assign(Object.assign({}, state), {\n            network\n          });\n        }\n        return state;\n      }\n    case 'setFeeCurrency':\n      if (action.payload === state.feeCurrency) {\n        return state;\n      }\n      return Object.assign(Object.assign({}, state), {\n        feeCurrency: action.payload\n      });\n    case 'initialisedConnector':\n      {\n        return Object.assign(Object.assign({}, state), {\n          connector: action.payload\n        });\n      }\n    case 'connect':\n      {\n        const network = state.networks.find(net => net.name === action.payload.networkName);\n        return Object.assign(Object.assign({}, state), {\n          address: action.payload.address,\n          network: network,\n          walletChainId: action.payload.walletChainId\n        });\n      }\n    case 'disconnect':\n      return Object.assign(Object.assign({}, state), {\n        address: null\n      });\n    default:\n      // This checks to see if the action type is `set<fieldname>`\n      if (action.type.slice(0, 3) === 'set') {\n        // This builds the proper camel-case field name from the action type\n        // e.g., setFieldName -> fieldName\n        const key = \"\".concat(action.type.charAt(3).toLowerCase()).concat(action.type.slice(4));\n        return Object.assign(Object.assign({}, state), {\n          [key]: action.payload\n        });\n      } else {\n        (0, logger_1.getApplicationLogger)().error('[reducer]', new Error(\"Unrecognized action type \".concat(action.type)));\n      }\n      return state;\n  }\n}\nexports.celoReactReducer = celoReactReducer;","map":null,"metadata":{},"sourceType":"script"}