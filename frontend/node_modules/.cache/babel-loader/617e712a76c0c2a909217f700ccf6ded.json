{"ast":null,"code":"'use strict';\n\nconst ErrorReportingMixinBase = require('./mixin-base');\nconst ErrorReportingTokenizerMixin = require('./tokenizer-mixin');\nconst LocationInfoTokenizerMixin = require('../location-info/tokenizer-mixin');\nconst Mixin = require('../../utils/mixin');\nclass ErrorReportingParserMixin extends ErrorReportingMixinBase {\n  constructor(parser, opts) {\n    super(parser, opts);\n    this.opts = opts;\n    this.ctLoc = null;\n    this.locBeforeToken = false;\n  }\n  _setErrorLocation(err) {\n    if (this.ctLoc) {\n      err.startLine = this.ctLoc.startLine;\n      err.startCol = this.ctLoc.startCol;\n      err.startOffset = this.ctLoc.startOffset;\n      err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;\n      err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;\n      err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;\n    }\n  }\n  _getOverriddenMethods(mxn, orig) {\n    return {\n      _bootstrap(document, fragmentContext) {\n        orig._bootstrap.call(this, document, fragmentContext);\n        Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);\n        Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n      },\n      _processInputToken(token) {\n        mxn.ctLoc = token.location;\n        orig._processInputToken.call(this, token);\n      },\n      _err(code, options) {\n        mxn.locBeforeToken = options && options.beforeToken;\n        mxn._reportError(code);\n      }\n    };\n  }\n}\nmodule.exports = ErrorReportingParserMixin;","map":null,"metadata":{},"sourceType":"script"}