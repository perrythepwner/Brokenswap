{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListCompositeType = void 0;\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nconst listComposite_1 = require(\"../view/listComposite\");\nconst listComposite_2 = require(\"../viewDU/listComposite\");\nconst array_1 = require(\"./array\");\n/**\n * List: ordered variable-length homogeneous collection, limited to N values\n *\n * Array of Composite type:\n * - Composite types always take at least one chunk\n * - Composite types are always returned as views\n */\nclass ListCompositeType extends array_1.ArrayType {\n  constructor(elementType, limit, opts) {\n    var _opts$typeName;\n    super(elementType);\n    this.elementType = elementType;\n    this.limit = limit;\n    this.itemsPerChunk = 1;\n    this.fixedSize = null;\n    this.isList = true;\n    this.isViewMutable = true;\n    this.defaultLen = 0;\n    if (elementType.isBasic) throw Error(\"elementType must not be basic\");\n    if (limit === 0) throw Error(\"List limit must be > 0\");\n    this.typeName = (_opts$typeName = opts === null || opts === void 0 ? void 0 : opts.typeName) !== null && _opts$typeName !== void 0 ? _opts$typeName : \"List[\".concat(elementType.typeName, \", \").concat(limit, \"]\");\n    this.maxChunkCount = this.limit;\n    this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n    // Depth includes the extra level for the length node\n    this.depth = this.chunkDepth + 1;\n    this.minSize = 0;\n    this.maxSize = arrayComposite_1.maxSizeArrayComposite(elementType, this.limit);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static named(elementType, limit, opts) {\n    return new (named_1.namedClass(ListCompositeType, opts.typeName))(elementType, limit, opts);\n  }\n  getView(tree) {\n    return new listComposite_1.ListCompositeTreeView(this, tree);\n  }\n  getViewDU(node, cache) {\n    // cache type should be validated (if applicate) in the view\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new listComposite_2.ListCompositeTreeViewDU(this, node, cache);\n  }\n  commitView(view) {\n    return view.node;\n  }\n  commitViewDU(view) {\n    view.commit();\n    return view.node;\n  }\n  cacheOfViewDU(view) {\n    return view.cache;\n  }\n  // Serialization + deserialization\n  value_serializedSize(value) {\n    return arrayComposite_1.value_serializedSizeArrayComposite(this.elementType, value.length, value);\n  }\n  value_serializeToBytes(output, offset, value) {\n    return arrayComposite_1.value_serializeToBytesArrayComposite(this.elementType, value.length, output, offset, value);\n  }\n  value_deserializeFromBytes(data, start, end) {\n    return arrayComposite_1.value_deserializeFromBytesArrayComposite(this.elementType, data, start, end, this);\n  }\n  tree_serializedSize(node) {\n    const chunksNode = this.tree_getChunksNode(node);\n    const length = this.tree_getLength(node);\n    return arrayComposite_1.tree_serializedSizeArrayComposite(this.elementType, length, this.chunkDepth, chunksNode);\n  }\n  tree_serializeToBytes(output, offset, node) {\n    const chunksNode = this.tree_getChunksNode(node);\n    const length = this.tree_getLength(node);\n    return arrayComposite_1.tree_serializeToBytesArrayComposite(this.elementType, length, this.chunkDepth, chunksNode, output, offset);\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    return arrayComposite_1.tree_deserializeFromBytesArrayComposite(this.elementType, this.chunkDepth, data, start, end, this);\n  }\n  // Helpers for TreeView\n  tree_getLength(node) {\n    return arrayBasic_1.getLengthFromRootNode(node);\n  }\n  tree_setLength(tree, length) {\n    tree.rootNode = arrayBasic_1.addLengthNode(tree.rootNode.left, length);\n  }\n  tree_getChunksNode(node) {\n    return node.left;\n  }\n  tree_setChunksNode(rootNode, chunksNode, newLength) {\n    return arrayBasic_1.setChunksNode(rootNode, chunksNode, newLength);\n  }\n  // Merkleization\n  hashTreeRoot(value) {\n    return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n  }\n  getRoots(value) {\n    return arrayComposite_1.value_getRootsArrayComposite(this.elementType, value.length, value);\n  }\n}\nexports.ListCompositeType = ListCompositeType;","map":{"version":3,"sources":["../../src/type/listComposite.ts"],"names":[],"mappings":";;;;;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAGA,MAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAWA,MAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAQA;;;;;;AAMG;AACH,MAAa,iBAIX,SAAQ,OAAA,CAAA,SAAgG,CAAA;EAexG,WAAA,CAAqB,WAAwB,EAAW,KAAa,EAAE,IAAwB,EAAA;IAAA,IAAA,cAAA;IAC7F,KAAK,CAAC,WAAW,CAAC;IADC,IAAA,CAAA,WAAW,GAAX,WAAW;IAAwB,IAAA,CAAA,KAAK,GAAL,KAAK;IAXpD,IAAA,CAAA,aAAa,GAAG,CAAC;IAIjB,IAAA,CAAA,SAAS,GAAG,IAAI;IAGhB,IAAA,CAAA,MAAM,GAAG,IAAI;IACb,IAAA,CAAA,aAAa,GAAG,IAAI;IACV,IAAA,CAAA,UAAU,GAAG,CAAC;IAK/B,IAAI,WAAW,CAAC,OAAO,EAAE,MAAM,KAAK,CAAC,+BAA+B,CAAC;IACrE,IAAI,KAAK,KAAK,CAAC,EAAE,MAAM,KAAK,CAAC,wBAAwB,CAAC;IAEtD,IAAI,CAAC,QAAQ,IAAA,cAAA,GAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,cAAA,cAAA,cAAA,cAAA,WAAA,MAAA,CAAY,WAAW,CAAC,QAAQ,QAAA,MAAA,CAAK,KAAK,MAAG;IAC3E,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK;IAC/B,IAAI,CAAC,UAAU,GAAG,WAAA,CAAA,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC;IACtD;IACA,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC;IAChC,IAAI,CAAC,OAAO,GAAG,CAAC;IAChB,IAAI,CAAC,OAAO,GAAG,gBAAA,CAAA,qBAAqB,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC;EAC/D;EAEA;EACA,OAAO,KAAK,CACV,WAAwB,EACxB,KAAa,EACb,IAA4C,EAAA;IAE5C,OAAO,KAAK,OAAA,CAAA,UAAU,CAAC,iBAAiB,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC;EACrF;EAEA,OAAO,CAAC,IAAU,EAAA;IAChB,OAAO,IAAI,eAAA,CAAA,qBAAqB,CAAC,IAAI,EAAE,IAAI,CAAC;EAC9C;EAEA,SAAS,CAAC,IAAU,EAAE,KAAe,EAAA;IACnC;IACA;IACA,OAAO,IAAI,eAAA,CAAA,uBAAuB,CAAC,IAAI,EAAE,IAAI,EAAE,KAAY,CAAC;EAC9D;EAEA,UAAU,CAAC,IAAwC,EAAA;IACjD,OAAO,IAAI,CAAC,IAAI;EAClB;EAEA,YAAY,CAAC,IAA0C,EAAA;IACrD,IAAI,CAAC,MAAM,CAAA,CAAE;IACb,OAAO,IAAI,CAAC,IAAI;EAClB;EAEA,aAAa,CAAC,IAA0C,EAAA;IACtD,OAAO,IAAI,CAAC,KAAK;EACnB;EAEA;EAEA,oBAAoB,CAAC,KAA6B,EAAA;IAChD,OAAO,gBAAA,CAAA,kCAAkC,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC;EAClF;EAEA,sBAAsB,CAAC,MAAiB,EAAE,MAAc,EAAE,KAA6B,EAAA;IACrF,OAAO,gBAAA,CAAA,oCAAoC,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC;EACpG;EAEA,0BAA0B,CAAC,IAAe,EAAE,KAAa,EAAE,GAAW,EAAA;IACpE,OAAO,gBAAA,CAAA,wCAAwC,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC;EAC3F;EAEA,mBAAmB,CAAC,IAAU,EAAA;IAC5B,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;IAChD,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;IACxC,OAAO,gBAAA,CAAA,iCAAiC,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC;EACjG;EAEA,qBAAqB,CAAC,MAAiB,EAAE,MAAc,EAAE,IAAU,EAAA;IACjE,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;IAChD,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;IACxC,OAAO,gBAAA,CAAA,mCAAmC,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC;EACnH;EAEA,yBAAyB,CAAC,IAAe,EAAE,KAAa,EAAE,GAAW,EAAA;IACnE,OAAO,gBAAA,CAAA,uCAAuC,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC;EAC3G;EAEA;EAEA,cAAc,CAAC,IAAU,EAAA;IACvB,OAAO,YAAA,CAAA,qBAAqB,CAAC,IAAI,CAAC;EACpC;EAEA,cAAc,CAAC,IAAU,EAAE,MAAc,EAAA;IACvC,IAAI,CAAC,QAAQ,GAAG,YAAA,CAAA,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC;EAC3D;EAEA,kBAAkB,CAAC,IAAU,EAAA;IAC3B,OAAO,IAAI,CAAC,IAAI;EAClB;EAEA,kBAAkB,CAAC,QAAc,EAAE,UAAgB,EAAE,SAAkB,EAAA;IACrE,OAAO,YAAA,CAAA,aAAa,CAAC,QAAQ,EAAE,UAAU,EAAE,SAAS,CAAC;EACvD;EAEA;EAEA,YAAY,CAAC,KAA6B,EAAA;IACxC,OAAO,WAAA,CAAA,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC;EAC7D;EAEU,QAAQ,CAAC,KAA6B,EAAA;IAC9C,OAAO,gBAAA,CAAA,4BAA4B,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC;EAC5E;AAGD;AA7HD,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCompositeType = void 0;\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nconst listComposite_1 = require(\"../view/listComposite\");\nconst listComposite_2 = require(\"../viewDU/listComposite\");\nconst array_1 = require(\"./array\");\n/**\n * List: ordered variable-length homogeneous collection, limited to N values\n *\n * Array of Composite type:\n * - Composite types always take at least one chunk\n * - Composite types are always returned as views\n */\nclass ListCompositeType extends array_1.ArrayType {\n    constructor(elementType, limit, opts) {\n        super(elementType);\n        this.elementType = elementType;\n        this.limit = limit;\n        this.itemsPerChunk = 1;\n        this.fixedSize = null;\n        this.isList = true;\n        this.isViewMutable = true;\n        this.defaultLen = 0;\n        if (elementType.isBasic)\n            throw Error(\"elementType must not be basic\");\n        if (limit === 0)\n            throw Error(\"List limit must be > 0\");\n        this.typeName = opts?.typeName ?? `List[${elementType.typeName}, ${limit}]`;\n        this.maxChunkCount = this.limit;\n        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n        // Depth includes the extra level for the length node\n        this.depth = this.chunkDepth + 1;\n        this.minSize = 0;\n        this.maxSize = arrayComposite_1.maxSizeArrayComposite(elementType, this.limit);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static named(elementType, limit, opts) {\n        return new (named_1.namedClass(ListCompositeType, opts.typeName))(elementType, limit, opts);\n    }\n    getView(tree) {\n        return new listComposite_1.ListCompositeTreeView(this, tree);\n    }\n    getViewDU(node, cache) {\n        // cache type should be validated (if applicate) in the view\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new listComposite_2.ListCompositeTreeViewDU(this, node, cache);\n    }\n    commitView(view) {\n        return view.node;\n    }\n    commitViewDU(view) {\n        view.commit();\n        return view.node;\n    }\n    cacheOfViewDU(view) {\n        return view.cache;\n    }\n    // Serialization + deserialization\n    value_serializedSize(value) {\n        return arrayComposite_1.value_serializedSizeArrayComposite(this.elementType, value.length, value);\n    }\n    value_serializeToBytes(output, offset, value) {\n        return arrayComposite_1.value_serializeToBytesArrayComposite(this.elementType, value.length, output, offset, value);\n    }\n    value_deserializeFromBytes(data, start, end) {\n        return arrayComposite_1.value_deserializeFromBytesArrayComposite(this.elementType, data, start, end, this);\n    }\n    tree_serializedSize(node) {\n        const chunksNode = this.tree_getChunksNode(node);\n        const length = this.tree_getLength(node);\n        return arrayComposite_1.tree_serializedSizeArrayComposite(this.elementType, length, this.chunkDepth, chunksNode);\n    }\n    tree_serializeToBytes(output, offset, node) {\n        const chunksNode = this.tree_getChunksNode(node);\n        const length = this.tree_getLength(node);\n        return arrayComposite_1.tree_serializeToBytesArrayComposite(this.elementType, length, this.chunkDepth, chunksNode, output, offset);\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        return arrayComposite_1.tree_deserializeFromBytesArrayComposite(this.elementType, this.chunkDepth, data, start, end, this);\n    }\n    // Helpers for TreeView\n    tree_getLength(node) {\n        return arrayBasic_1.getLengthFromRootNode(node);\n    }\n    tree_setLength(tree, length) {\n        tree.rootNode = arrayBasic_1.addLengthNode(tree.rootNode.left, length);\n    }\n    tree_getChunksNode(node) {\n        return node.left;\n    }\n    tree_setChunksNode(rootNode, chunksNode, newLength) {\n        return arrayBasic_1.setChunksNode(rootNode, chunksNode, newLength);\n    }\n    // Merkleization\n    hashTreeRoot(value) {\n        return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n    }\n    getRoots(value) {\n        return arrayComposite_1.value_getRootsArrayComposite(this.elementType, value.length, value);\n    }\n}\nexports.ListCompositeType = ListCompositeType;\n//# sourceMappingURL=listComposite.js.map"]},"metadata":{},"sourceType":"script"}