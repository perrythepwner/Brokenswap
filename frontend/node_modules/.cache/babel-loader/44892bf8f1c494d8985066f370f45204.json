{"ast":null,"code":"import{useCelo,useProvider}from'@celo/react-celo';import{useEffect,useMemo}from'react';import{useDispatch,useSelector}from'react-redux';import{useAddPopup,useBlockNumber}from'../application/hooks';import{checkedTransaction,finalizeTransaction}from'./actions';export function shouldCheck(lastBlockNumber,tx){if(tx.receipt)return false;if(!tx.lastCheckedBlockNumber)return true;const blocksSinceCheck=lastBlockNumber-tx.lastCheckedBlockNumber;if(blocksSinceCheck<1)return false;const minutesPending=(new Date().getTime()-tx.addedTime)/1000/60;if(minutesPending>60){// every 10 blocks if pending for longer than an hour\nreturn blocksSinceCheck>9;}else if(minutesPending>5){// every 3 blocks if pending more than 5 minutes\nreturn blocksSinceCheck>2;}else{// otherwise every block\nreturn true;}}export default function Updater(){const{network}=useCelo();const chainId=network.chainId;const library=useProvider();const lastBlockNumber=useBlockNumber();const dispatch=useDispatch();const state=useSelector(state=>state.transactions);const transactions=useMemo(()=>{var _state$chainId;return chainId?(_state$chainId=state[chainId])!==null&&_state$chainId!==void 0?_state$chainId:{}:{};},[chainId,state]);// show popup on confirm\nconst addPopup=useAddPopup();useEffect(()=>{if(!chainId||!library||!lastBlockNumber)return;Object.keys(transactions).filter(hash=>shouldCheck(lastBlockNumber,transactions[hash])).forEach(hash=>{library.getTransactionReceipt(hash).then(receipt=>{if(receipt){var _transactions$hash;dispatch(finalizeTransaction({chainId,hash,receipt:{blockHash:receipt.blockHash,blockNumber:receipt.blockNumber,contractAddress:receipt.contractAddress,from:receipt.from,status:receipt.status,to:receipt.to,transactionHash:receipt.transactionHash,transactionIndex:receipt.transactionIndex}}));addPopup({txn:{hash,success:receipt.status===1,summary:(_transactions$hash=transactions[hash])===null||_transactions$hash===void 0?void 0:_transactions$hash.summary}},hash);}else{dispatch(checkedTransaction({chainId,hash,blockNumber:lastBlockNumber}));}}).catch(error=>{console.error(\"failed to check transaction hash: \".concat(hash),error);});});},[chainId,library,transactions,lastBlockNumber,dispatch,addPopup]);return null;}","map":{"version":3,"names":["useCelo","useProvider","useEffect","useMemo","useDispatch","useSelector","useAddPopup","useBlockNumber","checkedTransaction","finalizeTransaction","shouldCheck","lastBlockNumber","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","Updater","network","chainId","library","dispatch","state","transactions","_state$chainId","addPopup","Object","keys","filter","hash","forEach","getTransactionReceipt","then","_transactions$hash","blockHash","blockNumber","contractAddress","from","status","to","transactionHash","transactionIndex","txn","success","summary","catch","error","console","concat"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/state/transactions/updater.tsx"],"sourcesContent":["import { useCelo, useProvider } from '@celo/react-celo'\nimport { ChainId } from '@ubeswap/sdk'\nimport { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useAddPopup, useBlockNumber } from '../application/hooks'\nimport { AppDispatch, AppState } from '../index'\nimport { checkedTransaction, finalizeTransaction } from './actions'\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: { addedTime: number; receipt?: unknown; lastCheckedBlockNumber?: number }\n): boolean {\n  if (tx.receipt) return false\n  if (!tx.lastCheckedBlockNumber) return true\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber\n  if (blocksSinceCheck < 1) return false\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2\n  } else {\n    // otherwise every block\n    return true\n  }\n}\n\nexport default function Updater(): null {\n  const { network } = useCelo()\n  const chainId = network.chainId as unknown as ChainId\n  const library = useProvider()\n\n  const lastBlockNumber = useBlockNumber()\n\n  const dispatch = useDispatch<AppDispatch>()\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions)\n\n  const transactions = useMemo(() => (chainId ? state[chainId] ?? {} : {}), [chainId, state])\n\n  // show popup on confirm\n  const addPopup = useAddPopup()\n\n  useEffect(() => {\n    if (!chainId || !library || !lastBlockNumber) return\n\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        library\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                })\n              )\n\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash\n              )\n            } else {\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }))\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error)\n          })\n      })\n  }, [chainId, library, transactions, lastBlockNumber, dispatch, addPopup])\n\n  return null\n}\n"],"mappings":"AAAA,OAASA,OAAO,CAAEC,WAAW,KAAQ,kBAAkB,CAEvD,OAASC,SAAS,CAAEC,OAAO,KAAQ,OAAO,CAC1C,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CAEtD,OAASC,WAAW,CAAEC,cAAc,KAAQ,sBAAsB,CAElE,OAASC,kBAAkB,CAAEC,mBAAmB,KAAQ,WAAW,CAEnE,MAAO,SAAS,CAAAC,WAAWA,CACzBC,eAAuB,CACvBC,EAA6E,CACpE,CACT,GAAIA,EAAE,CAACC,OAAO,CAAE,MAAO,MAAK,CAC5B,GAAI,CAACD,EAAE,CAACE,sBAAsB,CAAE,MAAO,KAAI,CAC3C,KAAM,CAAAC,gBAAgB,CAAGJ,eAAe,CAAGC,EAAE,CAACE,sBAAsB,CACpE,GAAIC,gBAAgB,CAAG,CAAC,CAAE,MAAO,MAAK,CACtC,KAAM,CAAAC,cAAc,CAAG,CAAC,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAGN,EAAE,CAACO,SAAS,EAAI,IAAI,CAAG,EAAE,CACxE,GAAIH,cAAc,CAAG,EAAE,CAAE,CACvB;AACA,MAAO,CAAAD,gBAAgB,CAAG,CAAC,CAC7B,CAAC,IAAM,IAAIC,cAAc,CAAG,CAAC,CAAE,CAC7B;AACA,MAAO,CAAAD,gBAAgB,CAAG,CAAC,CAC7B,CAAC,IAAM,CACL;AACA,MAAO,KAAI,CACb,CACF,CAEA,cAAe,SAAS,CAAAK,OAAOA,CAAA,CAAS,CACtC,KAAM,CAAEC,OAAQ,CAAC,CAAGrB,OAAO,CAAC,CAAC,CAC7B,KAAM,CAAAsB,OAAO,CAAGD,OAAO,CAACC,OAA6B,CACrD,KAAM,CAAAC,OAAO,CAAGtB,WAAW,CAAC,CAAC,CAE7B,KAAM,CAAAU,eAAe,CAAGJ,cAAc,CAAC,CAAC,CAExC,KAAM,CAAAiB,QAAQ,CAAGpB,WAAW,CAAc,CAAC,CAC3C,KAAM,CAAAqB,KAAK,CAAGpB,WAAW,CAAsCoB,KAAK,EAAKA,KAAK,CAACC,YAAY,CAAC,CAE5F,KAAM,CAAAA,YAAY,CAAGvB,OAAO,CAAC,SAAAwB,cAAA,OAAO,CAAAL,OAAO,EAAAK,cAAA,CAAGF,KAAK,CAACH,OAAO,CAAC,UAAAK,cAAA,UAAAA,cAAA,CAAI,CAAC,CAAC,CAAG,CAAC,CAAC,EAAC,CAAE,CAACL,OAAO,CAAEG,KAAK,CAAC,CAAC,CAE3F;AACA,KAAM,CAAAG,QAAQ,CAAGtB,WAAW,CAAC,CAAC,CAE9BJ,SAAS,CAAC,IAAM,CACd,GAAI,CAACoB,OAAO,EAAI,CAACC,OAAO,EAAI,CAACZ,eAAe,CAAE,OAE9CkB,MAAM,CAACC,IAAI,CAACJ,YAAY,CAAC,CACtBK,MAAM,CAAEC,IAAI,EAAKtB,WAAW,CAACC,eAAe,CAAEe,YAAY,CAACM,IAAI,CAAC,CAAC,CAAC,CAClEC,OAAO,CAAED,IAAI,EAAK,CACjBT,OAAO,CACJW,qBAAqB,CAACF,IAAI,CAAC,CAC3BG,IAAI,CAAEtB,OAAO,EAAK,CACjB,GAAIA,OAAO,CAAE,KAAAuB,kBAAA,CACXZ,QAAQ,CACNf,mBAAmB,CAAC,CAClBa,OAAO,CACPU,IAAI,CACJnB,OAAO,CAAE,CACPwB,SAAS,CAAExB,OAAO,CAACwB,SAAS,CAC5BC,WAAW,CAAEzB,OAAO,CAACyB,WAAW,CAChCC,eAAe,CAAE1B,OAAO,CAAC0B,eAAe,CACxCC,IAAI,CAAE3B,OAAO,CAAC2B,IAAI,CAClBC,MAAM,CAAE5B,OAAO,CAAC4B,MAAM,CACtBC,EAAE,CAAE7B,OAAO,CAAC6B,EAAE,CACdC,eAAe,CAAE9B,OAAO,CAAC8B,eAAe,CACxCC,gBAAgB,CAAE/B,OAAO,CAAC+B,gBAC5B,CACF,CAAC,CACH,CAAC,CAEDhB,QAAQ,CACN,CACEiB,GAAG,CAAE,CACHb,IAAI,CACJc,OAAO,CAAEjC,OAAO,CAAC4B,MAAM,GAAK,CAAC,CAC7BM,OAAO,EAAAX,kBAAA,CAAEV,YAAY,CAACM,IAAI,CAAC,UAAAI,kBAAA,iBAAlBA,kBAAA,CAAoBW,OAC/B,CACF,CAAC,CACDf,IACF,CAAC,CACH,CAAC,IAAM,CACLR,QAAQ,CAAChB,kBAAkB,CAAC,CAAEc,OAAO,CAAEU,IAAI,CAAEM,WAAW,CAAE3B,eAAgB,CAAC,CAAC,CAAC,CAC/E,CACF,CAAC,CAAC,CACDqC,KAAK,CAAEC,KAAK,EAAK,CAChBC,OAAO,CAACD,KAAK,sCAAAE,MAAA,CAAsCnB,IAAI,EAAIiB,KAAK,CAAC,CACnE,CAAC,CAAC,CACN,CAAC,CAAC,CACN,CAAC,CAAE,CAAC3B,OAAO,CAAEC,OAAO,CAAEG,YAAY,CAAEf,eAAe,CAAEa,QAAQ,CAAEI,QAAQ,CAAC,CAAC,CAEzE,MAAO,KAAI,CACb"},"metadata":{},"sourceType":"module"}