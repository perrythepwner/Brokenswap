{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n  message: \"must match exactly one schema in oneOf\",\n  params: _ref => {\n    let {\n      params: _params\n    } = _ref;\n    return (0, codegen_1._)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"{passingSchemas: \", \"}\"])), _params.passing);\n  }\n};\nconst def = {\n  keyword: \"oneOf\",\n  schemaType: \"array\",\n  trackErrors: true,\n  error,\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      parentSchema,\n      it\n    } = cxt;\n    /* istanbul ignore if */\n    if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\");\n    if (it.opts.discriminator && parentSchema.discriminator) return;\n    const schArr = schema;\n    const valid = gen.let(\"valid\", false);\n    const passing = gen.let(\"passing\", null);\n    const schValid = gen.name(\"_valid\");\n    cxt.setParams({\n      passing\n    });\n    // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas\n    gen.block(validateOneOf);\n    cxt.result(valid, () => cxt.reset(), () => cxt.error(true));\n    function validateOneOf() {\n      schArr.forEach((sch, i) => {\n        let schCxt;\n        if ((0, util_1.alwaysValidSchema)(it, sch)) {\n          gen.var(schValid, true);\n        } else {\n          schCxt = cxt.subschema({\n            keyword: \"oneOf\",\n            schemaProp: i,\n            compositeRule: true\n          }, schValid);\n        }\n        if (i > 0) {\n          gen.if((0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\", \" && \", \"\"])), schValid, valid)).assign(valid, false).assign(passing, (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"[\", \", \", \"]\"])), passing, i)).else();\n        }\n        gen.if(schValid, () => {\n          gen.assign(valid, true);\n          gen.assign(passing, i);\n          if (schCxt) cxt.mergeEvaluated(schCxt, codegen_1.Name);\n        });\n      });\n    }\n  }\n};\nexports.default = def;","map":null,"metadata":{},"sourceType":"script"}