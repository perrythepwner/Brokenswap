{"ast":null,"code":"import { Trie } from \"@wry/trie\";\nimport { Cache } from \"./cache.js\";\nimport { Entry } from \"./entry.js\";\nimport { parentEntrySlot } from \"./context.js\";\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport { bindContext, noContext, nonReactive, setTimeout, asyncFromGen } from \"./context.js\";\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep } from \"./dep.js\";\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nlet defaultKeyTrie;\nexport function defaultMakeCacheKey() {\n  const trie = defaultKeyTrie || (defaultKeyTrie = new Trie(typeof WeakMap === \"function\"));\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return trie.lookupArray(args);\n}\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { Trie as KeyTrie };\nconst caches = new Set();\nexport function wrap(originalFunction) {\n  let {\n    max = Math.pow(2, 16),\n    makeCacheKey = defaultMakeCacheKey,\n    keyArgs,\n    subscribe\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object.create(null);\n  const cache = new Cache(max, entry => entry.dispose());\n  const optimistic = function optimistic() {\n    const key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments);\n    }\n    let entry = cache.get(key);\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.subscribe = subscribe;\n      // Give the Entry the ability to trigger cache.delete(key), even though\n      // the Entry itself does not know about key or cache.\n      entry.forget = () => cache.delete(key);\n    }\n    const value = entry.recompute(Array.prototype.slice.call(arguments));\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n    caches.add(cache);\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (!parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n    return value;\n  };\n  Object.defineProperty(optimistic, \"size\", {\n    get() {\n      return cache[\"map\"].size;\n    },\n    configurable: false,\n    enumerable: false\n  });\n  Object.freeze(optimistic.options = {\n    max,\n    makeCacheKey,\n    keyArgs,\n    subscribe\n  });\n  function dirtyKey(key) {\n    const entry = cache.get(key);\n    if (entry) {\n      entry.setDirty();\n    }\n  }\n  optimistic.dirtyKey = dirtyKey;\n  optimistic.dirty = function dirty() {\n    dirtyKey(makeCacheKey.apply(null, arguments));\n  };\n  function peekKey(key) {\n    const entry = cache.get(key);\n    if (entry) {\n      return entry.peek();\n    }\n  }\n  optimistic.peekKey = peekKey;\n  optimistic.peek = function peek() {\n    return peekKey(makeCacheKey.apply(null, arguments));\n  };\n  function forgetKey(key) {\n    return cache.delete(key);\n  }\n  optimistic.forgetKey = forgetKey;\n  optimistic.forget = function forget() {\n    return forgetKey(makeCacheKey.apply(null, arguments));\n  };\n  optimistic.makeCacheKey = makeCacheKey;\n  optimistic.getKey = keyArgs ? function getKey() {\n    return makeCacheKey.apply(null, keyArgs.apply(null, arguments));\n  } : makeCacheKey;\n  return Object.freeze(optimistic);\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Trie } from \"@wry/trie\";\nimport { Cache } from \"./cache.js\";\nimport { Entry } from \"./entry.js\";\nimport { parentEntrySlot } from \"./context.js\";\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport { bindContext, noContext, nonReactive, setTimeout, asyncFromGen, } from \"./context.js\";\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep } from \"./dep.js\";\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nlet defaultKeyTrie;\nexport function defaultMakeCacheKey(...args) {\n    const trie = defaultKeyTrie || (defaultKeyTrie = new Trie(typeof WeakMap === \"function\"));\n    return trie.lookupArray(args);\n}\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { Trie as KeyTrie };\nconst caches = new Set();\nexport function wrap(originalFunction, { max = Math.pow(2, 16), makeCacheKey = defaultMakeCacheKey, keyArgs, subscribe, } = Object.create(null)) {\n    const cache = new Cache(max, entry => entry.dispose());\n    const optimistic = function () {\n        const key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);\n        if (key === void 0) {\n            return originalFunction.apply(null, arguments);\n        }\n        let entry = cache.get(key);\n        if (!entry) {\n            cache.set(key, entry = new Entry(originalFunction));\n            entry.subscribe = subscribe;\n            // Give the Entry the ability to trigger cache.delete(key), even though\n            // the Entry itself does not know about key or cache.\n            entry.forget = () => cache.delete(key);\n        }\n        const value = entry.recompute(Array.prototype.slice.call(arguments));\n        // Move this entry to the front of the least-recently used queue,\n        // since we just finished computing its value.\n        cache.set(key, entry);\n        caches.add(cache);\n        // Clean up any excess entries in the cache, but only if there is no\n        // active parent entry, meaning we're not in the middle of a larger\n        // computation that might be flummoxed by the cleaning.\n        if (!parentEntrySlot.hasValue()) {\n            caches.forEach(cache => cache.clean());\n            caches.clear();\n        }\n        return value;\n    };\n    Object.defineProperty(optimistic, \"size\", {\n        get() {\n            return cache[\"map\"].size;\n        },\n        configurable: false,\n        enumerable: false,\n    });\n    Object.freeze(optimistic.options = {\n        max,\n        makeCacheKey,\n        keyArgs,\n        subscribe,\n    });\n    function dirtyKey(key) {\n        const entry = cache.get(key);\n        if (entry) {\n            entry.setDirty();\n        }\n    }\n    optimistic.dirtyKey = dirtyKey;\n    optimistic.dirty = function dirty() {\n        dirtyKey(makeCacheKey.apply(null, arguments));\n    };\n    function peekKey(key) {\n        const entry = cache.get(key);\n        if (entry) {\n            return entry.peek();\n        }\n    }\n    optimistic.peekKey = peekKey;\n    optimistic.peek = function peek() {\n        return peekKey(makeCacheKey.apply(null, arguments));\n    };\n    function forgetKey(key) {\n        return cache.delete(key);\n    }\n    optimistic.forgetKey = forgetKey;\n    optimistic.forget = function forget() {\n        return forgetKey(makeCacheKey.apply(null, arguments));\n    };\n    optimistic.makeCacheKey = makeCacheKey;\n    optimistic.getKey = keyArgs ? function getKey() {\n        return makeCacheKey.apply(null, keyArgs.apply(null, arguments));\n    } : makeCacheKey;\n    return Object.freeze(optimistic);\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}