{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VectorBasicType = void 0;\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst arrayBasic_2 = require(\"../view/arrayBasic\");\nconst arrayBasic_3 = require(\"../viewDU/arrayBasic\");\nconst array_1 = require(\"./array\");\n/**\n * Vector: Ordered fixed-length homogeneous collection, with N values\n *\n * Array of Basic type:\n * - Basic types are max 32 bytes long so multiple values may be packed in the same node.\n * - Basic types are never returned in a view wrapper, but their value representation\n */\nclass VectorBasicType extends array_1.ArrayType {\n  constructor(elementType, length, opts) {\n    var _opts$typeName;\n    super(elementType);\n    this.elementType = elementType;\n    this.length = length;\n    this.isList = false;\n    this.isViewMutable = true;\n    if (!elementType.isBasic) throw Error(\"elementType must be basic\");\n    if (length === 0) throw Error(\"Vector length must be > 0\");\n    this.typeName = (_opts$typeName = opts === null || opts === void 0 ? void 0 : opts.typeName) !== null && _opts$typeName !== void 0 ? _opts$typeName : \"Vector[\".concat(elementType.typeName, \", \").concat(length, \"]\");\n    // TODO Check that itemsPerChunk is an integer\n    this.itemsPerChunk = 32 / elementType.byteLength;\n    this.maxChunkCount = Math.ceil(length * elementType.byteLength / 32);\n    this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n    this.depth = this.chunkDepth;\n    this.fixedSize = length * elementType.byteLength;\n    this.minSize = this.fixedSize;\n    this.maxSize = this.fixedSize;\n    this.defaultLen = length;\n  }\n  static named(elementType, limit, opts) {\n    return new (named_1.namedClass(VectorBasicType, opts.typeName))(elementType, limit, opts);\n  }\n  getView(tree) {\n    return new arrayBasic_2.ArrayBasicTreeView(this, tree);\n  }\n  getViewDU(node, cache) {\n    // cache type should be validated (if applicate) in the view\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new arrayBasic_3.ArrayBasicTreeViewDU(this, node, cache);\n  }\n  commitView(view) {\n    return view.node;\n  }\n  commitViewDU(view) {\n    view.commit();\n    return view.node;\n  }\n  cacheOfViewDU(view) {\n    return view.cache;\n  }\n  // Serialization + deserialization\n  value_serializedSize() {\n    return this.fixedSize;\n  }\n  value_serializeToBytes(output, offset, value) {\n    return arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, this.length, output, offset, value);\n  }\n  value_deserializeFromBytes(data, start, end) {\n    return arrayBasic_1.value_deserializeFromBytesArrayBasic(this.elementType, data, start, end, this);\n  }\n  tree_serializedSize() {\n    return this.fixedSize;\n  }\n  tree_serializeToBytes(output, offset, node) {\n    return arrayBasic_1.tree_serializeToBytesArrayBasic(this.elementType, this.length, this.depth, output, offset, node);\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    return arrayBasic_1.tree_deserializeFromBytesArrayBasic(this.elementType, this.depth, data, start, end, this);\n  }\n  // Helpers for TreeView\n  tree_getLength() {\n    return this.length;\n  }\n  tree_setLength() {\n    // Vector's length is immutable, ignore this call\n  }\n  tree_getChunksNode(node) {\n    return node;\n  }\n  tree_setChunksNode(rootNode, chunksNode) {\n    return chunksNode;\n  }\n  // Merkleization\n  getRoots(value) {\n    const uint8Array = new Uint8Array(this.fixedSize);\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, this.length, {\n      uint8Array,\n      dataView\n    }, 0, value);\n    return merkleize_1.splitIntoRootChunks(uint8Array);\n  }\n}\nexports.VectorBasicType = VectorBasicType;","map":null,"metadata":{},"sourceType":"script"}