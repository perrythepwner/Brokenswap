{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar color_1 = require(\"../color\");\nvar util_1 = require(\"../util\");\nvar defaults = require(\"lodash/defaults\");\nvar DefaultOpts = {\n  targetDarkLuma: 0.26,\n  maxDarkLuma: 0.45,\n  minLightLuma: 0.55,\n  targetLightLuma: 0.74,\n  minNormalLuma: 0.3,\n  targetNormalLuma: 0.5,\n  maxNormalLuma: 0.7,\n  targetMutesSaturation: 0.3,\n  maxMutesSaturation: 0.4,\n  targetVibrantSaturation: 1.0,\n  minVibrantSaturation: 0.35,\n  weightSaturation: 3,\n  weightLuma: 6.5,\n  weightPopulation: 0.5\n};\nfunction _findMaxPopulation(swatches) {\n  var p = 0;\n  swatches.forEach(function (s) {\n    p = Math.max(p, s.getPopulation());\n  });\n  return p;\n}\nfunction _isAlreadySelected(palette, s) {\n  return palette.Vibrant === s || palette.DarkVibrant === s || palette.LightVibrant === s || palette.Muted === s || palette.DarkMuted === s || palette.LightMuted === s;\n}\nfunction _createComparisonValue(saturation, targetSaturation, luma, targetLuma, population, maxPopulation, opts) {\n  function weightedMean() {\n    var values = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      values[_i] = arguments[_i];\n    }\n    var sum = 0;\n    var weightSum = 0;\n    for (var i = 0; i < values.length; i += 2) {\n      var value = values[i];\n      var weight = values[i + 1];\n      sum += value * weight;\n      weightSum += weight;\n    }\n    return sum / weightSum;\n  }\n  function invertDiff(value, targetValue) {\n    return 1 - Math.abs(value - targetValue);\n  }\n  return weightedMean(invertDiff(saturation, targetSaturation), opts.weightSaturation, invertDiff(luma, targetLuma), opts.weightLuma, population / maxPopulation, opts.weightPopulation);\n}\nfunction _findColorVariation(palette, swatches, maxPopulation, targetLuma, minLuma, maxLuma, targetSaturation, minSaturation, maxSaturation, opts) {\n  var max = null;\n  var maxValue = 0;\n  swatches.forEach(function (swatch) {\n    var _a = swatch.getHsl(),\n      s = _a[1],\n      l = _a[2];\n    if (s >= minSaturation && s <= maxSaturation && l >= minLuma && l <= maxLuma && !_isAlreadySelected(palette, swatch)) {\n      var value = _createComparisonValue(s, targetSaturation, l, targetLuma, swatch.getPopulation(), maxPopulation, opts);\n      if (max === null || value > maxValue) {\n        max = swatch;\n        maxValue = value;\n      }\n    }\n  });\n  return max;\n}\nfunction _generateVariationColors(swatches, maxPopulation, opts) {\n  var palette = {};\n  // mVibrantSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n  palette.Vibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetNormalLuma, opts.minNormalLuma, opts.maxNormalLuma, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts);\n  // mLightVibrantSwatch = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n  palette.LightVibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetLightLuma, opts.minLightLuma, 1, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts);\n  // mDarkVibrantSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n  palette.DarkVibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetDarkLuma, 0, opts.maxDarkLuma, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts);\n  // mMutedSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n  palette.Muted = _findColorVariation(palette, swatches, maxPopulation, opts.targetNormalLuma, opts.minNormalLuma, opts.maxNormalLuma, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n  // mLightMutedColor = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n  palette.LightMuted = _findColorVariation(palette, swatches, maxPopulation, opts.targetLightLuma, opts.minLightLuma, 1, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n  // mDarkMutedSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n  palette.DarkMuted = _findColorVariation(palette, swatches, maxPopulation, opts.targetDarkLuma, 0, opts.maxDarkLuma, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n  return palette;\n}\nfunction _generateEmptySwatches(palette, maxPopulation, opts) {\n  if (palette.Vibrant === null && palette.DarkVibrant === null && palette.LightVibrant === null) {\n    if (palette.DarkVibrant === null && palette.DarkMuted !== null) {\n      var _a = palette.DarkMuted.getHsl(),\n        h = _a[0],\n        s = _a[1],\n        l = _a[2];\n      l = opts.targetDarkLuma;\n      palette.DarkVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n    if (palette.LightVibrant === null && palette.LightMuted !== null) {\n      var _b = palette.LightMuted.getHsl(),\n        h = _b[0],\n        s = _b[1],\n        l = _b[2];\n      l = opts.targetDarkLuma;\n      palette.DarkVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n  }\n  if (palette.Vibrant === null && palette.DarkVibrant !== null) {\n    var _c = palette.DarkVibrant.getHsl(),\n      h = _c[0],\n      s = _c[1],\n      l = _c[2];\n    l = opts.targetNormalLuma;\n    palette.Vibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  } else if (palette.Vibrant === null && palette.LightVibrant !== null) {\n    var _d = palette.LightVibrant.getHsl(),\n      h = _d[0],\n      s = _d[1],\n      l = _d[2];\n    l = opts.targetNormalLuma;\n    palette.Vibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n  if (palette.DarkVibrant === null && palette.Vibrant !== null) {\n    var _e = palette.Vibrant.getHsl(),\n      h = _e[0],\n      s = _e[1],\n      l = _e[2];\n    l = opts.targetDarkLuma;\n    palette.DarkVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n  if (palette.LightVibrant === null && palette.Vibrant !== null) {\n    var _f = palette.Vibrant.getHsl(),\n      h = _f[0],\n      s = _f[1],\n      l = _f[2];\n    l = opts.targetLightLuma;\n    palette.LightVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n  if (palette.Muted === null && palette.Vibrant !== null) {\n    var _g = palette.Vibrant.getHsl(),\n      h = _g[0],\n      s = _g[1],\n      l = _g[2];\n    l = opts.targetMutesSaturation;\n    palette.Muted = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n  if (palette.DarkMuted === null && palette.DarkVibrant !== null) {\n    var _h = palette.DarkVibrant.getHsl(),\n      h = _h[0],\n      s = _h[1],\n      l = _h[2];\n    l = opts.targetMutesSaturation;\n    palette.DarkMuted = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n  if (palette.LightMuted === null && palette.LightVibrant !== null) {\n    var _j = palette.LightVibrant.getHsl(),\n      h = _j[0],\n      s = _j[1],\n      l = _j[2];\n    l = opts.targetMutesSaturation;\n    palette.LightMuted = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n}\nvar DefaultGenerator = function DefaultGenerator(swatches, opts) {\n  opts = defaults({}, opts, DefaultOpts);\n  var maxPopulation = _findMaxPopulation(swatches);\n  var palette = _generateVariationColors(swatches, maxPopulation, opts);\n  _generateEmptySwatches(palette, maxPopulation, opts);\n  return palette;\n};\nexports.default = DefaultGenerator;","map":{"version":3,"sources":["../../src/generator/default.ts"],"names":[],"mappings":";;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAEA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAmBA,IAAM,WAAW,GAA4B;EAC3C,cAAc,EAAE,IAAI;EACpB,WAAW,EAAE,IAAI;EACjB,YAAY,EAAE,IAAI;EAClB,eAAe,EAAE,IAAI;EACrB,aAAa,EAAE,GAAG;EAClB,gBAAgB,EAAE,GAAG;EACrB,aAAa,EAAE,GAAG;EAClB,qBAAqB,EAAE,GAAG;EAC1B,kBAAkB,EAAE,GAAG;EACvB,uBAAuB,EAAE,GAAG;EAC5B,oBAAoB,EAAE,IAAI;EAC1B,gBAAgB,EAAE,CAAC;EACnB,UAAU,EAAE,GAAG;EACf,gBAAgB,EAAE;CACnB;AAED,SAAS,kBAAkB,CAAE,QAAuB,EAAA;EAClD,IAAI,CAAC,GAAG,CAAC;EAET,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,EAAA;IACjB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,aAAa,CAAA,CAAE,CAAC;EACpC,CAAC,CAAC;EAEF,OAAO,CAAC;AACV;AAEA,SAAS,kBAAkB,CAAE,OAAgB,EAAE,CAAS,EAAA;EACtD,OAAO,OAAO,CAAC,OAAO,KAAK,CAAC,IAC1B,OAAO,CAAC,WAAW,KAAK,CAAC,IACzB,OAAO,CAAC,YAAY,KAAK,CAAC,IAC1B,OAAO,CAAC,KAAK,KAAK,CAAC,IACnB,OAAO,CAAC,SAAS,KAAK,CAAC,IACvB,OAAO,CAAC,UAAU,KAAK,CAAC;AAC5B;AAEA,SAAS,sBAAsB,CAC7B,UAAkB,EAAE,gBAAwB,EAC5C,IAAY,EAAE,UAAkB,EAChC,UAAkB,EAAE,aAAqB,EAAE,IAA6B,EAAA;EACxE,SAAS,YAAY,CAAA,EAAA;IAAE,IAAA,MAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAmB,EAAnB,EAAA,GAAA,SAAA,CAAA,MAAmB,EAAnB,EAAA,EAAmB,EAAA;MAAnB,MAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IACrB,IAAI,GAAG,GAAG,CAAC;IACX,IAAI,SAAS,GAAG,CAAC;IACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;MACzC,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC;MACrB,IAAI,MAAM,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;MAC1B,GAAG,IAAI,KAAK,GAAG,MAAM;MACrB,SAAS,IAAI,MAAM;IACpB;IAED,OAAO,GAAG,GAAG,SAAS;EACxB;EAEA,SAAS,UAAU,CAAE,KAAa,EAAE,WAAmB,EAAA;IACrD,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,WAAW,CAAC;EAC1C;EAEA,OAAO,YAAY,CACjB,UAAU,CAAC,UAAU,EAAE,gBAAgB,CAAC,EAAE,IAAI,CAAC,gBAAgB,EAC/D,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE,IAAI,CAAC,UAAU,EAC7C,UAAU,GAAG,aAAa,EAAE,IAAI,CAAC,gBAAgB,CAClD;AACH;AAEA,SAAS,mBAAmB,CAAE,OAAgB,EAAE,QAAuB,EAAE,aAAqB,EAC5F,UAAkB,EAClB,OAAe,EACf,OAAe,EACf,gBAAwB,EACxB,aAAqB,EACrB,aAAqB,EACrB,IAA6B,EAAA;EAC7B,IAAI,GAAG,GAAkB,IAAI;EAC7B,IAAI,QAAQ,GAAG,CAAC;EAEhB,QAAQ,CAAC,OAAO,CAAC,UAAC,MAAM,EAAA;IAClB,IAAA,EAAA,GAAW,MAAM,CAAC,MAAM,CAAA,CAAE;MAAvB,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAmB;IAE9B,IAAI,CAAC,IAAI,aAAa,IAAI,CAAC,IAAI,aAAa,IAC1C,CAAC,IAAI,OAAO,IAAI,CAAC,IAAI,OAAO,IAC5B,CAAC,kBAAkB,CAAC,OAAO,EAAE,MAAM,CAAC,EACpC;MACA,IAAI,KAAK,GAAG,sBAAsB,CAAC,CAAC,EAAE,gBAAgB,EAAE,CAAC,EAAE,UAAU,EAAE,MAAM,CAAC,aAAa,CAAA,CAAE,EAAE,aAAa,EAAE,IAAI,CAAC;MAEnH,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,GAAG,QAAQ,EAAE;QACpC,GAAG,GAAG,MAAM;QACZ,QAAQ,GAAG,KAAK;MACjB;IACF;EACH,CAAC,CAAC;EAEF,OAAO,GAAI;AACb;AAEA,SAAS,wBAAwB,CAAE,QAAuB,EAAE,aAAqB,EAAE,IAA6B,EAAA;EAC9G,IAAI,OAAO,GAAY,CAAA,CAAE;EACzB;EACA;EACA,OAAO,CAAC,OAAO,GAAG,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EACpE,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,uBAAuB,EAC5B,IAAI,CAAC,oBAAoB,EACzB,CAAC,EACD,IAAI,CACL;EACD;EACA;EACA,OAAO,CAAC,YAAY,GAAG,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EACzE,IAAI,CAAC,eAAe,EACpB,IAAI,CAAC,YAAY,EACjB,CAAC,EACD,IAAI,CAAC,uBAAuB,EAC5B,IAAI,CAAC,oBAAoB,EACzB,CAAC,EACD,IAAI,CACL;EACD;EACA;EACA,OAAO,CAAC,WAAW,GAAG,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EACxE,IAAI,CAAC,cAAc,EACnB,CAAC,EACD,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,uBAAuB,EAC5B,IAAI,CAAC,oBAAoB,EACzB,CAAC,EACD,IAAI,CACL;EACD;EACA;EACA,OAAO,CAAC,KAAK,GAAG,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EAClE,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,qBAAqB,EAC1B,CAAC,EACD,IAAI,CAAC,kBAAkB,EACvB,IAAI,CACL;EACD;EACA;EACA,OAAO,CAAC,UAAU,GAAG,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EACvE,IAAI,CAAC,eAAe,EACpB,IAAI,CAAC,YAAY,EACjB,CAAC,EACD,IAAI,CAAC,qBAAqB,EAC1B,CAAC,EACD,IAAI,CAAC,kBAAkB,EACvB,IAAI,CACL;EACD;EACA;EACA,OAAO,CAAC,SAAS,GAAG,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EACtE,IAAI,CAAC,cAAc,EACnB,CAAC,EACD,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,qBAAqB,EAC1B,CAAC,EACD,IAAI,CAAC,kBAAkB,EACvB,IAAI,CACL;EACD,OAAO,OAAO;AAChB;AAEA,SAAS,sBAAsB,CAAE,OAAgB,EAAE,aAAqB,EAAE,IAA6B,EAAA;EACrG,IAAI,OAAO,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,CAAC,WAAW,KAAK,IAAI,IAAI,OAAO,CAAC,YAAY,KAAK,IAAI,EAAE;IAC7F,IAAI,OAAO,CAAC,WAAW,KAAK,IAAI,IAAI,OAAO,CAAC,SAAS,KAAK,IAAI,EAAE;MAC1D,IAAA,EAAA,GAAY,OAAO,CAAC,SAAU,CAAC,MAAM,CAAA,CAAE;QAAtC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;QAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;QAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAA+B;MAC3C,CAAC,GAAG,IAAI,CAAC,cAAc;MACvB,OAAO,CAAC,WAAW,GAAG,IAAI,OAAA,CAAA,MAAM,CAAC,MAAA,CAAA,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACvD;IACD,IAAI,OAAO,CAAC,YAAY,KAAK,IAAI,IAAI,OAAO,CAAC,UAAU,KAAK,IAAI,EAAE;MAC5D,IAAA,EAAA,GAAY,OAAO,CAAC,UAAW,CAAC,MAAM,CAAA,CAAE;QAAvC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;QAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;QAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAgC;MAC5C,CAAC,GAAG,IAAI,CAAC,cAAc;MACvB,OAAO,CAAC,WAAW,GAAG,IAAI,OAAA,CAAA,MAAM,CAAC,MAAA,CAAA,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACvD;EACF;EACD,IAAI,OAAO,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,CAAC,WAAW,KAAK,IAAI,EAAE;IACxD,IAAA,EAAA,GAAY,OAAO,CAAC,WAAY,CAAC,MAAM,CAAA,CAAE;MAAxC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAiC;IAC7C,CAAC,GAAG,IAAI,CAAC,gBAAgB;IACzB,OAAO,CAAC,OAAO,GAAG,IAAI,OAAA,CAAA,MAAM,CAAC,MAAA,CAAA,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;GACnD,MAAM,IAAI,OAAO,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,CAAC,YAAY,KAAK,IAAI,EAAE;IAChE,IAAA,EAAA,GAAY,OAAO,CAAC,YAAa,CAAC,MAAM,CAAA,CAAE;MAAzC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAkC;IAC9C,CAAC,GAAG,IAAI,CAAC,gBAAgB;IACzB,OAAO,CAAC,OAAO,GAAG,IAAI,OAAA,CAAA,MAAM,CAAC,MAAA,CAAA,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACnD;EACD,IAAI,OAAO,CAAC,WAAW,KAAK,IAAI,IAAI,OAAO,CAAC,OAAO,KAAK,IAAI,EAAE;IACxD,IAAA,EAAA,GAAY,OAAO,CAAC,OAAQ,CAAC,MAAM,CAAA,CAAE;MAApC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAA6B;IACzC,CAAC,GAAG,IAAI,CAAC,cAAc;IACvB,OAAO,CAAC,WAAW,GAAG,IAAI,OAAA,CAAA,MAAM,CAAC,MAAA,CAAA,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACvD;EACD,IAAI,OAAO,CAAC,YAAY,KAAK,IAAI,IAAI,OAAO,CAAC,OAAO,KAAK,IAAI,EAAE;IACzD,IAAA,EAAA,GAAY,OAAO,CAAC,OAAQ,CAAC,MAAM,CAAA,CAAE;MAApC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAA6B;IACzC,CAAC,GAAG,IAAI,CAAC,eAAe;IACxB,OAAO,CAAC,YAAY,GAAG,IAAI,OAAA,CAAA,MAAM,CAAC,MAAA,CAAA,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACxD;EACD,IAAI,OAAO,CAAC,KAAK,KAAK,IAAI,IAAI,OAAO,CAAC,OAAO,KAAK,IAAI,EAAE;IAClD,IAAA,EAAA,GAAY,OAAO,CAAC,OAAQ,CAAC,MAAM,CAAA,CAAE;MAApC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAA6B;IACzC,CAAC,GAAG,IAAI,CAAC,qBAAqB;IAC9B,OAAO,CAAC,KAAK,GAAG,IAAI,OAAA,CAAA,MAAM,CAAC,MAAA,CAAA,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACjD;EACD,IAAI,OAAO,CAAC,SAAS,KAAK,IAAI,IAAI,OAAO,CAAC,WAAW,KAAK,IAAI,EAAE;IAC1D,IAAA,EAAA,GAAY,OAAO,CAAC,WAAY,CAAC,MAAM,CAAA,CAAE;MAAxC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAiC;IAC7C,CAAC,GAAG,IAAI,CAAC,qBAAqB;IAC9B,OAAO,CAAC,SAAS,GAAG,IAAI,OAAA,CAAA,MAAM,CAAC,MAAA,CAAA,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACrD;EACD,IAAI,OAAO,CAAC,UAAU,KAAK,IAAI,IAAI,OAAO,CAAC,YAAY,KAAK,IAAI,EAAE;IAC5D,IAAA,EAAA,GAAY,OAAO,CAAC,YAAa,CAAC,MAAM,CAAA,CAAE;MAAzC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAA;MAAE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAkC;IAC9C,CAAC,GAAG,IAAI,CAAC,qBAAqB;IAC9B,OAAO,CAAC,UAAU,GAAG,IAAI,OAAA,CAAA,MAAM,CAAC,MAAA,CAAA,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACtD;AACH;AAEA,IAAM,gBAAgB,GAAc,SAA9B,gBAAgB,CAAe,QAAuB,EAAE,IAA8B,EAAA;EAC1F,IAAI,GAA4B,QAAQ,CAAC,CAAA,CAAE,EAAE,IAAI,EAAE,WAAW,CAAC;EAC/D,IAAI,aAAa,GAAG,kBAAkB,CAAC,QAAQ,CAAC;EAEhD,IAAI,OAAO,GAAG,wBAAwB,CAAC,QAAQ,EAAE,aAAa,EAAE,IAAI,CAAC;EACrE,sBAAsB,CAAC,OAAO,EAAE,aAAa,EAAE,IAAI,CAAC;EAEpD,OAAO,OAAO;AAChB,CAAC;AAED,OAAA,CAAA,OAAA,GAAe,gBAAgB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar color_1 = require(\"../color\");\nvar util_1 = require(\"../util\");\nvar defaults = require(\"lodash/defaults\");\nvar DefaultOpts = {\n    targetDarkLuma: 0.26,\n    maxDarkLuma: 0.45,\n    minLightLuma: 0.55,\n    targetLightLuma: 0.74,\n    minNormalLuma: 0.3,\n    targetNormalLuma: 0.5,\n    maxNormalLuma: 0.7,\n    targetMutesSaturation: 0.3,\n    maxMutesSaturation: 0.4,\n    targetVibrantSaturation: 1.0,\n    minVibrantSaturation: 0.35,\n    weightSaturation: 3,\n    weightLuma: 6.5,\n    weightPopulation: 0.5\n};\nfunction _findMaxPopulation(swatches) {\n    var p = 0;\n    swatches.forEach(function (s) {\n        p = Math.max(p, s.getPopulation());\n    });\n    return p;\n}\nfunction _isAlreadySelected(palette, s) {\n    return palette.Vibrant === s ||\n        palette.DarkVibrant === s ||\n        palette.LightVibrant === s ||\n        palette.Muted === s ||\n        palette.DarkMuted === s ||\n        palette.LightMuted === s;\n}\nfunction _createComparisonValue(saturation, targetSaturation, luma, targetLuma, population, maxPopulation, opts) {\n    function weightedMean() {\n        var values = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            values[_i] = arguments[_i];\n        }\n        var sum = 0;\n        var weightSum = 0;\n        for (var i = 0; i < values.length; i += 2) {\n            var value = values[i];\n            var weight = values[i + 1];\n            sum += value * weight;\n            weightSum += weight;\n        }\n        return sum / weightSum;\n    }\n    function invertDiff(value, targetValue) {\n        return 1 - Math.abs(value - targetValue);\n    }\n    return weightedMean(invertDiff(saturation, targetSaturation), opts.weightSaturation, invertDiff(luma, targetLuma), opts.weightLuma, population / maxPopulation, opts.weightPopulation);\n}\nfunction _findColorVariation(palette, swatches, maxPopulation, targetLuma, minLuma, maxLuma, targetSaturation, minSaturation, maxSaturation, opts) {\n    var max = null;\n    var maxValue = 0;\n    swatches.forEach(function (swatch) {\n        var _a = swatch.getHsl(), s = _a[1], l = _a[2];\n        if (s >= minSaturation && s <= maxSaturation &&\n            l >= minLuma && l <= maxLuma &&\n            !_isAlreadySelected(palette, swatch)) {\n            var value = _createComparisonValue(s, targetSaturation, l, targetLuma, swatch.getPopulation(), maxPopulation, opts);\n            if (max === null || value > maxValue) {\n                max = swatch;\n                maxValue = value;\n            }\n        }\n    });\n    return max;\n}\nfunction _generateVariationColors(swatches, maxPopulation, opts) {\n    var palette = {};\n    // mVibrantSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n    //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n    palette.Vibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetNormalLuma, opts.minNormalLuma, opts.maxNormalLuma, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts);\n    // mLightVibrantSwatch = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n    //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n    palette.LightVibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetLightLuma, opts.minLightLuma, 1, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts);\n    // mDarkVibrantSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n    //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n    palette.DarkVibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetDarkLuma, 0, opts.maxDarkLuma, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts);\n    // mMutedSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n    //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n    palette.Muted = _findColorVariation(palette, swatches, maxPopulation, opts.targetNormalLuma, opts.minNormalLuma, opts.maxNormalLuma, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n    // mLightMutedColor = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n    //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n    palette.LightMuted = _findColorVariation(palette, swatches, maxPopulation, opts.targetLightLuma, opts.minLightLuma, 1, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n    // mDarkMutedSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n    //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n    palette.DarkMuted = _findColorVariation(palette, swatches, maxPopulation, opts.targetDarkLuma, 0, opts.maxDarkLuma, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n    return palette;\n}\nfunction _generateEmptySwatches(palette, maxPopulation, opts) {\n    if (palette.Vibrant === null && palette.DarkVibrant === null && palette.LightVibrant === null) {\n        if (palette.DarkVibrant === null && palette.DarkMuted !== null) {\n            var _a = palette.DarkMuted.getHsl(), h = _a[0], s = _a[1], l = _a[2];\n            l = opts.targetDarkLuma;\n            palette.DarkVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n        }\n        if (palette.LightVibrant === null && palette.LightMuted !== null) {\n            var _b = palette.LightMuted.getHsl(), h = _b[0], s = _b[1], l = _b[2];\n            l = opts.targetDarkLuma;\n            palette.DarkVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n        }\n    }\n    if (palette.Vibrant === null && palette.DarkVibrant !== null) {\n        var _c = palette.DarkVibrant.getHsl(), h = _c[0], s = _c[1], l = _c[2];\n        l = opts.targetNormalLuma;\n        palette.Vibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n    else if (palette.Vibrant === null && palette.LightVibrant !== null) {\n        var _d = palette.LightVibrant.getHsl(), h = _d[0], s = _d[1], l = _d[2];\n        l = opts.targetNormalLuma;\n        palette.Vibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n    if (palette.DarkVibrant === null && palette.Vibrant !== null) {\n        var _e = palette.Vibrant.getHsl(), h = _e[0], s = _e[1], l = _e[2];\n        l = opts.targetDarkLuma;\n        palette.DarkVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n    if (palette.LightVibrant === null && palette.Vibrant !== null) {\n        var _f = palette.Vibrant.getHsl(), h = _f[0], s = _f[1], l = _f[2];\n        l = opts.targetLightLuma;\n        palette.LightVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n    if (palette.Muted === null && palette.Vibrant !== null) {\n        var _g = palette.Vibrant.getHsl(), h = _g[0], s = _g[1], l = _g[2];\n        l = opts.targetMutesSaturation;\n        palette.Muted = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n    if (palette.DarkMuted === null && palette.DarkVibrant !== null) {\n        var _h = palette.DarkVibrant.getHsl(), h = _h[0], s = _h[1], l = _h[2];\n        l = opts.targetMutesSaturation;\n        palette.DarkMuted = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n    if (palette.LightMuted === null && palette.LightVibrant !== null) {\n        var _j = palette.LightVibrant.getHsl(), h = _j[0], s = _j[1], l = _j[2];\n        l = opts.targetMutesSaturation;\n        palette.LightMuted = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n}\nvar DefaultGenerator = function (swatches, opts) {\n    opts = defaults({}, opts, DefaultOpts);\n    var maxPopulation = _findMaxPopulation(swatches);\n    var palette = _generateVariationColors(swatches, maxPopulation, opts);\n    _generateEmptySwatches(palette, maxPopulation, opts);\n    return palette;\n};\nexports.default = DefaultGenerator;\n//# sourceMappingURL=default.js.map"]},"metadata":{},"sourceType":"script"}