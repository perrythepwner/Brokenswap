{"ast":null,"code":"var _document$querySelect;import{createReducer}from'@reduxjs/toolkit';import{updateVersion}from'../global/actions';import{addSerializedPair,addSerializedToken,clearValoraAccount,removeSerializedPair,removeSerializedToken,setValoraAccount,toggleURLWarning,updateMatchesDarkMode,updateUserAllowMoolaWithdrawal,updateUserAprMode,updateUserDarkMode,updateUserDeadline,updateUserDisableSmartRouting,updateUserExpertMode,updateUserMinApprove,updateUserSingleHopOnly,updateUserSlippageTolerance}from'./actions';const currentTimestamp=()=>new Date().getTime();function pairKey(token0Address,token1Address){return\"\".concat(token0Address,\";\").concat(token1Address);}(_document$querySelect=document.querySelector('html'))===null||_document$querySelect===void 0?void 0:_document$querySelect.classList.add('tw-dark');export const initialState={userDarkMode:null,matchesDarkMode:false,userExpertMode:false,userSingleHopOnly:false,userMinApprove:false,userAllowMoolaWithdrawal:false,userDisableSmartRouting:false,userSlippageTolerance:0,userDeadline:0,tokens:{},pairs:{},timestamp:currentTimestamp(),URLWarningVisible:true,valoraAccount:null,userAprMode:false};export default createReducer(initialState,builder=>builder.addCase(updateVersion,state=>{// slippage isnt being tracked in local storage, reset to default\n// noinspection SuspiciousTypeOfGuard\nif(typeof state.userSlippageTolerance!=='number'){state.userSlippageTolerance=0;}// deadline isnt being tracked in local storage, reset to default\n// noinspection SuspiciousTypeOfGuard\nif(typeof state.userDeadline!=='number'){state.userDeadline=0;}state.lastUpdateVersionTimestamp=currentTimestamp();}).addCase(updateUserDarkMode,(state,action)=>{state.userDarkMode=action.payload.userDarkMode;state.timestamp=currentTimestamp();}).addCase(updateMatchesDarkMode,(state,action)=>{state.matchesDarkMode=action.payload.matchesDarkMode;state.timestamp=currentTimestamp();}).addCase(updateUserExpertMode,(state,action)=>{state.userExpertMode=action.payload.userExpertMode;state.timestamp=currentTimestamp();}).addCase(updateUserSlippageTolerance,(state,action)=>{state.userSlippageTolerance=action.payload.userSlippageTolerance;state.timestamp=currentTimestamp();}).addCase(updateUserDeadline,(state,action)=>{state.userDeadline=action.payload.userDeadline;state.timestamp=currentTimestamp();}).addCase(updateUserSingleHopOnly,(state,action)=>{state.userSingleHopOnly=action.payload.userSingleHopOnly;}).addCase(updateUserMinApprove,(state,action)=>{state.userMinApprove=action.payload.userMinApprove;}).addCase(updateUserAllowMoolaWithdrawal,(state,action)=>{state.userAllowMoolaWithdrawal=action.payload.userAllowMoolaWithdrawal;}).addCase(updateUserDisableSmartRouting,(state,action)=>{state.userDisableSmartRouting=action.payload.userDisableSmartRouting;}).addCase(addSerializedToken,(state,_ref)=>{let{payload:{serializedToken}}=_ref;state.tokens[serializedToken.chainId]=state.tokens[serializedToken.chainId]||{};state.tokens[serializedToken.chainId][serializedToken.address]=serializedToken;state.timestamp=currentTimestamp();}).addCase(removeSerializedToken,(state,_ref2)=>{let{payload:{address,chainId}}=_ref2;state.tokens[chainId]=state.tokens[chainId]||{};delete state.tokens[chainId][address];state.timestamp=currentTimestamp();}).addCase(addSerializedPair,(state,_ref3)=>{let{payload:{serializedPair}}=_ref3;if(serializedPair.token0.chainId===serializedPair.token1.chainId&&serializedPair.token0.address!==serializedPair.token1.address){const chainId=serializedPair.token0.chainId;state.pairs[chainId]=state.pairs[chainId]||{};state.pairs[chainId][pairKey(serializedPair.token0.address,serializedPair.token1.address)]=serializedPair;}state.timestamp=currentTimestamp();}).addCase(removeSerializedPair,(state,_ref4)=>{let{payload:{chainId,tokenAAddress,tokenBAddress}}=_ref4;if(state.pairs[chainId]){// just delete both keys if either exists\ndelete state.pairs[chainId][pairKey(tokenAAddress,tokenBAddress)];delete state.pairs[chainId][pairKey(tokenBAddress,tokenAAddress)];}state.timestamp=currentTimestamp();}).addCase(toggleURLWarning,state=>{state.URLWarningVisible=!state.URLWarningVisible;}).addCase(setValoraAccount,(state,_ref5)=>{let{payload}=_ref5;state.valoraAccount=payload;}).addCase(clearValoraAccount,state=>{state.valoraAccount=null;}).addCase(updateUserAprMode,(state,action)=>{state.userAprMode=action.payload.userAprMode;}));","map":null,"metadata":{},"sourceType":"module"}