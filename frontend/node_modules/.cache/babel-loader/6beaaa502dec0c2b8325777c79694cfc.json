{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;\nconst codegen_1 = require(\"../codegen\");\nconst util_1 = require(\"../util\");\nfunction getSubschema(it, _ref) {\n  let {\n    keyword,\n    schemaProp,\n    schema,\n    schemaPath,\n    errSchemaPath,\n    topSchemaRef\n  } = _ref;\n  if (keyword !== undefined && schema !== undefined) {\n    throw new Error('both \"keyword\" and \"schema\" passed, only one allowed');\n  }\n  if (keyword !== undefined) {\n    const sch = it.schema[keyword];\n    return schemaProp === undefined ? {\n      schema: sch,\n      schemaPath: (0, codegen_1._)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\", \"\", \"\"])), it.schemaPath, (0, codegen_1.getProperty)(keyword)),\n      errSchemaPath: \"\".concat(it.errSchemaPath, \"/\").concat(keyword)\n    } : {\n      schema: sch[schemaProp],\n      schemaPath: (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\", \"\", \"\", \"\"])), it.schemaPath, (0, codegen_1.getProperty)(keyword), (0, codegen_1.getProperty)(schemaProp)),\n      errSchemaPath: \"\".concat(it.errSchemaPath, \"/\").concat(keyword, \"/\").concat((0, util_1.escapeFragment)(schemaProp))\n    };\n  }\n  if (schema !== undefined) {\n    if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {\n      throw new Error('\"schemaPath\", \"errSchemaPath\" and \"topSchemaRef\" are required with \"schema\"');\n    }\n    return {\n      schema,\n      schemaPath,\n      topSchemaRef,\n      errSchemaPath\n    };\n  }\n  throw new Error('either \"keyword\" or \"schema\" must be passed');\n}\nexports.getSubschema = getSubschema;\nfunction extendSubschemaData(subschema, it, _ref2) {\n  let {\n    dataProp,\n    dataPropType: dpType,\n    data,\n    dataTypes,\n    propertyName\n  } = _ref2;\n  if (data !== undefined && dataProp !== undefined) {\n    throw new Error('both \"data\" and \"dataProp\" passed, only one allowed');\n  }\n  const {\n    gen\n  } = it;\n  if (dataProp !== undefined) {\n    const {\n      errorPath,\n      dataPathArr,\n      opts\n    } = it;\n    const nextData = gen.let(\"data\", (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \"\", \"\"])), it.data, (0, codegen_1.getProperty)(dataProp)), true);\n    dataContextProps(nextData);\n    subschema.errorPath = (0, codegen_1.str)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \"\", \"\"])), errorPath, (0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax));\n    subschema.parentDataProperty = (0, codegen_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \"\"])), dataProp);\n    subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];\n  }\n  if (data !== undefined) {\n    const nextData = data instanceof codegen_1.Name ? data : gen.let(\"data\", data, true); // replaceable if used once?\n    dataContextProps(nextData);\n    if (propertyName !== undefined) subschema.propertyName = propertyName;\n    // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr\n  }\n\n  if (dataTypes) subschema.dataTypes = dataTypes;\n  function dataContextProps(_nextData) {\n    subschema.data = _nextData;\n    subschema.dataLevel = it.dataLevel + 1;\n    subschema.dataTypes = [];\n    it.definedProperties = new Set();\n    subschema.parentData = it.data;\n    subschema.dataNames = [...it.dataNames, _nextData];\n  }\n}\nexports.extendSubschemaData = extendSubschemaData;\nfunction extendSubschemaMode(subschema, _ref3) {\n  let {\n    jtdDiscriminator,\n    jtdMetadata,\n    compositeRule,\n    createErrors,\n    allErrors\n  } = _ref3;\n  if (compositeRule !== undefined) subschema.compositeRule = compositeRule;\n  if (createErrors !== undefined) subschema.createErrors = createErrors;\n  if (allErrors !== undefined) subschema.allErrors = allErrors;\n  subschema.jtdDiscriminator = jtdDiscriminator; // not inherited\n  subschema.jtdMetadata = jtdMetadata; // not inherited\n}\n\nexports.extendSubschemaMode = extendSubschemaMode;","map":null,"metadata":{},"sourceType":"script"}