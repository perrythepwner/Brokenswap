{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_NETWORKS = exports.getProviderForWallet = exports.STATIC_NETWORK_WALLETS = exports.Localhost = exports.Mainnet = exports.Cannoli = exports.Baklava = exports.Alfajores = exports.NetworkNames = exports.PROVIDERS = exports.WalletIds = exports.Platform = exports.Priorities = exports.WalletTypes = exports.SupportedProviders = exports.localStorageKeys = void 0;\nconst react_device_detect_1 = require(\"react-device-detect\");\nconst Icons = __importStar(require(\"./components/icons\"));\nconst types_1 = require(\"./types\");\nconst ethereum_1 = require(\"./utils/ethereum\");\nvar localStorageKeys;\n(function (localStorageKeys) {\n  localStorageKeys[\"lastUsedAddress\"] = \"react-celo/last-used-address\";\n  localStorageKeys[\"lastUsedNetwork\"] = \"react-celo/last-used-network\";\n  localStorageKeys[\"lastUsedWalletType\"] = \"react-celo/last-used-wallet\";\n  localStorageKeys[\"lastUsedWalletId\"] = \"react-celo/last-used-wallet-id\";\n  localStorageKeys[\"lastUsedWallets\"] = \"react-celo/last-used-wallets\";\n  localStorageKeys[\"lastUsedIndex\"] = \"react-celo/last-used-index\";\n  localStorageKeys[\"lastUsedPrivateKey\"] = \"react-celo/last-used-private-key\";\n  localStorageKeys[\"lastUsedFeeCurrency\"] = \"react-celo/last-used-fee-currency\";\n})(localStorageKeys = exports.localStorageKeys || (exports.localStorageKeys = {}));\nvar SupportedProviders;\n(function (SupportedProviders) {\n  SupportedProviders[\"CeloExtensionWallet\"] = \"Celo Extension Wallet\";\n  SupportedProviders[\"CeloTerminal\"] = \"Celo Terminal\";\n  SupportedProviders[\"CeloWallet\"] = \"Celo Wallet\";\n  SupportedProviders[\"CeloDance\"] = \"CeloDance\";\n  SupportedProviders[\"Injected\"] = \"Injected\";\n  SupportedProviders[\"Ledger\"] = \"Ledger\";\n  SupportedProviders[\"MetaMask\"] = \"MetaMask\";\n  SupportedProviders[\"PrivateKey\"] = \"Private key\";\n  SupportedProviders[\"Valora\"] = \"Valora\";\n  SupportedProviders[\"WalletConnect\"] = \"WalletConnect\";\n  // backwards compatibility\n  SupportedProviders[\"Steakwallet\"] = \"Omni\";\n  SupportedProviders[\"Omni\"] = \"Omni\";\n  SupportedProviders[\"CoinbaseWallet\"] = \"Coinbase Wallet\";\n})(SupportedProviders = exports.SupportedProviders || (exports.SupportedProviders = {}));\nvar WalletTypes;\n(function (WalletTypes) {\n  WalletTypes[\"Valora\"] = \"Valora\";\n  WalletTypes[\"MetaMask\"] = \"MetaMask\";\n  WalletTypes[\"WalletConnect\"] = \"WalletConnect\";\n  WalletTypes[\"CeloDance\"] = \"CeloDance\";\n  WalletTypes[\"CeloWallet\"] = \"CeloWallet\";\n  WalletTypes[\"CeloTerminal\"] = \"CeloTerminal\";\n  WalletTypes[\"CeloExtensionWallet\"] = \"CeloExtensionWallet\";\n  WalletTypes[\"Ledger\"] = \"Ledger\";\n  WalletTypes[\"Injected\"] = \"Injected\";\n  WalletTypes[\"PrivateKey\"] = \"PrivateKey\";\n  WalletTypes[\"Unauthenticated\"] = \"Unauthenticated\";\n  WalletTypes[\"CoinbaseWallet\"] = \"CoinbaseWallet\";\n})(WalletTypes = exports.WalletTypes || (exports.WalletTypes = {}));\nvar Priorities;\n(function (Priorities) {\n  Priorities[Priorities[\"Default\"] = 0] = \"Default\";\n  Priorities[Priorities[\"Popular\"] = 1] = \"Popular\";\n  Priorities[Priorities[\"Recent\"] = 2] = \"Recent\";\n})(Priorities = exports.Priorities || (exports.Priorities = {}));\nvar Platform;\n(function (Platform) {\n  Platform[\"Mobile\"] = \"Mobile\";\n  Platform[\"Desktop\"] = \"Desktop\";\n  Platform[\"Web\"] = \"Web\";\n})(Platform = exports.Platform || (exports.Platform = {}));\nexports.WalletIds = {\n  WalletConnect: '_',\n  Valora: 'd01c7758d741b363e637a817a09bcf579feae4db9f5bb16f599fdd1f66e2f974',\n  CeloWallet: '36d854b702817e228d5c853c528d7bdb46f4bb041d255f67b82eb47111e5676b',\n  CeloDance: 'TODO',\n  CeloTerminal: '8f8506b7f191a8ab95a8295fc8ca147aa152b1358bee4283d6ad2468d97e0ca4',\n  Omni: 'afbd95522f4041c71dd4f1a065f971fd32372865b416f95a0b1db759ae33f2a7'\n};\nexports.PROVIDERS = {\n  [SupportedProviders.Valora]: {\n    name: SupportedProviders.Valora,\n    type: WalletTypes.WalletConnect,\n    description: 'Connect to Valora, a mobile payments app that works worldwide',\n    icon: Icons.Valora,\n    canConnect: () => true,\n    showInList: () => true,\n    listPriority: () => Priorities.Popular,\n    installURL: 'https://valoraapp.com/',\n    walletConnectId: exports.WalletIds.Valora,\n    supportedPlatforms: [Platform.Mobile],\n    getLink: function getLink(uri) {\n      let platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Platform.Mobile;\n      switch (platform) {\n        case Platform.Mobile:\n          return \"celo://wallet/wc?uri=\".concat(uri);\n        default:\n          return false;\n      }\n    }\n  },\n  [SupportedProviders.WalletConnect]: {\n    name: SupportedProviders.WalletConnect,\n    type: WalletTypes.WalletConnect,\n    description: 'Scan a QR code to connect your wallet',\n    icon: Icons.WalletConnect,\n    canConnect: () => true,\n    showInList: () => true,\n    listPriority: () => Priorities.Default,\n    supportedPlatforms: [Platform.Mobile]\n  },\n  [SupportedProviders.Ledger]: {\n    name: SupportedProviders.Ledger,\n    type: WalletTypes.Ledger,\n    description: 'Sync with your Ledger hardware wallet',\n    icon: Icons.Ledger,\n    canConnect: () => true,\n    showInList: () => !react_device_detect_1.isMobile,\n    listPriority: () => Priorities.Popular\n  },\n  [SupportedProviders.CeloWallet]: {\n    name: SupportedProviders.CeloWallet,\n    type: WalletTypes.WalletConnect,\n    description: 'Connect to Celo Wallet for web or desktop',\n    icon: Icons.Celo,\n    canConnect: () => true,\n    showInList: () => true,\n    listPriority: () => Priorities.Default,\n    walletConnectId: exports.WalletIds.CeloWallet,\n    installURL: 'https://celowallet.app/',\n    supportedPlatforms: [Platform.Desktop, Platform.Web],\n    getLink: function getLink(uri) {\n      let platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Platform.Mobile;\n      switch (platform) {\n        case Platform.Desktop:\n          return \"celowallet://wc?uri=\".concat(encodeURIComponent(uri));\n        case Platform.Web:\n          return \"https://celowallet.app/wc?uri=\".concat(encodeURIComponent(uri));\n        default:\n          return false;\n      }\n    }\n  },\n  [SupportedProviders.CeloTerminal]: {\n    name: SupportedProviders.CeloTerminal,\n    type: WalletTypes.WalletConnect,\n    description: 'Connect to the Celo Terminal desktop app',\n    icon: Icons.CeloTerminal,\n    canConnect: () => true,\n    showInList: () => !react_device_detect_1.isMobile,\n    listPriority: () => Priorities.Default,\n    installURL: 'https://celoterminal.com/',\n    walletConnectId: exports.WalletIds.CeloTerminal,\n    supportedPlatforms: []\n  },\n  [SupportedProviders.MetaMask]: {\n    name: SupportedProviders.MetaMask,\n    type: WalletTypes.MetaMask,\n    description: react_device_detect_1.isMobile ? (0, ethereum_1.isEthereumFromMetamask)() ? 'Connect with MetaMask Mobile App' : 'Open MetaMask Mobile App' : 'Use the Metamask browser extension. Celo support is limited.',\n    icon: Icons.MetaMask,\n    canConnect: () => react_device_detect_1.isMobile || (0, ethereum_1.isEthereumFromMetamask)(),\n    showInList: () => true,\n    listPriority: () => Priorities.Popular,\n    installURL: react_device_detect_1.isMobile ? 'https://metamask.app.link/dapp/' + window.location.href.replace(/^https?:\\/\\//, '') : 'https://metamask.app.link/'\n  },\n  [SupportedProviders.CeloExtensionWallet]: {\n    name: SupportedProviders.CeloExtensionWallet,\n    type: WalletTypes.CeloExtensionWallet,\n    description: 'Use a wallet from the the Celo chrome extension',\n    icon: Icons.ChromeExtensionStore,\n    canConnect: () => !!window.celo,\n    showInList: () => !react_device_detect_1.isMobile,\n    listPriority: () => Priorities.Default,\n    installURL: 'https://chrome.google.com/webstore/detail/celoextensionwallet/kkilomkmpmkbdnfelcpgckmpcaemjcdh/related'\n  },\n  [SupportedProviders.Injected]: {\n    name: SupportedProviders.Injected,\n    type: WalletTypes.Injected,\n    description: 'Connect any Ethereum wallet to Celo',\n    icon: Icons.Ethereum,\n    canConnect: () => (0, ethereum_1.isEthereumPresent)(),\n    showInList: () => (0, ethereum_1.isEthereumFromMetamask)(),\n    listPriority: () => Priorities.Default\n  },\n  [SupportedProviders.PrivateKey]: {\n    name: SupportedProviders.PrivateKey,\n    type: WalletTypes.PrivateKey,\n    description: 'Enter a plaintext private key to load your account (testing only)',\n    icon: Icons.PrivateKey,\n    canConnect: () => true,\n    showInList: () => process.env.NODE_ENV !== 'production',\n    listPriority: () => Priorities.Default\n  },\n  [SupportedProviders.CeloDance]: {\n    name: SupportedProviders.CeloDance,\n    type: WalletTypes.WalletConnect,\n    description: 'Send, vote, and earn rewards within one wallet',\n    icon: Icons.CeloDance,\n    canConnect: () => true,\n    showInList: () => true,\n    listPriority: () => Priorities.Default,\n    installURL: 'https://celo.dance/',\n    walletConnectId: exports.WalletIds.CeloDance,\n    supportedPlatforms: [Platform.Mobile],\n    getLink: function getLink(uri) {\n      let platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Platform.Mobile;\n      switch (platform) {\n        case Platform.Mobile:\n          return \"celo://wallet/wc?uri=\".concat(uri);\n        default:\n          return false;\n      }\n    }\n  },\n  [SupportedProviders.Omni]: {\n    name: SupportedProviders.Omni,\n    description: 'Scan a QR code to connect your wallet',\n    type: WalletTypes.WalletConnect,\n    icon: Icons.Omni,\n    canConnect: () => true,\n    showInList: () => true,\n    listPriority: () => Priorities.Default,\n    installURL: 'https://omniwallet.app.link',\n    walletConnectId: exports.WalletIds.Omni,\n    supportedPlatforms: [Platform.Mobile],\n    getLink: function getLink(uri) {\n      let platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Platform.Mobile;\n      switch (platform) {\n        case Platform.Mobile:\n          return \"omni://wc?uri=\".concat(uri);\n        default:\n          return false;\n      }\n    }\n  },\n  [SupportedProviders.CoinbaseWallet]: {\n    name: SupportedProviders.CoinbaseWallet,\n    type: WalletTypes.CoinbaseWallet,\n    description: 'Scan a QR code to connect your wallet',\n    icon: Icons.CoinbaseWallet,\n    canConnect: () => true,\n    showInList: () => true,\n    listPriority: () => Priorities.Default\n  }\n};\n// If adding another chain be sure to add it to the ChainId enum\n// and to requiredNamespaces in packages/walletconnect/src/wc-wallet.ts\nexports.NetworkNames = {\n  Alfajores: 'Alfajores',\n  Baklava: 'Baklava',\n  Mainnet: 'Mainnet',\n  Cannoli: 'Cannoli',\n  Localhost: 'Localhost'\n};\nexports.Alfajores = {\n  name: exports.NetworkNames.Alfajores,\n  rpcUrl: 'https://alfajores-forno.celo-testnet.org',\n  graphQl: 'https://explorer.celo.org/alfajores/graphiql',\n  explorer: 'https://explorer.celo.org/alfajores',\n  chainId: types_1.ChainId.Alfajores\n};\nexports.Baklava = {\n  name: exports.NetworkNames.Baklava,\n  rpcUrl: 'https://baklava-forno.celo-testnet.org',\n  graphQl: 'https://explorer.celo.org/baklava/graphiql',\n  explorer: 'https://explorer.celo.org/baklava',\n  chainId: types_1.ChainId.Baklava\n};\nexports.Cannoli = {\n  name: exports.NetworkNames.Cannoli,\n  rpcUrl: 'https://forno.cannoli.celo-testnet.org',\n  graphQl: 'https://explorer.celo.org/cannoli/graphiql',\n  explorer: 'https://explorer.celo.org/cannoli',\n  chainId: types_1.ChainId.Cannoli\n};\nexports.Mainnet = {\n  name: exports.NetworkNames.Mainnet,\n  rpcUrl: 'https://forno.celo.org',\n  graphQl: 'https://explorer.celo.org/mainnet/graphiql',\n  explorer: 'https://explorer.celo.org/mainnet',\n  chainId: types_1.ChainId.Mainnet\n};\nexports.Localhost = {\n  name: exports.NetworkNames.Localhost,\n  rpcUrl: 'http://localhost:8545',\n  graphQl: '',\n  explorer: '',\n  chainId: 1337\n};\n/**\n * These wallets cannot have their networks\n * updated via react-celo\n */\nexports.STATIC_NETWORK_WALLETS = [WalletTypes['CeloExtensionWallet']];\n/**\n * Gets the provider associated with a wallet type.\n * @param wallet\n * @returns\n */\nconst getProviderForWallet = wallet => wallet === WalletTypes.Unauthenticated ? null : SupportedProviders[wallet];\nexports.getProviderForWallet = getProviderForWallet;\n/**\n * Default networks to connect to.\n */\nexports.DEFAULT_NETWORKS = [exports.Mainnet, exports.Alfajores, exports.Baklava, exports.Cannoli, ...(process.env.NODE_ENV !== 'production' ? [exports.Localhost] : [])];","map":null,"metadata":{},"sourceType":"script"}