{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ByteArrayType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst byteArray_1 = require(\"../util/byteArray\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst composite_1 = require(\"./composite\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * ByteArray: ordered array collection of byte values\n * - Value: `Uint8Array`\n * - View: `Uint8Array`\n * - ViewDU: `Uint8Array`\n *\n * ByteArray is an immutable value which is represented by a Uint8Array for memory efficiency and performance.\n * Note: Consumers of this type MUST never mutate the `Uint8Array` representation of a ByteArray.\n */\nclass ByteArrayType extends composite_1.CompositeType {\n  constructor() {\n    super(...arguments);\n    this.isViewMutable = false;\n  }\n  defaultValue() {\n    // Since it's a byte array the minSize is bytes is the default size\n    return new Uint8Array(this.minSize);\n  }\n  getView(tree) {\n    return this.getViewDU(tree.rootNode);\n  }\n  getViewDU(node) {\n    return this.tree_toValue(node);\n  }\n  commitView(view) {\n    return this.commitViewDU(view);\n  }\n  commitViewDU(view) {\n    const uint8Array = new Uint8Array(this.value_serializedSize(view));\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    this.value_serializeToBytes({\n      uint8Array,\n      dataView\n    }, 0, view);\n    return this.tree_deserializeFromBytes({\n      uint8Array,\n      dataView\n    }, 0, uint8Array.length);\n  }\n  cacheOfViewDU() {\n    return;\n  }\n  // Over-write to prevent serialize + deserialize\n  toView(value) {\n    return value;\n  }\n  toViewDU(value) {\n    return value;\n  }\n  // Serialization + deserialization (only value is generic)\n  value_serializeToBytes(output, offset, value) {\n    output.uint8Array.set(value, offset);\n    return offset + value.length;\n  }\n  value_deserializeFromBytes(data, start, end) {\n    this.assertValidSize(end - start);\n    return Uint8Array.prototype.slice.call(data.uint8Array, start, end);\n  }\n  // Merkleization\n  getRoots(value) {\n    return merkleize_1.splitIntoRootChunks(value);\n  }\n  // Proofs\n  getPropertyGindex() {\n    // Stop navigating below this type. Must only request complete data\n    return null;\n  }\n  getPropertyType() {\n    throw Error(\"Must only request ByteArray complete data\");\n  }\n  getIndexProperty() {\n    throw Error(\"Must only request ByteArray complete data\");\n  }\n  tree_fromProofNode(node) {\n    return {\n      node,\n      done: true\n    };\n  }\n  tree_getLeafGindices(rootGindex, rootNode) {\n    const byteLen = this.tree_getByteLen(rootNode);\n    const chunkCount = Math.ceil(byteLen / 32);\n    const startIndex = persistent_merkle_tree_1.concatGindices([rootGindex, persistent_merkle_tree_1.toGindex(this.depth, BigInt(0))]);\n    const gindices = new Array(chunkCount);\n    for (let i = 0, gindex = startIndex; i < chunkCount; i++, gindex++) {\n      gindices[i] = gindex;\n    }\n    // include the length chunk\n    if (this.isList) {\n      gindices.push(persistent_merkle_tree_1.concatGindices([rootGindex, composite_1.LENGTH_GINDEX]));\n    }\n    return gindices;\n  }\n  // JSON\n  fromJson(json) {\n    const value = byteArray_1.fromHexString(json);\n    this.assertValidSize(value.length);\n    return value;\n  }\n  toJson(value) {\n    return byteArray_1.toHexString(value);\n  }\n  // ByteArray is immutable\n  clone(value) {\n    return value;\n  }\n  equals(a, b) {\n    return byteArray_1.byteArrayEquals(a, b);\n  }\n}\nexports.ByteArrayType = ByteArrayType;","map":{"version":3,"sources":["../../src/type/byteArray.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ByteArrayType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst byteArray_1 = require(\"../util/byteArray\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst composite_1 = require(\"./composite\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * ByteArray: ordered array collection of byte values\n * - Value: `Uint8Array`\n * - View: `Uint8Array`\n * - ViewDU: `Uint8Array`\n *\n * ByteArray is an immutable value which is represented by a Uint8Array for memory efficiency and performance.\n * Note: Consumers of this type MUST never mutate the `Uint8Array` representation of a ByteArray.\n */\nclass ByteArrayType extends composite_1.CompositeType {\n    constructor() {\n        super(...arguments);\n        this.isViewMutable = false;\n    }\n    defaultValue() {\n        // Since it's a byte array the minSize is bytes is the default size\n        return new Uint8Array(this.minSize);\n    }\n    getView(tree) {\n        return this.getViewDU(tree.rootNode);\n    }\n    getViewDU(node) {\n        return this.tree_toValue(node);\n    }\n    commitView(view) {\n        return this.commitViewDU(view);\n    }\n    commitViewDU(view) {\n        const uint8Array = new Uint8Array(this.value_serializedSize(view));\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        this.value_serializeToBytes({ uint8Array, dataView }, 0, view);\n        return this.tree_deserializeFromBytes({ uint8Array, dataView }, 0, uint8Array.length);\n    }\n    cacheOfViewDU() {\n        return;\n    }\n    // Over-write to prevent serialize + deserialize\n    toView(value) {\n        return value;\n    }\n    toViewDU(value) {\n        return value;\n    }\n    // Serialization + deserialization (only value is generic)\n    value_serializeToBytes(output, offset, value) {\n        output.uint8Array.set(value, offset);\n        return offset + value.length;\n    }\n    value_deserializeFromBytes(data, start, end) {\n        this.assertValidSize(end - start);\n        return Uint8Array.prototype.slice.call(data.uint8Array, start, end);\n    }\n    // Merkleization\n    getRoots(value) {\n        return merkleize_1.splitIntoRootChunks(value);\n    }\n    // Proofs\n    getPropertyGindex() {\n        // Stop navigating below this type. Must only request complete data\n        return null;\n    }\n    getPropertyType() {\n        throw Error(\"Must only request ByteArray complete data\");\n    }\n    getIndexProperty() {\n        throw Error(\"Must only request ByteArray complete data\");\n    }\n    tree_fromProofNode(node) {\n        return { node, done: true };\n    }\n    tree_getLeafGindices(rootGindex, rootNode) {\n        const byteLen = this.tree_getByteLen(rootNode);\n        const chunkCount = Math.ceil(byteLen / 32);\n        const startIndex = persistent_merkle_tree_1.concatGindices([rootGindex, persistent_merkle_tree_1.toGindex(this.depth, BigInt(0))]);\n        const gindices = new Array(chunkCount);\n        for (let i = 0, gindex = startIndex; i < chunkCount; i++, gindex++) {\n            gindices[i] = gindex;\n        }\n        // include the length chunk\n        if (this.isList) {\n            gindices.push(persistent_merkle_tree_1.concatGindices([rootGindex, composite_1.LENGTH_GINDEX]));\n        }\n        return gindices;\n    }\n    // JSON\n    fromJson(json) {\n        const value = byteArray_1.fromHexString(json);\n        this.assertValidSize(value.length);\n        return value;\n    }\n    toJson(value) {\n        return byteArray_1.toHexString(value);\n    }\n    // ByteArray is immutable\n    clone(value) {\n        return value;\n    }\n    equals(a, b) {\n        return byteArray_1.byteArrayEquals(a, b);\n    }\n}\nexports.ByteArrayType = ByteArrayType;\n//# sourceMappingURL=byteArray.js.map"]},"metadata":{},"sourceType":"script"}