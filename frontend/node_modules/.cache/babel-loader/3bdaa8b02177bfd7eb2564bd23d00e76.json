{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContainerTreeViewClass = void 0;\nconst composite_1 = require(\"../type/composite\");\nconst branchNodeStruct_1 = require(\"../branchNodeStruct\");\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * Intented usage:\n *\n * - Get initial BeaconState from disk.\n * - Before applying next block, switch to mutable\n * - Get some field, create a view in mutable mode\n * - Do modifications of the state in the state transition function\n * - When done, commit and apply new root node once to og BeaconState\n * - However, keep all the caches and transfer them to the new BeaconState\n *\n * Questions:\n * - Can the child views created in mutable mode switch to not mutable? If so, it seems that it needs to recursively\n *   iterate the entire data structure and views\n *\n */\nclass ContainerTreeView extends abstract_1.TreeView {\n  constructor(type, tree) {\n    super();\n    this.type = type;\n    this.tree = tree;\n  }\n  get node() {\n    return this.tree.rootNode;\n  }\n}\nfunction getContainerTreeViewClass(type) {\n  class CustomContainerTreeView extends ContainerTreeView {}\n  // Dynamically define prototype methods\n  for (let index = 0; index < type.fieldsEntries.length; index++) {\n    const {\n      fieldName,\n      fieldType\n    } = type.fieldsEntries[index];\n    // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n    // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n    // and use the cached views array to store the new node.\n    if (fieldType.isBasic) {\n      Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // TODO: Review the memory cost of this closures\n        get: function get() {\n          return this.tree.rootNode.value[fieldName];\n        },\n        set: function set(value) {\n          const node = this.tree.rootNode;\n          const newNodeValue = this.type.clone(node.value);\n          // TODO: Should this check for valid field name? Benchmark the cost\n          newNodeValue[fieldName] = value;\n          this.tree.rootNode = new branchNodeStruct_1.BranchNodeStruct(node[\"valueToNode\"], newNodeValue);\n        }\n      });\n    }\n    // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n    // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n    // set it to the parent tree in the field gindex.\n    else if (composite_1.isCompositeType(fieldType)) {\n      Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // Returns TreeView of fieldName\n        get: function get() {\n          const {\n            value\n          } = this.tree.rootNode;\n          return fieldType.toView(value[fieldName]);\n        },\n        // Expects TreeView of fieldName\n        set: function set(view) {\n          const node = this.tree.rootNode;\n          const newNodeValue = this.type.clone(node.value);\n          // TODO: Should this check for valid field name? Benchmark the cost\n          newNodeValue[fieldName] = fieldType.toValueFromView(view);\n          this.tree.rootNode = new branchNodeStruct_1.BranchNodeStruct(node[\"valueToNode\"], newNodeValue);\n        }\n      });\n    }\n    // Should never happen\n    else {\n      /* istanbul ignore next - unreachable code */\n      throw Error(\"Unknown fieldType \".concat(fieldType.typeName, \" for fieldName \").concat(fieldName));\n    }\n  }\n  // Change class name\n  Object.defineProperty(CustomContainerTreeView, \"name\", {\n    value: type.typeName,\n    writable: false\n  });\n  return CustomContainerTreeView;\n}\nexports.getContainerTreeViewClass = getContainerTreeViewClass;","map":{"version":3,"sources":["../../src/view/containerNodeStruct.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContainerTreeViewClass = void 0;\nconst composite_1 = require(\"../type/composite\");\nconst branchNodeStruct_1 = require(\"../branchNodeStruct\");\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * Intented usage:\n *\n * - Get initial BeaconState from disk.\n * - Before applying next block, switch to mutable\n * - Get some field, create a view in mutable mode\n * - Do modifications of the state in the state transition function\n * - When done, commit and apply new root node once to og BeaconState\n * - However, keep all the caches and transfer them to the new BeaconState\n *\n * Questions:\n * - Can the child views created in mutable mode switch to not mutable? If so, it seems that it needs to recursively\n *   iterate the entire data structure and views\n *\n */\nclass ContainerTreeView extends abstract_1.TreeView {\n    constructor(type, tree) {\n        super();\n        this.type = type;\n        this.tree = tree;\n    }\n    get node() {\n        return this.tree.rootNode;\n    }\n}\nfunction getContainerTreeViewClass(type) {\n    class CustomContainerTreeView extends ContainerTreeView {\n    }\n    // Dynamically define prototype methods\n    for (let index = 0; index < type.fieldsEntries.length; index++) {\n        const { fieldName, fieldType } = type.fieldsEntries[index];\n        // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n        // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n        // and use the cached views array to store the new node.\n        if (fieldType.isBasic) {\n            Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // TODO: Review the memory cost of this closures\n                get: function () {\n                    return this.tree.rootNode.value[fieldName];\n                },\n                set: function (value) {\n                    const node = this.tree.rootNode;\n                    const newNodeValue = this.type.clone(node.value);\n                    // TODO: Should this check for valid field name? Benchmark the cost\n                    newNodeValue[fieldName] = value;\n                    this.tree.rootNode = new branchNodeStruct_1.BranchNodeStruct(node[\"valueToNode\"], newNodeValue);\n                },\n            });\n        }\n        // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n        // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n        // set it to the parent tree in the field gindex.\n        else if (composite_1.isCompositeType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // Returns TreeView of fieldName\n                get: function () {\n                    const { value } = this.tree.rootNode;\n                    return fieldType.toView(value[fieldName]);\n                },\n                // Expects TreeView of fieldName\n                set: function (view) {\n                    const node = this.tree.rootNode;\n                    const newNodeValue = this.type.clone(node.value);\n                    // TODO: Should this check for valid field name? Benchmark the cost\n                    newNodeValue[fieldName] = fieldType.toValueFromView(view);\n                    this.tree.rootNode = new branchNodeStruct_1.BranchNodeStruct(node[\"valueToNode\"], newNodeValue);\n                },\n            });\n        }\n        // Should never happen\n        else {\n            /* istanbul ignore next - unreachable code */\n            throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);\n        }\n    }\n    // Change class name\n    Object.defineProperty(CustomContainerTreeView, \"name\", { value: type.typeName, writable: false });\n    return CustomContainerTreeView;\n}\nexports.getContainerTreeViewClass = getContainerTreeViewClass;\n//# sourceMappingURL=containerNodeStruct.js.map"]},"metadata":{},"sourceType":"script"}