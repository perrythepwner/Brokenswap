{"ast":null,"code":"import { Observable } from \"zen-observable-ts\";\nimport \"symbol-observable\";\nvar prototype = Observable.prototype;\nvar fakeObsSymbol = \"@@observable\";\nif (!prototype[fakeObsSymbol]) {\n  prototype[fakeObsSymbol] = function () {\n    return this;\n  };\n}\nexport { Observable };","map":{"version":3,"sources":["../../../src/utilities/observables/Observable.ts"],"names":[],"mappings":"AAKA,SAAS,UAAU,QAAQ,mBAAmB;AAI9C,OAAO,mBAAmB;AAOlB,IAAA,SAAS,GAAK,UAAU,CAAA,SAAf;AACjB,IAAM,aAAa,GAAG,cAAwC;AAC9D,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE;EAC7B,SAAS,CAAC,aAAa,CAAC,GAAG,YAAA;IACzB,OAAO,IAAI;EACb,CAAC;AACF;AAED,SAAS,UAAU","sourcesContent":["import type {\n  Observer,\n  Subscription as ObservableSubscription,\n  Subscriber,\n} from \"zen-observable-ts\";\nimport { Observable } from \"zen-observable-ts\";\n\n// This simplified polyfill attempts to follow the ECMAScript Observable\n// proposal (https://github.com/zenparsing/es-observable)\nimport \"symbol-observable\";\n\nexport type { Observer, ObservableSubscription, Subscriber };\n\n// The zen-observable package defines Observable.prototype[Symbol.observable]\n// when Symbol is supported, but RxJS interop depends on also setting this fake\n// '@@observable' string as a polyfill for Symbol.observable.\nconst { prototype } = Observable;\nconst fakeObsSymbol = \"@@observable\" as keyof typeof prototype;\nif (!prototype[fakeObsSymbol]) {\n  prototype[fakeObsSymbol] = function () {\n    return this;\n  };\n}\n\nexport { Observable };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}