{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst mini_kit_1 = require(\"@celo/contractkit/lib/mini-kit\");\nconst wallet_ledger_1 = require(\"@celo/wallet-ledger\");\nconst hw_transport_webusb_1 = __importDefault(require(\"@ledgerhq/hw-transport-webusb\"));\nconst constants_1 = require(\"../constants\");\nconst common_1 = require(\"./common\");\nclass LedgerConnector extends common_1.AbstractConnector {\n  constructor(network, index, feeCurrency) {\n    super();\n    this.network = network;\n    this.index = index;\n    this.feeCurrency = feeCurrency;\n    this.initialised = false;\n    this.type = constants_1.WalletTypes.Ledger;\n    this.updateFeeCurrency = common_1.updateFeeCurrency.bind(this);\n    this.kit = (0, mini_kit_1.newKit)(network.rpcUrl);\n  }\n  getWallet() {\n    return this.wallet;\n  }\n  createWallet(index) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const transport = yield hw_transport_webusb_1.default.create();\n      this.wallet = yield (0, wallet_ledger_1.newLedgerWalletWithSetup)(transport, [index]);\n      return this.wallet;\n    });\n  }\n  createKit(wallet, network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.kit = (0, mini_kit_1.newKit)(network.rpcUrl, wallet);\n      this.kit.connection.defaultAccount = wallet.getAccounts()[0];\n      if (this.feeCurrency) {\n        yield this.updateFeeCurrency(this.feeCurrency);\n      }\n    });\n  }\n  initialise() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.initialised) {\n        return this;\n      }\n      const wallet = yield this.createWallet(this.index);\n      yield this.createKit(wallet, this.network);\n      this.initialised = true;\n      this.emit(common_1.ConnectorEvents.CONNECTED, {\n        walletChainId: null,\n        walletType: this.type,\n        address: this.kit.connection.defaultAccount,\n        index: this.index,\n        networkName: this.network.name\n      });\n      return this;\n    });\n  }\n  supportsFeeCurrency() {\n    return true;\n  }\n  startNetworkChangeFromApp(network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.createKit(this.getWallet(), network);\n      this.emit(common_1.ConnectorEvents.NETWORK_CHANGED, network.name);\n    });\n  }\n  close() {\n    try {\n      this.kit.connection.stop();\n    } finally {\n      this.disconnect();\n    }\n  }\n}\nexports.default = LedgerConnector;","map":null,"metadata":{},"sourceType":"script"}