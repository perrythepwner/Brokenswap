{"ast":null,"code":"var _asyncToGenerator = require(\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst SafeEventEmitter = require('@metamask/safe-event-emitter').default;\nconst {\n  createAsyncMiddleware,\n  createScaffoldMiddleware\n} = require('json-rpc-engine');\nconst createFilterMiddleware = require('./index.js');\nconst {\n  unsafeRandomBytes,\n  incrementHexInt\n} = require('./hexUtils.js');\nconst getBlocksForRange = require('./getBlocksForRange.js');\nmodule.exports = createSubscriptionMiddleware;\nfunction createSubscriptionMiddleware(_ref) {\n  let {\n    blockTracker,\n    provider\n  } = _ref;\n  // state and utilities for handling subscriptions\n  const subscriptions = {};\n  const filterManager = createFilterMiddleware({\n    blockTracker,\n    provider\n  });\n\n  // internal flag\n  let isDestroyed = false;\n\n  // create subscriptionManager api object\n  const events = new SafeEventEmitter();\n  const middleware = createScaffoldMiddleware({\n    eth_subscribe: createAsyncMiddleware(subscribe),\n    eth_unsubscribe: createAsyncMiddleware(unsubscribe)\n  });\n  middleware.destroy = destroy;\n  return {\n    events,\n    middleware\n  };\n  function subscribe(_x, _x2) {\n    return _subscribe.apply(this, arguments);\n  }\n  function _subscribe() {\n    _subscribe = _asyncToGenerator(function* (req, res) {\n      if (isDestroyed) throw new Error('SubscriptionManager - attempting to use after destroying');\n      const subscriptionType = req.params[0];\n      // subId is 16 byte hex string\n      const subId = unsafeRandomBytes(16);\n\n      // create sub\n      let sub;\n      switch (subscriptionType) {\n        case 'newHeads':\n          sub = createSubNewHeads({\n            subId\n          });\n          break;\n        case 'logs':\n          const filterParams = req.params[1];\n          const filter = yield filterManager.newLogFilter(filterParams);\n          sub = createSubFromFilter({\n            subId,\n            filter\n          });\n          break;\n        default:\n          throw new Error(\"SubscriptionManager - unsupported subscription type \\\"\".concat(subscriptionType, \"\\\"\"));\n      }\n      subscriptions[subId] = sub;\n      res.result = subId;\n      return;\n      function createSubNewHeads(_ref2) {\n        let {\n          subId\n        } = _ref2;\n        const sub = {\n          type: subscriptionType,\n          destroy: function () {\n            var _destroy = _asyncToGenerator(function* () {\n              blockTracker.removeListener('sync', sub.update);\n            });\n            function destroy() {\n              return _destroy.apply(this, arguments);\n            }\n            return destroy;\n          }(),\n          update: function () {\n            var _update = _asyncToGenerator(function* (_ref3) {\n              let {\n                oldBlock,\n                newBlock\n              } = _ref3;\n              // for newHeads\n              const toBlock = newBlock;\n              const fromBlock = incrementHexInt(oldBlock);\n              const rawBlocks = yield getBlocksForRange({\n                provider,\n                fromBlock,\n                toBlock\n              });\n              const results = rawBlocks.map(normalizeBlock).filter(block => block !== null);\n              results.forEach(value => {\n                _emitSubscriptionResult(subId, value);\n              });\n            });\n            function update(_x5) {\n              return _update.apply(this, arguments);\n            }\n            return update;\n          }()\n        };\n        // check for subscription updates on new block\n        blockTracker.on('sync', sub.update);\n        return sub;\n      }\n      function createSubFromFilter(_ref4) {\n        let {\n          subId,\n          filter\n        } = _ref4;\n        filter.on('update', result => _emitSubscriptionResult(subId, result));\n        const sub = {\n          type: subscriptionType,\n          destroy: function () {\n            var _destroy2 = _asyncToGenerator(function* () {\n              return yield filterManager.uninstallFilter(filter.idHex);\n            });\n            function destroy() {\n              return _destroy2.apply(this, arguments);\n            }\n            return destroy;\n          }()\n        };\n        return sub;\n      }\n    });\n    return _subscribe.apply(this, arguments);\n  }\n  function unsubscribe(_x3, _x4) {\n    return _unsubscribe.apply(this, arguments);\n  }\n  function _unsubscribe() {\n    _unsubscribe = _asyncToGenerator(function* (req, res) {\n      if (isDestroyed) throw new Error('SubscriptionManager - attempting to use after destroying');\n      const id = req.params[0];\n      const subscription = subscriptions[id];\n      // if missing, return \"false\" to indicate it was not removed\n      if (!subscription) {\n        res.result = false;\n        return;\n      }\n      // cleanup subscription\n      delete subscriptions[id];\n      yield subscription.destroy();\n      res.result = true;\n    });\n    return _unsubscribe.apply(this, arguments);\n  }\n  function _emitSubscriptionResult(filterIdHex, value) {\n    events.emit('notification', {\n      jsonrpc: '2.0',\n      method: 'eth_subscription',\n      params: {\n        subscription: filterIdHex,\n        result: value\n      }\n    });\n  }\n  function destroy() {\n    events.removeAllListeners();\n    for (const id in subscriptions) {\n      subscriptions[id].destroy();\n      delete subscriptions[id];\n    }\n    isDestroyed = true;\n  }\n}\nfunction normalizeBlock(block) {\n  if (block === null || block === undefined) {\n    return null;\n  }\n  return {\n    hash: block.hash,\n    parentHash: block.parentHash,\n    sha3Uncles: block.sha3Uncles,\n    miner: block.miner,\n    stateRoot: block.stateRoot,\n    transactionsRoot: block.transactionsRoot,\n    receiptsRoot: block.receiptsRoot,\n    logsBloom: block.logsBloom,\n    difficulty: block.difficulty,\n    number: block.number,\n    gasLimit: block.gasLimit,\n    gasUsed: block.gasUsed,\n    nonce: block.nonce,\n    mixHash: block.mixHash,\n    timestamp: block.timestamp,\n    extraData: block.extraData\n  };\n}","map":{"version":3,"names":["SafeEventEmitter","require","default","createAsyncMiddleware","createScaffoldMiddleware","createFilterMiddleware","unsafeRandomBytes","incrementHexInt","getBlocksForRange","module","exports","createSubscriptionMiddleware","_ref","blockTracker","provider","subscriptions","filterManager","isDestroyed","events","middleware","eth_subscribe","subscribe","eth_unsubscribe","unsubscribe","destroy","_x","_x2","_subscribe","apply","arguments","_asyncToGenerator","req","res","Error","subscriptionType","params","subId","sub","createSubNewHeads","filterParams","filter","newLogFilter","createSubFromFilter","concat","result","_ref2","type","_destroy","removeListener","update","_update","_ref3","oldBlock","newBlock","toBlock","fromBlock","rawBlocks","results","map","normalizeBlock","block","forEach","value","_emitSubscriptionResult","_x5","on","_ref4","_destroy2","uninstallFilter","idHex","_x3","_x4","_unsubscribe","id","subscription","filterIdHex","emit","jsonrpc","method","removeAllListeners","undefined","hash","parentHash","sha3Uncles","miner","stateRoot","transactionsRoot","receiptsRoot","logsBloom","difficulty","number","gasLimit","gasUsed","nonce","mixHash","timestamp","extraData"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/eth-json-rpc-filters/subscriptionManager.js"],"sourcesContent":["const SafeEventEmitter = require('@metamask/safe-event-emitter').default\nconst { createAsyncMiddleware, createScaffoldMiddleware } = require('json-rpc-engine')\nconst createFilterMiddleware = require('./index.js')\nconst { unsafeRandomBytes, incrementHexInt } = require('./hexUtils.js')\nconst getBlocksForRange = require('./getBlocksForRange.js')\n\nmodule.exports = createSubscriptionMiddleware\n\n\nfunction createSubscriptionMiddleware({ blockTracker, provider }) {\n  // state and utilities for handling subscriptions\n  const subscriptions = {}\n  const filterManager = createFilterMiddleware({ blockTracker, provider })\n\n  // internal flag\n  let isDestroyed = false\n\n  // create subscriptionManager api object\n  const events = new SafeEventEmitter()\n  const middleware = createScaffoldMiddleware({\n    eth_subscribe: createAsyncMiddleware(subscribe),\n    eth_unsubscribe: createAsyncMiddleware(unsubscribe),\n  })\n  middleware.destroy = destroy\n  return { events, middleware }\n\n  async function subscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const subscriptionType = req.params[0]\n    // subId is 16 byte hex string\n    const subId = unsafeRandomBytes(16)\n\n    // create sub\n    let sub\n    switch (subscriptionType) {\n      case 'newHeads':\n        sub = createSubNewHeads({ subId })\n        break\n      case 'logs':\n        const filterParams = req.params[1]\n        const filter = await filterManager.newLogFilter(filterParams)\n        sub = createSubFromFilter({ subId, filter })\n        break\n      default:\n        throw new Error(`SubscriptionManager - unsupported subscription type \"${subscriptionType}\"`)\n\n    }\n    subscriptions[subId] = sub\n\n    res.result = subId\n    return\n\n    function createSubNewHeads({ subId }) {\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          blockTracker.removeListener('sync', sub.update)\n        },\n        update: async ({ oldBlock, newBlock }) => {\n          // for newHeads\n          const toBlock = newBlock\n          const fromBlock = incrementHexInt(oldBlock)\n          const rawBlocks = await getBlocksForRange({ provider, fromBlock, toBlock })\n          const results = rawBlocks.map(normalizeBlock).filter(block => block !== null)\n          results.forEach((value) => {\n            _emitSubscriptionResult(subId, value)\n          })\n        }\n      }\n      // check for subscription updates on new block\n      blockTracker.on('sync', sub.update)\n      return sub\n    }\n\n    function createSubFromFilter({ subId, filter }) {\n      filter.on('update', result => _emitSubscriptionResult(subId, result))\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          return await filterManager.uninstallFilter(filter.idHex)\n        },\n      }\n      return sub\n    }\n  }\n\n  async function unsubscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const id = req.params[0]\n    const subscription = subscriptions[id]\n    // if missing, return \"false\" to indicate it was not removed\n    if (!subscription) {\n      res.result = false\n      return\n    }\n    // cleanup subscription\n    delete subscriptions[id]\n    await subscription.destroy()\n    res.result = true\n  }\n\n  function _emitSubscriptionResult(filterIdHex, value) {\n    events.emit('notification', {\n      jsonrpc: '2.0',\n      method: 'eth_subscription',\n      params: {\n        subscription: filterIdHex,\n        result: value,\n      },\n    })\n  }\n\n  function destroy() {\n    events.removeAllListeners()\n    for (const id in subscriptions) {\n      subscriptions[id].destroy()\n      delete subscriptions[id]\n    }\n    isDestroyed = true\n  }\n}\n\nfunction normalizeBlock(block) {\n  if (block === null || block === undefined) {\n    return null;\n  }\n  return {\n    hash: block.hash,\n    parentHash: block.parentHash,\n    sha3Uncles: block.sha3Uncles,\n    miner: block.miner,\n    stateRoot: block.stateRoot,\n    transactionsRoot: block.transactionsRoot,\n    receiptsRoot: block.receiptsRoot,\n    logsBloom: block.logsBloom,\n    difficulty: block.difficulty,\n    number: block.number,\n    gasLimit: block.gasLimit,\n    gasUsed: block.gasUsed,\n    nonce: block.nonce,\n    mixHash: block.mixHash,\n    timestamp: block.timestamp,\n    extraData: block.extraData,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}