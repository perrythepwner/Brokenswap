{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccountClaim = exports.AccountClaimType = exports.AccountClaimTypeH = void 0;\nvar address_1 = require(\"@celo/utils/lib/address\");\nvar io_1 = require(\"@celo/utils/lib/io\");\nvar Either_1 = require(\"fp-ts/lib/Either\");\nvar t = __importStar(require(\"io-ts\"));\nvar types_1 = require(\"./types\");\n/**\n *\n * Provide the type minus the validation that the public key and address are derived from the same private key\n */\nexports.AccountClaimTypeH = t.type({\n  type: t.literal(types_1.ClaimTypes.ACCOUNT),\n  timestamp: types_1.TimestampType,\n  address: io_1.AddressType,\n  // io-ts way of defining optional key-value pair\n  publicKey: t.union([t.undefined, io_1.PublicKeyType])\n});\nexports.AccountClaimType = new t.Type('AccountClaimType', exports.AccountClaimTypeH.is, function (unknownValue, context) {\n  return Either_1.either.chain(exports.AccountClaimTypeH.validate(unknownValue, context), function (claim) {\n    if (claim.publicKey === undefined) {\n      return t.success(claim);\n    }\n    var derivedAddress = (0, address_1.publicKeyToAddress)(claim.publicKey);\n    return derivedAddress === claim.address ? t.success(claim) : t.failure(claim, context, 'public key did not match the address in the claim');\n  });\n}, function (x) {\n  return x;\n});\nvar createAccountClaim = function createAccountClaim(address, publicKey) {\n  var claim = {\n    timestamp: (0, types_1.now)(),\n    type: types_1.ClaimTypes.ACCOUNT,\n    address: address,\n    publicKey: publicKey\n  };\n  var parsedClaim = exports.AccountClaimType.decode(claim);\n  if ((0, Either_1.isLeft)(parsedClaim)) {\n    throw new Error(\"A valid claim could not be created\");\n  }\n  return parsedClaim.right;\n};\nexports.createAccountClaim = createAccountClaim;","map":null,"metadata":{},"sourceType":"script"}