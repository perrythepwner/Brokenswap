{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.registerAttestation = exports.authorizeSigner = exports.attestationSecurityCode = void 0;\nfunction attestationSecurityCode(code) {\n  return {\n    types: {\n      EIP712Domain: [{\n        name: 'name',\n        type: 'string'\n      }, {\n        name: 'version',\n        type: 'string'\n      }],\n      AttestationRequest: [{\n        name: 'code',\n        type: 'string'\n      }]\n    },\n    primaryType: 'AttestationRequest',\n    domain: {\n      name: 'Attestations',\n      version: '1.0.0'\n    },\n    message: {\n      code: code\n    }\n  };\n}\nexports.attestationSecurityCode = attestationSecurityCode;\nvar authorizeSigner = function authorizeSigner(_a) {\n  var account = _a.account,\n    signer = _a.signer,\n    chainId = _a.chainId,\n    role = _a.role,\n    accountsContractAddress = _a.accountsContractAddress;\n  return {\n    types: {\n      EIP712Domain: [{\n        name: 'name',\n        type: 'string'\n      }, {\n        name: 'version',\n        type: 'string'\n      }, {\n        name: 'chainId',\n        type: 'uint256'\n      }, {\n        name: 'verifyingContract',\n        type: 'address'\n      }],\n      AuthorizeSigner: [{\n        name: 'account',\n        type: 'address'\n      }, {\n        name: 'signer',\n        type: 'address'\n      }, {\n        name: 'role',\n        type: 'bytes32'\n      }]\n    },\n    primaryType: 'AuthorizeSigner',\n    domain: {\n      name: 'Celo Core Contracts',\n      version: '1.0',\n      chainId: chainId,\n      verifyingContract: accountsContractAddress\n    },\n    message: {\n      account: account,\n      signer: signer,\n      role: role\n    }\n  };\n};\nexports.authorizeSigner = authorizeSigner;\nvar registerAttestation = function registerAttestation(chainId, contractAddress, message) {\n  return {\n    types: {\n      EIP712Domain: [{\n        name: 'name',\n        type: 'string'\n      }, {\n        name: 'version',\n        type: 'string'\n      }, {\n        name: 'chainId',\n        type: 'uint256'\n      }, {\n        name: 'verifyingContract',\n        type: 'address'\n      }],\n      OwnershipAttestation: [{\n        name: 'identifier',\n        type: 'bytes32'\n      }, {\n        name: 'issuer',\n        type: 'address'\n      }, {\n        name: 'account',\n        type: 'address'\n      }, {\n        name: 'signer',\n        type: 'address'\n      }, {\n        name: 'issuedOn',\n        type: 'uint64'\n      }]\n    },\n    primaryType: 'OwnershipAttestation',\n    domain: {\n      name: 'FederatedAttestations',\n      version: '1.0',\n      chainId: chainId,\n      verifyingContract: contractAddress\n    },\n    message: message ? message : {}\n  };\n};\nexports.registerAttestation = registerAttestation;","map":{"version":3,"sources":["../src/typed-data-constructors.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.registerAttestation = exports.authorizeSigner = exports.attestationSecurityCode = void 0;\nfunction attestationSecurityCode(code) {\n    return {\n        types: {\n            EIP712Domain: [\n                { name: 'name', type: 'string' },\n                { name: 'version', type: 'string' },\n            ],\n            AttestationRequest: [{ name: 'code', type: 'string' }],\n        },\n        primaryType: 'AttestationRequest',\n        domain: {\n            name: 'Attestations',\n            version: '1.0.0',\n        },\n        message: {\n            code: code,\n        },\n    };\n}\nexports.attestationSecurityCode = attestationSecurityCode;\nvar authorizeSigner = function (_a) {\n    var account = _a.account, signer = _a.signer, chainId = _a.chainId, role = _a.role, accountsContractAddress = _a.accountsContractAddress;\n    return ({\n        types: {\n            EIP712Domain: [\n                { name: 'name', type: 'string' },\n                { name: 'version', type: 'string' },\n                { name: 'chainId', type: 'uint256' },\n                { name: 'verifyingContract', type: 'address' },\n            ],\n            AuthorizeSigner: [\n                { name: 'account', type: 'address' },\n                { name: 'signer', type: 'address' },\n                { name: 'role', type: 'bytes32' },\n            ],\n        },\n        primaryType: 'AuthorizeSigner',\n        domain: {\n            name: 'Celo Core Contracts',\n            version: '1.0',\n            chainId: chainId,\n            verifyingContract: accountsContractAddress,\n        },\n        message: {\n            account: account,\n            signer: signer,\n            role: role,\n        },\n    });\n};\nexports.authorizeSigner = authorizeSigner;\nvar registerAttestation = function (chainId, contractAddress, message) {\n    return {\n        types: {\n            EIP712Domain: [\n                { name: 'name', type: 'string' },\n                { name: 'version', type: 'string' },\n                { name: 'chainId', type: 'uint256' },\n                { name: 'verifyingContract', type: 'address' },\n            ],\n            OwnershipAttestation: [\n                { name: 'identifier', type: 'bytes32' },\n                { name: 'issuer', type: 'address' },\n                { name: 'account', type: 'address' },\n                { name: 'signer', type: 'address' },\n                { name: 'issuedOn', type: 'uint64' },\n            ],\n        },\n        primaryType: 'OwnershipAttestation',\n        domain: {\n            name: 'FederatedAttestations',\n            version: '1.0',\n            chainId: chainId,\n            verifyingContract: contractAddress,\n        },\n        message: message ? message : {},\n    };\n};\nexports.registerAttestation = registerAttestation;\n//# sourceMappingURL=typed-data-constructors.js.map"]},"metadata":{},"sourceType":"script"}