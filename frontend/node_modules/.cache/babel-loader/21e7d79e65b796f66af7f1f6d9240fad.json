{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitArrayTreeView = void 0;\nconst abstract_1 = require(\"./abstract\");\n/**\n * Thin wrapper around BitArray to upstream changes to `tree` on every `this.set()`\n */\nclass BitArrayTreeView extends abstract_1.TreeView {\n  constructor(type, tree) {\n    super();\n    this.type = type;\n    this.tree = tree;\n    this.bitArray = type.tree_toValue(tree.rootNode);\n  }\n  get node() {\n    return this.tree.rootNode;\n  }\n  // Wrapped API from BitArray\n  /** @see BitArray.uint8Array */\n  get uint8Array() {\n    return this.bitArray.uint8Array;\n  }\n  /** @see BitArray.bitLen */\n  get bitLen() {\n    return this.bitArray.bitLen;\n  }\n  /** @see BitArray.get */\n  get(bitIndex) {\n    return this.bitArray.get(bitIndex);\n  }\n  /** @see BitArray.set */\n  set(bitIndex, bit) {\n    this.bitArray.set(bitIndex, bit);\n    // Upstream changes\n    this.tree.rootNode = this.type.value_toTree(this.bitArray);\n  }\n  /** @see BitArray.mergeOrWith */\n  mergeOrWith(bitArray2) {\n    this.bitArray.mergeOrWith(bitArray2);\n  }\n  /** @see BitArray.intersectValues */\n  intersectValues(values) {\n    return this.bitArray.intersectValues(values);\n  }\n  /** @see BitArray.getTrueBitIndexes */\n  getTrueBitIndexes() {\n    return this.bitArray.getTrueBitIndexes();\n  }\n  /** @see BitArray.getSingleTrueBit */\n  getSingleTrueBit() {\n    return this.bitArray.getSingleTrueBit();\n  }\n  /** @see BitArray.toBoolArray */\n  toBoolArray() {\n    return this.bitArray.toBoolArray();\n  }\n}\nexports.BitArrayTreeView = BitArrayTreeView;","map":{"version":3,"sources":["../../src/view/bitArray.ts"],"names":[],"mappings":";;;;;;AAGA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;AAEG;AACH,MAAa,gBAAiB,SAAQ,UAAA,CAAA,QAAmD,CAAA;EAGvF,WAAA,CAAqB,IAA+C,EAAY,IAAU,EAAA;IACxF,KAAK,CAAA,CAAE;IADY,IAAA,CAAA,IAAI,GAAJ,IAAI;IAAuD,IAAA,CAAA,IAAI,GAAJ,IAAI;IAGlF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC;EAClD;EAEA,IAAI,IAAI,CAAA,EAAA;IACN,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ;EAC3B;EAEA;EAEA;EACA,IAAI,UAAU,CAAA,EAAA;IACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU;EACjC;EAEA;EACA,IAAI,MAAM,CAAA,EAAA;IACR,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM;EAC7B;EAEA;EACA,GAAG,CAAC,QAAgB,EAAA;IAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC;EACpC;EAEA;EACA,GAAG,CAAC,QAAgB,EAAE,GAAY,EAAA;IAChC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC;IAEhC;IACA,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC;EAC5D;EAEA;EACA,WAAW,CAAC,SAAmB,EAAA;IAC7B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;EACtC;EAEA;EACA,eAAe,CAAI,MAAW,EAAA;IAC5B,OAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC;EAC9C;EAEA;EACA,iBAAiB,CAAA,EAAA;IACf,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAA,CAAE;EAC1C;EAEA;EACA,gBAAgB,CAAA,EAAA;IACd,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAA,CAAE;EACzC;EAEA;EACA,WAAW,CAAA,EAAA;IACT,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAA,CAAE;EACpC;AACD;AA9DD,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitArrayTreeView = void 0;\nconst abstract_1 = require(\"./abstract\");\n/**\n * Thin wrapper around BitArray to upstream changes to `tree` on every `this.set()`\n */\nclass BitArrayTreeView extends abstract_1.TreeView {\n    constructor(type, tree) {\n        super();\n        this.type = type;\n        this.tree = tree;\n        this.bitArray = type.tree_toValue(tree.rootNode);\n    }\n    get node() {\n        return this.tree.rootNode;\n    }\n    // Wrapped API from BitArray\n    /** @see BitArray.uint8Array */\n    get uint8Array() {\n        return this.bitArray.uint8Array;\n    }\n    /** @see BitArray.bitLen */\n    get bitLen() {\n        return this.bitArray.bitLen;\n    }\n    /** @see BitArray.get */\n    get(bitIndex) {\n        return this.bitArray.get(bitIndex);\n    }\n    /** @see BitArray.set */\n    set(bitIndex, bit) {\n        this.bitArray.set(bitIndex, bit);\n        // Upstream changes\n        this.tree.rootNode = this.type.value_toTree(this.bitArray);\n    }\n    /** @see BitArray.mergeOrWith */\n    mergeOrWith(bitArray2) {\n        this.bitArray.mergeOrWith(bitArray2);\n    }\n    /** @see BitArray.intersectValues */\n    intersectValues(values) {\n        return this.bitArray.intersectValues(values);\n    }\n    /** @see BitArray.getTrueBitIndexes */\n    getTrueBitIndexes() {\n        return this.bitArray.getTrueBitIndexes();\n    }\n    /** @see BitArray.getSingleTrueBit */\n    getSingleTrueBit() {\n        return this.bitArray.getSingleTrueBit();\n    }\n    /** @see BitArray.toBoolArray */\n    toBoolArray() {\n        return this.bitArray.toBoolArray();\n    }\n}\nexports.BitArrayTreeView = BitArrayTreeView;\n//# sourceMappingURL=bitArray.js.map"]},"metadata":{},"sourceType":"script"}