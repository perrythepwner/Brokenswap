{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AttestationUtils = exports.extractSecurityCodeWithPrefix = exports.attestToIdentifier = exports.getAttestationMessageToSignFromPhoneNumber = exports.getAttestationMessageToSignFromIdentifier = exports.hashIdentifier = exports.sanitizeMessageBase64 = exports.messageContainsAttestationCode = exports.isAccountConsideredVerified = exports.IdentifierType = exports.getIdentifierPrefix = exports.extractAttestationCodeFromMessage = exports.base64ToHex = void 0;\nvar attestations_1 = require(\"@celo/base/lib/attestations\");\nvar web3_utils_1 = require(\"web3-utils\");\nvar address_1 = require(\"./address\");\nvar signatureUtils_1 = require(\"./signatureUtils\");\n// Exports moved to @celo/base, forwarding them\n// here for backwards compatibility\nvar attestations_2 = require(\"@celo/base/lib/attestations\");\nObject.defineProperty(exports, \"base64ToHex\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.base64ToHex;\n  }\n});\nObject.defineProperty(exports, \"extractAttestationCodeFromMessage\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.extractAttestationCodeFromMessage;\n  }\n});\nObject.defineProperty(exports, \"getIdentifierPrefix\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.getIdentifierPrefix;\n  }\n});\nObject.defineProperty(exports, \"IdentifierType\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.IdentifierType;\n  }\n});\nObject.defineProperty(exports, \"isAccountConsideredVerified\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.isAccountConsideredVerified;\n  }\n});\nObject.defineProperty(exports, \"messageContainsAttestationCode\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.messageContainsAttestationCode;\n  }\n});\nObject.defineProperty(exports, \"sanitizeMessageBase64\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.sanitizeMessageBase64;\n  }\n});\nvar sha3 = function sha3(v) {\n  return (0, web3_utils_1.soliditySha3)({\n    type: 'string',\n    value: v\n  });\n};\nfunction hashIdentifier(identifier, type, salt) {\n  return (0, attestations_1.hashIdentifier)(sha3, identifier, type, salt);\n}\nexports.hashIdentifier = hashIdentifier;\nfunction getAttestationMessageToSignFromIdentifier(identifier, account) {\n  var messageHash = (0, web3_utils_1.soliditySha3)({\n    type: 'bytes32',\n    value: identifier\n  }, {\n    type: 'address',\n    value: account\n  });\n  return messageHash;\n}\nexports.getAttestationMessageToSignFromIdentifier = getAttestationMessageToSignFromIdentifier;\nfunction getAttestationMessageToSignFromPhoneNumber(phoneNumber, account, phoneSalt) {\n  return getAttestationMessageToSignFromIdentifier(hashIdentifier(phoneNumber, attestations_1.IdentifierType.PHONE_NUMBER, phoneSalt), account);\n}\nexports.getAttestationMessageToSignFromPhoneNumber = getAttestationMessageToSignFromPhoneNumber;\nfunction attestToIdentifier(identifier, account, privateKey) {\n  var issuer = (0, address_1.privateKeyToAddress)(privateKey);\n  var _a = signatureUtils_1.SignatureUtils.signMessage(getAttestationMessageToSignFromIdentifier(identifier, account), privateKey, issuer),\n    v = _a.v,\n    r = _a.r,\n    s = _a.s;\n  return {\n    v: v,\n    r: r,\n    s: s\n  };\n}\nexports.attestToIdentifier = attestToIdentifier;\nfunction extractSecurityCodeWithPrefix(message) {\n  var matches = message.match('(\\\\d{8})');\n  if (matches && matches.length === 2) {\n    return matches[1];\n  }\n  return null;\n}\nexports.extractSecurityCodeWithPrefix = extractSecurityCodeWithPrefix;\nexports.AttestationUtils = {\n  IdentifierType: attestations_1.IdentifierType,\n  getIdentifierPrefix: attestations_1.getIdentifierPrefix,\n  hashIdentifier: hashIdentifier,\n  getAttestationMessageToSignFromIdentifier: getAttestationMessageToSignFromIdentifier,\n  getAttestationMessageToSignFromPhoneNumber: getAttestationMessageToSignFromPhoneNumber,\n  base64ToHex: attestations_1.base64ToHex,\n  attestToIdentifier: attestToIdentifier,\n  sanitizeMessageBase64: attestations_1.sanitizeMessageBase64,\n  messageContainsAttestationCode: attestations_1.messageContainsAttestationCode,\n  extractAttestationCodeFromMessage: attestations_1.extractAttestationCodeFromMessage,\n  isAccountConsideredVerified: attestations_1.isAccountConsideredVerified,\n  extractSecurityCodeWithPrefix: extractSecurityCodeWithPrefix\n};","map":null,"metadata":{},"sourceType":"script"}