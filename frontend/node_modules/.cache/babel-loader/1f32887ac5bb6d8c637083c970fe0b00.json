{"ast":null,"code":"import{Interface}from'@ethersproject/abi';import IUniswapV2PairABI from'@ubeswap/core/build/abi/IUniswapV2Pair.json';import{Pair,TokenAmount}from'@ubeswap/sdk';import{useMemo}from'react';import{useMultipleContractSingleData}from'../state/multicall/hooks';const PAIR_INTERFACE=new Interface(IUniswapV2PairABI);export let PairState=/*#__PURE__*/function(PairState){PairState[PairState[\"LOADING\"]=0]=\"LOADING\";PairState[PairState[\"NOT_EXISTS\"]=1]=\"NOT_EXISTS\";PairState[PairState[\"EXISTS\"]=2]=\"EXISTS\";PairState[PairState[\"INVALID\"]=3]=\"INVALID\";return PairState;}({});export function usePairs(tokens){const pairAddresses=useMemo(()=>tokens.map(_ref=>{let[tokenA,tokenB]=_ref;return tokenA&&tokenB&&!tokenA.equals(tokenB)?Pair.getAddress(tokenA,tokenB):undefined;}),[tokens]);const results=useMultipleContractSingleData(pairAddresses,PAIR_INTERFACE,'getReserves');return useMemo(()=>{return results.map((result,i)=>{const{result:reserves,loading}=result;const tokenA=tokens[i][0];const tokenB=tokens[i][1];if(loading)return[PairState.LOADING,null];if(!tokenA||!tokenB||tokenA.equals(tokenB))return[PairState.INVALID,null];if(!reserves)return[PairState.NOT_EXISTS,null];const{reserve0,reserve1}=reserves;const[token0,token1]=tokenA.sortsBefore(tokenB)?[tokenA,tokenB]:[tokenB,tokenA];return[PairState.EXISTS,new Pair(new TokenAmount(token0,reserve0.toString()),new TokenAmount(token1,reserve1.toString()))];});},[results,tokens]);}export function usePair(tokenA,tokenB){// if we dont memoize the array then every time this function is ran the tokens variable passed used to create pairAddresses in usePairs is new and therefor no memoization happens :(\nconst tokens=useMemo(()=>[[tokenA,tokenB]],[tokenA,tokenB]);return usePairs(tokens)[0];}","map":{"version":3,"names":["Interface","IUniswapV2PairABI","Pair","TokenAmount","useMemo","useMultipleContractSingleData","PAIR_INTERFACE","PairState","usePairs","tokens","pairAddresses","map","_ref","tokenA","tokenB","equals","getAddress","undefined","results","result","i","reserves","loading","LOADING","INVALID","NOT_EXISTS","reserve0","reserve1","token0","token1","sortsBefore","EXISTS","toString","usePair"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/data/Reserves.ts"],"sourcesContent":["import { Interface } from '@ethersproject/abi'\nimport IUniswapV2PairABI from '@ubeswap/core/build/abi/IUniswapV2Pair.json'\nimport { Pair, Token, TokenAmount } from '@ubeswap/sdk'\nimport { useMemo } from 'react'\n\nimport { useMultipleContractSingleData } from '../state/multicall/hooks'\n\nconst PAIR_INTERFACE = new Interface(IUniswapV2PairABI)\n\nexport enum PairState {\n  LOADING,\n  NOT_EXISTS,\n  EXISTS,\n  INVALID,\n}\n\nexport function usePairs(\n  tokens: readonly (readonly [Token | undefined, Token | undefined])[]\n): readonly (readonly [PairState, Pair | null])[] {\n  const pairAddresses = useMemo(\n    () =>\n      tokens.map(([tokenA, tokenB]) => {\n        return tokenA && tokenB && !tokenA.equals(tokenB) ? Pair.getAddress(tokenA, tokenB) : undefined\n      }),\n    [tokens]\n  )\n\n  const results = useMultipleContractSingleData(pairAddresses, PAIR_INTERFACE, 'getReserves')\n\n  return useMemo(() => {\n    return results.map((result, i) => {\n      const { result: reserves, loading } = result\n      const tokenA = tokens[i][0]\n      const tokenB = tokens[i][1]\n\n      if (loading) return [PairState.LOADING, null]\n      if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [PairState.INVALID, null]\n      if (!reserves) return [PairState.NOT_EXISTS, null]\n      const { reserve0, reserve1 } = reserves\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n      return [\n        PairState.EXISTS,\n        new Pair(new TokenAmount(token0, reserve0.toString()), new TokenAmount(token1, reserve1.toString())),\n      ]\n    })\n  }, [results, tokens])\n}\n\nexport function usePair(tokenA?: Token, tokenB?: Token): readonly [PairState, Pair | null] {\n  // if we dont memoize the array then every time this function is ran the tokens variable passed used to create pairAddresses in usePairs is new and therefor no memoization happens :(\n  const tokens: readonly [Token | undefined, Token | undefined][] = useMemo(() => [[tokenA, tokenB]], [tokenA, tokenB])\n  return usePairs(tokens)[0]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}