{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccountsWrapper = void 0;\nvar signatureUtils_1 = require(\"@celo/base/lib/signatureUtils\");\nvar connect_1 = require(\"@celo/connect\");\nvar signatureUtils_2 = require(\"@celo/utils/lib/signatureUtils\");\nvar solidity_1 = require(\"@celo/utils/lib/solidity\");\nvar typed_data_constructors_1 = require(\"@celo/utils/lib/typed-data-constructors\");\nvar versions_1 = require(\"../versions\");\nvar BaseWrapper_1 = require(\"../wrappers/BaseWrapper\");\nvar BaseWrapper_2 = require(\"./BaseWrapper\");\n/**\n * Contract for handling deposits needed for voting.\n */\nvar AccountsWrapper = /** @class */function (_super) {\n  __extends(AccountsWrapper, _super);\n  function AccountsWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.RELEASE_4_VERSION = (0, versions_1.newContractVersion)(1, 1, 2, 0);\n    /**\n     * Creates an account.\n     */\n    _this.createAccount = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.createAccount);\n    /**\n     * Returns the attestation signer for the specified account.\n     * @param account The address of the account.\n     * @return The address with which the account can vote.\n     */\n    _this.getAttestationSigner = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationSigner);\n    /**\n     * Returns if the account has authorized an attestation signer\n     * @param account The address of the account.\n     * @return If the account has authorized an attestation signer\n     */\n    _this.hasAuthorizedAttestationSigner = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.hasAuthorizedAttestationSigner);\n    /**\n     * Returns the vote signer for the specified account.\n     * @param account The address of the account.\n     * @return The address with which the account can vote.\n     */\n    _this.getVoteSigner = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getVoteSigner);\n    /**\n     * Returns the validator signer for the specified account.\n     * @param account The address of the account.\n     * @return The address with which the account can register a validator or group.\n     */\n    _this.getValidatorSigner = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getValidatorSigner);\n    /**\n     * Returns the account address given the signer for voting\n     * @param signer Address that is authorized to sign the tx as voter\n     * @return The Account address\n     */\n    _this.voteSignerToAccount = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.voteSignerToAccount);\n    /**\n     * Returns the account address given the signer for validating\n     * @param signer Address that is authorized to sign the tx as validator\n     * @return The Account address\n     */\n    _this.validatorSignerToAccount = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.validatorSignerToAccount);\n    /**\n     * Returns the account associated with `signer`.\n     * @param signer The address of the account or previously authorized signer.\n     * @dev Fails if the `signer` is not an account or previously authorized signer.\n     * @return The associated account.\n     */\n    _this.signerToAccount = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.signerToAccount);\n    /**\n     * Check if an account already exists.\n     * @param account The address of the account\n     * @return Returns `true` if account exists. Returns `false` otherwise.\n     */\n    _this.isAccount = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.isAccount);\n    /**\n     * Check if an address is a signer address\n     * @param address The address of the account\n     * @return Returns `true` if account exists. Returns `false` otherwise.\n     */\n    _this.isSigner = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.isAuthorizedSigner);\n    /**\n     * Returns the set data encryption key for the account\n     * @param account Account\n     */\n    _this.getDataEncryptionKey = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getDataEncryptionKey, undefined, function (res) {\n      return (0, BaseWrapper_1.solidityBytesToString)(res);\n    });\n    /**\n     * Returns the set wallet address for the account\n     * @param account Account\n     */\n    _this.getWalletAddress = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getWalletAddress);\n    /**\n     * Returns the metadataURL for the account\n     * @param account Account\n     */\n    _this.getMetadataURL = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getMetadataURL);\n    /**\n     * Sets the data encryption of the account\n     * @param encryptionKey The key to set\n     */\n    _this.setAccountDataEncryptionKey = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.setAccountDataEncryptionKey);\n    /**\n     * Sets the name for the account\n     * @param name The name to set\n     */\n    _this.setName = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.setName);\n    /**\n     * Sets the metadataURL for the account\n     * @param url The url to set\n     */\n    _this.setMetadataURL = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.setMetadataURL);\n    /**\n     * Set a validator's payment delegation settings.\n     * @param beneficiary The address that should receive a portion of validator\n     * payments.\n     * @param fraction The fraction of the validator's payment that should be\n     * diverted to `beneficiary` every epoch, given as FixidityLib value. Must not\n     * be greater than 1.\n     * @dev Use `deletePaymentDelegation` to unset the payment delegation.\n     */\n    _this.setPaymentDelegation = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.setPaymentDelegation);\n    /**\n     * Remove a validator's payment delegation by setting benficiary and\n     * fraction to 0.\n     */\n    _this.deletePaymentDelegation = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.deletePaymentDelegation);\n    /**\n     * Get a validator's payment delegation settings.\n     * @param account Account of the validator.\n     * @return Beneficiary address and fraction of payment delegated.\n     */\n    _this.getPaymentDelegation = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getPaymentDelegation);\n    return _this;\n  }\n  AccountsWrapper.prototype.getCurrentSigners = function (address) {\n    return Promise.all([this.getVoteSigner(address), this.getValidatorSigner(address), this.getAttestationSigner(address)]);\n  };\n  AccountsWrapper.prototype.getAccountSummary = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ret;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, Promise.all([this.getName(account), this.getVoteSigner(account), this.getValidatorSigner(account), this.getAttestationSigner(account), this.getMetadataURL(account), this.getWalletAddress(account), this.getDataEncryptionKey(account)])];\n          case 1:\n            ret = _a.sent();\n            return [2 /*return*/, {\n              address: account,\n              name: ret[0],\n              authorizedSigners: {\n                vote: ret[1],\n                validator: ret[2],\n                attestation: ret[3]\n              },\n              metadataURL: ret[4],\n              wallet: ret[5],\n              dataEncryptionKey: ret[6]\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Authorize an attestation signing key on behalf of this account to another address.\n   * @param signer The address of the signing key to authorize.\n   * @param proofOfSigningKeyPossession The account address signed by the signer address.\n   * @return A CeloTransactionObject\n   */\n  AccountsWrapper.prototype.authorizeAttestationSigner = function (signer, proofOfSigningKeyPossession) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.authorizeAttestationSigner(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s))];\n      });\n    });\n  };\n  /**\n   * Authorizes an address to sign votes on behalf of the account.\n   * @param signer The address of the vote signing key to authorize.\n   * @param proofOfSigningKeyPossession The account address signed by the signer address.\n   * @return A CeloTransactionObject\n   */\n  AccountsWrapper.prototype.authorizeVoteSigner = function (signer, proofOfSigningKeyPossession) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.authorizeVoteSigner(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s))];\n      });\n    });\n  };\n  /**\n   * Authorizes an address to sign consensus messages on behalf of the account.\n   * @param signer The address of the signing key to authorize.\n   * @param proofOfSigningKeyPossession The account address signed by the signer address.\n   * @return A CeloTransactionObject\n   */\n  AccountsWrapper.prototype.authorizeValidatorSigner = function (signer, proofOfSigningKeyPossession, validatorsWrapper) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account, _a, message, prefixedMsg, pubKey;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.connection.defaultAccount;\n            if (_a) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.connection.getAccounts()];\n          case 1:\n            _a = _b.sent()[0];\n            _b.label = 2;\n          case 2:\n            account = _a;\n            return [4 /*yield*/, validatorsWrapper.isValidator(account)];\n          case 3:\n            if (_b.sent()) {\n              message = this.connection.web3.utils.soliditySha3({\n                type: 'address',\n                value: account\n              });\n              prefixedMsg = (0, signatureUtils_2.hashMessageWithPrefix)(message);\n              pubKey = (0, signatureUtils_2.signedMessageToPublicKey)(prefixedMsg, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s);\n              return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.authorizeValidatorSignerWithPublicKey(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s, (0, BaseWrapper_1.stringToSolidityBytes)(pubKey)))];\n            } else {\n              return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.authorizeValidatorSigner(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s))];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Authorizes an address to sign consensus messages on behalf of the account. Also switch BLS key at the same time.\n   * @param signer The address of the signing key to authorize.\n   * @param proofOfSigningKeyPossession The account address signed by the signer address.\n   * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass proof\n   *   of possession. 48 bytes.\n   * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\n   *   account address. 96 bytes.\n   * @return A CeloTransactionObject\n   */\n  AccountsWrapper.prototype.authorizeValidatorSignerAndBls = function (signer, proofOfSigningKeyPossession, blsPublicKey, blsPop) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account, _a, message, prefixedMsg, pubKey;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.connection.defaultAccount;\n            if (_a) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.connection.getAccounts()];\n          case 1:\n            _a = _b.sent()[0];\n            _b.label = 2;\n          case 2:\n            account = _a;\n            message = this.connection.web3.utils.soliditySha3({\n              type: 'address',\n              value: account\n            });\n            prefixedMsg = (0, signatureUtils_2.hashMessageWithPrefix)(message);\n            pubKey = (0, signatureUtils_2.signedMessageToPublicKey)(prefixedMsg, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s);\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.authorizeValidatorSignerWithKeys(signer, proofOfSigningKeyPossession.v, proofOfSigningKeyPossession.r, proofOfSigningKeyPossession.s, (0, BaseWrapper_1.stringToSolidityBytes)(pubKey), (0, BaseWrapper_1.stringToSolidityBytes)(blsPublicKey), (0, BaseWrapper_1.stringToSolidityBytes)(blsPop)))];\n        }\n      });\n    });\n  };\n  AccountsWrapper.prototype.authorizeSigner = function (signer, role) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, accounts, chainId, account, hashedRole, typedData, sig;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.onlyVersionOrGreater(this.RELEASE_4_VERSION)];\n          case 1:\n            _b.sent();\n            return [4 /*yield*/, Promise.all([this.connection.getAccounts(), this.connection.chainId()\n            // This IS the accounts contract wrapper no need to get it\n            ])];\n\n          case 2:\n            _a = _b.sent(), accounts = _a[0], chainId = _a[1];\n            account = this.connection.defaultAccount || accounts[0];\n            hashedRole = this.keccak256(role);\n            typedData = (0, typed_data_constructors_1.authorizeSigner)({\n              account: account,\n              signer: signer,\n              chainId: chainId,\n              role: hashedRole,\n              accountsContractAddress: this.address\n            });\n            return [4 /*yield*/, this.connection.signTypedData(signer, typedData)];\n          case 3:\n            sig = _b.sent();\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.authorizeSignerWithSignature(signer, hashedRole, sig.v, sig.r, sig.s))];\n        }\n      });\n    });\n  };\n  AccountsWrapper.prototype.startSignerAuthorization = function (signer, role) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.onlyVersionOrGreater(this.RELEASE_4_VERSION)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.authorizeSigner(signer, this.keccak256(role)))];\n        }\n      });\n    });\n  };\n  AccountsWrapper.prototype.completeSignerAuthorization = function (account, role) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.onlyVersionOrGreater(this.RELEASE_4_VERSION)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.completeSignerAuthorization(account, this.keccak256(role)))];\n        }\n      });\n    });\n  };\n  /**\n   * Removes the currently authorized attestation signer for the account\n   * @returns A CeloTransactionObject\n   */\n  AccountsWrapper.prototype.removeAttestationSigner = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.removeAttestationSigner())];\n      });\n    });\n  };\n  AccountsWrapper.prototype.generateProofOfKeyPossession = function (account, signer) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.getParsedSignatureOfAddress(account, signer, (0, signatureUtils_1.NativeSigner)(this.connection.web3.eth.sign, signer))];\n      });\n    });\n  };\n  AccountsWrapper.prototype.generateProofOfKeyPossessionLocally = function (account, signer, privateKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.getParsedSignatureOfAddress(account, signer, (0, signatureUtils_2.LocalSigner)(privateKey))];\n      });\n    });\n  };\n  /**\n   * Returns the set name for the account\n   * @param account Account\n   * @param blockNumber Height of result, defaults to tip.\n   */\n  AccountsWrapper.prototype.getName = function (account, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        // @ts-ignore: Expected 0-1 arguments, but got 2\n        return [2 /*return*/, this.contract.methods.getName(account).call({}, blockNumber)];\n      });\n    });\n  };\n  /**\n   * Convenience Setter for the dataEncryptionKey and wallet address for an account\n   * @param name A string to set as the name of the account\n   * @param dataEncryptionKey secp256k1 public key for data encryption. Preferably compressed.\n   * @param walletAddress The wallet address to set for the account\n   * @param proofOfPossession Signature from the wallet address key over the sender's address\n   */\n  AccountsWrapper.prototype.setAccount = function (name, dataEncryptionKey, walletAddress, proofOfPossession) {\n    if (proofOfPossession === void 0) {\n      proofOfPossession = null;\n    }\n    if (proofOfPossession) {\n      return (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.setAccount(name,\n      // @ts-ignore\n      dataEncryptionKey, walletAddress, proofOfPossession.v, proofOfPossession.r, proofOfPossession.s));\n    } else {\n      return (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.setAccount(name,\n      // @ts-ignore\n      dataEncryptionKey, walletAddress, '0x0', '0x0', '0x0'));\n    }\n  };\n  /**\n   * Sets the wallet address for the account\n   * @param address The address to set\n   */\n  AccountsWrapper.prototype.setWalletAddress = function (walletAddress, proofOfPossession) {\n    if (proofOfPossession === void 0) {\n      proofOfPossession = null;\n    }\n    if (proofOfPossession) {\n      return (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.setWalletAddress(walletAddress, proofOfPossession.v, proofOfPossession.r, proofOfPossession.s));\n    } else {\n      return (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.setWalletAddress(walletAddress, '0x0', '0x0', '0x0'));\n    }\n  };\n  AccountsWrapper.prototype.parseSignatureOfAddress = function (address, signer, signature) {\n    var hash = (0, solidity_1.soliditySha3)({\n      type: 'address',\n      value: address\n    });\n    return (0, signatureUtils_2.parseSignature)(hash, signature, signer);\n  };\n  AccountsWrapper.prototype.getParsedSignatureOfAddress = function (address, signer, signerFn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hash, signature;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            hash = (0, solidity_1.soliditySha3)({\n              type: 'address',\n              value: address\n            });\n            return [4 /*yield*/, signerFn.sign(hash)];\n          case 1:\n            signature = _a.sent();\n            return [2 /*return*/, (0, signatureUtils_2.parseSignature)(hash, signature, signer)];\n        }\n      });\n    });\n  };\n  AccountsWrapper.prototype.keccak256 = function (value) {\n    return this.connection.keccak256(value);\n  };\n  return AccountsWrapper;\n}(BaseWrapper_2.BaseWrapper);\nexports.AccountsWrapper = AccountsWrapper;","map":null,"metadata":{},"sourceType":"script"}