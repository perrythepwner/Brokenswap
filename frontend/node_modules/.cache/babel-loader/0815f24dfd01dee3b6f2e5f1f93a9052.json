{"ast":null,"code":"import _asyncToGenerator from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _jsxFileName = \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/pages/Swap/index.tsx\",\n  _s = $RefreshSig$();\nimport { useCelo } from '@celo/react-celo';\nimport { CELO, JSBI, Token } from '@ubeswap/sdk';\nimport { describeTrade } from 'components/swap/routing/describeTrade';\nimport { MoolaDirectTrade } from 'components/swap/routing/moola/MoolaDirectTrade';\nimport { useTradeCallback } from 'components/swap/routing/useTradeCallback';\nimport UnsupportedCurrencyFooter from 'components/swap/UnsupportedCurrencyFooter';\nimport { useIsTransactionUnsupported } from 'hooks/Trades';\nimport useENS from 'hooks/useENS';\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { ArrowDown } from 'react-feather';\nimport ReactGA from 'react-ga';\nimport { Text } from 'rebass';\nimport { ThemeContext } from 'styled-components';\nimport AddressInputPanel from '../../components/AddressInputPanel';\nimport { ButtonPrimary } from '../../components/Button';\nimport Card from '../../components/Card';\nimport { AutoColumn } from '../../components/Column';\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel';\nimport { SwapPoolTabs } from '../../components/NavigationTabs';\nimport { AutoRow, RowBetween } from '../../components/Row';\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown';\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee';\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal';\nimport { ArrowWrapper, Wrapper } from '../../components/swap/styleds';\nimport SwapHeader from '../../components/swap/SwapHeader';\nimport TradePrice from '../../components/swap/TradePrice';\nimport { useAllTokens, useCurrency } from '../../hooks/Tokens';\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback';\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks';\nimport { Field } from '../../state/swap/actions';\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers, useSwapState } from '../../state/swap/hooks';\nimport { useExpertModeManager, useUserSingleHopOnly, useUserSlippageTolerance } from '../../state/user/hooks';\nimport { LinkStyledButton } from '../../theme';\nimport { maxAmountSpend } from '../../utils/maxAmountSpend';\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices';\nimport AppBody from '../AppBody';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Swap() {\n  _s();\n  var _ref2, _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$indepe, _parsedAmounts$Field$, _parsedAmounts$Field$2;\n  const loadedUrlParams = useDefaultsFromURLSearch();\n\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.inputCurrencyId), useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : loadedUrlParams.outputCurrencyId)];\n  const [dismissTokenWarning, setDismissTokenWarning] = useState(false);\n  const urlLoadedTokens = useMemo(() => {\n    var _filter, _ref;\n    return (_filter = (_ref = [loadedInputCurrency, loadedOutputCurrency]) === null || _ref === void 0 ? void 0 : _ref.filter(c => c instanceof Token)) !== null && _filter !== void 0 ? _filter : [];\n  }, [loadedInputCurrency, loadedOutputCurrency]);\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true);\n  }, []);\n\n  // dismiss warning if all imported tokens are in active lists\n  const defaultTokens = useAllTokens();\n  const importTokensNotInDefault = urlLoadedTokens && urlLoadedTokens.filter(token => {\n    return !(token.address in defaultTokens);\n  });\n  const {\n    address: account,\n    network\n  } = useCelo();\n  const chainId = network.chainId;\n  const theme = useContext(ThemeContext);\n\n  // toggle wallet when disconnected\n  const toggleWalletModal = useWalletModalToggle();\n\n  // for expert mode\n  const toggleSettings = useToggleSettingsMenu();\n  const [isExpertMode] = useExpertModeManager();\n\n  // get custom setting values for user\n  const [allowedSlippage] = useUserSlippageTolerance();\n\n  // swap state\n  const {\n    independentField,\n    typedValue,\n    recipient\n  } = useSwapState();\n  const {\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError,\n    showRamp\n  } = useDerivedSwapInfo();\n  const {\n    address: recipientAddress\n  } = useENS(recipient);\n  const trade = v2Trade;\n  const parsedAmounts = {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n  };\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const isValid = !swapInputError;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]);\n\n  // modal and loading\n  const [{\n    showConfirm,\n    tradeToConfirm,\n    swapErrorMessage,\n    attemptingTxn,\n    txHash\n  }, setSwapState] = useState({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  });\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: (_ref2 = trade instanceof MoolaDirectTrade ? (_parsedAmounts$depend = parsedAmounts[dependentField]) === null || _parsedAmounts$depend === void 0 ? void 0 : _parsedAmounts$depend.toExact() : (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _ref2 !== void 0 ? _ref2 : ''\n  };\n  const userHasSpecifiedInputOutput = Boolean(currencies[Field.INPUT] && currencies[Field.OUTPUT] && ((_parsedAmounts$indepe = parsedAmounts[independentField]) === null || _parsedAmounts$indepe === void 0 ? void 0 : _parsedAmounts$indepe.greaterThan(JSBI.BigInt(0))));\n  const route = trade === null || trade === void 0 ? void 0 : trade.route;\n  const noRoute = !route;\n\n  // check whether the user has approved the router on the input token\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage);\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState(false);\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true);\n    }\n  }, [approval, approvalSubmitted]);\n  const maxAmountInput = maxAmountSpend(currencyBalances[Field.INPUT]);\n  const atMaxAmountInput = Boolean(maxAmountInput && ((_parsedAmounts$Field$ = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.equalTo(maxAmountInput)));\n  const atHalfAmountInput = Boolean(maxAmountInput && Number(maxAmountInput.toExact()) * 0.5 === Number((_parsedAmounts$Field$2 = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$2 === void 0 ? void 0 : _parsedAmounts$Field$2.toExact()));\n\n  // the callback to execute the swap\n  const {\n    callback: swapCallback,\n    error: swapCallbackError\n  } = useTradeCallback(trade, allowedSlippage, recipient);\n  const {\n    priceImpactWithoutFee\n  } = computeTradePriceBreakdown(trade);\n  const [singleHopOnly] = useUserSingleHopOnly();\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return;\n    }\n    if (!swapCallback) {\n      return;\n    }\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined\n    });\n    swapCallback().then(hash => {\n      var _trade$inputAmount, _trade$inputAmount$cu, _trade$outputAmount, _trade$outputAmount$c;\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: undefined,\n        txHash: hash\n      });\n      ReactGA.event({\n        category: 'Swap',\n        action: recipient === null ? 'Swap w/o Send' : (recipientAddress !== null && recipientAddress !== void 0 ? recipientAddress : recipient) === account ? 'Swap w/o Send + recipient' : 'Swap w/ Send',\n        label: [trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : (_trade$inputAmount$cu = _trade$inputAmount.currency) === null || _trade$inputAmount$cu === void 0 ? void 0 : _trade$inputAmount$cu.symbol, trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : (_trade$outputAmount$c = _trade$outputAmount.currency) === null || _trade$outputAmount$c === void 0 ? void 0 : _trade$outputAmount$c.symbol].join('/')\n      });\n      ReactGA.event({\n        category: 'Routing',\n        action: singleHopOnly ? 'Swap with multihop disabled' : 'Swap with multihop enabled'\n      });\n    }).catch(error => {\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: error.message,\n        txHash: undefined\n      });\n    });\n  }, [priceImpactWithoutFee, swapCallback, tradeToConfirm, showConfirm, recipient, recipientAddress, account, trade, singleHopOnly]);\n\n  // errors\n  const [showInverted, setShowInverted] = useState(false);\n\n  // warnings on slippage\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee);\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow = !swapInputError && (approval === ApprovalState.NOT_APPROVED || approval === ApprovalState.PENDING || approvalSubmitted && approval === ApprovalState.APPROVED) && !(priceImpactSeverity > 3 && !isExpertMode);\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash\n    });\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '');\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm\n    });\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash]);\n  const handleInputSelect = useCallback(inputCurrency => {\n    setApprovalSubmitted(false); // reset 2 step UI for approvals\n    onCurrencySelection(Field.INPUT, inputCurrency);\n  }, [onCurrencySelection]);\n  const handleMaxInput = useCallback(() => {\n    if (maxAmountInput) {\n      var _currencies$INPUT;\n      if ((currencies === null || currencies === void 0 ? void 0 : (_currencies$INPUT = currencies.INPUT) === null || _currencies$INPUT === void 0 ? void 0 : _currencies$INPUT.address) === CELO[chainId].address) {\n        onUserInput(Field.INPUT, Math.max(Number(maxAmountInput.toExact()) - 0.01, 0).toString());\n      } else {\n        onUserInput(Field.INPUT, maxAmountInput.toExact());\n      }\n    }\n  }, [maxAmountInput, onUserInput, currencies, chainId]);\n  const handleHalfInput = useCallback(() => {\n    if (maxAmountInput) {\n      onUserInput(Field.INPUT, Math.max(Number(maxAmountInput.toExact()) * 0.5, 0).toString());\n    }\n  }, [maxAmountInput, onUserInput]);\n  const handleOutputSelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [onCurrencySelection]);\n  const swapIsUnsupported = useIsTransactionUnsupported(currencies === null || currencies === void 0 ? void 0 : currencies.INPUT, currencies === null || currencies === void 0 ? void 0 : currencies.OUTPUT);\n  const {\n    isEstimate,\n    makeLabel\n  } = describeTrade(trade);\n  const actionLabel = makeLabel(independentField !== Field.INPUT);\n\n  // const web3 = new Web3(window.ethereum)\n  // const contract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS)\n\n  const sendSwapTx = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      const inputElement = document.getElementById('swap-currency-input');\n      const outputElement = document.getElementById('swap-currency-output');\n      const inputCurrency = inputElement.value;\n      const outputCurrency = outputElement.value;\n      const inputAmount = formattedAmounts[Field.INPUT];\n      const outputAmount = formattedAmounts[Field.OUTPUT];\n      //const rawTx = await contract.methods.swap(inputCurrency, outputCurrency, inputAmount, outputAmount).encodeABI()\n      //web3.eth.sendTransaction({ to: CONTRACT_ADDRESS, data: rawTx })\n    });\n    return function sendSwapTx() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SwapPoolTabs, {\n      active: 'swap'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppBody, {\n      children: [/*#__PURE__*/_jsxDEV(SwapHeader, {\n        title: actionLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n        id: \"swap-page\",\n        children: [/*#__PURE__*/_jsxDEV(ConfirmSwapModal, {\n          isOpen: showConfirm,\n          trade: trade,\n          originalTrade: tradeToConfirm,\n          onAcceptChanges: handleAcceptChanges,\n          attemptingTxn: attemptingTxn,\n          txHash: txHash,\n          recipient: recipient,\n          allowedSlippage: allowedSlippage,\n          onConfirm: handleSwap,\n          swapErrorMessage: swapErrorMessage,\n          onDismiss: handleConfirmDismiss\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n          gap: 'md',\n          children: [/*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n            label: independentField === Field.OUTPUT && trade ? 'From'.concat(isEstimate ? ' (estimated)' : '') : 'From',\n            value: formattedAmounts[Field.INPUT],\n            showMaxButton: !atMaxAmountInput,\n            showHalfButton: !atHalfAmountInput,\n            currency: currencies[Field.INPUT],\n            onUserInput: handleTypeInput,\n            onMax: handleMaxInput,\n            onHalf: handleHalfInput,\n            onCurrencySelect: handleInputSelect,\n            otherCurrency: currencies[Field.OUTPUT],\n            id: \"swap-currency-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n            justify: \"space-between\",\n            children: /*#__PURE__*/_jsxDEV(AutoRow, {\n              justify: isExpertMode ? 'space-between' : 'center',\n              style: {\n                padding: '0 1rem'\n              },\n              children: /*#__PURE__*/_jsxDEV(ArrowWrapper, {\n                clickable: true,\n                children: /*#__PURE__*/_jsxDEV(ArrowDown, {\n                  size: \"16\",\n                  onClick: () => {\n                    setApprovalSubmitted(false); // reset 2 step UI for approvals\n                    handleTypeInput(formattedAmounts[Field.OUTPUT]);\n                    onSwitchTokens();\n                  },\n                  color: currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n            value: formattedAmounts[Field.OUTPUT],\n            onUserInput: handleTypeOutput,\n            label: independentField === Field.INPUT && trade ? 'To'.concat(isEstimate ? ' (estimated)' : '') : 'To',\n            showMaxButton: false,\n            currency: currencies[Field.OUTPUT],\n            onCurrencySelect: handleOutputSelect,\n            otherCurrency: currencies[Field.INPUT],\n            id: \"swap-currency-output\",\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this), recipient !== null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(AutoRow, {\n              justify: \"space-between\",\n              style: {\n                padding: '0 1rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(ArrowWrapper, {\n                clickable: false,\n                children: /*#__PURE__*/_jsxDEV(ArrowDown, {\n                  size: \"16\",\n                  color: theme.text2\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 374,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(LinkStyledButton, {\n                id: \"remove-recipient-button\",\n                onClick: () => onChangeRecipient(null),\n                children: \"- Remove send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(AddressInputPanel, {\n              id: \"recipient\",\n              value: recipient,\n              onChange: onChangeRecipient\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : null, /*#__PURE__*/_jsxDEV(Card, {\n            padding: '0px',\n            borderRadius: '20px',\n            children: /*#__PURE__*/_jsxDEV(AutoColumn, {\n              gap: \"8px\",\n              style: {\n                padding: '0 16px'\n              },\n              children: Boolean(trade) && /*#__PURE__*/_jsxDEV(RowBetween, {\n                align: \"center\",\n                children: [/*#__PURE__*/_jsxDEV(Text, {\n                  fontWeight: 500,\n                  fontSize: 14,\n                  color: theme.text2,\n                  children: \"Price\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 387,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TradePrice, {\n                  price: trade === null || trade === void 0 ? void 0 : trade.executionPrice,\n                  showInverted: showInverted,\n                  setShowInverted: setShowInverted\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n            borderRadius: \"12px\",\n            onClick: sendSwapTx,\n            children: 'Swap'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), !swapIsUnsupported ? /*#__PURE__*/_jsxDEV(AdvancedSwapDetailsDropdown, {\n      trade: trade\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(UnsupportedCurrencyFooter, {\n      show: swapIsUnsupported,\n      currencies: [currencies.INPUT, currencies.OUTPUT]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Swap, \"C0b5nIZZ1b9QKq9vbPSg/BRaZmg=\", false, function () {\n  return [useDefaultsFromURLSearch, useCurrency, useCurrency, useAllTokens, useCelo, useWalletModalToggle, useToggleSettingsMenu, useExpertModeManager, useUserSlippageTolerance, useSwapState, useDerivedSwapInfo, useENS, useSwapActionHandlers, useApproveCallbackFromTrade, useTradeCallback, useUserSingleHopOnly, useIsTransactionUnsupported];\n});\n_c = Swap;\nvar _c;\n$RefreshReg$(_c, \"Swap\");","map":{"version":3,"names":["useCelo","CELO","JSBI","Token","describeTrade","MoolaDirectTrade","useTradeCallback","UnsupportedCurrencyFooter","useIsTransactionUnsupported","useENS","React","useCallback","useContext","useEffect","useMemo","useState","ArrowDown","ReactGA","Text","ThemeContext","AddressInputPanel","ButtonPrimary","Card","AutoColumn","CurrencyInputPanel","SwapPoolTabs","AutoRow","RowBetween","AdvancedSwapDetailsDropdown","confirmPriceImpactWithoutFee","ConfirmSwapModal","ArrowWrapper","Wrapper","SwapHeader","TradePrice","useAllTokens","useCurrency","ApprovalState","useApproveCallbackFromTrade","useToggleSettingsMenu","useWalletModalToggle","Field","useDefaultsFromURLSearch","useDerivedSwapInfo","useSwapActionHandlers","useSwapState","useExpertModeManager","useUserSingleHopOnly","useUserSlippageTolerance","LinkStyledButton","maxAmountSpend","computeTradePriceBreakdown","warningSeverity","AppBody","jsxDEV","_jsxDEV","Fragment","_Fragment","Swap","_s","_ref2","_parsedAmounts$depend","_parsedAmounts$depend2","_parsedAmounts$indepe","_parsedAmounts$Field$","_parsedAmounts$Field$2","loadedUrlParams","loadedInputCurrency","loadedOutputCurrency","inputCurrencyId","outputCurrencyId","dismissTokenWarning","setDismissTokenWarning","urlLoadedTokens","_filter","_ref","filter","c","handleConfirmTokenWarning","defaultTokens","importTokensNotInDefault","token","address","account","network","chainId","theme","toggleWalletModal","toggleSettings","isExpertMode","allowedSlippage","independentField","typedValue","recipient","v2Trade","currencyBalances","parsedAmount","currencies","inputError","swapInputError","showRamp","recipientAddress","trade","parsedAmounts","INPUT","inputAmount","OUTPUT","outputAmount","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","handleTypeInput","value","handleTypeOutput","showConfirm","tradeToConfirm","swapErrorMessage","attemptingTxn","txHash","setSwapState","undefined","formattedAmounts","toExact","toSignificant","userHasSpecifiedInputOutput","Boolean","greaterThan","BigInt","route","noRoute","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","PENDING","maxAmountInput","atMaxAmountInput","equalTo","atHalfAmountInput","Number","callback","swapCallback","error","swapCallbackError","priceImpactWithoutFee","singleHopOnly","handleSwap","then","hash","_trade$inputAmount","_trade$inputAmount$cu","_trade$outputAmount","_trade$outputAmount$c","event","category","action","label","currency","symbol","join","catch","message","showInverted","setShowInverted","priceImpactSeverity","showApproveFlow","NOT_APPROVED","APPROVED","handleConfirmDismiss","handleAcceptChanges","handleInputSelect","inputCurrency","handleMaxInput","_currencies$INPUT","Math","max","toString","handleHalfInput","handleOutputSelect","outputCurrency","swapIsUnsupported","isEstimate","makeLabel","actionLabel","sendSwapTx","_ref3","_asyncToGenerator","inputElement","document","getElementById","outputElement","apply","arguments","children","active","fileName","_jsxFileName","lineNumber","columnNumber","title","id","isOpen","originalTrade","onAcceptChanges","onConfirm","onDismiss","gap","concat","showMaxButton","showHalfButton","onMax","onHalf","onCurrencySelect","otherCurrency","justify","style","padding","clickable","size","onClick","color","primary1","text2","disabled","onChange","borderRadius","align","fontWeight","fontSize","price","executionPrice","show","_c","$RefreshReg$"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/pages/Swap/index.tsx"],"sourcesContent":["import { useCelo } from '@celo/react-celo'\nimport { RampInstantSDK } from '@ramp-network/ramp-instant-sdk'\nimport { CELO, ChainId as UbeswapChainId, JSBI, Token, TokenAmount, Trade } from '@ubeswap/sdk'\nimport OpticsV1Warning from 'components/Header/OpticsV1Warning'\nimport { describeTrade } from 'components/swap/routing/describeTrade'\nimport { MoolaDirectTrade } from 'components/swap/routing/moola/MoolaDirectTrade'\nimport { useTradeCallback } from 'components/swap/routing/useTradeCallback'\nimport UnsupportedCurrencyFooter from 'components/swap/UnsupportedCurrencyFooter'\nimport { useIsTransactionUnsupported } from 'hooks/Trades'\nimport useENS from 'hooks/useENS'\nimport React, { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { ArrowDown } from 'react-feather'\nimport ReactGA from 'react-ga'\nimport { Text } from 'rebass'\nimport { ThemeContext } from 'styled-components'\n\nimport AddressInputPanel from '../../components/AddressInputPanel'\nimport { ButtonConfirmed, ButtonError, ButtonLight, ButtonPrimary } from '../../components/Button'\nimport Card, { GreyCard } from '../../components/Card'\nimport Column, { AutoColumn } from '../../components/Column'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport Loader from '../../components/Loader'\nimport { SwapPoolTabs } from '../../components/NavigationTabs'\nimport ProgressSteps from '../../components/ProgressSteps'\nimport { AutoRow, RowBetween } from '../../components/Row'\nimport AdvancedSwapDetailsDropdown from '../../components/swap/AdvancedSwapDetailsDropdown'\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee'\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal'\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError, Wrapper } from '../../components/swap/styleds'\nimport SwapHeader from '../../components/swap/SwapHeader'\nimport TradePrice from '../../components/swap/TradePrice'\nimport TokenWarningModal from '../../components/TokenWarningModal'\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../constants'\nimport { useAllTokens, useCurrency } from '../../hooks/Tokens'\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback'\nimport { useToggleSettingsMenu, useWalletModalToggle } from '../../state/application/hooks'\nimport { Field } from '../../state/swap/actions'\nimport {\n  useDefaultsFromURLSearch,\n  useDerivedSwapInfo,\n  useSwapActionHandlers,\n  useSwapState,\n} from '../../state/swap/hooks'\nimport { useExpertModeManager, useUserSingleHopOnly, useUserSlippageTolerance } from '../../state/user/hooks'\nimport { LinkStyledButton, TYPE } from '../../theme'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices'\nimport AppBody from '../AppBody'\nimport { ClickableText } from '../Pool/styleds'\n\nimport Web3 from 'web3'\n\nexport default function Swap() {\n  const loadedUrlParams = useDefaultsFromURLSearch()\n\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [\n    useCurrency(loadedUrlParams?.inputCurrencyId),\n    useCurrency(loadedUrlParams?.outputCurrencyId),\n  ]\n  const [dismissTokenWarning, setDismissTokenWarning] = useState<boolean>(false)\n  const urlLoadedTokens: Token[] = useMemo(\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c instanceof Token) ?? [],\n    [loadedInputCurrency, loadedOutputCurrency]\n  )\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true)\n  }, [])\n\n  // dismiss warning if all imported tokens are in active lists\n  const defaultTokens = useAllTokens()\n  const importTokensNotInDefault =\n    urlLoadedTokens &&\n    urlLoadedTokens.filter((token: Token) => {\n      return !(token.address in defaultTokens)\n    })\n\n  const { address: account, network } = useCelo()\n  const chainId = network.chainId as unknown as UbeswapChainId\n\n  const theme = useContext(ThemeContext)\n\n  // toggle wallet when disconnected\n  const toggleWalletModal = useWalletModalToggle()\n\n  // for expert mode\n  const toggleSettings = useToggleSettingsMenu()\n  const [isExpertMode] = useExpertModeManager()\n\n  // get custom setting values for user\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  // swap state\n  const { independentField, typedValue, recipient } = useSwapState()\n  const {\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError,\n    showRamp,\n  } = useDerivedSwapInfo()\n  const { address: recipientAddress } = useENS(recipient)\n  const trade = v2Trade\n\n  const parsedAmounts = {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount,\n  }\n\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\n  const isValid = !swapInputError\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value)\n    },\n    [onUserInput]\n  )\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value)\n    },\n    [onUserInput]\n  )\n\n  // modal and loading\n  const [{ showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n    showConfirm: boolean\n    tradeToConfirm: Trade | undefined\n    attemptingTxn: boolean\n    swapErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]:\n      (trade instanceof MoolaDirectTrade\n        ? parsedAmounts[dependentField]?.toExact()\n        : parsedAmounts[dependentField]?.toSignificant(6)) ?? '',\n  }\n\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\n  )\n  const route = trade?.route\n  const noRoute = !route\n\n  // check whether the user has approved the router on the input token\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approval === ApprovalState.PENDING) {\n      setApprovalSubmitted(true)\n    }\n  }, [approval, approvalSubmitted])\n\n  const maxAmountInput: TokenAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\n  const atHalfAmountInput = Boolean(\n    maxAmountInput && Number(maxAmountInput.toExact()) * 0.5 === Number(parsedAmounts[Field.INPUT]?.toExact())\n  )\n\n  // the callback to execute the swap\n  const { callback: swapCallback, error: swapCallbackError } = useTradeCallback(trade, allowedSlippage, recipient)\n\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\n\n  const [singleHopOnly] = useUserSingleHopOnly()\n\n  const handleSwap = useCallback(() => {\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee)) {\n      return\n    }\n    if (!swapCallback) {\n      return\n    }\n    setSwapState({ attemptingTxn: true, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: undefined })\n    swapCallback()\n      .then((hash) => {\n        setSwapState({ attemptingTxn: false, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: hash })\n\n        ReactGA.event({\n          category: 'Swap',\n          action:\n            recipient === null\n              ? 'Swap w/o Send'\n              : (recipientAddress ?? recipient) === account\n              ? 'Swap w/o Send + recipient'\n              : 'Swap w/ Send',\n          label: [trade?.inputAmount?.currency?.symbol, trade?.outputAmount?.currency?.symbol].join('/'),\n        })\n\n        ReactGA.event({\n          category: 'Routing',\n          action: singleHopOnly ? 'Swap with multihop disabled' : 'Swap with multihop enabled',\n        })\n      })\n      .catch((error) => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined,\n        })\n      })\n  }, [\n    priceImpactWithoutFee,\n    swapCallback,\n    tradeToConfirm,\n    showConfirm,\n    recipient,\n    recipientAddress,\n    account,\n    trade,\n    singleHopOnly,\n  ])\n\n  // errors\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n\n  // warnings on slippage\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow =\n    !swapInputError &&\n    (approval === ApprovalState.NOT_APPROVED ||\n      approval === ApprovalState.PENDING ||\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !isExpertMode)\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({ showConfirm: false, tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '')\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash])\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn, showConfirm })\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash])\n\n  const handleInputSelect = useCallback(\n    (inputCurrency) => {\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, inputCurrency)\n    },\n    [onCurrencySelection]\n  )\n\n  const handleMaxInput = useCallback(() => {\n    if (maxAmountInput) {\n      if (currencies?.INPUT?.address === CELO[chainId].address) {\n        onUserInput(Field.INPUT, Math.max(Number(maxAmountInput.toExact()) - 0.01, 0).toString())\n      } else {\n        onUserInput(Field.INPUT, maxAmountInput.toExact())\n      }\n    }\n  }, [maxAmountInput, onUserInput, currencies, chainId])\n\n  const handleHalfInput = useCallback(() => {\n    if (maxAmountInput) {\n      onUserInput(Field.INPUT, Math.max(Number(maxAmountInput.toExact()) * 0.5, 0).toString())\n    }\n  }, [maxAmountInput, onUserInput])\n\n  const handleOutputSelect = useCallback(\n    (outputCurrency) => onCurrencySelection(Field.OUTPUT, outputCurrency),\n    [onCurrencySelection]\n  )\n\n  const swapIsUnsupported = useIsTransactionUnsupported(currencies?.INPUT, currencies?.OUTPUT)\n\n  const { isEstimate, makeLabel } = describeTrade(trade)\n  const actionLabel = makeLabel(independentField !== Field.INPUT)\n  \n  // const web3 = new Web3(window.ethereum)\n  // const contract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS)\n\n  const sendSwapTx = async () => {\n    const inputElement = document.getElementById('swap-currency-input') as HTMLInputElement\n    const outputElement = document.getElementById('swap-currency-output') as HTMLInputElement\n    const inputCurrency = inputElement.value\n    const outputCurrency = outputElement.value\n    const inputAmount = formattedAmounts[Field.INPUT]\n    const outputAmount = formattedAmounts[Field.OUTPUT]\n    //const rawTx = await contract.methods.swap(inputCurrency, outputCurrency, inputAmount, outputAmount).encodeABI()\n    //web3.eth.sendTransaction({ to: CONTRACT_ADDRESS, data: rawTx })\n  }\n\n  return (\n    <>\n      <SwapPoolTabs active={'swap'} />\n      <AppBody>\n        <SwapHeader title={actionLabel} />\n        <Wrapper id=\"swap-page\">\n          <ConfirmSwapModal\n            isOpen={showConfirm}\n            trade={trade}\n            originalTrade={tradeToConfirm}\n            onAcceptChanges={handleAcceptChanges}\n            attemptingTxn={attemptingTxn}\n            txHash={txHash}\n            recipient={recipient}\n            allowedSlippage={allowedSlippage}\n            onConfirm={handleSwap}\n            swapErrorMessage={swapErrorMessage}\n            onDismiss={handleConfirmDismiss}\n          />\n\n          <AutoColumn gap={'md'}>\n            <CurrencyInputPanel\n              label={\n                independentField === Field.OUTPUT && trade ? `${'From'}${isEstimate ? ' (estimated)' : ''}` : 'From'\n              }\n              value={formattedAmounts[Field.INPUT]}\n              showMaxButton={!atMaxAmountInput}\n              showHalfButton={!atHalfAmountInput}\n              currency={currencies[Field.INPUT]}\n              onUserInput={handleTypeInput}\n              onMax={handleMaxInput}\n              onHalf={handleHalfInput}\n              onCurrencySelect={handleInputSelect}\n              otherCurrency={currencies[Field.OUTPUT]}\n              id=\"swap-currency-input\"\n            />\n            <AutoColumn justify=\"space-between\">\n              <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\n                <ArrowWrapper clickable>\n                  <ArrowDown\n                    size=\"16\"\n                    onClick={() => {\n                      setApprovalSubmitted(false) // reset 2 step UI for approvals\n                      handleTypeInput(formattedAmounts[Field.OUTPUT])\n                      onSwitchTokens()\n                    }}\n                    color={currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.primary1 : theme.text2}\n                  />\n                </ArrowWrapper>\n              </AutoRow>\n            </AutoColumn>\n            <CurrencyInputPanel\n              value={formattedAmounts[Field.OUTPUT]}\n              onUserInput={handleTypeOutput}\n              label={independentField === Field.INPUT && trade ? `${'To'}${isEstimate ? ' (estimated)' : ''}` : 'To'}\n              showMaxButton={false}\n              currency={currencies[Field.OUTPUT]}\n              onCurrencySelect={handleOutputSelect}\n              otherCurrency={currencies[Field.INPUT]}\n              id=\"swap-currency-output\"\n              disabled\n            />\n\n            {recipient !== null ? (\n              <>\n                <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\n                  <ArrowWrapper clickable={false}>\n                    <ArrowDown size=\"16\" color={theme.text2} />\n                  </ArrowWrapper>\n                  <LinkStyledButton id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\n                    - Remove send\n                  </LinkStyledButton>\n                </AutoRow>\n                <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\n              </>\n            ) : null}\n            <Card padding={'0px'} borderRadius={'20px'}>\n              <AutoColumn gap=\"8px\" style={{ padding: '0 16px' }}>\n                {Boolean(trade) && (\n                  <RowBetween align=\"center\">\n                    <Text fontWeight={500} fontSize={14} color={theme.text2}>\n                      Price\n                    </Text>\n                    <TradePrice\n                      price={trade?.executionPrice}\n                      showInverted={showInverted}\n                      setShowInverted={setShowInverted}\n                    />\n                  </RowBetween>\n                )}\n              </AutoColumn>\n            </Card>\n            <ButtonPrimary borderRadius=\"12px\" onClick={sendSwapTx}>{`${'Swap'}`}</ButtonPrimary>\n          </AutoColumn>\n        </Wrapper>\n      </AppBody>\n      {!swapIsUnsupported ? (\n        <AdvancedSwapDetailsDropdown trade={trade} />\n      ) : (\n        <UnsupportedCurrencyFooter show={swapIsUnsupported} currencies={[currencies.INPUT, currencies.OUTPUT]} />\n      )}\n    </>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}