{"ast":null,"code":"const BN = require(\"bn.js\");\nconst Bytes = require(\"./bytes\");\nconst fromBN = bn => \"0x\" + bn.toString(\"hex\");\nconst toBN = str => new BN(str.slice(2), 16);\nconst fromString = str => {\n  const bn = \"0x\" + (str.slice(0, 2) === \"0x\" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString(\"hex\");\n  return bn === \"0x0\" ? \"0x\" : bn;\n};\nconst toEther = wei => toNumber(div(wei, fromString(\"10000000000\"))) / 100000000;\nconst fromEther = eth => mul(fromNumber(Math.floor(eth * 100000000)), fromString(\"10000000000\"));\nconst toString = a => toBN(a).toString(10);\nconst fromNumber = a => typeof a === \"string\" ? /^0x/.test(a) ? a : \"0x\" + a : \"0x\" + new BN(a).toString(\"hex\");\nconst toNumber = a => toBN(a).toNumber();\nconst toUint256 = a => Bytes.pad(32, a);\nconst bin = method => (a, b) => fromBN(toBN(a)[method](toBN(b)));\nconst add = bin(\"add\");\nconst mul = bin(\"mul\");\nconst div = bin(\"div\");\nconst sub = bin(\"sub\");\nmodule.exports = {\n  toString,\n  fromString,\n  toNumber,\n  fromNumber,\n  toEther,\n  fromEther,\n  toUint256,\n  add,\n  mul,\n  div,\n  sub\n};","map":null,"metadata":{},"sourceType":"script"}