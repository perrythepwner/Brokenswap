{"ast":null,"code":"import{parseUnits}from'@ethersproject/units';import{cUSD,JSBI,Token,TokenAmount}from'@ubeswap/sdk';import{useCallback}from'react';import{useDispatch,useSelector}from'react-redux';import{useCurrency}from'../../hooks/Tokens';import{isAddress}from'../../utils';import{Field,selectCurrency,setRecipient,switchCurrencies,typeInput}from'./actions';export function useSwapState(){return useSelector(state=>state.swap);}export function useSwapActionHandlers(){const dispatch=useDispatch();const onCurrencySelection=useCallback((field,currency)=>{dispatch(selectCurrency({field,currencyId:currency instanceof Token?currency.address:''}));},[dispatch]);const onSwitchTokens=useCallback(()=>{dispatch(switchCurrencies());},[dispatch]);const onUserInput=useCallback((field,typedValue)=>{dispatch(typeInput({field,typedValue}));},[dispatch]);const onChangeRecipient=useCallback(recipient=>{dispatch(setRecipient({recipient}));},[dispatch]);return{onSwitchTokens,onCurrencySelection,onUserInput,onChangeRecipient};}// try to parse a user entered amount for a given token\nexport function tryParseAmount(value,currency){if(!value||!currency){return undefined;}try{const typedValueParsed=parseUnits(value,currency.decimals).toString();if(typedValueParsed!=='0'){return new TokenAmount(currency,JSBI.BigInt(typedValueParsed));}}catch(error){// should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\nconsole.debug(\"Failed to parse input amount: \\\"\".concat(value,\"\\\"\"),error);}// necessary for all paths to return a value\nreturn new TokenAmount(currency,JSBI.BigInt(0));}// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(){var _ref;const{independentField,typedValue,[Field.INPUT]:{currencyId:inputCurrencyId},[Field.OUTPUT]:{currencyId:outputCurrencyId}}=useSwapState();const inputCurrency=useCurrency(inputCurrencyId);const outputCurrency=useCurrency(outputCurrencyId);const isExactIn=independentField===Field.INPUT;const parsedAmount=tryParseAmount(typedValue,(_ref=isExactIn?inputCurrency:outputCurrency)!==null&&_ref!==void 0?_ref:undefined);const currencies={[Field.INPUT]:inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined,[Field.OUTPUT]:outputCurrency!==null&&outputCurrency!==void 0?outputCurrency:undefined};return{currencies,parsedAmount};}function parseCurrencyFromURLParameter(urlParam,chainId){var _cUSD$chainId$address;if(typeof urlParam==='string'){const valid=isAddress(urlParam);if(valid)return valid;if(urlParam.toUpperCase()==='CUSD')return cUSD[chainId].address;if(valid===false)return cUSD[chainId].address;}return(_cUSD$chainId$address=cUSD[chainId].address)!==null&&_cUSD$chainId$address!==void 0?_cUSD$chainId$address:'';}function parseTokenAmountURLParameter(urlParam){return typeof urlParam==='string'&&!isNaN(parseFloat(urlParam))?urlParam:'';}function parseIndependentFieldURLParameter(urlParam){return typeof urlParam==='string'&&urlParam.toLowerCase()==='output'?Field.OUTPUT:Field.INPUT;}const ENS_NAME_REGEX=/^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;const ADDRESS_REGEX=/^0x[a-fA-F0-9]{40}$/;function validatedRecipient(recipient){if(typeof recipient!=='string')return null;const address=isAddress(recipient);if(address)return address;if(ENS_NAME_REGEX.test(recipient))return recipient;if(ADDRESS_REGEX.test(recipient))return recipient;return null;}export function queryParametersToSwapState(parsedQs,chainId){let inputCurrency=parseCurrencyFromURLParameter(parsedQs.inputCurrency,chainId);let outputCurrency=parseCurrencyFromURLParameter(parsedQs.outputCurrency,chainId);if(inputCurrency===outputCurrency){if(typeof parsedQs.outputCurrency==='string'){inputCurrency='';}else{outputCurrency='';}}const recipient=validatedRecipient(parsedQs.recipient);return{[Field.INPUT]:{currencyId:inputCurrency},[Field.OUTPUT]:{currencyId:outputCurrency},typedValue:parseTokenAmountURLParameter(parsedQs.exactAmount),independentField:parseIndependentFieldURLParameter(parsedQs.exactField),recipient};}","map":null,"metadata":{},"sourceType":"module"}