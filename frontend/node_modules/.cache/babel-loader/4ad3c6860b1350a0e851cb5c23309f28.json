{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IstanbulUtils = exports.bitIsSet = exports.parseBlockExtraData = void 0;\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar rlp = __importStar(require(\"rlp\"));\n// This file contains utilities that help with istanbul-specific block information.\n// See https://github.com/celo-org/celo-blockchain/blob/master/core/types/istanbul.go\nvar ISTANBUL_EXTRA_VANITY_BYTES = 32;\nfunction bigNumberFromBuffer(data) {\n  return new bignumber_js_1.default('0x' + (data.toString('hex') || '0'), 16);\n}\nfunction sealFromBuffers(data) {\n  return {\n    bitmap: bigNumberFromBuffer(data[0]),\n    signature: '0x' + data[1].toString('hex'),\n    round: bigNumberFromBuffer(data[2])\n  };\n}\n// Parse RLP encoded block extra data into an IstanbulExtra object.\nfunction parseBlockExtraData(data) {\n  var buffer = Buffer.from(data.replace(/^0x/, ''), 'hex');\n  var decode = rlp.decode('0x' + buffer.slice(ISTANBUL_EXTRA_VANITY_BYTES).toString('hex'));\n  return {\n    addedValidators: decode[0].map(function (addr) {\n      return (0, ethereumjs_util_1.toChecksumAddress)(addr.toString('hex'));\n    }),\n    addedValidatorsPublicKeys: decode[1].map(function (key) {\n      return '0x' + key.toString('hex');\n    }),\n    removedValidators: bigNumberFromBuffer(decode[2]),\n    seal: '0x' + decode[3].toString('hex'),\n    aggregatedSeal: sealFromBuffers(decode[4]),\n    parentAggregatedSeal: sealFromBuffers(decode[5])\n  };\n}\nexports.parseBlockExtraData = parseBlockExtraData;\nfunction bitIsSet(bitmap, index) {\n  if (index < 0) {\n    throw new Error(\"bit index must be greater than zero: got \".concat(index));\n  }\n  return bitmap.idiv('1' + '0'.repeat(index), 2).mod(2).gt(0);\n}\nexports.bitIsSet = bitIsSet;\nexports.IstanbulUtils = {\n  parseBlockExtraData: parseBlockExtraData,\n  bitIsSet: bitIsSet\n};","map":{"version":3,"sources":["../src/istanbul.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,GAAA,GAAA,YAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;AAGA;AACA;AAEA,IAAM,2BAA2B,GAAG,EAAE;AAqBtC,SAAS,mBAAmB,CAAC,IAAY,EAAA;EACvC,OAAO,IAAI,cAAA,CAAA,OAAS,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,EAAE,EAAE,CAAC;AAChE;AAEA,SAAS,eAAe,CAAC,IAAc,EAAA;EACrC,OAAO;IACL,MAAM,EAAE,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACpC,SAAS,EAAE,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;IACzC,KAAK,EAAE,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;GACnC;AACH;AAEA;AACA,SAAgB,mBAAmB,CAAC,IAAY,EAAA;EAC9C,IAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC;EAC1D,IAAM,MAAM,GAAQ,GAAG,CAAC,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;EAChG,OAAO;IACL,eAAe,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,IAAY,EAAA;MAAK,OAAA,CAAA,CAAA,EAAA,iBAAA,CAAA,iBAAiB,EAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAAvC,CAAuC,CAAC;IACzF,yBAAyB,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,GAAW,EAAA;MAAK,OAAA,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC;IAA1B,CAA0B,CAAC;IACrF,iBAAiB,EAAE,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACjD,IAAI,EAAE,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;IACtC,cAAc,EAAE,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1C,oBAAoB,EAAE,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;GAChD;AACH;AAXA,OAAA,CAAA,mBAAA,GAAA,mBAAA;AAaA,SAAgB,QAAQ,CAAC,MAAc,EAAE,KAAa,EAAA;EACpD,IAAI,KAAK,GAAG,CAAC,EAAE;IACb,MAAM,IAAI,KAAK,CAAC,2CAAA,CAAA,MAAA,CAA4C,KAAK,CAAE,CAAC;EACrE;EACD,OAAO,MAAM,CACV,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAChC,GAAG,CAAC,CAAC,CAAC,CACN,EAAE,CAAC,CAAC,CAAC;AACV;AARA,OAAA,CAAA,QAAA,GAAA,QAAA;AAUa,OAAA,CAAA,aAAa,GAAG;EAC3B,mBAAmB,EAAA,mBAAA;EACnB,QAAQ,EAAA;CACT","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IstanbulUtils = exports.bitIsSet = exports.parseBlockExtraData = void 0;\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar rlp = __importStar(require(\"rlp\"));\n// This file contains utilities that help with istanbul-specific block information.\n// See https://github.com/celo-org/celo-blockchain/blob/master/core/types/istanbul.go\nvar ISTANBUL_EXTRA_VANITY_BYTES = 32;\nfunction bigNumberFromBuffer(data) {\n    return new bignumber_js_1.default('0x' + (data.toString('hex') || '0'), 16);\n}\nfunction sealFromBuffers(data) {\n    return {\n        bitmap: bigNumberFromBuffer(data[0]),\n        signature: '0x' + data[1].toString('hex'),\n        round: bigNumberFromBuffer(data[2]),\n    };\n}\n// Parse RLP encoded block extra data into an IstanbulExtra object.\nfunction parseBlockExtraData(data) {\n    var buffer = Buffer.from(data.replace(/^0x/, ''), 'hex');\n    var decode = rlp.decode('0x' + buffer.slice(ISTANBUL_EXTRA_VANITY_BYTES).toString('hex'));\n    return {\n        addedValidators: decode[0].map(function (addr) { return (0, ethereumjs_util_1.toChecksumAddress)(addr.toString('hex')); }),\n        addedValidatorsPublicKeys: decode[1].map(function (key) { return '0x' + key.toString('hex'); }),\n        removedValidators: bigNumberFromBuffer(decode[2]),\n        seal: '0x' + decode[3].toString('hex'),\n        aggregatedSeal: sealFromBuffers(decode[4]),\n        parentAggregatedSeal: sealFromBuffers(decode[5]),\n    };\n}\nexports.parseBlockExtraData = parseBlockExtraData;\nfunction bitIsSet(bitmap, index) {\n    if (index < 0) {\n        throw new Error(\"bit index must be greater than zero: got \".concat(index));\n    }\n    return bitmap\n        .idiv('1' + '0'.repeat(index), 2)\n        .mod(2)\n        .gt(0);\n}\nexports.bitIsSet = bitIsSet;\nexports.IstanbulUtils = {\n    parseBlockExtraData: parseBlockExtraData,\n    bitIsSet: bitIsSet,\n};\n//# sourceMappingURL=istanbul.js.map"]},"metadata":{},"sourceType":"script"}