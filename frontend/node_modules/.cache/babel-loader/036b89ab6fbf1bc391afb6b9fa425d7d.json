{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCeloInternal = exports.useContractKit = exports.useCelo = void 0;\nconst react_celo_provider_1 = require(\"./react-celo-provider\");\nfunction useCelo() {\n  const [reducerState, _dispatch, celoMethods] = (0, react_celo_provider_1.useReactCeloContext)();\n  const {\n    dapp,\n    address,\n    network,\n    walletChainId,\n    feeCurrency,\n    connectorInitError,\n    networks,\n    connector\n  } = reducerState;\n  const {\n    destroy,\n    disconnect,\n    updateNetwork,\n    connect,\n    getConnectedKit,\n    performActions,\n    updateFeeCurrency,\n    contractsCache,\n    updateTheme\n  } = celoMethods;\n  return {\n    dapp,\n    address,\n    network,\n    walletChainId,\n    feeCurrency,\n    initError: connectorInitError,\n    // Copy to ensure any accidental mutations dont affect global state\n    networks: networks.map(net => Object.assign({}, net)),\n    kit: connector.kit,\n    // the wallet address from Account.getWalletAddress => The address at which the account expects to receive transfers.\n    // If it's empty/0x0, the account indicates that an address exchange should be initiated with the dataEncryptionKey\n    /*\n     * @deprecated this will likely be removed in favor of just address\n     */\n    account: connector.kit.connection.defaultAccount,\n    initialised: connector.initialised,\n    walletType: connector.type,\n    supportsFeeCurrency: connector.supportsFeeCurrency(),\n    destroy,\n    disconnect,\n    updateNetwork,\n    connect,\n    getConnectedKit,\n    performActions,\n    updateFeeCurrency,\n    contractsCache: contractsCache,\n    updateTheme\n  };\n}\nexports.useCelo = useCelo;\n/**\n * @deprecated Use the alias {@link useCelo} hook instead.\n */\nexports.useContractKit = useCelo;\n/**\n * @internal useCelo with internal methods exposed. Package use only.\n */\nconst useCeloInternal = () => {\n  const [{\n    pendingActionCount,\n    connectionCallback,\n    theme,\n    manualNetworkMode\n  }, _dispatch, {\n    initConnector,\n    resetInitError\n  }] = (0, react_celo_provider_1.useReactCeloContext)();\n  return Object.assign(Object.assign({}, useCelo()), {\n    manualNetworkMode,\n    connectionCallback,\n    initConnector,\n    pendingActionCount,\n    theme,\n    resetInitError\n  });\n};\nexports.useCeloInternal = useCeloInternal;","map":{"version":3,"names":["Object","defineProperty","exports","value","useCeloInternal","useContractKit","useCelo","react_celo_provider_1","require","reducerState","_dispatch","celoMethods","useReactCeloContext","dapp","address","network","walletChainId","feeCurrency","connectorInitError","networks","connector","destroy","disconnect","updateNetwork","connect","getConnectedKit","performActions","updateFeeCurrency","contractsCache","updateTheme","initError","map","net","assign","kit","account","connection","defaultAccount","initialised","walletType","type","supportsFeeCurrency","pendingActionCount","connectionCallback","theme","manualNetworkMode","initConnector","resetInitError"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@celo/react-celo/lib/use-celo.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useCeloInternal = exports.useContractKit = exports.useCelo = void 0;\nconst react_celo_provider_1 = require(\"./react-celo-provider\");\nfunction useCelo() {\n    const [reducerState, _dispatch, celoMethods] = (0, react_celo_provider_1.useReactCeloContext)();\n    const { dapp, address, network, walletChainId, feeCurrency, connectorInitError, networks, connector, } = reducerState;\n    const { destroy, disconnect, updateNetwork, connect, getConnectedKit, performActions, updateFeeCurrency, contractsCache, updateTheme, } = celoMethods;\n    return {\n        dapp,\n        address,\n        network,\n        walletChainId,\n        feeCurrency,\n        initError: connectorInitError,\n        // Copy to ensure any accidental mutations dont affect global state\n        networks: networks.map((net) => (Object.assign({}, net))),\n        kit: connector.kit,\n        // the wallet address from Account.getWalletAddress => The address at which the account expects to receive transfers.\n        // If it's empty/0x0, the account indicates that an address exchange should be initiated with the dataEncryptionKey\n        /*\n         * @deprecated this will likely be removed in favor of just address\n         */\n        account: connector.kit.connection.defaultAccount,\n        initialised: connector.initialised,\n        walletType: connector.type,\n        supportsFeeCurrency: connector.supportsFeeCurrency(),\n        destroy,\n        disconnect,\n        updateNetwork,\n        connect,\n        getConnectedKit,\n        performActions,\n        updateFeeCurrency,\n        contractsCache: contractsCache,\n        updateTheme,\n    };\n}\nexports.useCelo = useCelo;\n/**\n * @deprecated Use the alias {@link useCelo} hook instead.\n */\nexports.useContractKit = useCelo;\n/**\n * @internal useCelo with internal methods exposed. Package use only.\n */\nconst useCeloInternal = () => {\n    const [{ pendingActionCount, connectionCallback, theme, manualNetworkMode }, _dispatch, { initConnector, resetInitError },] = (0, react_celo_provider_1.useReactCeloContext)();\n    return Object.assign(Object.assign({}, useCelo()), { manualNetworkMode,\n        connectionCallback,\n        initConnector,\n        pendingActionCount,\n        theme,\n        resetInitError });\n};\nexports.useCeloInternal = useCeloInternal;\n//# sourceMappingURL=use-celo.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAGF,OAAO,CAACG,cAAc,GAAGH,OAAO,CAACI,OAAO,GAAG,KAAK,CAAC;AAC3E,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC9D,SAASF,OAAOA,CAAA,EAAG;EACf,MAAM,CAACG,YAAY,EAAEC,SAAS,EAAEC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAEJ,qBAAqB,CAACK,mBAAmB,EAAE,CAAC;EAC/F,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC,OAAO;IAAEC,aAAa;IAAEC,WAAW;IAAEC,kBAAkB;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAGX,YAAY;EACrH,MAAM;IAAEY,OAAO;IAAEC,UAAU;IAAEC,aAAa;IAAEC,OAAO;IAAEC,eAAe;IAAEC,cAAc;IAAEC,iBAAiB;IAAEC,cAAc;IAAEC;EAAa,CAAC,GAAGlB,WAAW;EACrJ,OAAO;IACHE,IAAI;IACJC,OAAO;IACPC,OAAO;IACPC,aAAa;IACbC,WAAW;IACXa,SAAS,EAAEZ,kBAAkB;IAC7B;IACAC,QAAQ,EAAEA,QAAQ,CAACY,GAAG,CAAEC,GAAG,IAAMhC,MAAM,CAACiC,MAAM,CAAC,CAAC,CAAC,EAAED,GAAG,CAAE,CAAC;IACzDE,GAAG,EAAEd,SAAS,CAACc,GAAG;IAClB;IACA;IACA;AACR;AACA;IACQC,OAAO,EAAEf,SAAS,CAACc,GAAG,CAACE,UAAU,CAACC,cAAc;IAChDC,WAAW,EAAElB,SAAS,CAACkB,WAAW;IAClCC,UAAU,EAAEnB,SAAS,CAACoB,IAAI;IAC1BC,mBAAmB,EAAErB,SAAS,CAACqB,mBAAmB,CAAC,CAAC;IACpDpB,OAAO;IACPC,UAAU;IACVC,aAAa;IACbC,OAAO;IACPC,eAAe;IACfC,cAAc;IACdC,iBAAiB;IACjBC,cAAc,EAAEA,cAAc;IAC9BC;EACJ,CAAC;AACL;AACA3B,OAAO,CAACI,OAAO,GAAGA,OAAO;AACzB;AACA;AACA;AACAJ,OAAO,CAACG,cAAc,GAAGC,OAAO;AAChC;AACA;AACA;AACA,MAAMF,eAAe,GAAGA,CAAA,KAAM;EAC1B,MAAM,CAAC;IAAEsC,kBAAkB;IAAEC,kBAAkB;IAAEC,KAAK;IAAEC;EAAkB,CAAC,EAAEnC,SAAS,EAAE;IAAEoC,aAAa;IAAEC;EAAe,CAAC,CAAE,GAAG,CAAC,CAAC,EAAExC,qBAAqB,CAACK,mBAAmB,EAAE,CAAC;EAC9K,OAAOZ,MAAM,CAACiC,MAAM,CAACjC,MAAM,CAACiC,MAAM,CAAC,CAAC,CAAC,EAAE3B,OAAO,CAAC,CAAC,CAAC,EAAE;IAAEuC,iBAAiB;IAClEF,kBAAkB;IAClBG,aAAa;IACbJ,kBAAkB;IAClBE,KAAK;IACLG;EAAe,CAAC,CAAC;AACzB,CAAC;AACD7C,OAAO,CAACE,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script"}