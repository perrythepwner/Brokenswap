{"ast":null,"code":"import{useProvider}from'@celo/react-celo';import{useAllInactiveTokens}from'hooks/Tokens';import{useCallback,useEffect}from'react';import{useDispatch}from'react-redux';import{useAllLists}from'state/lists/hooks';import{useFetchListCallback}from'../../hooks/useFetchListCallback';import useInterval from'../../hooks/useInterval';import useIsWindowVisible from'../../hooks/useIsWindowVisible';import{acceptListUpdate}from'./actions';// import { useActiveListUrls } from './hooks'\nexport default function Updater(){const library=useProvider();const dispatch=useDispatch();const isWindowVisible=useIsWindowVisible();// get all loaded lists, and the active urls\nconst lists=useAllLists();// const activeListUrls = useActiveListUrls()\n// initiate loading\nuseAllInactiveTokens();const fetchList=useFetchListCallback();const fetchAllListsCallback=useCallback(()=>{if(!isWindowVisible)return;Object.keys(lists).forEach(url=>fetchList(url).catch(error=>console.debug('interval list fetching error',error)));},[fetchList,isWindowVisible,lists]);// fetch all lists every 10 minutes, but only after we initialize library\nuseInterval(fetchAllListsCallback,library?1000*60*10:null);// whenever a list is not loaded and not loading, try again to load it\nuseEffect(()=>{Object.keys(lists).forEach(listUrl=>{const list=lists[listUrl];if(!list.current&&!list.loadingRequestId&&!list.error){fetchList(listUrl).catch(error=>console.debug('list added fetching error',error));}});},[dispatch,fetchList,library,lists]);// automatically update lists if versions are minor/patch\nuseEffect(()=>{Object.keys(lists).forEach(listUrl=>{const list=lists[listUrl];if(list.pendingUpdate){dispatch(acceptListUpdate(listUrl));}// TODO (bl): Figure out why this keeps breaking\n// if (list.current && list.pendingUpdate) {\n//   const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n//   switch (bump) {\n//     case VersionUpgrade.NONE:\n//       throw new Error('unexpected no version bump')\n//     case VersionUpgrade.PATCH:\n//     case VersionUpgrade.MINOR: {\n//       const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n//       // automatically update minor/patch as long as bump matches the min update\n//       if (bump >= min) {\n//         dispatch(acceptListUpdate(listUrl))\n//       } else {\n//         console.error(\n//           `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n//         )\n//       }\n//       break\n//     }\n//     // update any active or inactive lists\n//     case VersionUpgrade.MAJOR:\n//       dispatch(acceptListUpdate(listUrl))\n//   }\n// }\n});},[dispatch,lists]);return null;}","map":null,"metadata":{},"sourceType":"module"}