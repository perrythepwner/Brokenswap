{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EscrowWrapper = void 0;\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\n/**\n * Contract for handling reserve for stable currencies\n */\nvar EscrowWrapper = /** @class */function (_super) {\n  __extends(EscrowWrapper, _super);\n  function EscrowWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * @notice Gets the unique escrowed payment for a given payment ID\n     * @param paymentId The ID of the payment to get.\n     * @return An EscrowedPayment struct which holds information such\n     * as; recipient identifier, sender address, token address, value, etc.\n     */\n    _this.escrowedPayments = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.escrowedPayments);\n    /**\n     * @notice Gets array of all Escrowed Payments received by identifier.\n     * @param identifier The hash of an identifier of the receiver of the escrowed payment.\n     * @return An array containing all the IDs of the Escrowed Payments that were received\n     * by the specified receiver.\n     */\n    _this.getReceivedPaymentIds = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getReceivedPaymentIds);\n    /**\n     * @notice Gets array of all Escrowed Payment IDs sent by sender.\n     * @param sender The address of the sender of the escrowed payments.\n     * @return An array containing all the IDs of the Escrowed Payments that were sent by the\n     * specified sender.\n     */\n    _this.getSentPaymentIds = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getSentPaymentIds);\n    /**\n     * @notice Gets trusted issuers set as default for payments by `transfer` function.\n     * @return An array of addresses of trusted issuers.\n     */\n    _this.getDefaultTrustedIssuers = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getDefaultTrustedIssuers);\n    /**\n     * @notice Gets array of all trusted issuers set per paymentId.\n     * @param paymentId The ID of the payment to get.\n     * @return An array of addresses of trusted issuers set for an escrowed payment.\n     */\n    _this.getTrustedIssuersPerPayment = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getTrustedIssuersPerPayment);\n    /**\n     * @notice Transfer tokens to a specific user. Supports both identity with privacy (an empty\n     *         identifier and 0 minAttestations) and without (with identifier and minAttestations).\n     *         Sets trustedIssuers to the issuers listed in `defaultTrustedIssuers`.\n     *         (To override this and set custom trusted issuers, use `transferWithTrustedIssuers`.)\n     * @param identifier The hashed identifier of a user to transfer to.\n     * @param token The token to be transferred.\n     * @param value The amount to be transferred.\n     * @param expirySeconds The number of seconds before the sender can revoke the payment.\n     * @param paymentId The address of the temporary wallet associated with this payment. Users must\n     *        prove ownership of the corresponding private key to withdraw from escrow.\n     * @param minAttestations The min number of attestations required to withdraw the payment.\n     * @return True if transfer succeeded.\n     * @dev Throws if 'token' or 'value' is 0.\n     * @dev Throws if identifier is null and minAttestations > 0.\n     * @dev If minAttestations is 0, trustedIssuers will be set to empty list.\n     * @dev msg.sender needs to have already approved this contract to transfer\n     */\n    _this.transfer = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.transfer);\n    /**\n     * @notice Withdraws tokens for a verified user.\n     * @param paymentId The ID for the EscrowedPayment struct that contains all relevant information.\n     * @param v The recovery id of the incoming ECDSA signature.\n     * @param r Output value r of the ECDSA signature.\n     * @param s Output value s of the ECDSA signature.\n     * @return True if withdraw succeeded.\n     * @dev Throws if 'token' or 'value' is 0.\n     * @dev Throws if msg.sender does not prove ownership of the withdraw key.\n     */\n    _this.withdraw = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.withdraw);\n    /**\n     * @notice Revokes tokens for a sender who is redeeming a payment after it has expired.\n     * @param paymentId The ID for the EscrowedPayment struct that contains all relevant information.\n     * @dev Throws if 'token' or 'value' is 0.\n     * @dev Throws if msg.sender is not the sender of payment.\n     * @dev Throws if redeem time hasn't been reached yet.\n     */\n    _this.revoke = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.revoke);\n    /**\n     * @notice Transfer tokens to a specific user. Supports both identity with privacy (an empty\n     *         identifier and 0 minAttestations) and without (with identifier\n     *         and attestations completed by trustedIssuers).\n     * @param identifier The hashed identifier of a user to transfer to.\n     * @param token The token to be transferred.\n     * @param value The amount to be transferred.\n     * @param expirySeconds The number of seconds before the sender can revoke the payment.\n     * @param paymentId The address of the temporary wallet associated with this payment. Users must\n     *        prove ownership of the corresponding private key to withdraw from escrow.\n     * @param minAttestations The min number of attestations required to withdraw the payment.\n     * @param trustedIssuers Array of issuers whose attestations in FederatedAttestations.sol\n     *        will be accepted to prove ownership over an identifier.\n     * @return True if transfer succeeded.\n     * @dev Throws if 'token' or 'value' is 0.\n     * @dev Throws if identifier is null and minAttestations > 0.\n     * @dev Throws if minAttestations == 0 but trustedIssuers are provided.\n     * @dev msg.sender needs to have already approved this contract to transfer.\n     */\n    _this.transferWithTrustedIssuers = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.transferWithTrustedIssuers);\n    return _this;\n  }\n  return EscrowWrapper;\n}(BaseWrapper_1.BaseWrapper);\nexports.EscrowWrapper = EscrowWrapper;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","EscrowWrapper","BaseWrapper_1","require","_super","_this","apply","arguments","escrowedPayments","proxyCall","contract","methods","getReceivedPaymentIds","getSentPaymentIds","getDefaultTrustedIssuers","getTrustedIssuersPerPayment","transfer","proxySend","connection","withdraw","revoke","transferWithTrustedIssuers","BaseWrapper"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@celo/contractkit/lib/wrappers/Escrow.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EscrowWrapper = void 0;\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\n/**\n * Contract for handling reserve for stable currencies\n */\nvar EscrowWrapper = /** @class */ (function (_super) {\n    __extends(EscrowWrapper, _super);\n    function EscrowWrapper() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * @notice Gets the unique escrowed payment for a given payment ID\n         * @param paymentId The ID of the payment to get.\n         * @return An EscrowedPayment struct which holds information such\n         * as; recipient identifier, sender address, token address, value, etc.\n         */\n        _this.escrowedPayments = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.escrowedPayments);\n        /**\n         * @notice Gets array of all Escrowed Payments received by identifier.\n         * @param identifier The hash of an identifier of the receiver of the escrowed payment.\n         * @return An array containing all the IDs of the Escrowed Payments that were received\n         * by the specified receiver.\n         */\n        _this.getReceivedPaymentIds = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getReceivedPaymentIds);\n        /**\n         * @notice Gets array of all Escrowed Payment IDs sent by sender.\n         * @param sender The address of the sender of the escrowed payments.\n         * @return An array containing all the IDs of the Escrowed Payments that were sent by the\n         * specified sender.\n         */\n        _this.getSentPaymentIds = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getSentPaymentIds);\n        /**\n         * @notice Gets trusted issuers set as default for payments by `transfer` function.\n         * @return An array of addresses of trusted issuers.\n         */\n        _this.getDefaultTrustedIssuers = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getDefaultTrustedIssuers);\n        /**\n         * @notice Gets array of all trusted issuers set per paymentId.\n         * @param paymentId The ID of the payment to get.\n         * @return An array of addresses of trusted issuers set for an escrowed payment.\n         */\n        _this.getTrustedIssuersPerPayment = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getTrustedIssuersPerPayment);\n        /**\n         * @notice Transfer tokens to a specific user. Supports both identity with privacy (an empty\n         *         identifier and 0 minAttestations) and without (with identifier and minAttestations).\n         *         Sets trustedIssuers to the issuers listed in `defaultTrustedIssuers`.\n         *         (To override this and set custom trusted issuers, use `transferWithTrustedIssuers`.)\n         * @param identifier The hashed identifier of a user to transfer to.\n         * @param token The token to be transferred.\n         * @param value The amount to be transferred.\n         * @param expirySeconds The number of seconds before the sender can revoke the payment.\n         * @param paymentId The address of the temporary wallet associated with this payment. Users must\n         *        prove ownership of the corresponding private key to withdraw from escrow.\n         * @param minAttestations The min number of attestations required to withdraw the payment.\n         * @return True if transfer succeeded.\n         * @dev Throws if 'token' or 'value' is 0.\n         * @dev Throws if identifier is null and minAttestations > 0.\n         * @dev If minAttestations is 0, trustedIssuers will be set to empty list.\n         * @dev msg.sender needs to have already approved this contract to transfer\n         */\n        _this.transfer = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.transfer);\n        /**\n         * @notice Withdraws tokens for a verified user.\n         * @param paymentId The ID for the EscrowedPayment struct that contains all relevant information.\n         * @param v The recovery id of the incoming ECDSA signature.\n         * @param r Output value r of the ECDSA signature.\n         * @param s Output value s of the ECDSA signature.\n         * @return True if withdraw succeeded.\n         * @dev Throws if 'token' or 'value' is 0.\n         * @dev Throws if msg.sender does not prove ownership of the withdraw key.\n         */\n        _this.withdraw = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.withdraw);\n        /**\n         * @notice Revokes tokens for a sender who is redeeming a payment after it has expired.\n         * @param paymentId The ID for the EscrowedPayment struct that contains all relevant information.\n         * @dev Throws if 'token' or 'value' is 0.\n         * @dev Throws if msg.sender is not the sender of payment.\n         * @dev Throws if redeem time hasn't been reached yet.\n         */\n        _this.revoke = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.revoke);\n        /**\n         * @notice Transfer tokens to a specific user. Supports both identity with privacy (an empty\n         *         identifier and 0 minAttestations) and without (with identifier\n         *         and attestations completed by trustedIssuers).\n         * @param identifier The hashed identifier of a user to transfer to.\n         * @param token The token to be transferred.\n         * @param value The amount to be transferred.\n         * @param expirySeconds The number of seconds before the sender can revoke the payment.\n         * @param paymentId The address of the temporary wallet associated with this payment. Users must\n         *        prove ownership of the corresponding private key to withdraw from escrow.\n         * @param minAttestations The min number of attestations required to withdraw the payment.\n         * @param trustedIssuers Array of issuers whose attestations in FederatedAttestations.sol\n         *        will be accepted to prove ownership over an identifier.\n         * @return True if transfer succeeded.\n         * @dev Throws if 'token' or 'value' is 0.\n         * @dev Throws if identifier is null and minAttestations > 0.\n         * @dev Throws if minAttestations == 0 but trustedIssuers are provided.\n         * @dev msg.sender needs to have already approved this contract to transfer.\n         */\n        _this.transferWithTrustedIssuers = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.transferWithTrustedIssuers);\n        return _this;\n    }\n    return EscrowWrapper;\n}(BaseWrapper_1.BaseWrapper));\nexports.EscrowWrapper = EscrowWrapper;\n//# sourceMappingURL=Escrow.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}