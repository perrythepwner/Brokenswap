{"ast":null,"code":"import _asyncToGenerator from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import schema from'@uniswap/token-lists/src/tokenlist.schema.json';import Ajv from'ajv';import addFormats from'ajv-formats';import uriToHttp from'./uriToHttp';const tokenListValidator=addFormats(new Ajv({allErrors:true})).compile(schema);/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */export default function getTokenList(_x){return _getTokenList.apply(this,arguments);}function _getTokenList(){_getTokenList=_asyncToGenerator(function*(listUrl){const urls=uriToHttp(listUrl);for(let i=0;i<urls.length;i++){const url=urls[i];const isLast=i===urls.length-1;let response;try{response=yield fetch(url);}catch(error){console.debug('Failed to fetch list',listUrl,error);if(isLast)throw new Error(\"Failed to download list \".concat(listUrl));continue;}if(!response.ok){if(isLast)throw new Error(\"Failed to download list \".concat(listUrl));continue;}const json=yield response.json();if(!tokenListValidator(json)){var _tokenListValidator$e,_tokenListValidator$e2;const validationErrors=(_tokenListValidator$e=(_tokenListValidator$e2=tokenListValidator.errors)===null||_tokenListValidator$e2===void 0?void 0:_tokenListValidator$e2.reduce((memo,error)=>{var _error$message;const add=\"\".concat(error.instancePath,\" \").concat((_error$message=error.message)!==null&&_error$message!==void 0?_error$message:'');return memo.length>0?\"\".concat(memo,\"; \").concat(add):\"\".concat(add);},''))!==null&&_tokenListValidator$e!==void 0?_tokenListValidator$e:'unknown error';throw new Error(\"Token list failed validation: \".concat(validationErrors));}return json;}throw new Error('Unrecognized list URL protocol.');});return _getTokenList.apply(this,arguments);}","map":{"version":3,"names":["schema","Ajv","addFormats","uriToHttp","tokenListValidator","allErrors","compile","getTokenList","_x","_getTokenList","apply","arguments","_asyncToGenerator","listUrl","urls","i","length","url","isLast","response","fetch","error","console","debug","Error","concat","ok","json","_tokenListValidator$e","_tokenListValidator$e2","validationErrors","errors","reduce","memo","_error$message","add","instancePath","message"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/utils/getTokenList.ts"],"sourcesContent":["import { TokenList } from '@uniswap/token-lists'\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\nimport Ajv from 'ajv'\nimport addFormats from 'ajv-formats'\n\nimport uriToHttp from './uriToHttp'\n\nconst tokenListValidator = addFormats(new Ajv({ allErrors: true })).compile(schema)\n\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\nexport default async function getTokenList(listUrl: string): Promise<TokenList> {\n  const urls = uriToHttp(listUrl)\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i]\n    const isLast = i === urls.length - 1\n    let response\n    try {\n      response = await fetch(url)\n    } catch (error) {\n      console.debug('Failed to fetch list', listUrl, error)\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\n      continue\n    }\n\n    if (!response.ok) {\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\n      continue\n    }\n\n    const json: TokenList = await response.json()\n    if (!tokenListValidator(json)) {\n      const validationErrors: string =\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\n          const add = `${error.instancePath} ${error.message ?? ''}`\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\n        }, '') ?? 'unknown error'\n      throw new Error(`Token list failed validation: ${validationErrors}`)\n    }\n    return json\n  }\n  throw new Error('Unrecognized list URL protocol.')\n}\n"],"mappings":"kLACA,MAAO,CAAAA,MAAM,KAAM,gDAAgD,CACnE,MAAO,CAAAC,GAAG,KAAM,KAAK,CACrB,MAAO,CAAAC,UAAU,KAAM,aAAa,CAEpC,MAAO,CAAAC,SAAS,KAAM,aAAa,CAEnC,KAAM,CAAAC,kBAAkB,CAAGF,UAAU,CAAC,GAAI,CAAAD,GAAG,CAAC,CAAEI,SAAS,CAAE,IAAK,CAAC,CAAC,CAAC,CAACC,OAAO,CAACN,MAAM,CAAC,CAEnF;AACA;AACA;AACA;AACA,GACA,uBAA8B,CAAAO,YAAYA,CAAAC,EAAA,SAAAC,aAAA,CAAAC,KAAA,MAAAC,SAAA,GA+BzC,SAAAF,cAAA,EAAAA,aAAA,CAAAG,iBAAA,CA/Bc,UAA4BC,OAAe,CAAsB,CAC9E,KAAM,CAAAC,IAAI,CAAGX,SAAS,CAACU,OAAO,CAAC,CAC/B,IAAK,GAAI,CAAAE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGD,IAAI,CAACE,MAAM,CAAED,CAAC,EAAE,CAAE,CACpC,KAAM,CAAAE,GAAG,CAAGH,IAAI,CAACC,CAAC,CAAC,CACnB,KAAM,CAAAG,MAAM,CAAGH,CAAC,GAAKD,IAAI,CAACE,MAAM,CAAG,CAAC,CACpC,GAAI,CAAAG,QAAQ,CACZ,GAAI,CACFA,QAAQ,MAAS,CAAAC,KAAK,CAACH,GAAG,CAAC,CAC7B,CAAE,MAAOI,KAAK,CAAE,CACdC,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAEV,OAAO,CAAEQ,KAAK,CAAC,CACrD,GAAIH,MAAM,CAAE,KAAM,IAAI,CAAAM,KAAK,4BAAAC,MAAA,CAA4BZ,OAAO,CAAE,CAAC,CACjE,SACF,CAEA,GAAI,CAACM,QAAQ,CAACO,EAAE,CAAE,CAChB,GAAIR,MAAM,CAAE,KAAM,IAAI,CAAAM,KAAK,4BAAAC,MAAA,CAA4BZ,OAAO,CAAE,CAAC,CACjE,SACF,CAEA,KAAM,CAAAc,IAAe,MAAS,CAAAR,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAC7C,GAAI,CAACvB,kBAAkB,CAACuB,IAAI,CAAC,CAAE,KAAAC,qBAAA,CAAAC,sBAAA,CAC7B,KAAM,CAAAC,gBAAwB,EAAAF,qBAAA,EAAAC,sBAAA,CAC5BzB,kBAAkB,CAAC2B,MAAM,UAAAF,sBAAA,iBAAzBA,sBAAA,CAA2BG,MAAM,CAAS,CAACC,IAAI,CAAEZ,KAAK,GAAK,KAAAa,cAAA,CACzD,KAAM,CAAAC,GAAG,IAAAV,MAAA,CAAMJ,KAAK,CAACe,YAAY,MAAAX,MAAA,EAAAS,cAAA,CAAIb,KAAK,CAACgB,OAAO,UAAAH,cAAA,UAAAA,cAAA,CAAI,EAAE,CAAE,CAC1D,MAAO,CAAAD,IAAI,CAACjB,MAAM,CAAG,CAAC,IAAAS,MAAA,CAAMQ,IAAI,OAAAR,MAAA,CAAKU,GAAG,KAAAV,MAAA,CAAQU,GAAG,CAAE,CACvD,CAAC,CAAE,EAAE,CAAC,UAAAP,qBAAA,UAAAA,qBAAA,CAAI,eAAe,CAC3B,KAAM,IAAI,CAAAJ,KAAK,kCAAAC,MAAA,CAAkCK,gBAAgB,CAAE,CAAC,CACtE,CACA,MAAO,CAAAH,IAAI,CACb,CACA,KAAM,IAAI,CAAAH,KAAK,CAAC,iCAAiC,CAAC,CACpD,CAAC,SAAAf,aAAA,CAAAC,KAAA,MAAAC,SAAA"},"metadata":{},"sourceType":"module"}