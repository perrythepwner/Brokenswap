{"ast":null,"code":"import _objectSpread from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{createReducer}from'@reduxjs/toolkit';import{Field,resetMintState,typeInput}from'./actions';const initialState={independentField:Field.CURRENCY_A,typedValue:'',otherTypedValue:''};export default createReducer(initialState,builder=>builder.addCase(resetMintState,()=>initialState).addCase(typeInput,(state,_ref)=>{let{payload:{field,typedValue,noLiquidity}}=_ref;if(noLiquidity){// they're typing into the field they've last typed in\nif(field===state.independentField){return _objectSpread(_objectSpread({},state),{},{independentField:field,typedValue});}// they're typing into a new field, store the other value\nelse{return _objectSpread(_objectSpread({},state),{},{independentField:field,typedValue,otherTypedValue:state.typedValue});}}else{return _objectSpread(_objectSpread({},state),{},{independentField:field,typedValue,otherTypedValue:''});}}));","map":{"version":3,"names":["createReducer","Field","resetMintState","typeInput","initialState","independentField","CURRENCY_A","typedValue","otherTypedValue","builder","addCase","state","_ref","payload","field","noLiquidity","_objectSpread"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/state/mint/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\n\nimport { Field, resetMintState, typeInput } from './actions'\n\nexport interface MintState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly otherTypedValue: string // for the case when there's no liquidity\n}\n\nconst initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: '',\n}\n\nexport default createReducer<MintState>(initialState, (builder) =>\n  builder\n    .addCase(resetMintState, () => initialState)\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\n      if (noLiquidity) {\n        // they're typing into the field they've last typed in\n        if (field === state.independentField) {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          }\n        }\n        // they're typing into a new field, store the other value\n        else {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n            otherTypedValue: state.typedValue,\n          }\n        }\n      } else {\n        return {\n          ...state,\n          independentField: field,\n          typedValue,\n          otherTypedValue: '',\n        }\n      }\n    })\n)\n"],"mappings":"2KAAA,OAASA,aAAa,KAAQ,kBAAkB,CAEhD,OAASC,KAAK,CAAEC,cAAc,CAAEC,SAAS,KAAQ,WAAW,CAQ5D,KAAM,CAAAC,YAAuB,CAAG,CAC9BC,gBAAgB,CAAEJ,KAAK,CAACK,UAAU,CAClCC,UAAU,CAAE,EAAE,CACdC,eAAe,CAAE,EACnB,CAAC,CAED,cAAe,CAAAR,aAAa,CAAYI,YAAY,CAAGK,OAAO,EAC5DA,OAAO,CACJC,OAAO,CAACR,cAAc,CAAE,IAAME,YAAY,CAAC,CAC3CM,OAAO,CAACP,SAAS,CAAE,CAACQ,KAAK,CAAAC,IAAA,GAAsD,IAApD,CAAEC,OAAO,CAAE,CAAEC,KAAK,CAAEP,UAAU,CAAEQ,WAAY,CAAE,CAAC,CAAAH,IAAA,CACzE,GAAIG,WAAW,CAAE,CACf;AACA,GAAID,KAAK,GAAKH,KAAK,CAACN,gBAAgB,CAAE,CACpC,OAAAW,aAAA,CAAAA,aAAA,IACKL,KAAK,MACRN,gBAAgB,CAAES,KAAK,CACvBP,UAAU,GAEd,CACA;AAAA,IACK,CACH,OAAAS,aAAA,CAAAA,aAAA,IACKL,KAAK,MACRN,gBAAgB,CAAES,KAAK,CACvBP,UAAU,CACVC,eAAe,CAAEG,KAAK,CAACJ,UAAU,GAErC,CACF,CAAC,IAAM,CACL,OAAAS,aAAA,CAAAA,aAAA,IACKL,KAAK,MACRN,gBAAgB,CAAES,KAAK,CACvBP,UAAU,CACVC,eAAe,CAAE,EAAE,GAEvB,CACF,CAAC,CACL,CAAC"},"metadata":{},"sourceType":"module"}