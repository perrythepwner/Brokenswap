{"ast":null,"code":"import _asyncToGenerator from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _s = $RefreshSig$();\nimport { useCelo, useProvider } from '@celo/react-celo';\nimport IUniswapV2PairABI from '@ubeswap/core/build/abi/IUniswapV2Pair.json';\nimport { JSBI, Token, TokenAmount } from '@ubeswap/sdk';\nimport ERC20_ABI from 'constants/abis/erc20';\nimport MOOLA_STAKING_ABI from 'constants/abis/moola/MoolaStakingRewards.json';\nimport { ethers } from 'ethers';\nimport { useAllTokens, useToken } from 'hooks/Tokens';\nimport { useMultiStakingContract, useStakingContract } from 'hooks/useContract';\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useSingleCallResult } from 'state/multicall/hooks';\nimport { getProviderOrSigner } from 'utils';\nimport { isAddress } from 'web3-utils';\nimport { BIG_INT_SECONDS_IN_YEAR } from './../../constants/index';\nimport { useCUSDPrice, useCUSDPriceOfULP, useCUSDPrices } from './../../utils/useCUSDPrice';\nexport const useCustomStakingInfo = farmAddress => {\n  _s();\n  var _useSingleCallResult, _useSingleCallResult$, _useSingleCallResult2, _useSingleCallResult3, _useSingleCallResult4, _useSingleCallResult5, _useSingleCallResult6, _useSingleCallResult7, _useSingleCallResult8, _useSingleCallResult9, _useSingleCallResult10, _useSingleCallResult11, _useSingleCallResult12;\n  const {\n    address: account,\n    network\n  } = useCelo();\n  const {\n    chainId\n  } = network;\n  const library = useProvider();\n  const provider = getProviderOrSigner(library, account || undefined);\n  const tokens = useAllTokens();\n  const stakingContract = useStakingContract(isAddress(farmAddress) ? farmAddress : '');\n  const multiStakingContract = useMultiStakingContract(isAddress(farmAddress) ? farmAddress : '');\n  const [externalRewardsTokens, setExternalRewardsTokens] = useState([]);\n  const [externalRewardsRates, setExternalRewardsRates] = useState([]);\n  const [externalEarnedAmounts, setExternalEarnedAmounts] = useState([]);\n  const [fetchingMultiStaking, setFetchingMultiStaking] = useState(false);\n  const [pairToken, setPairToken] = useState(undefined);\n  const currentBlockTimestamp = useCurrentBlockTimestamp();\n  useEffect(() => {\n    const fetchMultiStaking = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* () {\n        if (fetchingMultiStaking || !multiStakingContract) {\n          return;\n        }\n        const externalRewardsTokens = [];\n        const rates = [];\n        const amounts = [];\n        try {\n          setFetchingMultiStaking(true);\n          const externalInfo = yield Promise.all([multiStakingContract.externalStakingRewards(), multiStakingContract.callStatic.earnedExternal(account !== null && account !== void 0 ? account : '')]);\n          let stakingRewardsAddress = externalInfo[0];\n          const externalEarned = externalInfo[1];\n          if (externalEarned.length) {\n            externalEarned.map(earned => amounts.push(earned));\n          }\n          for (let i = 0; i < externalEarned.length; i += 1) {\n            const moolaStaking = new ethers.Contract(stakingRewardsAddress, MOOLA_STAKING_ABI, provider);\n            const [rewardsTokenAddress, rewardRate] = yield Promise.all([moolaStaking.rewardsToken(), moolaStaking.rewardRate()]);\n            const token = rewardsTokenAddress ? tokens[rewardsTokenAddress] : undefined;\n            if (token) {\n              externalRewardsTokens.push(token);\n            } else {\n              const tokenContract = new ethers.Contract(rewardsTokenAddress, ERC20_ABI, provider);\n              const [tokenName, symbol, decimals] = yield Promise.all([tokenContract.name(), tokenContract.symbol(), tokenContract.decimals()]);\n              externalRewardsTokens.push(new Token(chainId, rewardsTokenAddress, decimals, symbol, tokenName));\n            }\n            rates.push(rewardRate);\n            if (i < externalEarned.length - 1) stakingRewardsAddress = yield moolaStaking.externalStakingRewards();\n          }\n        } catch (err) {\n          console.error(err);\n        }\n        setFetchingMultiStaking(false);\n        setExternalRewardsTokens(externalRewardsTokens);\n        setExternalRewardsRates(rates);\n        setExternalEarnedAmounts(amounts);\n      });\n      return function fetchMultiStaking() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchMultiStaking();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, multiStakingContract]);\n  const balanceOf = (_useSingleCallResult = useSingleCallResult(stakingContract, 'balanceOf', [account || undefined])) === null || _useSingleCallResult === void 0 ? void 0 : (_useSingleCallResult$ = _useSingleCallResult.result) === null || _useSingleCallResult$ === void 0 ? void 0 : _useSingleCallResult$[0];\n  const periodFinish = (_useSingleCallResult2 = useSingleCallResult(stakingContract, 'periodFinish', [])) === null || _useSingleCallResult2 === void 0 ? void 0 : (_useSingleCallResult3 = _useSingleCallResult2.result) === null || _useSingleCallResult3 === void 0 ? void 0 : _useSingleCallResult3[0];\n  const periodFinishSeconds = periodFinish === null || periodFinish === void 0 ? void 0 : periodFinish.toNumber();\n  const active = periodFinishSeconds && currentBlockTimestamp ? periodFinishSeconds > currentBlockTimestamp.toNumber() : false;\n  const rewardTokenAddress = (_useSingleCallResult4 = useSingleCallResult(stakingContract, 'rewardsToken', [])) === null || _useSingleCallResult4 === void 0 ? void 0 : (_useSingleCallResult5 = _useSingleCallResult4.result) === null || _useSingleCallResult5 === void 0 ? void 0 : _useSingleCallResult5[0];\n  const rewardToken = useToken(rewardTokenAddress);\n  let rewardRates = (_useSingleCallResult6 = useSingleCallResult(stakingContract, 'rewardRate', [])) === null || _useSingleCallResult6 === void 0 ? void 0 : _useSingleCallResult6.result;\n  rewardRates = rewardRates ? [...rewardRates, ...externalRewardsRates] : externalRewardsRates;\n  const earnedAmount = (_useSingleCallResult7 = useSingleCallResult(stakingContract, 'earned', [account || undefined])) === null || _useSingleCallResult7 === void 0 ? void 0 : (_useSingleCallResult8 = _useSingleCallResult7.result) === null || _useSingleCallResult8 === void 0 ? void 0 : _useSingleCallResult8[0];\n  const earnedAmountsAll = earnedAmount ? [earnedAmount, ...externalEarnedAmounts] : externalEarnedAmounts;\n  const totalSupply = (_useSingleCallResult9 = useSingleCallResult(stakingContract, 'totalSupply', [])) === null || _useSingleCallResult9 === void 0 ? void 0 : (_useSingleCallResult10 = _useSingleCallResult9.result) === null || _useSingleCallResult10 === void 0 ? void 0 : _useSingleCallResult10[0];\n  const stakingTokenAddress = (_useSingleCallResult11 = useSingleCallResult(stakingContract, 'stakingToken', [])) === null || _useSingleCallResult11 === void 0 ? void 0 : (_useSingleCallResult12 = _useSingleCallResult11.result) === null || _useSingleCallResult12 === void 0 ? void 0 : _useSingleCallResult12[0];\n  const stakingToken = useToken(stakingTokenAddress);\n  const stakedAmount = stakingToken ? new TokenAmount(stakingToken, JSBI.BigInt(balanceOf !== null && balanceOf !== void 0 ? balanceOf : 0)) : undefined;\n  const pair = useMemo(() => {\n    return stakingTokenAddress ? new ethers.Contract(stakingTokenAddress, IUniswapV2PairABI, provider) : undefined;\n  }, [provider, stakingTokenAddress]);\n  useEffect(() => {\n    const getPairToken = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (pair) {\n        let token0Address = undefined;\n        let token1Address = undefined;\n        try {\n          const tokens = yield Promise.all([pair.token0(), pair.token1()]);\n          token0Address = tokens[0];\n          token1Address = tokens[1];\n        } catch (err) {\n          console.error(err);\n        }\n        setPairToken(token0Address && token1Address ? {\n          token0Address,\n          token1Address\n        } : undefined);\n      });\n      return function getPairToken(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    if (pair && !pairToken) {\n      getPairToken(pair);\n    }\n  }, [pair, pairToken]);\n  const token0 = useToken(pairToken ? pairToken.token0Address : undefined);\n  const token1 = useToken(pairToken ? pairToken.token1Address : undefined);\n  const cusdPriceOfULP0 = useCUSDPrice(stakingToken !== null && stakingToken !== void 0 ? stakingToken : undefined);\n  const cusdPriceOfULP1 = useCUSDPriceOfULP(pairToken && stakingToken ? stakingToken : undefined);\n  const lpPrice = cusdPriceOfULP1 ? cusdPriceOfULP1 : cusdPriceOfULP0;\n  const rewardTokens = rewardToken && isAddress(farmAddress) ? [rewardToken, ...externalRewardsTokens] : [];\n  const cusdPriceOfRewardTokens = useCUSDPrices(rewardTokens);\n  const earnedAmounts = rewardTokens && isAddress(farmAddress) ? rewardTokens === null || rewardTokens === void 0 ? void 0 : rewardTokens.map((rewardsToken, index) => {\n    var _earnedAmountsAll$ind;\n    return new TokenAmount(rewardsToken, JSBI.BigInt((_earnedAmountsAll$ind = earnedAmountsAll[index]) !== null && _earnedAmountsAll$ind !== void 0 ? _earnedAmountsAll$ind : 0));\n  }) : [];\n  const totalRewardRates = rewardTokens && isAddress(farmAddress) ? rewardTokens.map((rewardsToken, i) => new TokenAmount(rewardsToken, rewardRates && rewardRates[i] ? rewardRates[i] : JSBI.BigInt(0))) : [];\n  const totalStakedAmount = stakingToken && totalSupply ? new TokenAmount(stakingToken, JSBI.BigInt(totalSupply)) : undefined;\n  const tvlUSD = totalStakedAmount && lpPrice ? lpPrice.quote(totalStakedAmount).toSignificant(6) : undefined;\n  const userValueCUSD = stakedAmount && lpPrice ? lpPrice.quote(stakedAmount).toExact() : undefined;\n  const rewardsUSDPerYear = cusdPriceOfRewardTokens ? totalRewardRates.reduce((totalRewardsUSDPerYear, rewardRate, index) => {\n    var _cusdPriceOfRewardTok, _cusdPriceOfRewardTok2;\n    return JSBI.add(JSBI.BigInt(totalRewardsUSDPerYear), JSBI.multiply((_cusdPriceOfRewardTok = (_cusdPriceOfRewardTok2 = cusdPriceOfRewardTokens[index]) === null || _cusdPriceOfRewardTok2 === void 0 ? void 0 : _cusdPriceOfRewardTok2.quote(rewardRate).raw) !== null && _cusdPriceOfRewardTok !== void 0 ? _cusdPriceOfRewardTok : JSBI.BigInt(0), JSBI.BigInt(BIG_INT_SECONDS_IN_YEAR))).toString();\n  }, '0') : '0';\n  const getHypotheticalRewardRate = (_stakedAmount, _totalStakedAmount, _totalRewardRates) => {\n    return rewardTokens && rewardTokens.length > 0 ? rewardTokens.map((rewardToken, index) => new TokenAmount(rewardToken, JSBI.greaterThan(_totalStakedAmount.raw, JSBI.BigInt(0)) ? JSBI.divide(JSBI.multiply(_totalRewardRates[index].raw, _stakedAmount.raw), _totalStakedAmount.raw) : JSBI.BigInt(0))) : [];\n  };\n  const userRewardRates = rewardTokens && rewardTokens.length > 0 && totalStakedAmount && stakedAmount ? rewardTokens.map((rewardToken, index) => new TokenAmount(rewardToken, JSBI.greaterThan(totalStakedAmount.raw, JSBI.BigInt(0)) ? JSBI.divide(JSBI.multiply(totalRewardRates[index].raw, stakedAmount.raw), totalStakedAmount.raw) : JSBI.BigInt(0))) : [];\n  return {\n    totalStakedAmount,\n    stakingToken,\n    rewardTokens,\n    totalRewardRates,\n    stakedAmount,\n    userValueCUSD,\n    valueOfTotalStakedAmountInCUSD: Number(tvlUSD) < 1 ? '0' : tvlUSD,\n    active,\n    stakingRewardAddress: farmAddress,\n    getHypotheticalRewardRate,\n    tokens: pairToken && token0 && token1 ? [token0, token1] : stakingToken ? [stakingToken, stakingToken] : undefined,\n    earnedAmounts,\n    rewardRates: userRewardRates,\n    rewardsUSDPerYear\n  };\n};\n_s(useCustomStakingInfo, \"H3GHKRIennV1gP6IfXmGy7d0OjQ=\", false, function () {\n  return [useCelo, useProvider, useAllTokens, useStakingContract, useMultiStakingContract, useCurrentBlockTimestamp, useSingleCallResult, useSingleCallResult, useSingleCallResult, useToken, useSingleCallResult, useSingleCallResult, useSingleCallResult, useSingleCallResult, useToken, useToken, useToken, useCUSDPrice, useCUSDPriceOfULP, useCUSDPrices];\n});","map":{"version":3,"names":["useCelo","useProvider","IUniswapV2PairABI","JSBI","Token","TokenAmount","ERC20_ABI","MOOLA_STAKING_ABI","ethers","useAllTokens","useToken","useMultiStakingContract","useStakingContract","useCurrentBlockTimestamp","useEffect","useMemo","useState","useSingleCallResult","getProviderOrSigner","isAddress","BIG_INT_SECONDS_IN_YEAR","useCUSDPrice","useCUSDPriceOfULP","useCUSDPrices","useCustomStakingInfo","farmAddress","_s","_useSingleCallResult","_useSingleCallResult$","_useSingleCallResult2","_useSingleCallResult3","_useSingleCallResult4","_useSingleCallResult5","_useSingleCallResult6","_useSingleCallResult7","_useSingleCallResult8","_useSingleCallResult9","_useSingleCallResult10","_useSingleCallResult11","_useSingleCallResult12","address","account","network","chainId","library","provider","undefined","tokens","stakingContract","multiStakingContract","externalRewardsTokens","setExternalRewardsTokens","externalRewardsRates","setExternalRewardsRates","externalEarnedAmounts","setExternalEarnedAmounts","fetchingMultiStaking","setFetchingMultiStaking","pairToken","setPairToken","currentBlockTimestamp","fetchMultiStaking","_ref","_asyncToGenerator","rates","amounts","externalInfo","Promise","all","externalStakingRewards","callStatic","earnedExternal","stakingRewardsAddress","externalEarned","length","map","earned","push","i","moolaStaking","Contract","rewardsTokenAddress","rewardRate","rewardsToken","token","tokenContract","tokenName","symbol","decimals","name","err","console","error","apply","arguments","balanceOf","result","periodFinish","periodFinishSeconds","toNumber","active","rewardTokenAddress","rewardToken","rewardRates","earnedAmount","earnedAmountsAll","totalSupply","stakingTokenAddress","stakingToken","stakedAmount","BigInt","pair","getPairToken","_ref2","token0Address","token1Address","token0","token1","_x","cusdPriceOfULP0","cusdPriceOfULP1","lpPrice","rewardTokens","cusdPriceOfRewardTokens","earnedAmounts","index","_earnedAmountsAll$ind","totalRewardRates","totalStakedAmount","tvlUSD","quote","toSignificant","userValueCUSD","toExact","rewardsUSDPerYear","reduce","totalRewardsUSDPerYear","_cusdPriceOfRewardTok","_cusdPriceOfRewardTok2","add","multiply","raw","toString","getHypotheticalRewardRate","_stakedAmount","_totalStakedAmount","_totalRewardRates","greaterThan","divide","userRewardRates","valueOfTotalStakedAmountInCUSD","Number","stakingRewardAddress"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/pages/Earn/useCustomStakingInfo.ts"],"sourcesContent":["import { useCelo, useProvider } from '@celo/react-celo'\nimport IUniswapV2PairABI from '@ubeswap/core/build/abi/IUniswapV2Pair.json'\nimport { JSBI, Token, TokenAmount } from '@ubeswap/sdk'\nimport ERC20_ABI from 'constants/abis/erc20'\nimport MOOLA_STAKING_ABI from 'constants/abis/moola/MoolaStakingRewards.json'\nimport { BigNumber, ContractInterface, ethers } from 'ethers'\nimport { Erc20, MoolaStakingRewards } from 'generated'\nimport { useAllTokens, useToken } from 'hooks/Tokens'\nimport { useMultiStakingContract, useStakingContract } from 'hooks/useContract'\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useSingleCallResult } from 'state/multicall/hooks'\nimport { getProviderOrSigner } from 'utils'\nimport { isAddress } from 'web3-utils'\n\nimport { BIG_INT_SECONDS_IN_YEAR } from './../../constants/index'\nimport { useCUSDPrice, useCUSDPriceOfULP, useCUSDPrices } from './../../utils/useCUSDPrice'\n\ntype PairToken = {\n  token0Address: string\n  token1Address: string\n}\nexport interface CustomStakingInfo {\n  totalStakedAmount: TokenAmount | undefined\n  stakingToken: Token | null | undefined\n  rewardTokens: Token[]\n  earnedAmounts: TokenAmount[]\n  totalRewardRates: TokenAmount[]\n  stakedAmount: TokenAmount | undefined\n  userValueCUSD: string | undefined\n  valueOfTotalStakedAmountInCUSD: string | undefined\n  stakingRewardAddress: string\n  active: boolean\n  readonly getHypotheticalRewardRate: (\n    stakedAmount: TokenAmount,\n    totalStakedAmount: TokenAmount,\n    totalRewardRates: TokenAmount[]\n  ) => TokenAmount[]\n  tokens: Token[] | undefined\n  rewardRates: TokenAmount[]\n  rewardsUSDPerYear: string\n}\n\nexport const useCustomStakingInfo = (farmAddress: string): CustomStakingInfo => {\n  const { address: account, network } = useCelo()\n  const { chainId } = network\n  const library = useProvider()\n  const provider = getProviderOrSigner(library, account || undefined)\n  const tokens = useAllTokens()\n\n  const stakingContract = useStakingContract(isAddress(farmAddress) ? farmAddress : '')\n  const multiStakingContract = useMultiStakingContract(isAddress(farmAddress) ? farmAddress : '')\n  const [externalRewardsTokens, setExternalRewardsTokens] = useState<Array<Token>>([])\n  const [externalRewardsRates, setExternalRewardsRates] = useState<Array<BigNumber>>([])\n  const [externalEarnedAmounts, setExternalEarnedAmounts] = useState<Array<BigNumber>>([])\n  const [fetchingMultiStaking, setFetchingMultiStaking] = useState<boolean>(false)\n  const [pairToken, setPairToken] = useState<PairToken | undefined>(undefined)\n  const currentBlockTimestamp = useCurrentBlockTimestamp()\n\n  useEffect(() => {\n    const fetchMultiStaking = async () => {\n      if (fetchingMultiStaking || !multiStakingContract) {\n        return\n      }\n      const externalRewardsTokens = []\n      const rates = []\n      const amounts: BigNumber[] = []\n      try {\n        setFetchingMultiStaking(true)\n        const externalInfo = await Promise.all([\n          multiStakingContract.externalStakingRewards(),\n          multiStakingContract.callStatic.earnedExternal(account ?? ''),\n        ])\n        let stakingRewardsAddress = externalInfo[0]\n        const externalEarned = externalInfo[1]\n        if (externalEarned.length) {\n          externalEarned.map((earned) => amounts.push(earned))\n        }\n        for (let i = 0; i < externalEarned.length; i += 1) {\n          const moolaStaking = new ethers.Contract(\n            stakingRewardsAddress,\n            MOOLA_STAKING_ABI as ContractInterface,\n            provider\n          ) as unknown as MoolaStakingRewards\n          const [rewardsTokenAddress, rewardRate] = await Promise.all([\n            moolaStaking.rewardsToken(),\n            moolaStaking.rewardRate(),\n          ])\n          const token: Token | undefined = rewardsTokenAddress ? tokens[rewardsTokenAddress] : undefined\n          if (token) {\n            externalRewardsTokens.push(token)\n          } else {\n            const tokenContract = new ethers.Contract(\n              rewardsTokenAddress,\n              ERC20_ABI as ContractInterface,\n              provider\n            ) as unknown as Erc20\n            const [tokenName, symbol, decimals] = await Promise.all([\n              tokenContract.name(),\n              tokenContract.symbol(),\n              tokenContract.decimals(),\n            ])\n            externalRewardsTokens.push(new Token(chainId as number, rewardsTokenAddress, decimals, symbol, tokenName))\n          }\n          rates.push(rewardRate)\n          if (i < externalEarned.length - 1) stakingRewardsAddress = await moolaStaking.externalStakingRewards()\n        }\n      } catch (err) {\n        console.error(err)\n      }\n      setFetchingMultiStaking(false)\n      setExternalRewardsTokens(externalRewardsTokens)\n      setExternalRewardsRates(rates)\n      setExternalEarnedAmounts(amounts)\n    }\n    fetchMultiStaking()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, multiStakingContract])\n\n  const balanceOf = useSingleCallResult(stakingContract, 'balanceOf', [account || undefined])?.result?.[0]\n\n  const periodFinish = useSingleCallResult(stakingContract, 'periodFinish', [])?.result?.[0]\n  const periodFinishSeconds = periodFinish?.toNumber()\n  const active =\n    periodFinishSeconds && currentBlockTimestamp ? periodFinishSeconds > currentBlockTimestamp.toNumber() : false\n\n  const rewardTokenAddress = useSingleCallResult(stakingContract, 'rewardsToken', [])?.result?.[0]\n  const rewardToken = useToken(rewardTokenAddress)\n\n  let rewardRates: any = useSingleCallResult(stakingContract, 'rewardRate', [])?.result\n  rewardRates = rewardRates ? [...rewardRates, ...externalRewardsRates] : externalRewardsRates\n\n  const earnedAmount = useSingleCallResult(stakingContract, 'earned', [account || undefined])?.result?.[0]\n  const earnedAmountsAll: BigNumber[] = earnedAmount ? [earnedAmount, ...externalEarnedAmounts] : externalEarnedAmounts\n  const totalSupply = useSingleCallResult(stakingContract, 'totalSupply', [])?.result?.[0]\n\n  const stakingTokenAddress = useSingleCallResult(stakingContract, 'stakingToken', [])?.result?.[0]\n  const stakingToken = useToken(stakingTokenAddress)\n  const stakedAmount = stakingToken ? new TokenAmount(stakingToken, JSBI.BigInt(balanceOf ?? 0)) : undefined\n\n  const pair = useMemo(() => {\n    return stakingTokenAddress\n      ? new ethers.Contract(stakingTokenAddress, IUniswapV2PairABI as ContractInterface, provider)\n      : undefined\n  }, [provider, stakingTokenAddress])\n\n  useEffect(() => {\n    const getPairToken = async (pair: ethers.Contract) => {\n      let token0Address: string | undefined = undefined\n      let token1Address: string | undefined = undefined\n      try {\n        const tokens = await Promise.all([pair.token0(), pair.token1()])\n        token0Address = tokens[0]\n        token1Address = tokens[1]\n      } catch (err) {\n        console.error(err)\n      }\n      setPairToken(token0Address && token1Address ? { token0Address, token1Address } : undefined)\n    }\n    if (pair && !pairToken) {\n      getPairToken(pair)\n    }\n  }, [pair, pairToken])\n\n  const token0 = useToken(pairToken ? pairToken.token0Address : undefined)\n  const token1 = useToken(pairToken ? pairToken.token1Address : undefined)\n  const cusdPriceOfULP0 = useCUSDPrice(stakingToken ?? undefined)\n  const cusdPriceOfULP1 = useCUSDPriceOfULP(pairToken && stakingToken ? stakingToken : undefined)\n\n  const lpPrice = cusdPriceOfULP1 ? cusdPriceOfULP1 : cusdPriceOfULP0\n\n  const rewardTokens: Token[] = rewardToken && isAddress(farmAddress) ? [rewardToken, ...externalRewardsTokens] : []\n\n  const cusdPriceOfRewardTokens = useCUSDPrices(rewardTokens)\n  const earnedAmounts: TokenAmount[] =\n    rewardTokens && isAddress(farmAddress)\n      ? rewardTokens?.map(\n          (rewardsToken, index) => new TokenAmount(rewardsToken, JSBI.BigInt(earnedAmountsAll[index] ?? 0))\n        )\n      : []\n\n  const totalRewardRates =\n    rewardTokens && isAddress(farmAddress)\n      ? rewardTokens.map(\n          (rewardsToken, i) =>\n            new TokenAmount(rewardsToken, rewardRates && rewardRates[i] ? rewardRates[i] : JSBI.BigInt(0))\n        )\n      : []\n\n  const totalStakedAmount =\n    stakingToken && totalSupply ? new TokenAmount(stakingToken, JSBI.BigInt(totalSupply)) : undefined\n\n  const tvlUSD = totalStakedAmount && lpPrice ? lpPrice.quote(totalStakedAmount).toSignificant(6) : undefined\n  const userValueCUSD = stakedAmount && lpPrice ? lpPrice.quote(stakedAmount).toExact() : undefined\n  const rewardsUSDPerYear = cusdPriceOfRewardTokens\n    ? totalRewardRates.reduce((totalRewardsUSDPerYear: string, rewardRate, index) => {\n        return JSBI.add(\n          JSBI.BigInt(totalRewardsUSDPerYear),\n          JSBI.multiply(\n            cusdPriceOfRewardTokens[index]?.quote(rewardRate).raw ?? JSBI.BigInt(0),\n            JSBI.BigInt(BIG_INT_SECONDS_IN_YEAR)\n          )\n        ).toString()\n      }, '0')\n    : '0'\n\n  const getHypotheticalRewardRate = (\n    _stakedAmount: TokenAmount,\n    _totalStakedAmount: TokenAmount,\n    _totalRewardRates: TokenAmount[]\n  ): TokenAmount[] => {\n    return rewardTokens && rewardTokens.length > 0\n      ? rewardTokens.map(\n          (rewardToken, index) =>\n            new TokenAmount(\n              rewardToken,\n              JSBI.greaterThan(_totalStakedAmount.raw, JSBI.BigInt(0))\n                ? JSBI.divide(JSBI.multiply(_totalRewardRates[index].raw, _stakedAmount.raw), _totalStakedAmount.raw)\n                : JSBI.BigInt(0)\n            )\n        )\n      : []\n  }\n\n  const userRewardRates =\n    rewardTokens && rewardTokens.length > 0 && totalStakedAmount && stakedAmount\n      ? rewardTokens.map(\n          (rewardToken, index) =>\n            new TokenAmount(\n              rewardToken,\n              JSBI.greaterThan(totalStakedAmount.raw, JSBI.BigInt(0))\n                ? JSBI.divide(JSBI.multiply(totalRewardRates[index].raw, stakedAmount.raw), totalStakedAmount.raw)\n                : JSBI.BigInt(0)\n            )\n        )\n      : []\n\n  return {\n    totalStakedAmount,\n    stakingToken,\n    rewardTokens,\n    totalRewardRates,\n    stakedAmount,\n    userValueCUSD,\n    valueOfTotalStakedAmountInCUSD: Number(tvlUSD) < 1 ? '0' : tvlUSD,\n    active,\n    stakingRewardAddress: farmAddress,\n    getHypotheticalRewardRate,\n    tokens: pairToken && token0 && token1 ? [token0, token1] : stakingToken ? [stakingToken, stakingToken] : undefined,\n    earnedAmounts,\n    rewardRates: userRewardRates,\n    rewardsUSDPerYear,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}