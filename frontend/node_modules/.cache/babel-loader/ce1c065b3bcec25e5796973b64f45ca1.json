{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContainerTreeViewDUClass = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst basic_1 = require(\"../type/basic\");\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\nclass ContainerTreeViewDU extends abstract_1.TreeViewDU {\n  constructor(type, _rootNode, cache) {\n    super();\n    this.type = type;\n    this._rootNode = _rootNode;\n    this.nodes = [];\n    this.nodesChanged = new Set();\n    this.viewsChanged = new Map();\n    if (cache) {\n      this.nodes = cache.nodes;\n      this.caches = cache.caches;\n      this.nodesPopulated = cache.nodesPopulated;\n    } else {\n      this.nodes = [];\n      this.caches = [];\n      this.nodesPopulated = false;\n    }\n  }\n  get node() {\n    return this._rootNode;\n  }\n  get cache() {\n    return {\n      nodes: this.nodes,\n      caches: this.caches,\n      nodesPopulated: this.nodesPopulated\n    };\n  }\n  commit() {\n    if (this.nodesChanged.size === 0 && this.viewsChanged.size === 0) {\n      return;\n    }\n    const nodesChanged = [];\n    for (const [index, view] of this.viewsChanged) {\n      const fieldType = this.type.fieldsEntries[index].fieldType;\n      const node = fieldType.commitViewDU(view);\n      // Set new node in nodes array to ensure data represented in the tree and fast nodes access is equal\n      this.nodes[index] = node;\n      nodesChanged.push({\n        index,\n        node\n      });\n      // Cache the view's caches to preserve it's data after 'this.viewsChanged.clear()'\n      const cache = fieldType.cacheOfViewDU(view);\n      if (cache) this.caches[index] = cache;\n    }\n    for (const index of this.nodesChanged) {\n      nodesChanged.push({\n        index,\n        node: this.nodes[index]\n      });\n    }\n    // TODO: Optimize to loop only once, Numerical sort ascending\n    const nodesChangedSorted = nodesChanged.sort((a, b) => a.index - b.index);\n    const indexes = nodesChangedSorted.map(entry => entry.index);\n    const nodes = nodesChangedSorted.map(entry => entry.node);\n    this._rootNode = persistent_merkle_tree_1.setNodesAtDepth(this._rootNode, this.type.depth, indexes, nodes);\n    this.nodesChanged.clear();\n    this.viewsChanged.clear();\n  }\n  clearCache() {\n    this.nodes = [];\n    this.caches = [];\n    this.nodesPopulated = false;\n    // Must clear nodesChanged, otherwise a subsequent commit call will break, because it assumes a node is there\n    this.nodesChanged.clear();\n    // It's not necessary to clear this.viewsChanged since they have no effect on the cache.\n    // However preserving _SOME_ caches results in a very unpredictable experience.\n    this.viewsChanged.clear();\n  }\n}\nfunction getContainerTreeViewDUClass(type) {\n  class CustomContainerTreeViewDU extends ContainerTreeViewDU {}\n  // Dynamically define prototype methods\n  for (let index = 0; index < type.fieldsEntries.length; index++) {\n    const {\n      fieldName,\n      fieldType\n    } = type.fieldsEntries[index];\n    // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n    // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n    // and use the cached views array to store the new node.\n    if (basic_1.isBasicType(fieldType)) {\n      Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // TODO: Review the memory cost of this closures\n        get: function get() {\n          // First walk through the tree to get the root node for that index\n          let node = this.nodes[index];\n          if (node === undefined) {\n            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n            this.nodes[index] = node;\n          }\n          return fieldType.tree_getFromNode(node);\n        },\n        set: function set(value) {\n          // Create new node if current leafNode is not dirty\n          let nodeChanged;\n          if (this.nodesChanged.has(index)) {\n            // TODO: This assumes that node has already been populated\n            nodeChanged = this.nodes[index];\n          } else {\n            var _this$nodes$index;\n            const nodePrev = (_this$nodes$index = this.nodes[index]) !== null && _this$nodes$index !== void 0 ? _this$nodes$index : persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n            nodeChanged = nodePrev.clone();\n            // Store the changed node in the nodes cache\n            this.nodes[index] = nodeChanged;\n            this.nodesChanged.add(index);\n          }\n          fieldType.tree_setToNode(nodeChanged, value);\n        }\n      });\n    }\n    // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n    // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n    // set it to the parent tree in the field gindex.\n    else if (composite_1.isCompositeType(fieldType)) {\n      Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // Returns TreeViewDU of fieldName\n        get: function get() {\n          const viewChanged = this.viewsChanged.get(index);\n          if (viewChanged) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return viewChanged;\n          }\n          let node = this.nodes[index];\n          if (node === undefined) {\n            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n            this.nodes[index] = node;\n          }\n          // Keep a reference to the new view to call .commit on it latter, only if mutable\n          const view = fieldType.getViewDU(node, this.caches[index]);\n          if (fieldType.isViewMutable) {\n            this.viewsChanged.set(index, view);\n          }\n          // No need to persist the child's view cache since a second get returns this view instance.\n          // The cache is only persisted on commit where the viewsChanged map is dropped.\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n          return view;\n        },\n        // Expects TreeViewDU of fieldName\n        set: function set(view) {\n          // When setting a view:\n          // - Not necessary to commit node\n          // - Not necessary to persist cache\n          // Just keeping a reference to the view in this.viewsChanged ensures consistency\n          this.viewsChanged.set(index, view);\n        }\n      });\n    }\n    // Should never happen\n    else {\n      /* istanbul ignore next - unreachable code */\n      throw Error(\"Unknown fieldType \".concat(fieldType.typeName, \" for fieldName \").concat(fieldName));\n    }\n  }\n  // Change class name\n  Object.defineProperty(CustomContainerTreeViewDU, \"name\", {\n    value: type.typeName,\n    writable: false\n  });\n  return CustomContainerTreeViewDU;\n}\nexports.getContainerTreeViewDUClass = getContainerTreeViewDUClass;","map":null,"metadata":{},"sourceType":"script"}