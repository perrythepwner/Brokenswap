{"ast":null,"code":"import _asyncToGenerator from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{nanoid}from'@reduxjs/toolkit';import{useCallback}from'react';import{useDispatch}from'react-redux';import{fetchTokenList}from'../state/lists/actions';import getTokenList from'../utils/getTokenList';export function useFetchListCallback(){const dispatch=useDispatch();// note: prevent dispatch if using for list search or unsupported list\nreturn useCallback(/*#__PURE__*/function(){var _ref=_asyncToGenerator(function*(listUrl){let sendDispatch=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;const requestId=nanoid();sendDispatch&&dispatch(fetchTokenList.pending({requestId,url:listUrl}));return getTokenList(listUrl).then(tokenList=>{sendDispatch&&dispatch(fetchTokenList.fulfilled({url:listUrl,tokenList,requestId}));return tokenList;}).catch(error=>{console.debug(\"Failed to get list at url \".concat(listUrl),error);sendDispatch&&dispatch(fetchTokenList.rejected({url:listUrl,requestId,errorMessage:error.message}));throw error;});});return function(_x){return _ref.apply(this,arguments);};}(),[dispatch]);}","map":{"version":3,"names":["nanoid","useCallback","useDispatch","fetchTokenList","getTokenList","useFetchListCallback","dispatch","_ref","_asyncToGenerator","listUrl","sendDispatch","arguments","length","undefined","requestId","pending","url","then","tokenList","fulfilled","catch","error","console","debug","concat","rejected","errorMessage","message","_x","apply"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/hooks/useFetchListCallback.ts"],"sourcesContent":["import { nanoid } from '@reduxjs/toolkit'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { AppDispatch } from '../state'\nimport { fetchTokenList } from '../state/lists/actions'\nimport getTokenList from '../utils/getTokenList'\n\nexport function useFetchListCallback(): (listUrl: string, sendDispatch?: boolean) => Promise<TokenList> {\n  const dispatch = useDispatch<AppDispatch>()\n\n  // note: prevent dispatch if using for list search or unsupported list\n  return useCallback(\n    async (listUrl: string, sendDispatch = true) => {\n      const requestId = nanoid()\n      sendDispatch && dispatch(fetchTokenList.pending({ requestId, url: listUrl }))\n      return getTokenList(listUrl)\n        .then((tokenList) => {\n          sendDispatch && dispatch(fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId }))\n          return tokenList\n        })\n        .catch((error) => {\n          console.debug(`Failed to get list at url ${listUrl}`, error)\n          sendDispatch && dispatch(fetchTokenList.rejected({ url: listUrl, requestId, errorMessage: error.message }))\n          throw error\n        })\n    },\n    [dispatch]\n  )\n}\n"],"mappings":"kLAAA,OAASA,MAAM,KAAQ,kBAAkB,CAEzC,OAASC,WAAW,KAAQ,OAAO,CACnC,OAASC,WAAW,KAAQ,aAAa,CAGzC,OAASC,cAAc,KAAQ,wBAAwB,CACvD,MAAO,CAAAC,YAAY,KAAM,uBAAuB,CAEhD,MAAO,SAAS,CAAAC,oBAAoBA,CAAA,CAAoE,CACtG,KAAM,CAAAC,QAAQ,CAAGJ,WAAW,CAAc,CAAC,CAE3C;AACA,MAAO,CAAAD,WAAW,6BAAAM,IAAA,CAAAC,iBAAA,CAChB,UAAOC,OAAe,CAA0B,IAAxB,CAAAC,YAAY,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACzC,KAAM,CAAAG,SAAS,CAAGd,MAAM,CAAC,CAAC,CAC1BU,YAAY,EAAIJ,QAAQ,CAACH,cAAc,CAACY,OAAO,CAAC,CAAED,SAAS,CAAEE,GAAG,CAAEP,OAAQ,CAAC,CAAC,CAAC,CAC7E,MAAO,CAAAL,YAAY,CAACK,OAAO,CAAC,CACzBQ,IAAI,CAAEC,SAAS,EAAK,CACnBR,YAAY,EAAIJ,QAAQ,CAACH,cAAc,CAACgB,SAAS,CAAC,CAAEH,GAAG,CAAEP,OAAO,CAAES,SAAS,CAAEJ,SAAU,CAAC,CAAC,CAAC,CAC1F,MAAO,CAAAI,SAAS,CAClB,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,EAAK,CAChBC,OAAO,CAACC,KAAK,8BAAAC,MAAA,CAA8Bf,OAAO,EAAIY,KAAK,CAAC,CAC5DX,YAAY,EAAIJ,QAAQ,CAACH,cAAc,CAACsB,QAAQ,CAAC,CAAET,GAAG,CAAEP,OAAO,CAAEK,SAAS,CAAEY,YAAY,CAAEL,KAAK,CAACM,OAAQ,CAAC,CAAC,CAAC,CAC3G,KAAM,CAAAN,KAAK,CACb,CAAC,CAAC,CACN,CAAC,kBAAAO,EAAA,SAAArB,IAAA,CAAAsB,KAAA,MAAAlB,SAAA,QACD,CAACL,QAAQ,CACX,CAAC,CACH"},"metadata":{},"sourceType":"module"}