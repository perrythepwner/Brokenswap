{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IdentityMetadataWrapper = exports.IdentityMetadataType = exports.ClaimTypes = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar async_1 = require(\"@celo/base/lib/async\");\nvar io_1 = require(\"@celo/utils/lib/io\");\nvar signatureUtils_1 = require(\"@celo/utils/lib/signatureUtils\");\nvar cross_fetch_1 = __importDefault(require(\"cross-fetch\"));\nvar Either_1 = require(\"fp-ts/lib/Either\");\nvar t = __importStar(require(\"io-ts\"));\nvar PathReporter_1 = require(\"io-ts/lib/PathReporter\");\nvar Accounts_1 = require(\"../wrappers/Accounts\");\nvar claim_1 = require(\"./claims/claim\");\nvar types_1 = require(\"./claims/types\");\nvar types_2 = require(\"./claims/types\");\nObject.defineProperty(exports, \"ClaimTypes\", {\n  enumerable: true,\n  get: function get() {\n    return types_2.ClaimTypes;\n  }\n});\nvar MetaType = t.type({\n  address: io_1.AddressType,\n  signature: io_1.SignatureType\n});\nexports.IdentityMetadataType = t.type({\n  claims: t.array(claim_1.ClaimType),\n  meta: MetaType\n});\nvar IdentityMetadataWrapper = /** @class */function () {\n  function IdentityMetadataWrapper(data) {\n    this.data = data;\n  }\n  IdentityMetadataWrapper.fromEmpty = function (address) {\n    return new IdentityMetadataWrapper({\n      claims: [],\n      meta: {\n        address: address,\n        signature: ''\n      }\n    });\n  };\n  IdentityMetadataWrapper.fetchFromURL = function (contractKitOrAccountsWrapper, url, tries) {\n    if (tries === void 0) {\n      tries = 3;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        return [2 /*return*/, (0, async_1.selectiveRetryAsyncWithBackOff)(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var resp, _a, _b;\n            return __generator(this, function (_c) {\n              switch (_c.label) {\n                case 0:\n                  return [4 /*yield*/, (0, cross_fetch_1.default)(url)];\n                case 1:\n                  resp = _c.sent();\n                  if (!resp.ok) {\n                    throw new Error(\"Request failed with status \".concat(resp.status));\n                  }\n                  _a = this.fromRawString;\n                  _b = [contractKitOrAccountsWrapper];\n                  return [4 /*yield*/, resp.text()];\n                case 2:\n                  return [2 /*return*/, _a.apply(this, _b.concat([_c.sent()]))];\n              }\n            });\n          });\n        }, tries, ['Request failed with status 404'], [])];\n      });\n    });\n  };\n  IdentityMetadataWrapper.fromFile = function (contractKitOrAccountsWrapper, path) {\n    var readFileSync;\n    try {\n      var fs = require('fs');\n      readFileSync = fs.readFileSync;\n    } catch (_a) {\n      console.error('cant read from file in browser or environment without native fs module');\n    }\n    return this.fromRawString(contractKitOrAccountsWrapper, readFileSync(path, 'utf-8'));\n  };\n  IdentityMetadataWrapper.verifySigner = function (contractKitOrAccountsWrapper, hash, signature, metadata) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.verifySignerForAddress(contractKitOrAccountsWrapper, hash, signature, metadata.address)];\n      });\n    });\n  };\n  IdentityMetadataWrapper.verifySignerForAddress = function (contractKitOrAccountsWrapper, hash, signature, address) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, signers;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!(0, signatureUtils_1.verifySignature)(hash, signature, address)) return [3 /*break*/, 5];\n            return [4 /*yield*/, getAccounts(contractKitOrAccountsWrapper)\n            // If this fails, signature may still be one of `address`' signers\n            ];\n\n          case 1:\n            accounts = _a.sent();\n            return [4 /*yield*/, accounts.isAccount(address)];\n          case 2:\n            if (!_a.sent()) return [3 /*break*/, 4];\n            return [4 /*yield*/, Promise.all([accounts.getVoteSigner(address), accounts.getValidatorSigner(address), accounts.getAttestationSigner(address)])];\n          case 3:\n            signers = _a.sent();\n            return [2 /*return*/, signers.some(function (signer) {\n              return (0, signatureUtils_1.verifySignature)(hash, signature, signer);\n            })];\n          case 4:\n            return [2 /*return*/, false];\n          case 5:\n            return [2 /*return*/, true];\n        }\n      });\n    });\n  };\n  IdentityMetadataWrapper.fromRawString = function (contractKitOrAccountsWrapper, rawData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data, validatedData, claims, hash, _a, res;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            data = JSON.parse(rawData);\n            validatedData = exports.IdentityMetadataType.decode(data);\n            if ((0, Either_1.isLeft)(validatedData)) {\n              // TODO: We could probably return a more useful error in the future\n              throw new Error(PathReporter_1.PathReporter.report(validatedData).join(', '));\n            }\n            claims = validatedData.right.claims;\n            hash = (0, claim_1.hashOfClaims)(claims);\n            _a = claims.length > 0;\n            if (!_a) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.verifySigner(contractKitOrAccountsWrapper, hash, validatedData.right.meta.signature, validatedData.right.meta)];\n          case 1:\n            _a = !_b.sent();\n            _b.label = 2;\n          case 2:\n            if (_a) {\n              throw new Error(\"Signature could not be validated. Guessing signer: \".concat((0, signatureUtils_1.guessSigner)(hash, validatedData.right.meta.signature)));\n            }\n            res = new IdentityMetadataWrapper(validatedData.right);\n            // Verify that singular claim types appear at most once\n            types_1.SINGULAR_CLAIM_TYPES.forEach(function (claimType) {\n              var results = res.filterClaims(claimType);\n              if (results.length > 1) {\n                throw new Error(\"Found \".concat(results.length, \" claims of type \").concat(claimType, \", should be at most 1\"));\n              }\n            });\n            return [2 /*return*/, res];\n        }\n      });\n    });\n  };\n  Object.defineProperty(IdentityMetadataWrapper.prototype, \"claims\", {\n    get: function get() {\n      return this.data.claims;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  IdentityMetadataWrapper.prototype.hashOfClaims = function () {\n    return (0, claim_1.hashOfClaims)(this.data.claims);\n  };\n  IdentityMetadataWrapper.prototype.toString = function () {\n    return JSON.stringify({\n      claims: this.data.claims,\n      meta: this.data.meta\n    });\n  };\n  IdentityMetadataWrapper.prototype.addClaim = function (claim, signer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var existingClaims, existingClaims, index, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            switch (claim.type) {\n              case types_1.ClaimTypes.ACCOUNT:\n                if ((0, address_1.eqAddress)(claim.address, this.data.meta.address)) {\n                  throw new Error(\"Can't claim self\");\n                }\n                break;\n              case types_1.ClaimTypes.DOMAIN:\n                {\n                  existingClaims = this.data.claims.filter(function (el) {\n                    return el.domain === claim.domain;\n                  });\n                  if (existingClaims.length > 0) {\n                    return [2 /*return*/, existingClaims[0]];\n                  }\n                  break;\n                }\n              case types_1.ClaimTypes.KEYBASE:\n                {\n                  existingClaims = this.data.claims.filter(function (el) {\n                    return el.username === claim.username;\n                  });\n                  if (existingClaims.length > 0) {\n                    return [2 /*return*/, existingClaims[0]];\n                  }\n                }\n              default:\n                break;\n            }\n            if (types_1.SINGULAR_CLAIM_TYPES.includes(claim.type)) {\n              index = this.data.claims.findIndex((0, claim_1.isOfType)(claim.type));\n              if (index !== -1) {\n                this.data.claims.splice(index, 1);\n              }\n            }\n            this.data.claims.push(claim);\n            _a = this.data.meta;\n            return [4 /*yield*/, signer.sign(this.hashOfClaims())];\n          case 1:\n            _a.signature = _b.sent();\n            return [2 /*return*/, claim];\n        }\n      });\n    });\n  };\n  IdentityMetadataWrapper.prototype.findClaim = function (type) {\n    return this.data.claims.find((0, claim_1.isOfType)(type));\n  };\n  IdentityMetadataWrapper.prototype.filterClaims = function (type) {\n    return this.data.claims.filter((0, claim_1.isOfType)(type));\n  };\n  return IdentityMetadataWrapper;\n}();\nexports.IdentityMetadataWrapper = IdentityMetadataWrapper;\n// at first these functions required a `kit` but thats a bit heavy\n// as all that is used is the Accounts Wrapper so allow either.\nfunction getAccounts(contractKitOrAccountsWrapper) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      if (contractKitOrAccountsWrapper instanceof Accounts_1.AccountsWrapper) {\n        return [2 /*return*/, contractKitOrAccountsWrapper];\n      } else {\n        return [2 /*return*/, contractKitOrAccountsWrapper.contracts.getAccounts()];\n      }\n      return [2 /*return*/];\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}