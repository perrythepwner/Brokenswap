{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(\"Wrong positive integer: \".concat(n));\n}\nexports.number = number;\nfunction bool(b) {\n  if (typeof b !== 'boolean') throw new Error(\"Expected boolean, not \".concat(b));\n}\nexports.bool = bool;\nfunction bytes(b) {\n  if (!(b instanceof Uint8Array)) throw new TypeError('Expected Uint8Array');\n  for (var _len = arguments.length, lengths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    lengths[_key - 1] = arguments[_key];\n  }\n  if (lengths.length > 0 && !lengths.includes(b.length)) throw new TypeError(\"Expected Uint8Array of length \".concat(lengths, \", not of length=\").concat(b.length));\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance) {\n  let checkFinished = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(\"digestInto() expects output buffer of length at least \".concat(min));\n  }\n}\nexports.output = output;\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output\n};\nexports.default = assert;","map":{"version":3,"sources":["src/_assert.ts"],"names":[],"mappings":";;;;;;AAAA,SAAgB,MAAM,CAAC,CAAS,EAAA;EAC9B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,IAAI,KAAK,4BAAA,MAAA,CAA4B,CAAC,CAAE,CAAC;AACxF;AAFA,OAAA,CAAA,MAAA,GAAA,MAAA;AAIA,SAAgB,IAAI,CAAC,CAAU,EAAA;EAC7B,IAAI,OAAO,CAAC,KAAK,SAAS,EAAE,MAAM,IAAI,KAAK,0BAAA,MAAA,CAA0B,CAAC,CAAE,CAAC;AAC3E;AAFA,OAAA,CAAA,IAAA,GAAA,IAAA;AAIA,SAAgB,KAAK,CAAC,CAAyB,EAAsB;EACnE,IAAI,EAAE,CAAC,YAAY,UAAU,CAAC,EAAE,MAAM,IAAI,SAAS,CAAC,qBAAqB,CAAC;EAAC,SAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EADzB,OAAiB,OAAA,KAAA,CAAA,IAAA,OAAA,IAAA,WAAA,IAAA,MAAA,IAAA,GAAA,IAAA,EAAA,IAAA;IAAjB,OAAiB,CAAA,IAAA,QAAA,SAAA,CAAA,IAAA;EAAA;EAEnE,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,EACnD,MAAM,IAAI,SAAS,kCAAA,MAAA,CAAkC,OAAO,sBAAA,MAAA,CAAmB,CAAC,CAAC,MAAM,CAAE,CAAC;AAC9F;AAJA,OAAA,CAAA,KAAA,GAAA,KAAA;AAYA,SAAgB,IAAI,CAAC,IAAU,EAAA;EAC7B,IAAI,OAAO,IAAI,KAAK,UAAU,IAAI,OAAO,IAAI,CAAC,MAAM,KAAK,UAAU,EACjE,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC;EACpE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;EACtB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;AACvB;AALA,OAAA,CAAA,IAAA,GAAA,IAAA;AAOA,SAAgB,MAAM,CAAC,QAAa,EAAsB;EAAA,IAApB,aAAa,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,IAAI;EACxD,IAAI,QAAQ,CAAC,SAAS,EAAE,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC;EAC3E,IAAI,aAAa,IAAI,QAAQ,CAAC,QAAQ,EAAE,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC;AAClG;AAHA,OAAA,CAAA,MAAA,GAAA,MAAA;AAIA,SAAgB,MAAM,CAAC,GAAQ,EAAE,QAAa,EAAA;EAC5C,KAAK,CAAC,GAAG,CAAC;EACV,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS;EAC9B,IAAI,GAAG,CAAC,MAAM,GAAG,GAAG,EAAE;IACpB,MAAM,IAAI,KAAK,0DAAA,MAAA,CAA0D,GAAG,CAAE,CAAC;EAChF;AACH;AANA,OAAA,CAAA,MAAA,GAAA,MAAA;AAQA,MAAM,MAAM,GAAG;EACb,MAAM;EACN,IAAI;EACJ,KAAK;EACL,IAAI;EACJ,MAAM;EACN;CACD;AAED,OAAA,CAAA,OAAA,GAAe,MAAM","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n//# sourceMappingURL=_assert.js.map"]},"metadata":{},"sourceType":"script"}