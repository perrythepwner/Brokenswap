{"ast":null,"code":"import _asyncToGenerator from \"/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json';\nimport Ajv from 'ajv';\nimport addFormats from 'ajv-formats';\nimport uriToHttp from './uriToHttp';\nconst tokenListValidator = addFormats(new Ajv({\n  allErrors: true\n})).compile(schema);\n\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\nexport default function getTokenList(_x) {\n  return _getTokenList.apply(this, arguments);\n}\nfunction _getTokenList() {\n  _getTokenList = _asyncToGenerator(function* (listUrl) {\n    const urls = uriToHttp(listUrl);\n    for (let i = 0; i < urls.length; i++) {\n      const url = urls[i];\n      const isLast = i === urls.length - 1;\n      let response;\n      try {\n        response = yield fetch(url);\n      } catch (error) {\n        console.debug('Failed to fetch list', listUrl, error);\n        if (isLast) throw new Error(\"Failed to download list \".concat(listUrl));\n        continue;\n      }\n      if (!response.ok) {\n        if (isLast) throw new Error(\"Failed to download list \".concat(listUrl));\n        continue;\n      }\n      const json = yield response.json();\n      if (!tokenListValidator(json)) {\n        var _tokenListValidator$e, _tokenListValidator$e2;\n        const validationErrors = (_tokenListValidator$e = (_tokenListValidator$e2 = tokenListValidator.errors) === null || _tokenListValidator$e2 === void 0 ? void 0 : _tokenListValidator$e2.reduce((memo, error) => {\n          var _error$message;\n          const add = \"\".concat(error.instancePath, \" \").concat((_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : '');\n          return memo.length > 0 ? \"\".concat(memo, \"; \").concat(add) : \"\".concat(add);\n        }, '')) !== null && _tokenListValidator$e !== void 0 ? _tokenListValidator$e : 'unknown error';\n        throw new Error(\"Token list failed validation: \".concat(validationErrors));\n      }\n      return json;\n    }\n    throw new Error('Unrecognized list URL protocol.');\n  });\n  return _getTokenList.apply(this, arguments);\n}","map":{"version":3,"names":["schema","Ajv","addFormats","uriToHttp","tokenListValidator","allErrors","compile","getTokenList","_x","_getTokenList","apply","arguments","_asyncToGenerator","listUrl","urls","i","length","url","isLast","response","fetch","error","console","debug","Error","concat","ok","json","_tokenListValidator$e","_tokenListValidator$e2","validationErrors","errors","reduce","memo","_error$message","add","instancePath","message"],"sources":["/app/src/utils/getTokenList.ts"],"sourcesContent":["import { TokenList } from '@uniswap/token-lists'\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\nimport Ajv from 'ajv'\nimport addFormats from 'ajv-formats'\n\nimport uriToHttp from './uriToHttp'\n\nconst tokenListValidator = addFormats(new Ajv({ allErrors: true })).compile(schema)\n\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n * @param resolveENSContentHash resolves an ens name to a contenthash\n */\nexport default async function getTokenList(listUrl: string): Promise<TokenList> {\n  const urls = uriToHttp(listUrl)\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i]\n    const isLast = i === urls.length - 1\n    let response\n    try {\n      response = await fetch(url)\n    } catch (error) {\n      console.debug('Failed to fetch list', listUrl, error)\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\n      continue\n    }\n\n    if (!response.ok) {\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\n      continue\n    }\n\n    const json: TokenList = await response.json()\n    if (!tokenListValidator(json)) {\n      const validationErrors: string =\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\n          const add = `${error.instancePath} ${error.message ?? ''}`\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\n        }, '') ?? 'unknown error'\n      throw new Error(`Token list failed validation: ${validationErrors}`)\n    }\n    return json\n  }\n  throw new Error('Unrecognized list URL protocol.')\n}\n"],"mappings":";AACA,OAAOA,MAAM,MAAM,gDAAgD;AACnE,OAAOC,GAAG,MAAM,KAAK;AACrB,OAAOC,UAAU,MAAM,aAAa;AAEpC,OAAOC,SAAS,MAAM,aAAa;AAEnC,MAAMC,kBAAkB,GAAGF,UAAU,CAAC,IAAID,GAAG,CAAC;EAAEI,SAAS,EAAE;AAAK,CAAC,CAAC,CAAC,CAACC,OAAO,CAACN,MAAM,CAAC;;AAEnF;AACA;AACA;AACA;AACA;AACA,wBAA8BO,YAAYA,CAAAC,EAAA;EAAA,OAAAC,aAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AA+BzC,SAAAF,cAAA;EAAAA,aAAA,GAAAG,iBAAA,CA/Bc,WAA4BC,OAAe,EAAsB;IAC9E,MAAMC,IAAI,GAAGX,SAAS,CAACU,OAAO,CAAC;IAC/B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,IAAI,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,MAAME,GAAG,GAAGH,IAAI,CAACC,CAAC,CAAC;MACnB,MAAMG,MAAM,GAAGH,CAAC,KAAKD,IAAI,CAACE,MAAM,GAAG,CAAC;MACpC,IAAIG,QAAQ;MACZ,IAAI;QACFA,QAAQ,SAASC,KAAK,CAACH,GAAG,CAAC;MAC7B,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEV,OAAO,EAAEQ,KAAK,CAAC;QACrD,IAAIH,MAAM,EAAE,MAAM,IAAIM,KAAK,4BAAAC,MAAA,CAA4BZ,OAAO,CAAE,CAAC;QACjE;MACF;MAEA,IAAI,CAACM,QAAQ,CAACO,EAAE,EAAE;QAChB,IAAIR,MAAM,EAAE,MAAM,IAAIM,KAAK,4BAAAC,MAAA,CAA4BZ,OAAO,CAAE,CAAC;QACjE;MACF;MAEA,MAAMc,IAAe,SAASR,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAC7C,IAAI,CAACvB,kBAAkB,CAACuB,IAAI,CAAC,EAAE;QAAA,IAAAC,qBAAA,EAAAC,sBAAA;QAC7B,MAAMC,gBAAwB,IAAAF,qBAAA,IAAAC,sBAAA,GAC5BzB,kBAAkB,CAAC2B,MAAM,cAAAF,sBAAA,uBAAzBA,sBAAA,CAA2BG,MAAM,CAAS,CAACC,IAAI,EAAEZ,KAAK,KAAK;UAAA,IAAAa,cAAA;UACzD,MAAMC,GAAG,MAAAV,MAAA,CAAMJ,KAAK,CAACe,YAAY,OAAAX,MAAA,EAAAS,cAAA,GAAIb,KAAK,CAACgB,OAAO,cAAAH,cAAA,cAAAA,cAAA,GAAI,EAAE,CAAE;UAC1D,OAAOD,IAAI,CAACjB,MAAM,GAAG,CAAC,MAAAS,MAAA,CAAMQ,IAAI,QAAAR,MAAA,CAAKU,GAAG,OAAAV,MAAA,CAAQU,GAAG,CAAE;QACvD,CAAC,EAAE,EAAE,CAAC,cAAAP,qBAAA,cAAAA,qBAAA,GAAI,eAAe;QAC3B,MAAM,IAAIJ,KAAK,kCAAAC,MAAA,CAAkCK,gBAAgB,CAAE,CAAC;MACtE;MACA,OAAOH,IAAI;IACb;IACA,MAAM,IAAIH,KAAK,CAAC,iCAAiC,CAAC;EACpD,CAAC;EAAA,OAAAf,aAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module"}