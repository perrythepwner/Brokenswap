{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant, newInvariantError } from \"../utilities/globals/index.js\";\nimport { ApolloLink, execute } from \"../link/core/index.js\";\nimport { version } from \"../version.js\";\nimport { HttpLink } from \"../link/http/index.js\";\nimport { QueryManager } from \"./QueryManager.js\";\nimport { LocalState } from \"./LocalState.js\";\nvar hasSuggestedDevtools = false;\nimport { mergeOptions } from \"../utilities/index.js\";\nexport { mergeOptions };\nvar ApolloClient = function () {\n  function ApolloClient(options) {\n    var _this = this;\n    this.resetStoreCallbacks = [];\n    this.clearStoreCallbacks = [];\n    if (!options.cache) {\n      throw newInvariantError(15);\n    }\n    var uri = options.uri,\n      credentials = options.credentials,\n      headers = options.headers,\n      cache = options.cache,\n      documentTransform = options.documentTransform,\n      _a = options.ssrMode,\n      ssrMode = _a === void 0 ? false : _a,\n      _b = options.ssrForceFetchDelay,\n      ssrForceFetchDelay = _b === void 0 ? 0 : _b,\n      _c = options.connectToDevTools,\n      connectToDevTools = _c === void 0 ? typeof window === \"object\" && !window.__APOLLO_CLIENT__ && globalThis.__DEV__ !== false : _c,\n      _d = options.queryDeduplication,\n      queryDeduplication = _d === void 0 ? true : _d,\n      defaultOptions = options.defaultOptions,\n      _e = options.assumeImmutableResults,\n      assumeImmutableResults = _e === void 0 ? cache.assumeImmutableResults : _e,\n      resolvers = options.resolvers,\n      typeDefs = options.typeDefs,\n      fragmentMatcher = options.fragmentMatcher,\n      clientAwarenessName = options.name,\n      clientAwarenessVersion = options.version;\n    var link = options.link;\n    if (!link) {\n      link = uri ? new HttpLink({\n        uri: uri,\n        credentials: credentials,\n        headers: headers\n      }) : ApolloLink.empty();\n    }\n    this.link = link;\n    this.cache = cache;\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.typeDefs = typeDefs;\n    if (ssrForceFetchDelay) {\n      setTimeout(function () {\n        return _this.disableNetworkFetches = false;\n      }, ssrForceFetchDelay);\n    }\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n    this.version = version;\n    this.localState = new LocalState({\n      cache: cache,\n      client: this,\n      resolvers: resolvers,\n      fragmentMatcher: fragmentMatcher\n    });\n    this.queryManager = new QueryManager({\n      cache: this.cache,\n      link: this.link,\n      defaultOptions: this.defaultOptions,\n      documentTransform: documentTransform,\n      queryDeduplication: queryDeduplication,\n      ssrMode: ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName,\n        version: clientAwarenessVersion\n      },\n      localState: this.localState,\n      assumeImmutableResults: assumeImmutableResults,\n      onBroadcast: connectToDevTools ? function () {\n        if (_this.devToolsHookCb) {\n          _this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: _this.queryManager.getQueryStore(),\n              mutations: _this.queryManager.mutationStore || {}\n            },\n            dataWithOptimisticResults: _this.cache.extract(true)\n          });\n        }\n      } : void 0\n    });\n    if (connectToDevTools) this.connectToDevTools();\n  }\n  ApolloClient.prototype.connectToDevTools = function () {\n    if (typeof window === \"object\") {\n      var windowWithDevTools = window;\n      var devtoolsSymbol = Symbol.for(\"apollo.devtools\");\n      (windowWithDevTools[devtoolsSymbol] = windowWithDevTools[devtoolsSymbol] || []).push(this);\n      windowWithDevTools.__APOLLO_CLIENT__ = this;\n    }\n    if (!hasSuggestedDevtools && globalThis.__DEV__ !== false) {\n      hasSuggestedDevtools = true;\n      setTimeout(function () {\n        if (typeof window !== \"undefined\" && window.document && window.top === window.self && !window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n          var nav = window.navigator;\n          var ua = nav && nav.userAgent;\n          var url = void 0;\n          if (typeof ua === \"string\") {\n            if (ua.indexOf(\"Chrome/\") > -1) {\n              url = \"https://chrome.google.com/webstore/detail/\" + \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n            } else if (ua.indexOf(\"Firefox/\") > -1) {\n              url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n            }\n          }\n          if (url) {\n            globalThis.__DEV__ !== false && invariant.log(\"Download the Apollo DevTools for a better development \" + \"experience: %s\", url);\n          }\n        }\n      }, 10000);\n    }\n  };\n  Object.defineProperty(ApolloClient.prototype, \"documentTransform\", {\n    get: function get() {\n      return this.queryManager.documentTransform;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ApolloClient.prototype.stop = function () {\n    this.queryManager.stop();\n  };\n  ApolloClient.prototype.watchQuery = function (options) {\n    if (this.defaultOptions.watchQuery) {\n      options = mergeOptions(this.defaultOptions.watchQuery, options);\n    }\n    if (this.disableNetworkFetches && (options.fetchPolicy === \"network-only\" || options.fetchPolicy === \"cache-and-network\")) {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: \"cache-first\"\n      });\n    }\n    return this.queryManager.watchQuery(options);\n  };\n  ApolloClient.prototype.query = function (options) {\n    if (this.defaultOptions.query) {\n      options = mergeOptions(this.defaultOptions.query, options);\n    }\n    invariant(options.fetchPolicy !== \"cache-and-network\", 16);\n    if (this.disableNetworkFetches && options.fetchPolicy === \"network-only\") {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: \"cache-first\"\n      });\n    }\n    return this.queryManager.query(options);\n  };\n  ApolloClient.prototype.mutate = function (options) {\n    if (this.defaultOptions.mutate) {\n      options = mergeOptions(this.defaultOptions.mutate, options);\n    }\n    return this.queryManager.mutate(options);\n  };\n  ApolloClient.prototype.subscribe = function (options) {\n    return this.queryManager.startGraphQLSubscription(options);\n  };\n  ApolloClient.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.cache.readQuery(options, optimistic);\n  };\n  ApolloClient.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.cache.readFragment(options, optimistic);\n  };\n  ApolloClient.prototype.writeQuery = function (options) {\n    var ref = this.cache.writeQuery(options);\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n    return ref;\n  };\n  ApolloClient.prototype.writeFragment = function (options) {\n    var ref = this.cache.writeFragment(options);\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n    return ref;\n  };\n  ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n    this.devToolsHookCb = cb;\n  };\n  ApolloClient.prototype.__requestRaw = function (payload) {\n    return execute(this.link, payload);\n  };\n  ApolloClient.prototype.resetStore = function () {\n    var _this = this;\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore({\n        discardWatches: false\n      });\n    }).then(function () {\n      return Promise.all(_this.resetStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    }).then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n  ApolloClient.prototype.clearStore = function () {\n    var _this = this;\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore({\n        discardWatches: true\n      });\n    }).then(function () {\n      return Promise.all(_this.clearStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    });\n  };\n  ApolloClient.prototype.onResetStore = function (cb) {\n    var _this = this;\n    this.resetStoreCallbacks.push(cb);\n    return function () {\n      _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n  ApolloClient.prototype.onClearStore = function (cb) {\n    var _this = this;\n    this.clearStoreCallbacks.push(cb);\n    return function () {\n      _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n  ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  };\n  ApolloClient.prototype.refetchQueries = function (options) {\n    var map = this.queryManager.refetchQueries(options);\n    var queries = [];\n    var results = [];\n    map.forEach(function (result, obsQuery) {\n      queries.push(obsQuery);\n      results.push(result);\n    });\n    var result = Promise.all(results);\n    result.queries = queries;\n    result.results = results;\n    result.catch(function (error) {\n      globalThis.__DEV__ !== false && invariant.debug(17, error);\n    });\n    return result;\n  };\n  ApolloClient.prototype.getObservableQueries = function (include) {\n    if (include === void 0) {\n      include = \"active\";\n    }\n    return this.queryManager.getObservableQueries(include);\n  };\n  ApolloClient.prototype.extract = function (optimistic) {\n    return this.cache.extract(optimistic);\n  };\n  ApolloClient.prototype.restore = function (serializedState) {\n    return this.cache.restore(serializedState);\n  };\n  ApolloClient.prototype.addResolvers = function (resolvers) {\n    this.localState.addResolvers(resolvers);\n  };\n  ApolloClient.prototype.setResolvers = function (resolvers) {\n    this.localState.setResolvers(resolvers);\n  };\n  ApolloClient.prototype.getResolvers = function () {\n    return this.localState.getResolvers();\n  };\n  ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  };\n  ApolloClient.prototype.setLink = function (newLink) {\n    this.link = this.queryManager.link = newLink;\n  };\n  return ApolloClient;\n}();\nexport { ApolloClient };","map":{"version":3,"sources":["../../src/core/ApolloClient.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant, newInvariantError } from \"../utilities/globals/index.js\";\n\nimport type { ExecutionResult, DocumentNode } from \"graphql\";\n\nimport type { FetchResult, GraphQLRequest } from \"../link/core/index.js\";\nimport { ApolloLink, execute } from \"../link/core/index.js\";\nimport type { ApolloCache, DataProxy, Reference } from \"../cache/index.js\";\nimport type { DocumentTransform, Observable } from \"../utilities/index.js\";\nimport { version } from \"../version.js\";\nimport type { UriFunction } from \"../link/http/index.js\";\nimport { HttpLink } from \"../link/http/index.js\";\n\nimport { QueryManager } from \"./QueryManager.js\";\nimport type { ObservableQuery } from \"./ObservableQuery.js\";\n\nimport type {\n  ApolloQueryResult,\n  DefaultContext,\n  OperationVariables,\n  Resolvers,\n  RefetchQueriesOptions,\n  RefetchQueriesResult,\n  InternalRefetchQueriesResult,\n  RefetchQueriesInclude,\n} from \"./types.js\";\n\nimport type {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  SubscriptionOptions,\n  WatchQueryFetchPolicy,\n} from \"./watchQueryOptions.js\";\n\nimport type { FragmentMatcher } from \"./LocalState.js\";\nimport { LocalState } from \"./LocalState.js\";\n\nexport interface DefaultOptions {\n  watchQuery?: Partial<WatchQueryOptions<any, any>>;\n  query?: Partial<QueryOptions<any, any>>;\n  mutate?: Partial<MutationOptions<any, any, any>>;\n}\n\nlet hasSuggestedDevtools = false;\n\nexport type ApolloClientOptions<TCacheShape> = {\n  uri?: string | UriFunction;\n  credentials?: string;\n  headers?: Record<string, string>;\n  link?: ApolloLink;\n  cache: ApolloCache<TCacheShape>;\n  ssrForceFetchDelay?: number;\n  ssrMode?: boolean;\n  connectToDevTools?: boolean;\n  queryDeduplication?: boolean;\n  defaultOptions?: DefaultOptions;\n  assumeImmutableResults?: boolean;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: FragmentMatcher;\n  name?: string;\n  version?: string;\n  documentTransform?: DocumentTransform;\n};\n\n// Though mergeOptions now resides in @apollo/client/utilities, it was\n// previously declared and exported from this module, and then reexported from\n// @apollo/client/core. Since we need to preserve that API anyway, the easiest\n// solution is to reexport mergeOptions where it was previously declared (here).\nimport { mergeOptions } from \"../utilities/index.js\";\nexport { mergeOptions };\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over a {@link NetworkInterface} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */\nexport class ApolloClient<TCacheShape> implements DataProxy {\n  public link: ApolloLink;\n  public cache: ApolloCache<TCacheShape>;\n  public disableNetworkFetches: boolean;\n  public version: string;\n  public queryDeduplication: boolean;\n  public defaultOptions: DefaultOptions;\n  public readonly typeDefs: ApolloClientOptions<TCacheShape>[\"typeDefs\"];\n\n  private queryManager: QueryManager<TCacheShape>;\n  private devToolsHookCb: Function;\n  private resetStoreCallbacks: Array<() => Promise<any>> = [];\n  private clearStoreCallbacks: Array<() => Promise<any>> = [];\n  private localState: LocalState<TCacheShape>;\n\n  /**\n   * Constructs an instance of {@link ApolloClient}.\n   *\n   * @param uri The GraphQL endpoint that Apollo Client will connect to. If\n   *            `link` is configured, this option is ignored.\n   * @param link The {@link ApolloLink} over which GraphQL documents will be resolved into a response.\n   *\n   * @param cache The initial cache to use in the data store.\n   *\n   * @param ssrMode Determines whether this is being run in Server Side Rendering (SSR) mode.\n   *\n   * @param ssrForceFetchDelay Determines the time interval before we force fetch queries for a\n   * server side render.\n   *\n   * @param queryDeduplication If set to false, a query will still be sent to the server even if a query\n   * with identical parameters (query, variables, operationName) is already in flight.\n   *\n   * @param defaultOptions Used to set application wide defaults for the\n   *                       options supplied to `watchQuery`, `query`, or\n   *                       `mutate`.\n   *\n   * @param assumeImmutableResults When this option is true, the client will assume results\n   *                               read from the cache are never mutated by application code,\n   *                               which enables substantial performance optimizations.\n   *\n   * @param name A custom name that can be used to identify this client, when\n   *             using Apollo client awareness features. E.g. \"iOS\".\n   *\n   * @param version A custom version that can be used to identify this client,\n   *                when using Apollo client awareness features. This is the\n   *                version of your client, which you may want to increment on\n   *                new builds. This is NOT the version of Apollo Client that\n   *                you are using.\n   */\n  constructor(options: ApolloClientOptions<TCacheShape>) {\n    if (!options.cache) {\n      throw newInvariantError(\n        \"To initialize Apollo Client, you must specify a 'cache' property \" +\n          \"in the options object. \\n\" +\n          \"For more information, please visit: https://go.apollo.dev/c/docs\"\n      );\n    }\n\n    const {\n      uri,\n      credentials,\n      headers,\n      cache,\n      documentTransform,\n      ssrMode = false,\n      ssrForceFetchDelay = 0,\n      // Expose the client instance as window.__APOLLO_CLIENT__ and call\n      // onBroadcast in queryManager.broadcastQueries to enable browser\n      // devtools, but disable them by default in production.\n      connectToDevTools = typeof window === \"object\" &&\n        !(window as any).__APOLLO_CLIENT__ &&\n        __DEV__,\n      queryDeduplication = true,\n      defaultOptions,\n      assumeImmutableResults = cache.assumeImmutableResults,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n      name: clientAwarenessName,\n      version: clientAwarenessVersion,\n    } = options;\n\n    let { link } = options;\n\n    if (!link) {\n      link = uri\n        ? new HttpLink({ uri, credentials, headers })\n        : ApolloLink.empty();\n    }\n\n    this.link = link;\n    this.cache = cache;\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.typeDefs = typeDefs;\n\n    if (ssrForceFetchDelay) {\n      setTimeout(\n        () => (this.disableNetworkFetches = false),\n        ssrForceFetchDelay\n      );\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n\n    this.version = version;\n\n    this.localState = new LocalState({\n      cache,\n      client: this,\n      resolvers,\n      fragmentMatcher,\n    });\n\n    this.queryManager = new QueryManager({\n      cache: this.cache,\n      link: this.link,\n      defaultOptions: this.defaultOptions,\n      documentTransform,\n      queryDeduplication,\n      ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName!,\n        version: clientAwarenessVersion!,\n      },\n      localState: this.localState,\n      assumeImmutableResults,\n      onBroadcast: connectToDevTools\n        ? () => {\n            if (this.devToolsHookCb) {\n              this.devToolsHookCb({\n                action: {},\n                state: {\n                  queries: this.queryManager.getQueryStore(),\n                  mutations: this.queryManager.mutationStore || {},\n                },\n                dataWithOptimisticResults: this.cache.extract(true),\n              });\n            }\n          }\n        : void 0,\n    });\n\n    if (connectToDevTools) this.connectToDevTools();\n  }\n\n  private connectToDevTools() {\n    if (typeof window === \"object\") {\n      type DevToolsConnector = {\n        push(client: ApolloClient<any>): void;\n      };\n      const windowWithDevTools = window as Window & {\n        [devtoolsSymbol]?: DevToolsConnector;\n        __APOLLO_CLIENT__?: ApolloClient<any>;\n      };\n      const devtoolsSymbol = Symbol.for(\"apollo.devtools\");\n      (windowWithDevTools[devtoolsSymbol] =\n        windowWithDevTools[devtoolsSymbol] || ([] as DevToolsConnector)).push(\n        this\n      );\n      windowWithDevTools.__APOLLO_CLIENT__ = this;\n    }\n\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n    if (!hasSuggestedDevtools && __DEV__) {\n      hasSuggestedDevtools = true;\n      setTimeout(() => {\n        if (\n          typeof window !== \"undefined\" &&\n          window.document &&\n          window.top === window.self &&\n          !(window as any).__APOLLO_DEVTOOLS_GLOBAL_HOOK__\n        ) {\n          const nav = window.navigator;\n          const ua = nav && nav.userAgent;\n          let url: string | undefined;\n          if (typeof ua === \"string\") {\n            if (ua.indexOf(\"Chrome/\") > -1) {\n              url =\n                \"https://chrome.google.com/webstore/detail/\" +\n                \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n            } else if (ua.indexOf(\"Firefox/\") > -1) {\n              url =\n                \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n            }\n          }\n          if (url) {\n            invariant.log(\n              \"Download the Apollo DevTools for a better development \" +\n                \"experience: %s\",\n              url\n            );\n          }\n        }\n      }, 10000);\n    }\n  }\n\n  /**\n   * The `DocumentTransform` used to modify GraphQL documents before a request\n   * is made. If a custom `DocumentTransform` is not provided, this will be the\n   * default document transform.\n   */\n  get documentTransform() {\n    return this.queryManager.documentTransform;\n  }\n\n  /**\n   * Call this method to terminate any active client processes, making it safe\n   * to dispose of this `ApolloClient` instance.\n   */\n  public stop() {\n    this.queryManager.stop();\n  }\n\n  /**\n   * This watches the cache store of the query according to the options specified and\n   * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n   * receive updated results through a GraphQL observer when the cache store changes.\n   *\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   *\n   * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n   * first and last name and this person has a particular object identifier, provided by\n   * dataIdFromObject. Later, a different query fetches that same person's\n   * first and last name and the first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   *\n   * Note that if the cache does not change, the subscriber will *not* be notified.\n   *\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   */\n  public watchQuery<\n    T = any,\n    TVariables extends OperationVariables = OperationVariables,\n  >(options: WatchQueryOptions<TVariables, T>): ObservableQuery<T, TVariables> {\n    if (this.defaultOptions.watchQuery) {\n      options = mergeOptions(this.defaultOptions.watchQuery, options);\n    }\n\n    // XXX Overwriting options is probably not the best way to do this long term...\n    if (\n      this.disableNetworkFetches &&\n      (options.fetchPolicy === \"network-only\" ||\n        options.fetchPolicy === \"cache-and-network\")\n    ) {\n      options = { ...options, fetchPolicy: \"cache-first\" };\n    }\n\n    return this.queryManager.watchQuery<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a {@link Promise} which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options An object of type {@link QueryOptions} that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n  public query<\n    T = any,\n    TVariables extends OperationVariables = OperationVariables,\n  >(options: QueryOptions<TVariables, T>): Promise<ApolloQueryResult<T>> {\n    if (this.defaultOptions.query) {\n      options = mergeOptions(this.defaultOptions.query, options);\n    }\n\n    invariant(\n      (options.fetchPolicy as WatchQueryFetchPolicy) !== \"cache-and-network\",\n      \"The cache-and-network fetchPolicy does not work with client.query, because \" +\n        \"client.query can only return a single result. Please use client.watchQuery \" +\n        \"to receive multiple results from the cache and the network, or consider \" +\n        \"using a different fetchPolicy, such as cache-first or network-only.\"\n    );\n\n    if (this.disableNetworkFetches && options.fetchPolicy === \"network-only\") {\n      options = { ...options, fetchPolicy: \"cache-first\" };\n    }\n\n    return this.queryManager.query<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * {@link Promise} which is either resolved with the resulting data or rejected with an\n   * error.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n  public mutate<\n    TData = any,\n    TVariables extends OperationVariables = OperationVariables,\n    TContext extends Record<string, any> = DefaultContext,\n    TCache extends ApolloCache<any> = ApolloCache<any>,\n  >(\n    options: MutationOptions<TData, TVariables, TContext>\n  ): Promise<FetchResult<TData>> {\n    if (this.defaultOptions.mutate) {\n      options = mergeOptions(this.defaultOptions.mutate, options);\n    }\n    return this.queryManager.mutate<TData, TVariables, TContext, TCache>(\n      options\n    );\n  }\n\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * {@link Observable} which either emits received data or an error.\n   */\n  public subscribe<\n    T = any,\n    TVariables extends OperationVariables = OperationVariables,\n  >(options: SubscriptionOptions<TVariables, T>): Observable<FetchResult<T>> {\n    return this.queryManager.startGraphQLSubscription<T>(options);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `dataIdFromObject`\n   * use `readFragment`.\n   *\n   * @param optimistic Set to `true` to allow `readQuery` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readQuery<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Query<TVariables, T>,\n    optimistic: boolean = false\n  ): T | null {\n    return this.cache.readQuery<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @param optimistic Set to `true` to allow `readFragment` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readFragment<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Fragment<TVariables, T>,\n    optimistic: boolean = false\n  ): T | null {\n    return this.cache.readFragment<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a\n   * specific id returned by `dataIdFromObject` then use `writeFragment`.\n   */\n  public writeQuery<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteQueryOptions<TData, TVariables>\n  ): Reference | undefined {\n    const ref = this.cache.writeQuery<TData, TVariables>(options);\n\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n\n    return ref;\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n  public writeFragment<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteFragmentOptions<TData, TVariables>\n  ): Reference | undefined {\n    const ref = this.cache.writeFragment<TData, TVariables>(options);\n\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n\n    return ref;\n  }\n\n  public __actionHookForDevTools(cb: () => any) {\n    this.devToolsHookCb = cb;\n  }\n\n  public __requestRaw(payload: GraphQLRequest): Observable<ExecutionResult> {\n    return execute(this.link, payload);\n  }\n\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You’ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public resetStore(): Promise<ApolloQueryResult<any>[] | null> {\n    return Promise.resolve()\n      .then(() =>\n        this.queryManager.clearStore({\n          discardWatches: false,\n        })\n      )\n      .then(() => Promise.all(this.resetStoreCallbacks.map((fn) => fn())))\n      .then(() => this.reFetchObservableQueries());\n  }\n\n  /**\n   * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n   * not refetch any active queries.\n   */\n  public clearStore(): Promise<any[]> {\n    return Promise.resolve()\n      .then(() =>\n        this.queryManager.clearStore({\n          discardWatches: true,\n        })\n      )\n      .then(() => Promise.all(this.clearStoreCallbacks.map((fn) => fn())));\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * reset. `onResetStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onResetStore(cb: () => Promise<any>): () => void {\n    this.resetStoreCallbacks.push(cb);\n    return () => {\n      this.resetStoreCallbacks = this.resetStoreCallbacks.filter(\n        (c) => c !== cb\n      );\n    };\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * cleared. `onClearStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onClearStore(cb: () => Promise<any>): () => void {\n    this.clearStoreCallbacks.push(cb);\n    return () => {\n      this.clearStoreCallbacks = this.clearStoreCallbacks.filter(\n        (c) => c !== cb\n      );\n    };\n  }\n\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   */\n  public reFetchObservableQueries(\n    includeStandby?: boolean\n  ): Promise<ApolloQueryResult<any>[]> {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  }\n\n  /**\n   * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n   *\n   * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n   *\n   * It is important to remember that `refetchQueries()` *will* refetch specified active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public refetchQueries<\n    TCache extends ApolloCache<any> = ApolloCache<TCacheShape>,\n    TResult = Promise<ApolloQueryResult<any>>,\n  >(\n    options: RefetchQueriesOptions<TCache, TResult>\n  ): RefetchQueriesResult<TResult> {\n    const map = this.queryManager.refetchQueries(options);\n    const queries: ObservableQuery<any>[] = [];\n    const results: InternalRefetchQueriesResult<TResult>[] = [];\n\n    map.forEach((result, obsQuery) => {\n      queries.push(obsQuery);\n      results.push(result);\n    });\n\n    const result = Promise.all<TResult>(\n      results as TResult[]\n    ) as RefetchQueriesResult<TResult>;\n\n    // In case you need the raw results immediately, without awaiting\n    // Promise.all(results):\n    result.queries = queries;\n    result.results = results;\n\n    // If you decide to ignore the result Promise because you're using\n    // result.queries and result.results instead, you shouldn't have to worry\n    // about preventing uncaught rejections for the Promise.all result.\n    result.catch((error) => {\n      invariant.debug(\n        `In client.refetchQueries, Promise.all promise rejected with error %o`,\n        error\n      );\n    });\n\n    return result;\n  }\n\n  /**\n   * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n   * query ID strings.\n   *\n   * An \"active\" query is one that has observers and a `fetchPolicy` other than\n   * \"standby\" or \"cache-only\".\n   *\n   * You can include all `ObservableQuery` objects (including the inactive ones)\n   * by passing \"all\" instead of \"active\", or you can include just a subset of\n   * active queries by passing an array of query names or DocumentNode objects.\n   */\n  public getObservableQueries(\n    include: RefetchQueriesInclude = \"active\"\n  ): Map<string, ObservableQuery<any>> {\n    return this.queryManager.getObservableQueries(include);\n  }\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public extract(optimistic?: boolean): TCacheShape {\n    return this.cache.extract(optimistic);\n  }\n\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public restore(serializedState: TCacheShape): ApolloCache<TCacheShape> {\n    return this.cache.restore(serializedState);\n  }\n\n  /**\n   * Add additional local resolvers.\n   */\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.addResolvers(resolvers);\n  }\n\n  /**\n   * Set (override existing) local resolvers.\n   */\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.setResolvers(resolvers);\n  }\n\n  /**\n   * Get all registered local resolvers.\n   */\n  public getResolvers() {\n    return this.localState.getResolvers();\n  }\n\n  /**\n   * Set a custom local state fragment matcher.\n   */\n  public setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  }\n\n  /**\n   * Define a new ApolloLink (or link chain) that Apollo Client will use.\n   */\n  public setLink(newLink: ApolloLink) {\n    this.link = this.queryManager.link = newLink;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}