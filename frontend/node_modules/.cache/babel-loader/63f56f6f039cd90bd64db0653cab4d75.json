{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;\nconst codegen_1 = require(\"./codegen\");\nconst util_1 = require(\"./util\");\nconst names_1 = require(\"./names\");\nexports.keywordError = {\n  message: _ref => {\n    let {\n      keyword\n    } = _ref;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must pass \\\"\", \"\\\" keyword validation\"])), keyword);\n  }\n};\nexports.keyword$DataError = {\n  message: _ref2 => {\n    let {\n      keyword,\n      schemaType\n    } = _ref2;\n    return schemaType ? (0, codegen_1.str)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\\"\", \"\\\" keyword must be \", \" ($data)\"])), keyword, schemaType) : (0, codegen_1.str)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\\"\", \"\\\" keyword is invalid ($data)\"])), keyword);\n  }\n};\nfunction reportError(cxt) {\n  let error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.keywordError;\n  let errorPaths = arguments.length > 2 ? arguments[2] : undefined;\n  let overrideAllErrors = arguments.length > 3 ? arguments[3] : undefined;\n  const {\n    it\n  } = cxt;\n  const {\n    gen,\n    compositeRule,\n    allErrors\n  } = it;\n  const errObj = errorObjectCode(cxt, error, errorPaths);\n  if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {\n    addError(gen, errObj);\n  } else {\n    returnErrors(it, (0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"[\", \"]\"])), errObj));\n  }\n}\nexports.reportError = reportError;\nfunction reportExtraError(cxt) {\n  let error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.keywordError;\n  let errorPaths = arguments.length > 2 ? arguments[2] : undefined;\n  const {\n    it\n  } = cxt;\n  const {\n    gen,\n    compositeRule,\n    allErrors\n  } = it;\n  const errObj = errorObjectCode(cxt, error, errorPaths);\n  addError(gen, errObj);\n  if (!(compositeRule || allErrors)) {\n    returnErrors(it, names_1.default.vErrors);\n  }\n}\nexports.reportExtraError = reportExtraError;\nfunction resetErrorsCount(gen, errsCount) {\n  gen.assign(names_1.default.errors, errsCount);\n  gen.if((0, codegen_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \" !== null\"])), names_1.default.vErrors), () => gen.if(errsCount, () => gen.assign((0, codegen_1._)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\", \".length\"])), names_1.default.vErrors), errsCount), () => gen.assign(names_1.default.vErrors, null)));\n}\nexports.resetErrorsCount = resetErrorsCount;\nfunction extendErrors(_ref3) {\n  let {\n    gen,\n    keyword,\n    schemaValue,\n    data,\n    errsCount,\n    it\n  } = _ref3;\n  /* istanbul ignore if */\n  if (errsCount === undefined) throw new Error(\"ajv implementation error\");\n  const err = gen.name(\"err\");\n  gen.forRange(\"i\", errsCount, names_1.default.errors, i => {\n    gen.const(err, (0, codegen_1._)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\", \"[\", \"]\"])), names_1.default.vErrors, i));\n    gen.if((0, codegen_1._)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\", \".instancePath === undefined\"])), err), () => gen.assign((0, codegen_1._)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"\", \".instancePath\"])), err), (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));\n    gen.assign((0, codegen_1._)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"\", \".schemaPath\"])), err), (0, codegen_1.str)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([\"\", \"/\", \"\"])), it.errSchemaPath, keyword));\n    if (it.opts.verbose) {\n      gen.assign((0, codegen_1._)(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([\"\", \".schema\"])), err), schemaValue);\n      gen.assign((0, codegen_1._)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral([\"\", \".data\"])), err), data);\n    }\n  });\n}\nexports.extendErrors = extendErrors;\nfunction addError(gen, errObj) {\n  const err = gen.const(\"err\", errObj);\n  gen.if((0, codegen_1._)(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral([\"\", \" === null\"])), names_1.default.vErrors), () => gen.assign(names_1.default.vErrors, (0, codegen_1._)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral([\"[\", \"]\"])), err)), (0, codegen_1._)(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral([\"\", \".push(\", \")\"])), names_1.default.vErrors, err));\n  gen.code((0, codegen_1._)(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral([\"\", \"++\"])), names_1.default.errors));\n}\nfunction returnErrors(it, errs) {\n  const {\n    gen,\n    validateName,\n    schemaEnv\n  } = it;\n  if (schemaEnv.$async) {\n    gen.throw((0, codegen_1._)(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral([\"new \", \"(\", \")\"])), it.ValidationError, errs));\n  } else {\n    gen.assign((0, codegen_1._)(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral([\"\", \".errors\"])), validateName), errs);\n    gen.return(false);\n  }\n}\nconst E = {\n  keyword: new codegen_1.Name(\"keyword\"),\n  schemaPath: new codegen_1.Name(\"schemaPath\"),\n  params: new codegen_1.Name(\"params\"),\n  propertyName: new codegen_1.Name(\"propertyName\"),\n  message: new codegen_1.Name(\"message\"),\n  schema: new codegen_1.Name(\"schema\"),\n  parentSchema: new codegen_1.Name(\"parentSchema\")\n};\nfunction errorObjectCode(cxt, error, errorPaths) {\n  const {\n    createErrors\n  } = cxt.it;\n  if (createErrors === false) return (0, codegen_1._)(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral([\"{}\"])));\n  return errorObject(cxt, error, errorPaths);\n}\nfunction errorObject(cxt, error) {\n  let errorPaths = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    gen,\n    it\n  } = cxt;\n  const keyValues = [errorInstancePath(it, errorPaths), errorSchemaPath(cxt, errorPaths)];\n  extraErrorProps(cxt, error, keyValues);\n  return gen.object(...keyValues);\n}\nfunction errorInstancePath(_ref4, _ref5) {\n  let {\n    errorPath\n  } = _ref4;\n  let {\n    instancePath\n  } = _ref5;\n  const instPath = instancePath ? (0, codegen_1.str)(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral([\"\", \"\", \"\"])), errorPath, (0, util_1.getErrorPath)(instancePath, util_1.Type.Str)) : errorPath;\n  return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];\n}\nfunction errorSchemaPath(_ref6, _ref7) {\n  let {\n    keyword,\n    it: {\n      errSchemaPath\n    }\n  } = _ref6;\n  let {\n    schemaPath,\n    parentSchema\n  } = _ref7;\n  let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str)(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral([\"\", \"/\", \"\"])), errSchemaPath, keyword);\n  if (schemaPath) {\n    schPath = (0, codegen_1.str)(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral([\"\", \"\", \"\"])), schPath, (0, util_1.getErrorPath)(schemaPath, util_1.Type.Str));\n  }\n  return [E.schemaPath, schPath];\n}\nfunction extraErrorProps(cxt, _ref8, keyValues) {\n  let {\n    params,\n    message\n  } = _ref8;\n  const {\n    keyword,\n    data,\n    schemaValue,\n    it\n  } = cxt;\n  const {\n    opts,\n    propertyName,\n    topSchemaRef,\n    schemaPath\n  } = it;\n  keyValues.push([E.keyword, keyword], [E.params, typeof params == \"function\" ? params(cxt) : params || (0, codegen_1._)(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral([\"{}\"])))]);\n  if (opts.messages) {\n    keyValues.push([E.message, typeof message == \"function\" ? message(cxt) : message]);\n  }\n  if (opts.verbose) {\n    keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._)(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral([\"\", \"\", \"\"])), topSchemaRef, schemaPath)], [names_1.default.data, data]);\n  }\n  if (propertyName) keyValues.push([E.propertyName, propertyName]);\n}","map":null,"metadata":{},"sourceType":"script"}