{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst ops = codegen_1.operators;\nconst KWDs = {\n  maximum: {\n    okStr: \"<=\",\n    ok: ops.LTE,\n    fail: ops.GT\n  },\n  minimum: {\n    okStr: \">=\",\n    ok: ops.GTE,\n    fail: ops.LT\n  },\n  exclusiveMaximum: {\n    okStr: \"<\",\n    ok: ops.LT,\n    fail: ops.GTE\n  },\n  exclusiveMinimum: {\n    okStr: \">\",\n    ok: ops.GT,\n    fail: ops.LTE\n  }\n};\nconst error = {\n  message: _ref => {\n    let {\n      keyword,\n      schemaCode\n    } = _ref;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must be \", \" \", \"\"])), KWDs[keyword].okStr, schemaCode);\n  },\n  params: _ref2 => {\n    let {\n      keyword,\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{comparison: \", \", limit: \", \"}\"])), KWDs[keyword].okStr, schemaCode);\n  }\n};\nconst def = {\n  keyword: Object.keys(KWDs),\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      keyword,\n      data,\n      schemaCode\n    } = cxt;\n    cxt.fail$data((0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \" \", \" \", \" || isNaN(\", \")\"])), data, KWDs[keyword].fail, schemaCode, data));\n  }\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/limitNumber.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AAEA,MAAM,GAAG,GAAG,SAAA,CAAA,SAAS;AAMrB,MAAM,IAAI,GAA4D;EACpE,OAAO,EAAE;IAAC,KAAK,EAAE,IAAI;IAAE,EAAE,EAAE,GAAG,CAAC,GAAG;IAAE,IAAI,EAAE,GAAG,CAAC;EAAE,CAAC;EACjD,OAAO,EAAE;IAAC,KAAK,EAAE,IAAI;IAAE,EAAE,EAAE,GAAG,CAAC,GAAG;IAAE,IAAI,EAAE,GAAG,CAAC;EAAE,CAAC;EACjD,gBAAgB,EAAE;IAAC,KAAK,EAAE,GAAG;IAAE,EAAE,EAAE,GAAG,CAAC,EAAE;IAAE,IAAI,EAAE,GAAG,CAAC;EAAG,CAAC;EACzD,gBAAgB,EAAE;IAAC,KAAK,EAAE,GAAG;IAAE,EAAE,EAAE,GAAG,CAAC,EAAE;IAAE,IAAI,EAAE,GAAG,CAAC;EAAG;CACzD;AAQD,MAAM,KAAK,GAA2B;EACpC,OAAO,EAAE,IAAA;IAAA,IAAC;MAAC,OAAO;MAAE;IAAU,CAAC,GAAA,IAAA;IAAA,QAAK,CAAA,EAAA,SAAA,CAAA,GAAG,EAAA,eAAA,KAAA,eAAA,GAAA,sBAAA,0BAAW,IAAI,CAAC,OAAc,CAAC,CAAC,KAAK,EAAI,UAAU;EAAA,CAAE;EAC5F,MAAM,EAAE,KAAA;IAAA,IAAC;MAAC,OAAO;MAAE;IAAU,CAAC,GAAA,KAAA;IAAA,QAC5B,CAAA,EAAA,SAAA,CAAA,CAAC,EAAA,gBAAA,KAAA,gBAAA,GAAA,sBAAA,wCAAgB,IAAI,CAAC,OAAc,CAAC,CAAC,KAAK,EAAY,UAAU;EAAA;CACpE;AAED,MAAM,GAAG,GAA0B;EACjC,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;EAC1B,IAAI,EAAE,QAAQ;EACd,UAAU,EAAE,QAAQ;EACpB,KAAK,EAAE,IAAI;EACX,KAAK;EACL,IAAI,CAAC,GAAe,EAAA;IAClB,MAAM;MAAC,OAAO;MAAE,IAAI;MAAE;IAAU,CAAC,GAAG,GAAG;IACvC,GAAG,CAAC,SAAS,EAAC,CAAA,EAAA,SAAA,CAAA,CAAC,EAAA,gBAAA,KAAA,gBAAA,GAAA,sBAAA,sCAAG,IAAI,EAAI,IAAI,CAAC,OAAc,CAAC,CAAC,IAAI,EAAI,UAAU,EAAa,IAAI,CAAG,CAAC;EACxF;CACD;AAED,OAAA,CAAA,OAAA,GAAe,GAAG","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst ops = codegen_1.operators;\nconst KWDs = {\n    maximum: { okStr: \"<=\", ok: ops.LTE, fail: ops.GT },\n    minimum: { okStr: \">=\", ok: ops.GTE, fail: ops.LT },\n    exclusiveMaximum: { okStr: \"<\", ok: ops.LT, fail: ops.GTE },\n    exclusiveMinimum: { okStr: \">\", ok: ops.GT, fail: ops.LTE },\n};\nconst error = {\n    message: ({ keyword, schemaCode }) => (0, codegen_1.str) `must be ${KWDs[keyword].okStr} ${schemaCode}`,\n    params: ({ keyword, schemaCode }) => (0, codegen_1._) `{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: Object.keys(KWDs),\n    type: \"number\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode } = cxt;\n        cxt.fail$data((0, codegen_1._) `${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=limitNumber.js.map"]},"metadata":{},"sourceType":"script"}