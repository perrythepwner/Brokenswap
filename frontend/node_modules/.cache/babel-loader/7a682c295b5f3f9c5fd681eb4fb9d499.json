{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildMetaTxTypedData = exports.toTransactionBatch = exports.toRawTransaction = exports.MetaTransactionWalletWrapper = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar connect_1 = require(\"@celo/connect\");\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\n/**\n * Class that wraps the MetaTransactionWallet\n */\nvar MetaTransactionWalletWrapper = /** @class */function (_super) {\n  __extends(MetaTransactionWalletWrapper, _super);\n  function MetaTransactionWalletWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.getMetaTransactionDigestParams = function (tx, nonce) {\n      var rawTx = (0, exports.toRawTransaction)(tx);\n      return [rawTx.destination, rawTx.value, rawTx.data, nonce];\n    };\n    _this.getMetaTransactionDigest = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getMetaTransactionDigest, _this.getMetaTransactionDigestParams, BaseWrapper_1.stringIdentity);\n    _this.getMetaTransactionSignerParams = function (tx, nonce, signature) {\n      var rawTx = (0, exports.toRawTransaction)(tx);\n      return [rawTx.destination, rawTx.value, rawTx.data, nonce, signature.v, signature.r, signature.s];\n    };\n    _this.getMetaTransactionSigner = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getMetaTransactionSigner, _this.getMetaTransactionSignerParams, BaseWrapper_1.stringIdentity);\n    _this.eip712DomainSeparator = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.eip712DomainSeparator);\n    _this.isOwner = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.isOwner);\n    _this.nonce = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.nonce, undefined, BaseWrapper_1.valueToInt);\n    _this.getSigner = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.signer, undefined, BaseWrapper_1.stringIdentity);\n    _this.transferOwnership = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.transferOwnership);\n    _this.setSigner = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.setSigner);\n    _this.setEip712DomainSeparator = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.setEip712DomainSeparator);\n    return _this;\n  }\n  /**\n   * Execute a transaction originating from the MTW\n   * Reverts if the caller is not a signer\n   * @param tx a TransactionInput\n   */\n  MetaTransactionWalletWrapper.prototype.executeTransaction = function (tx) {\n    var rawTx = (0, exports.toRawTransaction)(tx);\n    return (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.executeTransaction(rawTx.destination, rawTx.value, rawTx.data));\n  };\n  /**\n   * Execute a batch of transactions originating from the MTW\n   * Reverts if the caller is not a signer\n   * @param txs An array of TransactionInput\n   */\n  MetaTransactionWalletWrapper.prototype.executeTransactions = function (txs) {\n    var _a = (0, exports.toTransactionBatch)(txs),\n      destinations = _a.destinations,\n      values = _a.values,\n      callData = _a.callData,\n      callDataLengths = _a.callDataLengths;\n    return (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.executeTransactions(destinations, values, callData, callDataLengths));\n  };\n  /**\n   * Execute a signed meta transaction\n   * Reverts if meta-tx signer is not a signer for the wallet\n   * @param tx a TransactionInput\n   * @param signature a Signature\n   */\n  MetaTransactionWalletWrapper.prototype.executeMetaTransaction = function (tx, signature) {\n    var rawTx = (0, exports.toRawTransaction)(tx);\n    return (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.executeMetaTransaction(rawTx.destination, rawTx.value, rawTx.data, signature.v, signature.r, signature.s));\n  };\n  /**\n   * Signs a meta transaction as EIP712 typed data\n   * @param tx a TransactionWrapper\n   * @param nonce Optional -- will query contract state if not passed\n   * @returns signature a Signature\n   */\n  MetaTransactionWalletWrapper.prototype.signMetaTransaction = function (tx, nonce) {\n    return __awaiter(this, void 0, void 0, function () {\n      var typedData, _a, _b, signer;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!(nonce === undefined)) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.nonce()];\n          case 1:\n            nonce = _c.sent();\n            _c.label = 2;\n          case 2:\n            _a = exports.buildMetaTxTypedData;\n            _b = [this.address, (0, exports.toRawTransaction)(tx), nonce];\n            return [4 /*yield*/, this.chainId()];\n          case 3:\n            typedData = _a.apply(void 0, _b.concat([_c.sent()]));\n            return [4 /*yield*/, this.signer()];\n          case 4:\n            signer = _c.sent();\n            return [2 /*return*/, this.connection.signTypedData(signer, typedData)];\n        }\n      });\n    });\n  };\n  /**\n   * Execute a signed meta transaction\n   * Reverts if meta-tx signer is not a signer for the wallet\n   * @param tx a TransactionInput\n   */\n  MetaTransactionWalletWrapper.prototype.signAndExecuteMetaTransaction = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var signature;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.signMetaTransaction(tx)];\n          case 1:\n            signature = _a.sent();\n            return [2 /*return*/, this.executeMetaTransaction(tx, signature)];\n        }\n      });\n    });\n  };\n  MetaTransactionWalletWrapper.prototype.chainId = function () {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, _c, _d;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _b = this;\n            if (!((_a = this._chainId) !== null && _a !== void 0)) return [3 /*break*/, 1];\n            _c = _a;\n            return [3 /*break*/, 3];\n          case 1:\n            return [4 /*yield*/, this.connection.chainId()];\n          case 2:\n            _c = _e.sent();\n            _e.label = 3;\n          case 3:\n            _b._chainId = _c;\n            if (!(this._chainId === undefined)) return [3 /*break*/, 5];\n            _d = this;\n            return [4 /*yield*/, this.connection.chainId()];\n          case 4:\n            _d._chainId = _e.sent();\n            _e.label = 5;\n          case 5:\n            return [2 /*return*/, this._chainId];\n        }\n      });\n    });\n  };\n  MetaTransactionWalletWrapper.prototype.signer = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(this._signer === undefined)) return [3 /*break*/, 2];\n            _a = this;\n            return [4 /*yield*/, this.getSigner()];\n          case 1:\n            _a._signer = _b.sent();\n            _b.label = 2;\n          case 2:\n            return [2 /*return*/, this._signer];\n        }\n      });\n    });\n  };\n  return MetaTransactionWalletWrapper;\n}(BaseWrapper_1.BaseWrapper);\nexports.MetaTransactionWalletWrapper = MetaTransactionWalletWrapper;\n/**\n * Turns any possible way to pass in a transaction into the raw values\n * that are actually required. This is used both internally to normalize\n * ways in which transactions are passed in but also public in order\n * for one instance of ContractKit to serialize a meta transaction to\n * send over the wire and be consumed somewhere else.\n * @param tx TransactionInput<any> union of all the ways we expect transactions\n * @returns a RawTransactions that's serializable\n */\nvar toRawTransaction = function toRawTransaction(tx) {\n  if ('destination' in tx) {\n    return tx;\n  } else if ('value' in tx) {\n    return {\n      destination: tx.txo._parent.options.address,\n      data: tx.txo.encodeABI(),\n      value: (0, BaseWrapper_1.valueToString)(tx.value)\n    };\n  } else {\n    return {\n      destination: tx._parent.options.address,\n      data: tx.encodeABI(),\n      value: '0'\n    };\n  }\n};\nexports.toRawTransaction = toRawTransaction;\n/**\n * Turns an array of transaction inputs into the argument that\n * need to be passed to the executeTransactions call.\n * Main transformation is that all the `data` parts of each\n * transaction in the batch are concatenated and an array\n * of lengths is constructed.\n * This is a gas optimisation on the contract.\n * @param txs Array<TransactionInput<any>> array of txs\n * @returns Params for the executeTransactions method call\n */\nvar toTransactionBatch = function toTransactionBatch(txs) {\n  var rawTxs = txs.map(exports.toRawTransaction);\n  return {\n    destinations: rawTxs.map(function (rtx) {\n      return rtx.destination;\n    }),\n    values: rawTxs.map(function (rtx) {\n      return rtx.value;\n    }),\n    callData: (0, address_1.ensureLeading0x)(rawTxs.map(function (rtx) {\n      return (0, address_1.trimLeading0x)(rtx.data);\n    }).join('')),\n    callDataLengths: rawTxs.map(function (rtx) {\n      return (0, address_1.trimLeading0x)(rtx.data).length / 2;\n    })\n  };\n};\nexports.toTransactionBatch = toTransactionBatch;\nvar buildMetaTxTypedData = function buildMetaTxTypedData(walletAddress, tx, nonce, chainId) {\n  return {\n    types: {\n      EIP712Domain: [{\n        name: 'name',\n        type: 'string'\n      }, {\n        name: 'version',\n        type: 'string'\n      }, {\n        name: 'chainId',\n        type: 'uint256'\n      }, {\n        name: 'verifyingContract',\n        type: 'address'\n      }],\n      ExecuteMetaTransaction: [{\n        name: 'destination',\n        type: 'address'\n      }, {\n        name: 'value',\n        type: 'uint256'\n      }, {\n        name: 'data',\n        type: 'bytes'\n      }, {\n        name: 'nonce',\n        type: 'uint256'\n      }]\n    },\n    primaryType: 'ExecuteMetaTransaction',\n    domain: {\n      name: 'MetaTransactionWallet',\n      version: '1.1',\n      chainId: chainId,\n      verifyingContract: walletAddress\n    },\n    message: tx ? __assign(__assign({}, tx), {\n      nonce: nonce\n    }) : {}\n  };\n};\nexports.buildMetaTxTypedData = buildMetaTxTypedData;","map":null,"metadata":{},"sourceType":"script"}