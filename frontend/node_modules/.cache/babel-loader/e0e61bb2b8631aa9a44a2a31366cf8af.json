{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tryObtainValueWithRetries = exports.conditionWatcher = exports.repeatTask = void 0;\nvar future_1 = require(\"./future\");\nvar logger_1 = require(\"./logger\");\n/**\n * Given task options, creates the task logger\n *\n * It will prefix taskName to the logs\n */\nvar createTaskLogger = function createTaskLogger(opts) {\n  if (opts.logger) {\n    return (0, logger_1.prefixLogger)(opts.name, opts.logger);\n  } else {\n    return logger_1.noopLogger;\n  }\n};\n/**\n * Runs an async function eternally until stopped\n *\n * @param fn function to run\n */\nfunction repeatTask(opts, fn) {\n  var _this = this;\n  var logger = createTaskLogger(opts);\n  var isActive = true;\n  var ctx = {\n    executionNumber: 0,\n    stopTask: function stopTask() {\n      isActive = false;\n    }\n  };\n  var loop = function loop() {\n    return __awaiter(_this, void 0, void 0, function () {\n      var err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!isActive) {\n              return [2 /*return*/];\n            }\n\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3, 4, 5]);\n            ctx.executionNumber++;\n            return [4 /*yield*/, fn(ctx)];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 5];\n          case 3:\n            err_1 = _a.sent();\n            logger(\"Failed with error: \".concat(err_1.message));\n            logger(err_1);\n            return [3 /*break*/, 5];\n          case 4:\n            if (isActive) {\n              setTimeout(loop, opts.timeInBetweenMS);\n            }\n            return [7 /*endfinally*/];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  if (opts.initialDelayMS != null) {\n    setTimeout(loop, opts.initialDelayMS);\n  } else {\n    // tslint:disable-next-line: no-floating-promises\n    loop();\n  }\n  return {\n    stop: ctx.stopTask,\n    isRunning: function isRunning() {\n      return isActive;\n    }\n  };\n}\nexports.repeatTask = repeatTask;\nfunction conditionWatcher(opts) {\n  var _this = this;\n  return repeatTask(opts, function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var val;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, opts.pollCondition()];\n          case 1:\n            val = _a.sent();\n            if (!val) return [3 /*break*/, 3];\n            ctx.stopTask();\n            return [4 /*yield*/, opts.onSuccess()];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  });\n}\n\nexports.conditionWatcher = conditionWatcher;\nfunction tryObtainValueWithRetries(opts) {\n  var _this = this;\n  var futureValue = new future_1.Future();\n  var task = repeatTask(opts, function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var val;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(ctx.executionNumber > opts.maxAttemps)) return [3 /*break*/, 1];\n            ctx.stopTask();\n            futureValue.reject(new Error('Max Retries & no value'));\n            return [3 /*break*/, 3];\n          case 1:\n            return [4 /*yield*/, opts.tryGetValue()];\n          case 2:\n            val = _a.sent();\n            if (val != null) {\n              futureValue.resolve(val);\n              ctx.stopTask();\n            }\n            _a.label = 3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  });\n\n  return __assign(__assign({}, task), {\n    stop: function stop() {\n      task.stop();\n      futureValue.reject(new Error('Cancelled'));\n    },\n    onValue: function onValue() {\n      return futureValue.asPromise();\n    }\n  });\n}\nexports.tryObtainValueWithRetries = tryObtainValueWithRetries;","map":null,"metadata":{},"sourceType":"script"}