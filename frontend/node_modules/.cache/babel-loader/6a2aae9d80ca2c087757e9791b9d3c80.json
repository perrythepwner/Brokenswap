{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setImplementationOnProxy = exports.getInitializeAbiOfImplementation = exports.PROXY_SET_AND_INITIALIZE_IMPLEMENTATION_SIGNATURE = exports.PROXY_SET_IMPLEMENTATION_SIGNATURE = exports.PROXY_ABI = exports.SET_AND_INITIALIZE_IMPLEMENTATION_ABI = exports.SET_IMPLEMENTATION_ABI = exports.GET_IMPLEMENTATION_ABI = void 0;\nvar Accounts_1 = require(\"./generated/Accounts\");\nvar Attestations_1 = require(\"./generated/Attestations\");\nvar BlockchainParameters_1 = require(\"./generated/BlockchainParameters\");\nvar DoubleSigningSlasher_1 = require(\"./generated/DoubleSigningSlasher\");\nvar DowntimeSlasher_1 = require(\"./generated/DowntimeSlasher\");\nvar Election_1 = require(\"./generated/Election\");\nvar EpochRewards_1 = require(\"./generated/EpochRewards\");\nvar Escrow_1 = require(\"./generated/Escrow\");\nvar Exchange_1 = require(\"./generated/Exchange\");\nvar FederatedAttestations_1 = require(\"./generated/FederatedAttestations\");\nvar FeeCurrencyWhitelist_1 = require(\"./generated/FeeCurrencyWhitelist\");\nvar Freezer_1 = require(\"./generated/Freezer\");\nvar GasPriceMinimum_1 = require(\"./generated/GasPriceMinimum\");\nvar GoldToken_1 = require(\"./generated/GoldToken\");\nvar Governance_1 = require(\"./generated/Governance\");\nvar GrandaMento_1 = require(\"./generated/GrandaMento\");\nvar LockedGold_1 = require(\"./generated/LockedGold\");\nvar MetaTransactionWallet_1 = require(\"./generated/MetaTransactionWallet\");\nvar MetaTransactionWalletDeployer_1 = require(\"./generated/MetaTransactionWalletDeployer\");\nvar MultiSig_1 = require(\"./generated/MultiSig\");\nvar OdisPayments_1 = require(\"./generated/OdisPayments\");\nvar Proxy_1 = require(\"./generated/Proxy\");\nvar Random_1 = require(\"./generated/Random\");\nvar Registry_1 = require(\"./generated/Registry\");\nvar Reserve_1 = require(\"./generated/Reserve\");\nvar SortedOracles_1 = require(\"./generated/SortedOracles\");\nvar StableToken_1 = require(\"./generated/StableToken\");\nvar TransferWhitelist_1 = require(\"./generated/TransferWhitelist\");\nvar Validators_1 = require(\"./generated/Validators\");\nexports.GET_IMPLEMENTATION_ABI = {\n  constant: true,\n  inputs: [],\n  name: '_getImplementation',\n  outputs: [{\n    name: 'implementation',\n    type: 'address'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function',\n  signature: '0x42404e07'\n};\nexports.SET_IMPLEMENTATION_ABI = {\n  constant: false,\n  inputs: [{\n    name: 'implementation',\n    type: 'address'\n  }],\n  name: '_setImplementation',\n  outputs: [],\n  payable: false,\n  stateMutability: 'nonpayable',\n  type: 'function',\n  signature: '0xbb913f41'\n};\nexports.SET_AND_INITIALIZE_IMPLEMENTATION_ABI = {\n  constant: false,\n  inputs: [{\n    name: 'implementation',\n    type: 'address'\n  }, {\n    name: 'callbackData',\n    type: 'bytes'\n  }],\n  name: '_setAndInitializeImplementation',\n  outputs: [],\n  payable: true,\n  stateMutability: 'payable',\n  type: 'function',\n  signature: '0x03386ba3'\n};\nexports.PROXY_ABI = [exports.GET_IMPLEMENTATION_ABI, exports.SET_IMPLEMENTATION_ABI, exports.SET_AND_INITIALIZE_IMPLEMENTATION_ABI];\nexports.PROXY_SET_IMPLEMENTATION_SIGNATURE = exports.SET_IMPLEMENTATION_ABI.signature;\nexports.PROXY_SET_AND_INITIALIZE_IMPLEMENTATION_SIGNATURE = exports.SET_AND_INITIALIZE_IMPLEMENTATION_ABI.signature;\nvar findInitializeAbi = function findInitializeAbi(items) {\n  return items.find(function (item) {\n    return item.name === 'initialize';\n  });\n};\nvar initializeAbiMap = {\n  AccountsProxy: findInitializeAbi(Accounts_1.ABI),\n  AttestationsProxy: findInitializeAbi(Attestations_1.ABI),\n  BlockchainParametersProxy: findInitializeAbi(BlockchainParameters_1.ABI),\n  DoubleSigningSlasherProxy: findInitializeAbi(DoubleSigningSlasher_1.ABI),\n  DowntimeSlasherProxy: findInitializeAbi(DowntimeSlasher_1.ABI),\n  ElectionProxy: findInitializeAbi(Election_1.ABI),\n  EpochRewardsProxy: findInitializeAbi(EpochRewards_1.ABI),\n  EscrowProxy: findInitializeAbi(Escrow_1.ABI),\n  ExchangeProxy: findInitializeAbi(Exchange_1.ABI),\n  ExchangeEURProxy: findInitializeAbi(Exchange_1.ABI),\n  ExchangeBRLProxy: findInitializeAbi(Exchange_1.ABI),\n  FederatedAttestationsProxy: findInitializeAbi(FederatedAttestations_1.ABI),\n  FeeCurrencyWhitelistProxy: findInitializeAbi(FeeCurrencyWhitelist_1.ABI),\n  FreezerProxy: findInitializeAbi(Freezer_1.ABI),\n  GasPriceMinimumProxy: findInitializeAbi(GasPriceMinimum_1.ABI),\n  GoldTokenProxy: findInitializeAbi(GoldToken_1.ABI),\n  GovernanceProxy: findInitializeAbi(Governance_1.ABI),\n  GrandaMentoProxy: findInitializeAbi(GrandaMento_1.ABI),\n  LockedGoldProxy: findInitializeAbi(LockedGold_1.ABI),\n  MetaTransactionWalletProxy: findInitializeAbi(MetaTransactionWallet_1.ABI),\n  MetaTransactionWalletDeployerProxy: findInitializeAbi(MetaTransactionWalletDeployer_1.ABI),\n  MultiSigProxy: findInitializeAbi(MultiSig_1.ABI),\n  OdisPaymentsProxy: findInitializeAbi(OdisPayments_1.ABI),\n  ProxyProxy: findInitializeAbi(Proxy_1.ABI),\n  RandomProxy: findInitializeAbi(Random_1.ABI),\n  RegistryProxy: findInitializeAbi(Registry_1.ABI),\n  ReserveProxy: findInitializeAbi(Reserve_1.ABI),\n  SortedOraclesProxy: findInitializeAbi(SortedOracles_1.ABI),\n  StableTokenProxy: findInitializeAbi(StableToken_1.ABI),\n  StableTokenEURProxy: findInitializeAbi(StableToken_1.ABI),\n  StableTokenBRLProxy: findInitializeAbi(StableToken_1.ABI),\n  TransferWhitelistProxy: findInitializeAbi(TransferWhitelist_1.ABI),\n  ValidatorsProxy: findInitializeAbi(Validators_1.ABI)\n};\nvar getInitializeAbiOfImplementation = function getInitializeAbiOfImplementation(proxyContractName) {\n  var initializeAbi = initializeAbiMap[proxyContractName];\n  if (!initializeAbi) {\n    throw new Error(\"Initialize method not found on implementation of \".concat(proxyContractName));\n  }\n  return initializeAbi;\n};\nexports.getInitializeAbiOfImplementation = getInitializeAbiOfImplementation;\nvar setImplementationOnProxy = function setImplementationOnProxy(address, web3) {\n  var proxyWeb3Contract = new web3.eth.Contract(exports.PROXY_ABI);\n  return proxyWeb3Contract.methods._setImplementation(address);\n};\nexports.setImplementationOnProxy = setImplementationOnProxy;","map":null,"metadata":{},"sourceType":"script"}