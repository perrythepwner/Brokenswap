{"ast":null,"code":"import _asyncToGenerator from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{useCelo}from'@celo/react-celo';import{CELO,JSBI,Token}from'@ubeswap/sdk';import{describeTrade}from'components/swap/routing/describeTrade';import{MoolaDirectTrade}from'components/swap/routing/moola/MoolaDirectTrade';import{useTradeCallback}from'components/swap/routing/useTradeCallback';import UnsupportedCurrencyFooter from'components/swap/UnsupportedCurrencyFooter';import{useIsTransactionUnsupported}from'hooks/Trades';import useENS from'hooks/useENS';import React,{useCallback,useContext,useEffect,useMemo,useState}from'react';import{ArrowDown}from'react-feather';import ReactGA from'react-ga';import{Text}from'rebass';import{ThemeContext}from'styled-components';import AddressInputPanel from'../../components/AddressInputPanel';import{ButtonPrimary}from'../../components/Button';import Card from'../../components/Card';import{AutoColumn}from'../../components/Column';import CurrencyInputPanel from'../../components/CurrencyInputPanel';import{SwapPoolTabs}from'../../components/NavigationTabs';import{AutoRow,RowBetween}from'../../components/Row';import AdvancedSwapDetailsDropdown from'../../components/swap/AdvancedSwapDetailsDropdown';import confirmPriceImpactWithoutFee from'../../components/swap/confirmPriceImpactWithoutFee';import ConfirmSwapModal from'../../components/swap/ConfirmSwapModal';import{ArrowWrapper,Wrapper}from'../../components/swap/styleds';import SwapHeader from'../../components/swap/SwapHeader';import TradePrice from'../../components/swap/TradePrice';import{useAllTokens,useCurrency}from'../../hooks/Tokens';import{ApprovalState,useApproveCallbackFromTrade}from'../../hooks/useApproveCallback';import{useToggleSettingsMenu,useWalletModalToggle}from'../../state/application/hooks';import{Field}from'../../state/swap/actions';import{useDefaultsFromURLSearch,useDerivedSwapInfo,useSwapActionHandlers,useSwapState}from'../../state/swap/hooks';import{useExpertModeManager,useUserSingleHopOnly,useUserSlippageTolerance}from'../../state/user/hooks';import{LinkStyledButton}from'../../theme';import{maxAmountSpend}from'../../utils/maxAmountSpend';import{computeTradePriceBreakdown,warningSeverity}from'../../utils/prices';import AppBody from'../AppBody';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function Swap(){var _ref2,_parsedAmounts$depend,_parsedAmounts$depend2,_parsedAmounts$indepe,_parsedAmounts$Field$,_parsedAmounts$Field$2;const loadedUrlParams=useDefaultsFromURLSearch();// token warning stuff\nconst[loadedInputCurrency,loadedOutputCurrency]=[useCurrency(loadedUrlParams===null||loadedUrlParams===void 0?void 0:loadedUrlParams.inputCurrencyId),useCurrency(loadedUrlParams===null||loadedUrlParams===void 0?void 0:loadedUrlParams.outputCurrencyId)];const[dismissTokenWarning,setDismissTokenWarning]=useState(false);const urlLoadedTokens=useMemo(()=>{var _filter,_ref;return(_filter=(_ref=[loadedInputCurrency,loadedOutputCurrency])===null||_ref===void 0?void 0:_ref.filter(c=>c instanceof Token))!==null&&_filter!==void 0?_filter:[];},[loadedInputCurrency,loadedOutputCurrency]);const handleConfirmTokenWarning=useCallback(()=>{setDismissTokenWarning(true);},[]);// dismiss warning if all imported tokens are in active lists\nconst defaultTokens=useAllTokens();const importTokensNotInDefault=urlLoadedTokens&&urlLoadedTokens.filter(token=>{return!(token.address in defaultTokens);});const{address:account,network}=useCelo();const chainId=network.chainId;const theme=useContext(ThemeContext);// toggle wallet when disconnected\nconst toggleWalletModal=useWalletModalToggle();// for expert mode\nconst toggleSettings=useToggleSettingsMenu();const[isExpertMode]=useExpertModeManager();// get custom setting values for user\nconst[allowedSlippage]=useUserSlippageTolerance();// swap state\nconst{independentField,typedValue,recipient}=useSwapState();const{v2Trade,currencyBalances,parsedAmount,currencies,inputError:swapInputError,showRamp}=useDerivedSwapInfo();const{address:recipientAddress}=useENS(recipient);const trade=v2Trade;const parsedAmounts={[Field.INPUT]:independentField===Field.INPUT?parsedAmount:trade===null||trade===void 0?void 0:trade.inputAmount,[Field.OUTPUT]:independentField===Field.OUTPUT?parsedAmount:trade===null||trade===void 0?void 0:trade.outputAmount};const{onSwitchTokens,onCurrencySelection,onUserInput,onChangeRecipient}=useSwapActionHandlers();const isValid=!swapInputError;const dependentField=independentField===Field.INPUT?Field.OUTPUT:Field.INPUT;const handleTypeInput=useCallback(value=>{onUserInput(Field.INPUT,value);},[onUserInput]);const handleTypeOutput=useCallback(value=>{onUserInput(Field.OUTPUT,value);},[onUserInput]);// modal and loading\nconst[{showConfirm,tradeToConfirm,swapErrorMessage,attemptingTxn,txHash},setSwapState]=useState({showConfirm:false,tradeToConfirm:undefined,attemptingTxn:false,swapErrorMessage:undefined,txHash:undefined});const formattedAmounts={[independentField]:typedValue,[dependentField]:(_ref2=trade instanceof MoolaDirectTrade?(_parsedAmounts$depend=parsedAmounts[dependentField])===null||_parsedAmounts$depend===void 0?void 0:_parsedAmounts$depend.toExact():(_parsedAmounts$depend2=parsedAmounts[dependentField])===null||_parsedAmounts$depend2===void 0?void 0:_parsedAmounts$depend2.toSignificant(6))!==null&&_ref2!==void 0?_ref2:''};const userHasSpecifiedInputOutput=Boolean(currencies[Field.INPUT]&&currencies[Field.OUTPUT]&&((_parsedAmounts$indepe=parsedAmounts[independentField])===null||_parsedAmounts$indepe===void 0?void 0:_parsedAmounts$indepe.greaterThan(JSBI.BigInt(0))));const route=trade===null||trade===void 0?void 0:trade.route;const noRoute=!route;// check whether the user has approved the router on the input token\nconst[approval,approveCallback]=useApproveCallbackFromTrade(trade,allowedSlippage);// check if user has gone through approval process, used to show two step buttons, reset on token change\nconst[approvalSubmitted,setApprovalSubmitted]=useState(false);// mark when a user has submitted an approval, reset onTokenSelection for input field\nuseEffect(()=>{if(approval===ApprovalState.PENDING){setApprovalSubmitted(true);}},[approval,approvalSubmitted]);const maxAmountInput=maxAmountSpend(currencyBalances[Field.INPUT]);const atMaxAmountInput=Boolean(maxAmountInput&&((_parsedAmounts$Field$=parsedAmounts[Field.INPUT])===null||_parsedAmounts$Field$===void 0?void 0:_parsedAmounts$Field$.equalTo(maxAmountInput)));const atHalfAmountInput=Boolean(maxAmountInput&&Number(maxAmountInput.toExact())*0.5===Number((_parsedAmounts$Field$2=parsedAmounts[Field.INPUT])===null||_parsedAmounts$Field$2===void 0?void 0:_parsedAmounts$Field$2.toExact()));// the callback to execute the swap\nconst{callback:swapCallback,error:swapCallbackError}=useTradeCallback(trade,allowedSlippage,recipient);const{priceImpactWithoutFee}=computeTradePriceBreakdown(trade);const[singleHopOnly]=useUserSingleHopOnly();const handleSwap=useCallback(()=>{if(priceImpactWithoutFee&&!confirmPriceImpactWithoutFee(priceImpactWithoutFee)){return;}if(!swapCallback){return;}setSwapState({attemptingTxn:true,tradeToConfirm,showConfirm,swapErrorMessage:undefined,txHash:undefined});swapCallback().then(hash=>{var _trade$inputAmount,_trade$inputAmount$cu,_trade$outputAmount,_trade$outputAmount$c;setSwapState({attemptingTxn:false,tradeToConfirm,showConfirm,swapErrorMessage:undefined,txHash:hash});ReactGA.event({category:'Swap',action:recipient===null?'Swap w/o Send':(recipientAddress!==null&&recipientAddress!==void 0?recipientAddress:recipient)===account?'Swap w/o Send + recipient':'Swap w/ Send',label:[trade===null||trade===void 0?void 0:(_trade$inputAmount=trade.inputAmount)===null||_trade$inputAmount===void 0?void 0:(_trade$inputAmount$cu=_trade$inputAmount.currency)===null||_trade$inputAmount$cu===void 0?void 0:_trade$inputAmount$cu.symbol,trade===null||trade===void 0?void 0:(_trade$outputAmount=trade.outputAmount)===null||_trade$outputAmount===void 0?void 0:(_trade$outputAmount$c=_trade$outputAmount.currency)===null||_trade$outputAmount$c===void 0?void 0:_trade$outputAmount$c.symbol].join('/')});ReactGA.event({category:'Routing',action:singleHopOnly?'Swap with multihop disabled':'Swap with multihop enabled'});}).catch(error=>{setSwapState({attemptingTxn:false,tradeToConfirm,showConfirm,swapErrorMessage:error.message,txHash:undefined});});},[priceImpactWithoutFee,swapCallback,tradeToConfirm,showConfirm,recipient,recipientAddress,account,trade,singleHopOnly]);// errors\nconst[showInverted,setShowInverted]=useState(false);// warnings on slippage\nconst priceImpactSeverity=warningSeverity(priceImpactWithoutFee);// show approve flow when: no error on inputs, not approved or pending, or approved in current session\n// never show if price impact is above threshold in non expert mode\nconst showApproveFlow=!swapInputError&&(approval===ApprovalState.NOT_APPROVED||approval===ApprovalState.PENDING||approvalSubmitted&&approval===ApprovalState.APPROVED)&&!(priceImpactSeverity>3&&!isExpertMode);const handleConfirmDismiss=useCallback(()=>{setSwapState({showConfirm:false,tradeToConfirm,attemptingTxn,swapErrorMessage,txHash});// if there was a tx hash, we want to clear the input\nif(txHash){onUserInput(Field.INPUT,'');}},[attemptingTxn,onUserInput,swapErrorMessage,tradeToConfirm,txHash]);const handleAcceptChanges=useCallback(()=>{setSwapState({tradeToConfirm:trade,swapErrorMessage,txHash,attemptingTxn,showConfirm});},[attemptingTxn,showConfirm,swapErrorMessage,trade,txHash]);const handleInputSelect=useCallback(inputCurrency=>{setApprovalSubmitted(false);// reset 2 step UI for approvals\nonCurrencySelection(Field.INPUT,inputCurrency);},[onCurrencySelection]);const handleMaxInput=useCallback(()=>{if(maxAmountInput){var _currencies$INPUT;if((currencies===null||currencies===void 0?void 0:(_currencies$INPUT=currencies.INPUT)===null||_currencies$INPUT===void 0?void 0:_currencies$INPUT.address)===CELO[chainId].address){onUserInput(Field.INPUT,Math.max(Number(maxAmountInput.toExact())-0.01,0).toString());}else{onUserInput(Field.INPUT,maxAmountInput.toExact());}}},[maxAmountInput,onUserInput,currencies,chainId]);const handleHalfInput=useCallback(()=>{if(maxAmountInput){onUserInput(Field.INPUT,Math.max(Number(maxAmountInput.toExact())*0.5,0).toString());}},[maxAmountInput,onUserInput]);const handleOutputSelect=useCallback(outputCurrency=>onCurrencySelection(Field.OUTPUT,outputCurrency),[onCurrencySelection]);const swapIsUnsupported=useIsTransactionUnsupported(currencies===null||currencies===void 0?void 0:currencies.INPUT,currencies===null||currencies===void 0?void 0:currencies.OUTPUT);const{isEstimate,makeLabel}=describeTrade(trade);const actionLabel=makeLabel(independentField!==Field.INPUT);// const web3 = new Web3(window.ethereum)\n// const contract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS)\nconst sendSwapTx=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(function*(){const inputElement=document.getElementById('swap-currency-input');const outputElement=document.getElementById('swap-currency-output');const inputCurrency=inputElement.value;const outputCurrency=outputElement.value;const inputAmount=formattedAmounts[Field.INPUT];const outputAmount=formattedAmounts[Field.OUTPUT];//const rawTx = await contract.methods.swap(inputCurrency, outputCurrency, inputAmount, outputAmount).encodeABI()\n//web3.eth.sendTransaction({ to: CONTRACT_ADDRESS, data: rawTx })\n});return function sendSwapTx(){return _ref3.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(SwapPoolTabs,{active:'swap'}),/*#__PURE__*/_jsxs(AppBody,{children:[/*#__PURE__*/_jsx(SwapHeader,{title:actionLabel}),/*#__PURE__*/_jsxs(Wrapper,{id:\"swap-page\",children:[/*#__PURE__*/_jsx(ConfirmSwapModal,{isOpen:showConfirm,trade:trade,originalTrade:tradeToConfirm,onAcceptChanges:handleAcceptChanges,attemptingTxn:attemptingTxn,txHash:txHash,recipient:recipient,allowedSlippage:allowedSlippage,onConfirm:handleSwap,swapErrorMessage:swapErrorMessage,onDismiss:handleConfirmDismiss}),/*#__PURE__*/_jsxs(AutoColumn,{gap:'md',children:[/*#__PURE__*/_jsx(CurrencyInputPanel,{label:independentField===Field.OUTPUT&&trade?'From'.concat(isEstimate?' (estimated)':''):'From',value:formattedAmounts[Field.INPUT],showMaxButton:!atMaxAmountInput,showHalfButton:!atHalfAmountInput,currency:currencies[Field.INPUT],onUserInput:handleTypeInput,onMax:handleMaxInput,onHalf:handleHalfInput,onCurrencySelect:handleInputSelect,otherCurrency:currencies[Field.OUTPUT],id:\"swap-currency-input\"}),/*#__PURE__*/_jsx(AutoColumn,{justify:\"space-between\",children:/*#__PURE__*/_jsx(AutoRow,{justify:isExpertMode?'space-between':'center',style:{padding:'0 1rem'},children:/*#__PURE__*/_jsx(ArrowWrapper,{clickable:true,children:/*#__PURE__*/_jsx(ArrowDown,{size:\"16\",onClick:()=>{setApprovalSubmitted(false);// reset 2 step UI for approvals\nhandleTypeInput(formattedAmounts[Field.OUTPUT]);onSwitchTokens();},color:currencies[Field.INPUT]&&currencies[Field.OUTPUT]?theme.primary1:theme.text2})})})}),/*#__PURE__*/_jsx(CurrencyInputPanel,{value:formattedAmounts[Field.OUTPUT],onUserInput:handleTypeOutput,label:independentField===Field.INPUT&&trade?'To'.concat(isEstimate?' (estimated)':''):'To',showMaxButton:false,currency:currencies[Field.OUTPUT],onCurrencySelect:handleOutputSelect,otherCurrency:currencies[Field.INPUT],id:\"swap-currency-output\",disabled:true}),recipient!==null?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(AutoRow,{justify:\"space-between\",style:{padding:'0 1rem'},children:[/*#__PURE__*/_jsx(ArrowWrapper,{clickable:false,children:/*#__PURE__*/_jsx(ArrowDown,{size:\"16\",color:theme.text2})}),/*#__PURE__*/_jsx(LinkStyledButton,{id:\"remove-recipient-button\",onClick:()=>onChangeRecipient(null),children:\"- Remove send\"})]}),/*#__PURE__*/_jsx(AddressInputPanel,{id:\"recipient\",value:recipient,onChange:onChangeRecipient})]}):null,/*#__PURE__*/_jsx(Card,{padding:'0px',borderRadius:'20px',children:/*#__PURE__*/_jsx(AutoColumn,{gap:\"8px\",style:{padding:'0 16px'},children:Boolean(trade)&&/*#__PURE__*/_jsxs(RowBetween,{align:\"center\",children:[/*#__PURE__*/_jsx(Text,{fontWeight:500,fontSize:14,color:theme.text2,children:\"Price\"}),/*#__PURE__*/_jsx(TradePrice,{price:trade===null||trade===void 0?void 0:trade.executionPrice,showInverted:showInverted,setShowInverted:setShowInverted})]})})}),/*#__PURE__*/_jsx(ButtonPrimary,{borderRadius:\"12px\",onClick:sendSwapTx,children:'Swap'})]})]})]}),!swapIsUnsupported?/*#__PURE__*/_jsx(AdvancedSwapDetailsDropdown,{trade:trade}):/*#__PURE__*/_jsx(UnsupportedCurrencyFooter,{show:swapIsUnsupported,currencies:[currencies.INPUT,currencies.OUTPUT]})]});}","map":null,"metadata":{},"sourceType":"module"}