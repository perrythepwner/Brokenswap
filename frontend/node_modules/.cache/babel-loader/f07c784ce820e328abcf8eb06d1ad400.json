{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst mini_kit_1 = require(\"@celo/contractkit/lib/mini-kit\");\nconst constants_1 = require(\"../constants\");\nconst common_1 = require(\"./common\");\nclass CeloExtensionWalletConnector extends common_1.AbstractConnector {\n  constructor(network, feeCurrency) {\n    super();\n    this.network = network;\n    this.feeCurrency = feeCurrency;\n    this.initialised = false;\n    this.type = constants_1.WalletTypes.CeloExtensionWallet;\n    this.kit = (0, mini_kit_1.newKit)(network.rpcUrl);\n  }\n  initialise() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        default: Web3\n      } = yield Promise.resolve().then(() => __importStar(require('web3')));\n      const celo = window.celo;\n      if (!celo) {\n        throw new Error('Celo Extension Wallet not installed');\n      }\n      const web3 = new Web3(celo);\n      yield celo.enable();\n      web3.currentProvider.publicConfigStore.on('update', _ref => {\n        let {\n          networkVersion\n        } = _ref;\n        if (networkVersion !== this.network.chainId) {\n          this.emit(common_1.ConnectorEvents.WALLET_CHAIN_CHANGED, networkVersion);\n        }\n      });\n      this.kit = (0, mini_kit_1.newKitFromWeb3)(web3);\n      const [defaultAccount] = yield this.kit.connection.web3.eth.getAccounts();\n      this.kit.connection.defaultAccount = defaultAccount;\n      this.initialised = true;\n      const walletChainId = yield celo.request({\n        method: 'eth_chainId'\n      });\n      this.emit(common_1.ConnectorEvents.CONNECTED, {\n        walletChainId: parseInt(walletChainId, 16),\n        walletType: constants_1.WalletTypes.CeloExtensionWallet,\n        address: defaultAccount,\n        networkName: this.network.name\n      });\n      return this;\n    });\n  }\n  continueNetworkUpdateFromWallet(network) {\n    this.network = network; // must set to prevent loop\n    const web3 = this.kit.connection.web3;\n    this.newKit(web3, this.account); // kit caches things so it need to be recreated\n    this.emit(common_1.ConnectorEvents.NETWORK_CHANGED, network.name);\n  }\n  startNetworkChangeFromApp() {\n    throw new Error('Celo Extension wallet does not support changing network from app');\n  }\n  supportsFeeCurrency() {\n    return false;\n  }\n  newKit(web3, defaultAccount) {\n    this.kit = (0, mini_kit_1.newKitFromWeb3)(web3);\n    this.kit.connection.defaultAccount = defaultAccount;\n  }\n  close() {\n    try {\n      this.kit.connection.stop();\n    } finally {\n      this.disconnect();\n    }\n  }\n}\nexports.default = CeloExtensionWalletConnector;","map":null,"metadata":{},"sourceType":"script"}