{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultRpcCaller = exports.getRandomId = exports.rpcCallHandler = void 0;\nvar debug_1 = __importDefault(require(\"debug\"));\nvar debugRpcPayload = (0, debug_1.default)('rpc:payload');\nvar debugRpcResponse = (0, debug_1.default)('rpc:response');\nvar debugRpcCallback = (0, debug_1.default)('rpc:callback:exception');\nfunction rpcCallHandler(payload, handler, callback) {\n  try {\n    handler(payload).then(function (result) {\n      callback(null, toRPCResponse(payload, result));\n    },\n    // Called if the Promise of the 'handler' fails\n    function (error) {\n      callback(error, toRPCResponse(payload, null, error));\n    }).catch(function (error) {\n      // Called if the 'callback' fails\n      debugRpcCallback('Callback for handling the JsonRpcResponse fails');\n      debugRpcCallback('%O', error);\n    });\n  } catch (error) {\n    // Called if the handler fails before making the promise\n    callback(error instanceof Error ? error : null);\n  }\n}\nexports.rpcCallHandler = rpcCallHandler;\n// Ported from: https://github.com/MetaMask/provider-engine/blob/master/util/random-id.js\nfunction getRandomId() {\n  var extraDigits = 3;\n  var baseTen = 10;\n  // 13 time digits\n  var datePart = new Date().getTime() * Math.pow(baseTen, extraDigits);\n  // 3 random digits\n  var extraPart = Math.floor(Math.random() * Math.pow(baseTen, extraDigits));\n  // 16 digits\n  return datePart + extraPart;\n}\nexports.getRandomId = getRandomId;\nfunction toRPCResponse(payload, result, error) {\n  var response = {\n    id: Number(payload.id),\n    jsonrpc: payload.jsonrpc,\n    result: result\n  };\n  if (error != null) {\n    response.error = {\n      message: error.message || error.stack || error.toString(),\n      code: -32000\n    };\n  }\n  return response;\n}\nvar DefaultRpcCaller = /** @class */function () {\n  function DefaultRpcCaller(defaultProvider, jsonrpcVersion) {\n    if (jsonrpcVersion === void 0) {\n      jsonrpcVersion = '2.0';\n    }\n    this.defaultProvider = defaultProvider;\n    this.jsonrpcVersion = jsonrpcVersion;\n  }\n  DefaultRpcCaller.prototype.call = function (method, params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          var payload = {\n            id: getRandomId(),\n            jsonrpc: _this.jsonrpcVersion,\n            method: method,\n            params: params\n          };\n          _this.send(payload, function (err, response) {\n            if (err != null || !response) {\n              reject(err);\n            } else {\n              resolve(response);\n            }\n          });\n        })];\n      });\n    });\n  };\n  DefaultRpcCaller.prototype.send = function (payload, callback) {\n    debugRpcPayload('%O', payload);\n    var decoratedCallback = function decoratedCallback(error, result) {\n      var err = null;\n      // error could be false\n      if (error) {\n        err = error;\n      }\n      debugRpcResponse('%O', result);\n      // The provider send call will not provide an error to the callback if\n      // the result itself specifies an error. Here, we extract the error in the\n      // result.\n      if (result && result.error != null && typeof result.error !== 'string' && result.error.message != null) {\n        err = new Error(result.error.message);\n      }\n      callback(err, result);\n    };\n    if (this.defaultProvider && typeof this.defaultProvider !== 'string') {\n      this.defaultProvider.send(payload, decoratedCallback);\n    }\n  };\n  return DefaultRpcCaller;\n}();\nexports.DefaultRpcCaller = DefaultRpcCaller;","map":null,"metadata":{},"sourceType":"script"}