{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseAddress = void 0;\nconst address_1 = require(\"@celo/utils/lib/address\");\nfunction invalidChain(chain) {\n  return chain !== 'celo' && chain !== 'eip155';\n}\n// celo:0x123\nfunction parseShortNameAddress(addressLike) {\n  const [celo, address] = addressLike.split(':');\n  if (invalidChain(celo) || !(0, address_1.isValidAddress)(address)) {\n    throw new Error('Invalid short name address');\n  }\n  // default to mainnet\n  return {\n    address,\n    networkId: '42220'\n  };\n}\n// <address>@<chain>:<network_id>\n// 0x123@celo:1234\n// 0x123@eip155:1234\nfunction parseCaip50Address(addressLike) {\n  const [address, chain, networkId] = addressLike.split(/[@:]/);\n  if (!(0, address_1.isValidAddress)(address) || invalidChain(chain)) {\n    throw new Error(\"Invalid CAIP50 address \".concat(address));\n  }\n  return {\n    address,\n    networkId\n  };\n}\n// <chain>:<network_id>:<address>\n// celo:1234:0x123\n// eip155:1234:0x123\nfunction parseCaip10Address(addressLike) {\n  const [chain, networkId, address] = addressLike.split(':');\n  if (!(0, address_1.isValidAddress)(address) || invalidChain(chain)) {\n    throw new Error(\"Invalid CAIP10 address \".concat(address));\n  }\n  return {\n    address,\n    networkId\n  };\n}\nfunction parseAddress(addressLike) {\n  let lastError;\n  for (const parse of [parseCaip10Address, parseCaip50Address, parseShortNameAddress]) {\n    try {\n      return parse(addressLike);\n    } catch (e) {\n      lastError = e;\n    }\n  }\n  throw lastError;\n}\nexports.parseAddress = parseAddress;","map":{"version":3,"sources":["../../src/utils/parse-addresses.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;AAOA,SAAS,YAAY,CAAC,KAAa,EAAA;EACjC,OAAO,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,QAAQ;AAC/C;AAEA;AACA,SAAS,qBAAqB,CAAC,WAAmB,EAAA;EAChD,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC;EAC9C,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAA,EAAA,SAAA,CAAA,cAAc,EAAC,OAAO,CAAC,EAAE;IAClD,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;EAC9C;EAED;EACA,OAAO;IAAE,OAAO;IAAE,SAAS,EAAE;EAAO,CAAE;AACxC;AAEA;AACA;AACA;AACA,SAAS,kBAAkB,CAAC,WAAmB,EAAA;EAC7C,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC;EAE7D,IAAI,CAAC,CAAA,CAAA,EAAA,SAAA,CAAA,cAAc,EAAC,OAAO,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE;IACnD,MAAM,IAAI,KAAK,2BAAA,MAAA,CAA2B,OAAO,CAAE,CAAC;EACrD;EAED,OAAO;IAAE,OAAO;IAAE;EAAS,CAAE;AAC/B;AAEA;AACA;AACA;AACA,SAAS,kBAAkB,CAAC,WAAmB,EAAA;EAC7C,MAAM,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC;EAE1D,IAAI,CAAC,CAAA,CAAA,EAAA,SAAA,CAAA,cAAc,EAAC,OAAO,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE;IACnD,MAAM,IAAI,KAAK,2BAAA,MAAA,CAA2B,OAAO,CAAE,CAAC;EACrD;EAED,OAAO;IAAE,OAAO;IAAE;EAAS,CAAE;AAC/B;AAEA,SAAgB,YAAY,CAAC,WAAmB,EAAA;EAC9C,IAAI,SAA0B;EAC9B,KAAK,MAAM,KAAK,IAAI,CAClB,kBAAkB,EAClB,kBAAkB,EAClB,qBAAqB,CACtB,EAAE;IACD,IAAI;MACF,OAAO,KAAK,CAAC,WAAW,CAAC;KAC1B,CAAC,OAAO,CAAC,EAAE;MACV,SAAS,GAAG,CAAC;IACd;EACF;EACD,MAAM,SAAS;AACjB;AAdA,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseAddress = void 0;\nconst address_1 = require(\"@celo/utils/lib/address\");\nfunction invalidChain(chain) {\n    return chain !== 'celo' && chain !== 'eip155';\n}\n// celo:0x123\nfunction parseShortNameAddress(addressLike) {\n    const [celo, address] = addressLike.split(':');\n    if (invalidChain(celo) || !(0, address_1.isValidAddress)(address)) {\n        throw new Error('Invalid short name address');\n    }\n    // default to mainnet\n    return { address, networkId: '42220' };\n}\n// <address>@<chain>:<network_id>\n// 0x123@celo:1234\n// 0x123@eip155:1234\nfunction parseCaip50Address(addressLike) {\n    const [address, chain, networkId] = addressLike.split(/[@:]/);\n    if (!(0, address_1.isValidAddress)(address) || invalidChain(chain)) {\n        throw new Error(`Invalid CAIP50 address ${address}`);\n    }\n    return { address, networkId };\n}\n// <chain>:<network_id>:<address>\n// celo:1234:0x123\n// eip155:1234:0x123\nfunction parseCaip10Address(addressLike) {\n    const [chain, networkId, address] = addressLike.split(':');\n    if (!(0, address_1.isValidAddress)(address) || invalidChain(chain)) {\n        throw new Error(`Invalid CAIP10 address ${address}`);\n    }\n    return { address, networkId };\n}\nfunction parseAddress(addressLike) {\n    let lastError;\n    for (const parse of [\n        parseCaip10Address,\n        parseCaip50Address,\n        parseShortNameAddress,\n    ]) {\n        try {\n            return parse(addressLike);\n        }\n        catch (e) {\n            lastError = e;\n        }\n    }\n    throw lastError;\n}\nexports.parseAddress = parseAddress;\n//# sourceMappingURL=parse-addresses.js.map"]},"metadata":{},"sourceType":"script"}