{"ast":null,"code":"import { utils as r } from \"ethers\";\nvar e;\n!function (r) {\n  r[r.UserError = 0] = \"UserError\", r[r.EmptyError = 1] = \"EmptyError\", r[r.RevertError = 2] = \"RevertError\", r[r.PanicError = 3] = \"PanicError\", r[r.UnknownError = 4] = \"UnknownError\", r[r.CustomError = 5] = \"CustomError\";\n}(e || (e = {}));\nvar t = function t(_t, o) {\n  var a, n;\n  if (!(_t instanceof Error)) return {\n    type: e.UnknownError,\n    error: null != (a = _t.message) ? a : \"Unexpected error\",\n    data: void 0\n  };\n  try {\n    n = function (r) {\n      var e,\n        t,\n        o = null != (e = r.data) ? e : null == (t = r.error) ? void 0 : t.data;\n      if (void 0 === o) throw r;\n      var a = \"string\" == typeof o ? o : o.data;\n      if (\"object\" == typeof a && a.data && (a = a.data), void 0 === a || \"string\" != typeof a) throw r;\n      return a;\n    }(_t);\n  } catch (r) {\n    return _t.message ? _t.message.includes(\"user rejected transaction\") ? {\n      type: e.UserError,\n      error: \"User has rejected the transaction\",\n      data: n\n    } : {\n      type: e.UnknownError,\n      error: _t.message,\n      data: n\n    } : {\n      type: e.UnknownError,\n      error: \"Unknown error\",\n      data: n\n    };\n  }\n  if (\"0x\" === n) return {\n    type: e.EmptyError,\n    error: \"Empty error data returned\",\n    data: n\n  };\n  if (n.startsWith(\"0x08c379a0\")) {\n    var i = n.slice(10);\n    try {\n      var s = r.defaultAbiCoder.decode([\"string\"], \"0x\" + i)[0];\n      return {\n        type: e.RevertError,\n        error: s,\n        data: n\n      };\n    } catch (r) {\n      return {\n        type: e.UnknownError,\n        error: \"Unknown error returned\",\n        data: n\n      };\n    }\n  } else {\n    if (!n.startsWith(\"0x4e487b71\")) {\n      if (!o) return {\n        type: e.CustomError,\n        error: n.slice(0, 10),\n        data: n\n      };\n      var c = (o instanceof r.Interface ? o : new r.Interface(o)).parseError(n);\n      return {\n        type: e.CustomError,\n        error: c.name,\n        args: c.args,\n        data: n\n      };\n    }\n    var d = n.slice(10);\n    try {\n      var u,\n        l = null != (u = function (r) {\n          switch (r.toNumber()) {\n            case 1:\n              return \"Assertion error\";\n            case 17:\n              return \"Arithmetic operation underflowed or overflowed outside of an unchecked block\";\n            case 18:\n              return \"Division or modulo division by zero\";\n            case 33:\n              return \"Tried to convert a value into an enum, but the value was too big or negative\";\n            case 34:\n              return \"Incorrectly encoded storage byte array\";\n            case 49:\n              return \".pop() was called on an empty array\";\n            case 50:\n              return \"Array accessed at an out-of-bounds or negative index\";\n            case 65:\n              return \"Too much memory was allocated, or an array was created that is too large\";\n            case 81:\n              return \"Called a zero-initialized variable of internal function type\";\n            default:\n              return;\n          }\n        }(r.defaultAbiCoder.decode([\"uint256\"], \"0x\" + d)[0])) ? u : \"Unknown panic code\";\n      return {\n        type: e.PanicError,\n        error: l,\n        data: n\n      };\n    } catch (r) {\n      return {\n        type: e.UnknownError,\n        error: \"Unknown panic error\",\n        data: n\n      };\n    }\n  }\n};\nexport { e as ErrorType, t as decodeError };","map":null,"metadata":{},"sourceType":"module"}