{"ast":null,"code":"const Account = require(\"./account\");\nconst Nat = require(\"./nat\");\nconst Bytes = require(\"./bytes\");\nconst RLP = require(\"./rlp\");\nconst keccak256 = require(\"./hash\").keccak256;\n\n// EthereumRPC, IncompleteTransaction -> Promise Transaction\nconst addDefaults = (rpc, tx) => {\n  var baseDefaults = [tx.chainId || rpc(\"net_version\", []), tx.gasPrice || rpc(\"eth_gasPrice\", []), tx.nonce || rpc(\"eth_getTransactionCount\", [tx.from, \"latest\"]), tx.value || \"0x0\", tx.data || \"0x\"];\n  const noAddress = address => !address || address === \"\" || address === \"0x\";\n  return Promise.all(baseDefaults).then(_ref => {\n    let [chainIdNum, gasPrice, nonce, value, data] = _ref;\n    var chainId = Nat.fromNumber(chainIdNum);\n    var gasEstimator = tx.gas ? Promise.resolve(null) : rpc(\"eth_estimateGas\", [{\n      from: noAddress(tx.from) ? null : tx.from,\n      to: noAddress(tx.to) ? null : tx.to,\n      value: tx.value,\n      nonce: tx.nonce,\n      data: tx.data\n    }]);\n    return gasEstimator.then(gasEstimate => {\n      if (gasEstimate.error) {\n        throw gasEstimate.error;\n      }\n      return {\n        chainId: chainId,\n        from: noAddress(tx.from) ? \"0x\" : tx.from.toLowerCase(),\n        to: noAddress(tx.to) ? \"0x\" : tx.to.toLowerCase(),\n        gasPrice: gasPrice,\n        gas: tx.gas ? tx.gas : Nat.div(Nat.mul(gasEstimate, \"0x6\"), \"0x5\"),\n        nonce: nonce,\n        value: value,\n        data: data ? data.toLowerCase() : null\n      };\n    });\n  });\n};\n\n// Transaction -> Bytes\nconst signingData = tx => {\n  return RLP.encode([Bytes.fromNat(tx.nonce), Bytes.fromNat(tx.gasPrice), Bytes.fromNat(tx.gas), tx.to ? tx.to.toLowerCase() : \"0x\", Bytes.fromNat(tx.value), tx.data, Bytes.fromNat(tx.chainId || \"0x1\"), \"0x\", \"0x\"]);\n};\n\n// Transaction, Account -> Bytes\nconst sign = (tx, account) => {\n  const data = signingData(tx);\n  const signature = Account.makeSigner(Nat.toNumber(tx.chainId || \"0x1\") * 2 + 35)(keccak256(data), account.privateKey);\n  const rawTransaction = RLP.decode(data).slice(0, 6).concat(Account.decodeSignature(signature));\n  return RLP.encode(rawTransaction);\n};\n\n// Bytes -> Address\nconst recover = rawTransaction => {\n  const values = RLP.decode(rawTransaction);\n  const signature = Account.encodeSignature(values.slice(6, 9));\n  const recovery = Bytes.toNumber(values[6]);\n  const extraData = recovery < 35 ? [] : [Bytes.fromNumber(recovery - 35 >> 1), \"0x\", \"0x\"];\n  const data = values.slice(0, 6).concat(extraData);\n  const dataHex = RLP.encode(data);\n  return Account.recover(keccak256(dataHex), signature);\n};\nmodule.exports = {\n  addDefaults,\n  signingData,\n  sign,\n  recover\n};","map":{"version":3,"names":["Account","require","Nat","Bytes","RLP","keccak256","addDefaults","rpc","tx","baseDefaults","chainId","gasPrice","nonce","from","value","data","noAddress","address","Promise","all","then","_ref","chainIdNum","fromNumber","gasEstimator","gas","resolve","to","gasEstimate","error","toLowerCase","div","mul","signingData","encode","fromNat","sign","account","signature","makeSigner","toNumber","privateKey","rawTransaction","decode","slice","concat","decodeSignature","recover","values","encodeSignature","recovery","extraData","dataHex","module","exports"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/eth-lib/lib/transaction.js"],"sourcesContent":["const Account = require(\"./account\");\nconst Nat = require(\"./nat\");\nconst Bytes = require(\"./bytes\");\nconst RLP = require(\"./rlp\");\nconst keccak256 = require(\"./hash\").keccak256;\n\n// EthereumRPC, IncompleteTransaction -> Promise Transaction\nconst addDefaults = (rpc, tx) => {\n  var baseDefaults = [tx.chainId || rpc(\"net_version\", []), tx.gasPrice || rpc(\"eth_gasPrice\", []), tx.nonce || rpc(\"eth_getTransactionCount\", [tx.from, \"latest\"]), tx.value || \"0x0\", tx.data || \"0x\"];\n  const noAddress = address => !address || address === \"\" || address === \"0x\";\n  return Promise.all(baseDefaults).then(([chainIdNum, gasPrice, nonce, value, data]) => {\n    var chainId = Nat.fromNumber(chainIdNum);\n    var gasEstimator = tx.gas ? Promise.resolve(null) : rpc(\"eth_estimateGas\", [{\n      from: noAddress(tx.from) ? null : tx.from,\n      to: noAddress(tx.to) ? null : tx.to,\n      value: tx.value,\n      nonce: tx.nonce,\n      data: tx.data\n    }]);\n    return gasEstimator.then(gasEstimate => {\n      if (gasEstimate.error) {\n        throw gasEstimate.error;\n      }\n      return {\n        chainId: chainId,\n        from: noAddress(tx.from) ? \"0x\" : tx.from.toLowerCase(),\n        to: noAddress(tx.to) ? \"0x\" : tx.to.toLowerCase(),\n        gasPrice: gasPrice,\n        gas: tx.gas ? tx.gas : Nat.div(Nat.mul(gasEstimate, \"0x6\"), \"0x5\"),\n        nonce: nonce,\n        value: value,\n        data: data ? data.toLowerCase() : null\n      };\n    });\n  });\n};\n\n// Transaction -> Bytes\nconst signingData = tx => {\n  return RLP.encode([Bytes.fromNat(tx.nonce), Bytes.fromNat(tx.gasPrice), Bytes.fromNat(tx.gas), tx.to ? tx.to.toLowerCase() : \"0x\", Bytes.fromNat(tx.value), tx.data, Bytes.fromNat(tx.chainId || \"0x1\"), \"0x\", \"0x\"]);\n};\n\n// Transaction, Account -> Bytes\nconst sign = (tx, account) => {\n  const data = signingData(tx);\n  const signature = Account.makeSigner(Nat.toNumber(tx.chainId || \"0x1\") * 2 + 35)(keccak256(data), account.privateKey);\n  const rawTransaction = RLP.decode(data).slice(0, 6).concat(Account.decodeSignature(signature));\n  return RLP.encode(rawTransaction);\n};\n\n// Bytes -> Address\nconst recover = rawTransaction => {\n  const values = RLP.decode(rawTransaction);\n  const signature = Account.encodeSignature(values.slice(6, 9));\n  const recovery = Bytes.toNumber(values[6]);\n  const extraData = recovery < 35 ? [] : [Bytes.fromNumber(recovery - 35 >> 1), \"0x\", \"0x\"];\n  const data = values.slice(0, 6).concat(extraData);\n  const dataHex = RLP.encode(data);\n  return Account.recover(keccak256(dataHex), signature);\n};\n\nmodule.exports = {\n  addDefaults,\n  signingData,\n  sign,\n  recover\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}