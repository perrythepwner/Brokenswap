{"ast":null,"code":"export function assertType(obj, key) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"string\";\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(\"Missing or invalid \\\"\".concat(key, \"\\\" param\"));\n  }\n}\nexport function hasRequiredParams(params, required) {\n  let matches = true;\n  required.forEach(key => {\n    const exists = (key in params);\n    if (!exists) {\n      matches = false;\n    }\n  });\n  return matches;\n}\nexport function hasExactParamsLength(params, length) {\n  return Array.isArray(params) ? params.length === length : Object.keys(params).length === length;\n}\nexport function hasRequiredParamsLength(params, minLength) {\n  return Array.isArray(params) ? params.length >= minLength : Object.keys(params).length >= minLength;\n}\nexport function checkParams(params, required, optional) {\n  const exact = !optional.length;\n  const matchesLength = exact ? hasExactParamsLength(params, required.length) : hasRequiredParamsLength(params, required.length);\n  if (!matchesLength) return false;\n  return hasRequiredParams(params, required);\n}\nexport function methodEndsWith(method, expected) {\n  let separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"_\";\n  const split = method.split(separator);\n  return split[split.length - 1].trim().toLowerCase() === expected.trim().toLowerCase();\n}","map":{"version":3,"sources":["../../src/misc.ts"],"names":[],"mappings":"AAAA,OAAM,SAAU,UAAU,CAAC,GAAQ,EAAE,GAAW,EAAiB;EAAA,IAAf,IAAI,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,QAAQ;EAC/D,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;IACzC,MAAM,IAAI,KAAK,yBAAA,MAAA,CAAwB,GAAG,aAAS,CAAC;EACrD;AACH;AAEA,OAAM,SAAU,iBAAiB,CAAC,MAAW,EAAE,QAAkB,EAAA;EAC/D,IAAI,OAAO,GAAG,IAAI;EAClB,QAAQ,CAAC,OAAO,CAAC,GAAG,IAAG;IACrB,MAAM,MAAM,IAAG,GAAG,IAAI,MAAM;IAC5B,IAAI,CAAC,MAAM,EAAE;MACX,OAAO,GAAG,KAAK;IAChB;EACH,CAAC,CAAC;EACF,OAAO,OAAO;AAChB;AAEA,OAAM,SAAU,oBAAoB,CAAC,MAAW,EAAE,MAAc,EAAA;EAC9D,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GACxB,MAAM,CAAC,MAAM,KAAK,MAAM,GACxB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,MAAM;AAC3C;AAEA,OAAM,SAAU,uBAAuB,CACrC,MAAW,EACX,SAAiB,EAAA;EAEjB,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GACxB,MAAM,CAAC,MAAM,IAAI,SAAS,GAC1B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,IAAI,SAAS;AAC7C;AAEA,OAAM,SAAU,WAAW,CACzB,MAAW,EACX,QAAkB,EAClB,QAAkB,EAAA;EAElB,MAAM,KAAK,GAAG,CAAC,QAAQ,CAAC,MAAM;EAC9B,MAAM,aAAa,GAAG,KAAK,GACvB,oBAAoB,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,GAC7C,uBAAuB,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC;EACpD,IAAI,CAAC,aAAa,EAAE,OAAO,KAAK;EAChC,OAAO,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC;AAC5C;AAEA,OAAM,SAAU,cAAc,CAC5B,MAAc,EACd,QAAgB,EACD;EAAA,IAAf,SAAS,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,GAAG;EAEf,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC;EACrC,OACE,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAA,CAAE,CAAC,WAAW,CAAA,CAAE,KAC5C,QAAQ,CAAC,IAAI,CAAA,CAAE,CAAC,WAAW,CAAA,CAAE;AAEjC","sourceRoot":"","sourcesContent":["export function assertType(obj, key, type = \"string\") {\n    if (!obj[key] || typeof obj[key] !== type) {\n        throw new Error(`Missing or invalid \"${key}\" param`);\n    }\n}\nexport function hasRequiredParams(params, required) {\n    let matches = true;\n    required.forEach(key => {\n        const exists = key in params;\n        if (!exists) {\n            matches = false;\n        }\n    });\n    return matches;\n}\nexport function hasExactParamsLength(params, length) {\n    return Array.isArray(params)\n        ? params.length === length\n        : Object.keys(params).length === length;\n}\nexport function hasRequiredParamsLength(params, minLength) {\n    return Array.isArray(params)\n        ? params.length >= minLength\n        : Object.keys(params).length >= minLength;\n}\nexport function checkParams(params, required, optional) {\n    const exact = !optional.length;\n    const matchesLength = exact\n        ? hasExactParamsLength(params, required.length)\n        : hasRequiredParamsLength(params, required.length);\n    if (!matchesLength)\n        return false;\n    return hasRequiredParams(params, required);\n}\nexport function methodEndsWith(method, expected, separator = \"_\") {\n    const split = method.split(separator);\n    return (split[split.length - 1].trim().toLowerCase() ===\n        expected.trim().toLowerCase());\n}\n//# sourceMappingURL=misc.js.map"]},"metadata":{},"sourceType":"module"}