{"ast":null,"code":"const Bytes = require(\"./bytes\");\nconst inis = \"pbtdkgxjfvlrmnsz\".split(\"\");\nconst mids = \"auie\".split(\"\");\nconst back = [inis, mids].map(chars => {\n  let map = {};\n  for (let i = 0; i < chars.length; ++i) map[chars[i]] = i;\n  return map;\n});\nconst syllableFromB64 = b64 => {\n  const ini = b64 >>> 2 & 15;\n  const mid = b64 >>> 0 & 3;\n  return inis[ini] + mids[mid];\n};\nconst syllableToB64 = syllable => {\n  const ini = back[0][syllable[0]];\n  const mid = back[1][syllable[1]];\n  return ini * 4 + mid;\n};\nconst b64sFromBytes = bytes => {\n  //BoooooBoooooBoooooBooooo\n  //BoooooooBoooooooBooooooo\n  let b64s = [],\n    b64;\n  for (let i = 0, l = Math.ceil(bytes.length * 8 / 6); i < l; ++i) {\n    let j = i / 8 * 6 | 0;\n    b64s.push(i % 4 === 0 ? bytes[j + 0] / 4 | 0 : i % 4 === 1 ? bytes[j + 0] % 4 * 16 + (bytes[j + 1] / 16 | 0) : i % 4 === 2 ? bytes[j + 0] % 16 * 4 + (bytes[j + 1] / 64 | 0) : bytes[j + 0] % 64 * 1);\n  }\n  return b64s;\n};\nconst b64sToBytes = b64s => {\n  let bytes = [];\n  for (let i = 0, l = Math.floor(b64s.length * 6 / 8); i < l; ++i) {\n    let j = i / 6 * 8 | 0;\n    bytes.push(i % 3 === 0 ? b64s[j + 0] % 64 * 4 + (b64s[j + 1] / 16 | 0) : i % 3 === 1 ? b64s[j + 0] % 16 * 16 + (b64s[j + 1] / 4 | 0) : b64s[j + 0] % 4 * 64 + (b64s[j + 1] / 1 | 0));\n  }\n  return bytes;\n};\nconst fromBytes = bytes => b64sFromBytes(Bytes.toArray(bytes)).map(syllableFromB64).join(\"\");\nconst toBytes = syllables => Bytes.fromArray(b64sToBytes(syllables.match(/\\w\\w/g).map(syllableToB64)));\nmodule.exports = {\n  fromBytes,\n  toBytes\n};","map":null,"metadata":{},"sourceType":"script"}