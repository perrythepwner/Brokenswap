{"ast":null,"code":"import{useCallback,useEffect,useRef,useState}from'react';/**\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\n * @param value value that is rapidly changing\n * @param onChange change handler that should receive the debounced updates to the value\n * @param debouncedMs how long we should wait for changes to be applied\n */export default function useDebouncedChangeHandler(value,onChange){let debouncedMs=arguments.length>2&&arguments[2]!==undefined?arguments[2]:100;const[inner,setInner]=useState(()=>value);const timer=useRef();const onChangeInner=useCallback(newValue=>{setInner(newValue);if(timer.current){clearTimeout(timer.current);}timer.current=setTimeout(()=>{onChange(newValue);timer.current=undefined;},debouncedMs);},[debouncedMs,onChange]);useEffect(()=>{if(timer.current){clearTimeout(timer.current);timer.current=undefined;}setInner(value);},[value]);return[inner,onChangeInner];}","map":null,"metadata":{},"sourceType":"module"}