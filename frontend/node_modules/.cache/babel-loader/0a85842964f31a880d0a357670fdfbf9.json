{"ast":null,"code":"import{Price,Route,Trade,TradeType}from'@ubeswap/sdk';import{ROUTER_ADDRESS}from'constants/index';export const defaultRouter={routerAddress:ROUTER_ADDRESS};export class UbeswapTrade extends Trade{constructor(route,amount,tradeType,router,path){super(route,amount,tradeType);this.hidePairAnalytics=false;this.router=void 0;this.path=void 0;this.router=router;this.path=path;}static fromInnerTrade(innerTrade,router,path){return new UbeswapTrade(innerTrade.route,innerTrade.tradeType===TradeType.EXACT_INPUT?innerTrade.inputAmount:innerTrade.outputAmount,innerTrade.tradeType,router,path);}static fromNormalTrade(trade){return UbeswapTrade.fromInnerTrade(trade,defaultRouter,trade.route.path);}}export class MinimaRouterTrade extends UbeswapTrade{constructor(route,inputAmount,outputAmount,router,priceImpact,path,details,txn){super(route,inputAmount,0,router,path);this.txn=txn;/**\n   * The input amount for the trade assuming no slippage.\n   */this.inputAmount=void 0;/**\n   * The output amount for the trade assuming no slippage.\n   */this.outputAmount=void 0;/**\n   * The price expressed in terms of output amount/input amount.\n   */this.executionPrice=void 0;/**\n   * The mid price after the trade executes assuming no slippage.\n   */this.nextMidPrice=void 0;/**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */this.priceImpact=void 0;/**\n   * Every field that is needed for executing a swap is contained within the details object\n   */this.details=void 0;this.router=router;this.inputAmount=inputAmount;this.outputAmount=outputAmount;this.executionPrice=new Price(inputAmount.token,outputAmount.token,inputAmount.raw,outputAmount.raw);this.nextMidPrice=new Price(inputAmount.token,outputAmount.token,inputAmount.raw,outputAmount.raw);this.priceImpact=priceImpact;this.hidePairAnalytics=true;this.details=details;}static fromMinimaTradePayload(pairs,inputAmount,outputAmount,routerAddress,priceImpact,path,details){return new MinimaRouterTrade(new Route(pairs,inputAmount.currency),inputAmount,outputAmount,{routerAddress},priceImpact,path,details);}}","map":{"version":3,"names":["Price","Route","Trade","TradeType","ROUTER_ADDRESS","defaultRouter","routerAddress","UbeswapTrade","constructor","route","amount","tradeType","router","path","hidePairAnalytics","fromInnerTrade","innerTrade","EXACT_INPUT","inputAmount","outputAmount","fromNormalTrade","trade","MinimaRouterTrade","priceImpact","details","txn","executionPrice","nextMidPrice","token","raw","fromMinimaTradePayload","pairs","currency"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/components/swap/routing/trade.ts"],"sourcesContent":["import { BigNumberish } from '@ethersproject/bignumber'\nimport { BytesLike } from '@ethersproject/bytes'\nimport { Pair, Percent, Price, Route, Token, TokenAmount, Trade, TradeType } from '@ubeswap/sdk'\nimport { ROUTER_ADDRESS } from 'constants/index'\n\nexport interface TradeRouter {\n  routerAddress?: string\n}\n\nexport const defaultRouter: TradeRouter = {\n  routerAddress: ROUTER_ADDRESS,\n}\n\nexport class UbeswapTrade extends Trade {\n  hidePairAnalytics = false\n  router: TradeRouter\n  readonly path: readonly Token[]\n\n  constructor(route: Route, amount: TokenAmount, tradeType: TradeType, router: TradeRouter, path: readonly Token[]) {\n    super(route, amount, tradeType)\n    this.router = router\n    this.path = path\n  }\n\n  static fromInnerTrade(innerTrade: Trade, router: TradeRouter, path: readonly Token[]) {\n    return new UbeswapTrade(\n      innerTrade.route,\n      innerTrade.tradeType === TradeType.EXACT_INPUT ? innerTrade.inputAmount : innerTrade.outputAmount,\n      innerTrade.tradeType,\n      router,\n      path\n    )\n  }\n\n  static fromNormalTrade(trade: Trade): UbeswapTrade {\n    return UbeswapTrade.fromInnerTrade(trade, defaultRouter, trade.route.path)\n  }\n}\n\nexport interface SwapPayload {\n  path: string[]\n  pairs: string[]\n  extras: BytesLike[]\n  inputAmount: BigNumberish\n  minOutputAmount: BigNumberish\n  expectedOutputAmount: BigNumberish\n  to?: string\n  deadline: BigNumberish\n  partner: BigNumberish\n  sig: BytesLike\n}\n\nexport interface MinimaPayloadDetails {\n  path: string[]\n  pairs: string[]\n  extras: BytesLike[]\n  inputAmount: string\n  expectedOutputAmount: string\n  deadline: string\n  partner: string\n  sig: BytesLike\n}\n\nexport interface MinimaTradePayload {\n  expectedOut: string\n  minimumExpectedOut?: string\n  routerAddress: string\n  priceImpact: {\n    numerator: number\n    denominator: number\n  }\n  details: MinimaPayloadDetails\n  txn?: {\n    data: string\n    to: string\n    gas: string\n    from: string\n  }\n}\n\nexport class MinimaRouterTrade extends UbeswapTrade {\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  inputAmount: TokenAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  outputAmount: TokenAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  priceImpact: Percent\n  /**\n   * Every field that is needed for executing a swap is contained within the details object\n   */\n  details: SwapPayload\n\n  constructor(\n    route: Route,\n    inputAmount: TokenAmount,\n    outputAmount: TokenAmount,\n    router: TradeRouter,\n    priceImpact: Percent,\n    path: readonly Token[],\n    details: SwapPayload,\n    public txn?: { data: string; to: string }\n  ) {\n    super(route, inputAmount, 0, router, path)\n    this.router = router\n    this.inputAmount = inputAmount\n    this.outputAmount = outputAmount\n    this.executionPrice = new Price(inputAmount.token, outputAmount.token, inputAmount.raw, outputAmount.raw)\n    this.nextMidPrice = new Price(inputAmount.token, outputAmount.token, inputAmount.raw, outputAmount.raw)\n    this.priceImpact = priceImpact\n    this.hidePairAnalytics = true\n    this.details = details\n  }\n\n  static fromMinimaTradePayload(\n    pairs: Pair[],\n    inputAmount: TokenAmount,\n    outputAmount: TokenAmount,\n    routerAddress: string,\n    priceImpact: Percent,\n    path: readonly Token[],\n    details: SwapPayload\n  ) {\n    return new MinimaRouterTrade(\n      new Route(pairs, inputAmount.currency),\n      inputAmount,\n      outputAmount,\n      { routerAddress },\n      priceImpact,\n      path,\n      details\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}