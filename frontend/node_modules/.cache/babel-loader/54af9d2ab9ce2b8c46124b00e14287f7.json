{"ast":null,"code":"import _objectSpread from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{ChainId,useCelo,useProvider}from'@celo/react-celo';import{BigNumber}from'@ethersproject/bignumber';import{ChainId as UbeswapChainId,JSBI,Token,TokenAmount}from'@ubeswap/sdk';import{POOL_MANAGER}from'constants/poolManager';import{UBE}from'constants/tokens';import{MoolaStakingRewards__factory}from'generated/';import{useAllTokens}from'hooks/Tokens';import useCurrentBlockTimestamp from'hooks/useCurrentBlockTimestamp';import zip from'lodash/zip';// Hooks\nimport React,{useEffect,useMemo}from'react';import ERC_20_INTERFACE from'../../constants/abis/erc20';import{STAKING_REWARDS_INTERFACE}from'../../constants/abis/staking-rewards';// Interfaces\nimport{UNISWAP_V2_PAIR_INTERFACE}from'../../constants/abis/uniswap-v2-pair';import{usePoolManagerContract,useTokenContract}from'../../hooks/useContract';import{useFarmRegistry}from'../../pages/Earn/useFarmRegistry';import{NEVER_RELOAD,useMultipleContractSingleData,useSingleCallResult,useSingleContractMultipleData}from'../multicall/hooks';import{tryParseAmount}from'../swap/hooks';import{useMultiStakeRewards}from'./useDualStakeRewards';import useStakingInfo from'./useStakingInfo';export const STAKING_GENESIS=1619100000;const ACTIVE_CONTRACT_UPDATED_THRESHOLD=5259492;const UNPREDICTABLE_GAS_LIMIT_ERROR_CODE='UNPREDICTABLE_GAS_LIMIT';export const useMultiRewardPools=()=>{const library=useProvider();const farmSummaries=useFarmRegistry();const[multiRewardPools,setMultiRewardPools]=React.useState([]);const call=React.useCallback(/*#__PURE__*/_asyncToGenerator(function*(){const multiRwdPools=[];yield Promise.all(farmSummaries.map(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(function*(fs){let poolContract=MoolaStakingRewards__factory.connect(fs.stakingAddress,library);const rewardsTokens=[];const externalStakingRwdAddresses=[];// the first reward token at the top level\nrewardsTokens.push(yield poolContract.rewardsToken());// last time the contract was updated - set isActive to false if it has been longer than 2 months\nlet periodFinish=yield poolContract.periodFinish();let isActive=Math.floor(Date.now()/1000)-periodFinish.toNumber()<ACTIVE_CONTRACT_UPDATED_THRESHOLD;let baseContractFound=false;// recursivley find underlying and base pool contracts\nwhile(!baseContractFound){try{// find the underlying contract if one exists\nconst externalStakingRewardAddr=yield poolContract.externalStakingRewards();externalStakingRwdAddresses.push(externalStakingRewardAddr);// capture the contract's reward token\npoolContract=MoolaStakingRewards__factory.connect(externalStakingRewardAddr,library);rewardsTokens.push(yield poolContract.rewardsToken());// determine if the underlying contract is active or not\nperiodFinish=yield poolContract.periodFinish();isActive=Math.floor(Date.now()/1000)-periodFinish.toNumber()<ACTIVE_CONTRACT_UPDATED_THRESHOLD||isActive;}catch(e){//if the error is not what is expected - log it\nif(e.code!==UNPREDICTABLE_GAS_LIMIT_ERROR_CODE){console.log(e);}//set true when externalStakingRewards() throws an error\nbaseContractFound=true;}}if(externalStakingRwdAddresses.length){multiRwdPools.push({address:fs.stakingAddress,underlyingPool:externalStakingRwdAddresses[0],basePool:externalStakingRwdAddresses[externalStakingRwdAddresses.length-1],numRewards:rewardsTokens.length,active:isActive});}});return function(_x){return _ref2.apply(this,arguments);};}()));setMultiRewardPools(multiRwdPools);}),[farmSummaries,library]);useEffect(()=>{call();},[call]);return multiRewardPools;};export const usePairMultiStakingInfo=(stakingInfo,stakingAddress)=>{var _multiRewardPool$acti,_multiRewardPool$acti2;const multiRewardPools=useMultiRewardPools();const multiRewardPool=useMemo(()=>{return multiRewardPools.filter(x=>x.address.toLowerCase()===stakingAddress.toLowerCase()).find(x=>x.basePool.toLowerCase()===(stakingInfo===null||stakingInfo===void 0?void 0:stakingInfo.poolInfo.poolAddress.toLowerCase()));},[multiRewardPools,stakingAddress,stakingInfo===null||stakingInfo===void 0?void 0:stakingInfo.poolInfo.poolAddress]);const isTriple=(multiRewardPool===null||multiRewardPool===void 0?void 0:multiRewardPool.numRewards)===3;const dualPool=useMultiStakeRewards(isTriple?multiRewardPool===null||multiRewardPool===void 0?void 0:multiRewardPool.underlyingPool:multiRewardPool===null||multiRewardPool===void 0?void 0:multiRewardPool.address,stakingInfo,2,isTriple?true:(_multiRewardPool$acti=multiRewardPool===null||multiRewardPool===void 0?void 0:multiRewardPool.active)!==null&&_multiRewardPool$acti!==void 0?_multiRewardPool$acti:false);const triplePool=useMultiStakeRewards(isTriple?multiRewardPool===null||multiRewardPool===void 0?void 0:multiRewardPool.address:undefined,dualPool,3,(_multiRewardPool$acti2=multiRewardPool===null||multiRewardPool===void 0?void 0:multiRewardPool.active)!==null&&_multiRewardPool$acti2!==void 0?_multiRewardPool$acti2:false);return triplePool||dualPool;};export const useUnclaimedStakingRewards=()=>{var _useSingleCallResult$,_poolsCountBigNumber$,_balances$reduce,_rewardRates$;const{network}=useCelo();const{chainId}=network;const ube=chainId?UBE[chainId]:undefined;const ubeContract=useTokenContract(ube===null||ube===void 0?void 0:ube.address);const poolManagerContract=usePoolManagerContract([ChainId.Mainnet,ChainId.Alfajores].includes(chainId)?POOL_MANAGER[chainId]:undefined);const poolsCountBigNumber=(_useSingleCallResult$=useSingleCallResult(poolManagerContract,'poolsCount').result)===null||_useSingleCallResult$===void 0?void 0:_useSingleCallResult$[0];const poolsCount=(_poolsCountBigNumber$=poolsCountBigNumber===null||poolsCountBigNumber===void 0?void 0:poolsCountBigNumber.toNumber())!==null&&_poolsCountBigNumber$!==void 0?_poolsCountBigNumber$:0;const poolAddresses=useStakingPoolAddresses(poolManagerContract,poolsCount);// compute amount that is locked up\nconst balancesRaw=useSingleContractMultipleData(ubeContract,'balanceOf',poolAddresses.map(addr=>[addr]));const balances=balancesRaw.find(b=>!b.result)?null:balancesRaw.map(b=>{var _b$result$,_b$result;return(_b$result$=(_b$result=b.result)===null||_b$result===void 0?void 0:_b$result[0])!==null&&_b$result$!==void 0?_b$result$:BigNumber.from(0);});const balanceRemaining=(_balances$reduce=balances===null||balances===void 0?void 0:balances.reduce((sum,b)=>b.add(sum),BigNumber.from(0)))!==null&&_balances$reduce!==void 0?_balances$reduce:null;// tokens per second, constants\nconst rewardRates=useMultipleContractSingleData(poolAddresses,STAKING_REWARDS_INTERFACE,'rewardRate',undefined,NEVER_RELOAD);const periodFinishes=useMultipleContractSingleData(poolAddresses,STAKING_REWARDS_INTERFACE,'periodFinish',undefined,NEVER_RELOAD);const now=useCurrentBlockTimestamp();const amounts=now?zip(rewardRates,periodFinishes).map(_ref3=>{var _rate$result,_finish$result;let[rate,finish]=_ref3;const rawRate=rate===null||rate===void 0?void 0:(_rate$result=rate.result)===null||_rate$result===void 0?void 0:_rate$result[0];const finishTime=finish===null||finish===void 0?void 0:(_finish$result=finish.result)===null||_finish$result===void 0?void 0:_finish$result[0];if(rawRate&&finishTime&&finishTime.gt(now)){return rawRate.mul(finishTime.sub(now).toNumber());}return BigNumber.from(0);}):undefined;const earned=rewardRates!==null&&rewardRates!==void 0&&(_rewardRates$=rewardRates[0])!==null&&_rewardRates$!==void 0&&_rewardRates$.loading||!amounts?null:amounts.reduce((sum,amt)=>sum.add(amt),BigNumber.from(0));return{balanceRemaining,earned,noncirculatingSupply:balanceRemaining&&earned?balanceRemaining.sub(earned):null};};export function useStakingPools(pairToFilterBy,stakingAddress){var _useSingleCallResult$2,_poolsCountBigNumber$2;const{network}=useCelo();const chainId=network.chainId;const ube=chainId?UBE[chainId]:undefined;const poolManagerContract=usePoolManagerContract(chainId!==UbeswapChainId.BAKLAVA?POOL_MANAGER[chainId]:undefined);const poolsCountBigNumber=(_useSingleCallResult$2=useSingleCallResult(poolManagerContract,'poolsCount').result)===null||_useSingleCallResult$2===void 0?void 0:_useSingleCallResult$2[0];const poolsCount=(_poolsCountBigNumber$2=poolsCountBigNumber===null||poolsCountBigNumber===void 0?void 0:poolsCountBigNumber.toNumber())!==null&&_poolsCountBigNumber$2!==void 0?_poolsCountBigNumber$2:0;const poolAddresses=useStakingPoolAddresses(poolManagerContract,poolsCount);const pools=useStakingPoolsInfo(poolManagerContract,poolAddresses);const stakingTokens=pools.map(p=>p===null||p===void 0?void 0:p.stakingToken);const poolPairs=usePairDataFromAddresses(stakingTokens);return useMemo(()=>{var _pools$reduce$filter;if(!ube||!pools||!poolPairs)return[];return(_pools$reduce$filter=pools.reduce((memo,poolInfo,index)=>{return[...memo,{stakingRewardAddress:poolInfo.poolAddress,tokens:poolPairs[index],poolInfo}];},[]).filter(stakingRewardInfo=>{if(stakingAddress){return stakingAddress.toLowerCase()===stakingRewardInfo.stakingRewardAddress.toLowerCase();}if(pairToFilterBy===undefined){return true;}if(pairToFilterBy===null){return false;}return stakingRewardInfo.tokens&&pairToFilterBy.involvesToken(stakingRewardInfo.tokens[0])&&pairToFilterBy.involvesToken(stakingRewardInfo.tokens[1]);}))!==null&&_pools$reduce$filter!==void 0?_pools$reduce$filter:[];},[ube,pools,poolPairs,pairToFilterBy,stakingAddress]);}export function useStakingPoolAddresses(poolManagerContract,poolsCount){// Get rewards pools addresses\nconst inputs=[...Array(poolsCount).keys()].map(i=>[i]);const poolAddresses=useSingleContractMultipleData(poolManagerContract,'poolsByIndex',inputs);return useMemo(()=>{return!poolAddresses.length||!poolAddresses[0]||poolAddresses[0].loading?[]:poolAddresses.map(p=>{var _p$result;return p===null||p===void 0?void 0:(_p$result=p.result)===null||_p$result===void 0?void 0:_p$result[0];}).filter(x=>!!x);},[poolAddresses]);}const EXTERNAL_POOLS=[{index:-1,poolAddress:'0x33F819986FE80A4f4A9032260A24770918511849',stakingToken:'0xF97E6168283e38FC42725082FC63b47B6cD16B18',rewardToken:'0x18414Ce6dAece0365f935F3e78A7C1993e77d8Cd',rewardTokenSymbol:'LAPIS',weight:0},{index:-1,poolAddress:'0xD409B7C4F67F5C845c53505b3d3B5aCD44e479AB',stakingToken:'0x573bcEBD09Ff805eD32df2cb1A968418DC74DCf7',rewardToken:'0x18414Ce6dAece0365f935F3e78A7C1993e77d8Cd',rewardTokenSymbol:'LAPIS',weight:0},{index:-1,poolAddress:'0x478b8D37eE976228d17704d95B5430Cd93a31b87',stakingToken:'0x12E42ccf14B283Ef0a36A791892D18BF75Da5c80',rewardToken:'0x94140c2eA9D208D8476cA4E3045254169791C59e',rewardTokenSymbol:'PREMIO',weight:0}];export function useStakingPoolsInfo(poolManagerContract,poolAddresses){const pools=useSingleContractMultipleData(poolManagerContract,'pools',poolAddresses.map(addr=>[addr]));const rawPools=useMemo(()=>{return!pools||!pools[0]||pools[0].loading?[]:pools.map(p=>p===null||p===void 0?void 0:p.result).filter(x=>!!x);},[pools]);const nextPeriod=useSingleCallResult(poolManagerContract,'nextPeriod');const poolRewards=useSingleContractMultipleData(poolManagerContract,'computeAmountForPool',rawPools.map(p=>{var _nextPeriod$result;return[p.stakingToken,nextPeriod===null||nextPeriod===void 0?void 0:(_nextPeriod$result=nextPeriod.result)===null||_nextPeriod$result===void 0?void 0:_nextPeriod$result[0]];}));return rawPools.concat(EXTERNAL_POOLS).map((pool,i)=>{var _poolRewards$i$result,_poolRewards$i,_poolRewards$i$result2;return _objectSpread(_objectSpread({},pool),{},{nextPeriodRewards:(_poolRewards$i$result=poolRewards===null||poolRewards===void 0?void 0:(_poolRewards$i=poolRewards[i])===null||_poolRewards$i===void 0?void 0:(_poolRewards$i$result2=_poolRewards$i.result)===null||_poolRewards$i$result2===void 0?void 0:_poolRewards$i$result2[0])!==null&&_poolRewards$i$result!==void 0?_poolRewards$i$result:null});});}export function usePairDataFromAddresses(pairAddresses){const{network}=useCelo();const chainId=network.chainId;const token0Data=useMultipleContractSingleData(pairAddresses,UNISWAP_V2_PAIR_INTERFACE,'token0',undefined,NEVER_RELOAD);const token1Data=useMultipleContractSingleData(pairAddresses,UNISWAP_V2_PAIR_INTERFACE,'token1',undefined,NEVER_RELOAD);const tokens0=token0Data.map(t=>{var _t$result;return t===null||t===void 0?void 0:(_t$result=t.result)===null||_t$result===void 0?void 0:_t$result[0];});const tokens1=token1Data.map(t=>{var _t$result2;return t===null||t===void 0?void 0:(_t$result2=t.result)===null||_t$result2===void 0?void 0:_t$result2[0];});const tokensDb=useAllTokens();// Construct a set of all the unique token addresses that are not in the tokenlists.\nconst tokenAddressesNeededToFetch=useMemo(()=>[...new Set([...tokens0,...tokens1])].filter(addr=>addr!==undefined&&!tokensDb[addr]),[tokensDb,tokens0,tokens1]);const names=useMultipleContractSingleData(tokenAddressesNeededToFetch,ERC_20_INTERFACE,'name',undefined,NEVER_RELOAD);const symbols=useMultipleContractSingleData(tokenAddressesNeededToFetch,ERC_20_INTERFACE,'symbol',undefined,NEVER_RELOAD);const tokenDecimals=useMultipleContractSingleData(tokenAddressesNeededToFetch,ERC_20_INTERFACE,'decimals',undefined,NEVER_RELOAD);// Construct the full token data\nconst tokensNeededToFetch=useMemo(()=>{if(!tokenAddressesNeededToFetch.length||!names.length||!symbols.length||!tokenDecimals.length)return null;if(names[0].loading||tokenDecimals[0].loading||symbols[0].loading)return null;if(!names[0].result||!tokenDecimals[0].result||!symbols[0].result)return null;return tokenAddressesNeededToFetch.reduce((memo,address,index)=>{var _tokenDecimals$index$,_names$index$result,_names$index$result2,_symbols$index$result,_symbols$index$result2;const decimals=(_tokenDecimals$index$=tokenDecimals[index].result)===null||_tokenDecimals$index$===void 0?void 0:_tokenDecimals$index$[0];const name=((_names$index$result=names[index].result)===null||_names$index$result===void 0?void 0:_names$index$result[0])==='Celo Gold'?'Celo':(_names$index$result2=names[index].result)===null||_names$index$result2===void 0?void 0:_names$index$result2[0];const symbol=((_symbols$index$result=symbols[index].result)===null||_symbols$index$result===void 0?void 0:_symbols$index$result[0])==='cGLD'?'CELO':(_symbols$index$result2=symbols[index].result)===null||_symbols$index$result2===void 0?void 0:_symbols$index$result2[0];// todo - remove hardcoded symbol swap for CELO\n// Sometimes, decimals/name/symbol can be undefined, causing an error. TODO: Look into a root cause\nif(chainId&&address&&decimals&&symbol&&name){const token=new Token(chainId,address,decimals,symbol,name);return[...memo,token];}return memo;},[]);},[chainId,tokenAddressesNeededToFetch,names,symbols,tokenDecimals]);const pairsData=useMemo(()=>{const tokens=tokensNeededToFetch!==null&&tokensNeededToFetch!==void 0?tokensNeededToFetch:[];return tokens0.reduce((pairs,token0Address,index)=>{var _tokensDb$token0Addre,_tokensDb$token1Addre;if(!token0Address){return[...pairs,undefined];}const token1Address=tokens1[index];if(!token1Address){return[...pairs,undefined];}const token0=(_tokensDb$token0Addre=tokensDb[token0Address])!==null&&_tokensDb$token0Addre!==void 0?_tokensDb$token0Addre:tokens.find(t=>t.address===token0Address);const token1=(_tokensDb$token1Addre=tokensDb[token1Address])!==null&&_tokensDb$token1Addre!==void 0?_tokensDb$token1Addre:tokens.find(t=>t.address===token1Address);if(!token0||!token1){return[...pairs,undefined];}return[...pairs,[token0,token1]];},[]);},[tokensNeededToFetch,tokens0,tokens1,tokensDb]);return pairsData;}export function useTotalUbeEarned(){const{network}=useCelo();const{chainId}=network;const ube=chainId?UBE[chainId]:undefined;const stakingInfos=useStakingInfo();return useMemo(()=>{var _stakingInfos$filter$;if(!ube)return undefined;return(_stakingInfos$filter$=stakingInfos===null||stakingInfos===void 0?void 0:stakingInfos.filter(stakingInfo=>stakingInfo.rewardTokens.includes(ube)).reduce((accumulator,stakingInfo)=>{var _stakingInfo$earnedAm,_stakingInfo$earnedAm2;return accumulator.add((_stakingInfo$earnedAm=(_stakingInfo$earnedAm2=stakingInfo.earnedAmounts)===null||_stakingInfo$earnedAm2===void 0?void 0:_stakingInfo$earnedAm2.find(earnedAmount=>earnedAmount.token==ube))!==null&&_stakingInfo$earnedAm!==void 0?_stakingInfo$earnedAm:new TokenAmount(ube,'0'));},new TokenAmount(ube,'0')))!==null&&_stakingInfos$filter$!==void 0?_stakingInfos$filter$:new TokenAmount(ube,'0');},[stakingInfos,ube]);}export function useFilteredStakingInfo(stakingAddresses){const{network}=useCelo();const{chainId}=network;const ube=chainId?UBE[chainId]:undefined;const stakingInfos=useStakingInfo();return useMemo(()=>{if(!ube)return;return stakingInfos.filter(stakingInfo=>stakingInfo.stakingToken.address&&stakingAddresses.includes(stakingInfo.stakingToken.address));},[stakingInfos,ube,stakingAddresses]);}export function useFarmRewardsInfo(stakingAddresses){const{network}=useCelo();const{chainId}=network;const ube=chainId?UBE[chainId]:undefined;const stakingInfos=useStakingInfo();return useMemo(()=>{if(!ube)return;return stakingInfos.filter(stakingInfo=>stakingInfo.stakingToken.address&&stakingAddresses.includes(stakingInfo.stakingToken.address));},[stakingInfos,ube,stakingAddresses]);}// based on typed value\nexport function useDerivedStakeInfo(typedValue,stakingToken,userLiquidityUnstaked){const{address}=useCelo();const parsedInput=tryParseAmount(typedValue,stakingToken!==null&&stakingToken!==void 0?stakingToken:undefined);const parsedAmount=parsedInput&&userLiquidityUnstaked&&JSBI.lessThanOrEqual(parsedInput.raw,userLiquidityUnstaked.raw)?parsedInput:undefined;let error;if(!address){error='Connect Wallet';}if(!parsedAmount){var _error;error=(_error=error)!==null&&_error!==void 0?_error:'Enter an amount';}return{parsedAmount,error};}// based on typed value\nexport function useDerivedUnstakeInfo(typedValue,stakingAmount){const{address}=useCelo();const parsedInput=tryParseAmount(typedValue,stakingAmount.token);const parsedAmount=parsedInput&&JSBI.lessThanOrEqual(parsedInput.raw,stakingAmount.raw)?parsedInput:undefined;let error;if(!address){error='Connect Wallet';}if(!parsedAmount){var _error2;error=(_error2=error)!==null&&_error2!==void 0?_error2:'Enter an amount';}return{parsedAmount,error};}","map":{"version":3,"names":["ChainId","useCelo","useProvider","BigNumber","UbeswapChainId","JSBI","Token","TokenAmount","POOL_MANAGER","UBE","MoolaStakingRewards__factory","useAllTokens","useCurrentBlockTimestamp","zip","React","useEffect","useMemo","ERC_20_INTERFACE","STAKING_REWARDS_INTERFACE","UNISWAP_V2_PAIR_INTERFACE","usePoolManagerContract","useTokenContract","useFarmRegistry","NEVER_RELOAD","useMultipleContractSingleData","useSingleCallResult","useSingleContractMultipleData","tryParseAmount","useMultiStakeRewards","useStakingInfo","STAKING_GENESIS","ACTIVE_CONTRACT_UPDATED_THRESHOLD","UNPREDICTABLE_GAS_LIMIT_ERROR_CODE","useMultiRewardPools","library","farmSummaries","multiRewardPools","setMultiRewardPools","useState","call","useCallback","_asyncToGenerator","multiRwdPools","Promise","all","map","_ref2","fs","poolContract","connect","stakingAddress","rewardsTokens","externalStakingRwdAddresses","push","rewardsToken","periodFinish","isActive","Math","floor","Date","now","toNumber","baseContractFound","externalStakingRewardAddr","externalStakingRewards","e","code","console","log","length","address","underlyingPool","basePool","numRewards","active","_x","apply","arguments","usePairMultiStakingInfo","stakingInfo","_multiRewardPool$acti","_multiRewardPool$acti2","multiRewardPool","filter","x","toLowerCase","find","poolInfo","poolAddress","isTriple","dualPool","triplePool","undefined","useUnclaimedStakingRewards","_useSingleCallResult$","_poolsCountBigNumber$","_balances$reduce","_rewardRates$","network","chainId","ube","ubeContract","poolManagerContract","Mainnet","Alfajores","includes","poolsCountBigNumber","result","poolsCount","poolAddresses","useStakingPoolAddresses","balancesRaw","addr","balances","b","_b$result$","_b$result","from","balanceRemaining","reduce","sum","add","rewardRates","periodFinishes","amounts","_ref3","_rate$result","_finish$result","rate","finish","rawRate","finishTime","gt","mul","sub","earned","loading","amt","noncirculatingSupply","useStakingPools","pairToFilterBy","_useSingleCallResult$2","_poolsCountBigNumber$2","BAKLAVA","pools","useStakingPoolsInfo","stakingTokens","p","stakingToken","poolPairs","usePairDataFromAddresses","_pools$reduce$filter","memo","index","stakingRewardAddress","tokens","stakingRewardInfo","involvesToken","inputs","Array","keys","i","_p$result","EXTERNAL_POOLS","rewardToken","rewardTokenSymbol","weight","rawPools","nextPeriod","poolRewards","_nextPeriod$result","concat","pool","_poolRewards$i$result","_poolRewards$i","_poolRewards$i$result2","_objectSpread","nextPeriodRewards","pairAddresses","token0Data","token1Data","tokens0","t","_t$result","tokens1","_t$result2","tokensDb","tokenAddressesNeededToFetch","Set","names","symbols","tokenDecimals","tokensNeededToFetch","_tokenDecimals$index$","_names$index$result","_names$index$result2","_symbols$index$result","_symbols$index$result2","decimals","name","symbol","token","pairsData","pairs","token0Address","_tokensDb$token0Addre","_tokensDb$token1Addre","token1Address","token0","token1","useTotalUbeEarned","stakingInfos","_stakingInfos$filter$","rewardTokens","accumulator","_stakingInfo$earnedAm","_stakingInfo$earnedAm2","earnedAmounts","earnedAmount","useFilteredStakingInfo","stakingAddresses","useFarmRewardsInfo","useDerivedStakeInfo","typedValue","userLiquidityUnstaked","parsedInput","parsedAmount","lessThanOrEqual","raw","error","_error","useDerivedUnstakeInfo","stakingAmount","_error2"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/state/stake/hooks.ts"],"sourcesContent":["import { ChainId, useCelo, useProvider } from '@celo/react-celo'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { ChainId as UbeswapChainId, JSBI, Pair, Token, TokenAmount } from '@ubeswap/sdk'\nimport { POOL_MANAGER } from 'constants/poolManager'\nimport { UBE } from 'constants/tokens'\nimport { MoolaStakingRewards__factory, PoolManager } from 'generated/'\nimport { useAllTokens } from 'hooks/Tokens'\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\nimport zip from 'lodash/zip'\n// Hooks\nimport React, { useEffect, useMemo } from 'react'\n\nimport ERC_20_INTERFACE from '../../constants/abis/erc20'\nimport { STAKING_REWARDS_INTERFACE } from '../../constants/abis/staking-rewards'\n// Interfaces\nimport { UNISWAP_V2_PAIR_INTERFACE } from '../../constants/abis/uniswap-v2-pair'\nimport { usePoolManagerContract, useTokenContract } from '../../hooks/useContract'\nimport { useFarmRegistry } from '../../pages/Earn/useFarmRegistry'\nimport {\n  NEVER_RELOAD,\n  useMultipleContractSingleData,\n  useSingleCallResult,\n  useSingleContractMultipleData,\n} from '../multicall/hooks'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useMultiStakeRewards } from './useDualStakeRewards'\nimport useStakingInfo from './useStakingInfo'\n\nexport const STAKING_GENESIS = 1619100000\nconst ACTIVE_CONTRACT_UPDATED_THRESHOLD = 5259492\nconst UNPREDICTABLE_GAS_LIMIT_ERROR_CODE = 'UNPREDICTABLE_GAS_LIMIT'\n\nexport interface StakingInfo {\n  // the address of the reward contract\n  readonly stakingRewardAddress: string | undefined\n  // the token of the liquidity pool\n  readonly stakingToken: Token\n  // the tokens involved in this pair\n  readonly tokens: readonly [Token, Token]\n  // the amount of token currently staked, or undefined if no account\n  readonly stakedAmount?: TokenAmount\n  // the total amount of token staked in the contract\n  readonly totalStakedAmount: TokenAmount\n  // the amount of reward tokens earned by the active account, or undefined if no account\n  readonly earnedAmounts?: TokenAmount[]\n  // the current amount of token distributed to the active account per second.\n  // equivalent to percent of total supply * reward rate\n  readonly rewardRates?: TokenAmount[]\n  // the amount of token distributed per second to all LPs, constant\n  readonly totalRewardRates: TokenAmount[]\n  // when the period ends\n  readonly periodFinish: Date | undefined\n  // if pool is active\n  readonly active: boolean\n  // calculates a hypothetical amount of token distributed to the active account per second.\n  readonly getHypotheticalRewardRate: (\n    stakedAmount: TokenAmount,\n    totalStakedAmount: TokenAmount,\n    totalRewardRates: TokenAmount[]\n  ) => TokenAmount[]\n  readonly nextPeriodRewards: TokenAmount\n  readonly poolInfo: IRawPool\n  readonly rewardTokens: Token[]\n}\n\ntype MultiRewardPool = {\n  address: string\n  underlyingPool: string\n  basePool: string\n  numRewards: number\n  active: boolean\n}\n\nexport const useMultiRewardPools = (): MultiRewardPool[] => {\n  const library = useProvider()\n  const farmSummaries = useFarmRegistry()\n\n  const [multiRewardPools, setMultiRewardPools] = React.useState<MultiRewardPool[]>([])\n\n  const call = React.useCallback(async () => {\n    const multiRwdPools: MultiRewardPool[] = []\n\n    await Promise.all(\n      farmSummaries.map(async (fs) => {\n        let poolContract = MoolaStakingRewards__factory.connect(fs.stakingAddress, library)\n        const rewardsTokens = []\n        const externalStakingRwdAddresses = []\n\n        // the first reward token at the top level\n        rewardsTokens.push(await poolContract.rewardsToken())\n\n        // last time the contract was updated - set isActive to false if it has been longer than 2 months\n        let periodFinish = await poolContract.periodFinish()\n        let isActive = Math.floor(Date.now() / 1000) - periodFinish.toNumber() < ACTIVE_CONTRACT_UPDATED_THRESHOLD\n\n        let baseContractFound = false\n        // recursivley find underlying and base pool contracts\n        while (!baseContractFound) {\n          try {\n            // find the underlying contract if one exists\n            const externalStakingRewardAddr = await poolContract.externalStakingRewards()\n            externalStakingRwdAddresses.push(externalStakingRewardAddr)\n\n            // capture the contract's reward token\n            poolContract = MoolaStakingRewards__factory.connect(externalStakingRewardAddr, library)\n            rewardsTokens.push(await poolContract.rewardsToken())\n\n            // determine if the underlying contract is active or not\n            periodFinish = await poolContract.periodFinish()\n            isActive =\n              Math.floor(Date.now() / 1000) - periodFinish.toNumber() < ACTIVE_CONTRACT_UPDATED_THRESHOLD || isActive\n          } catch (e: any) {\n            //if the error is not what is expected - log it\n            if (e.code !== UNPREDICTABLE_GAS_LIMIT_ERROR_CODE) {\n              console.log(e)\n            }\n\n            //set true when externalStakingRewards() throws an error\n            baseContractFound = true\n          }\n        }\n\n        if (externalStakingRwdAddresses.length) {\n          multiRwdPools.push({\n            address: fs.stakingAddress,\n            underlyingPool: externalStakingRwdAddresses[0],\n            basePool: externalStakingRwdAddresses[externalStakingRwdAddresses.length - 1],\n            numRewards: rewardsTokens.length,\n            active: isActive,\n          })\n        }\n      })\n    )\n    setMultiRewardPools(multiRwdPools)\n  }, [farmSummaries, library])\n\n  useEffect(() => {\n    call()\n  }, [call])\n\n  return multiRewardPools\n}\n\nexport const usePairMultiStakingInfo = (\n  stakingInfo: StakingInfo | undefined,\n  stakingAddress: string\n): StakingInfo | null => {\n  const multiRewardPools = useMultiRewardPools()\n\n  const multiRewardPool = useMemo(() => {\n    return multiRewardPools\n      .filter((x) => x.address.toLowerCase() === stakingAddress.toLowerCase())\n      .find((x) => x.basePool.toLowerCase() === stakingInfo?.poolInfo.poolAddress.toLowerCase())\n  }, [multiRewardPools, stakingAddress, stakingInfo?.poolInfo.poolAddress])\n\n  const isTriple = multiRewardPool?.numRewards === 3\n\n  const dualPool = useMultiStakeRewards(\n    isTriple ? multiRewardPool?.underlyingPool : multiRewardPool?.address,\n    stakingInfo,\n    2,\n    isTriple ? true : multiRewardPool?.active ?? false\n  )\n  const triplePool = useMultiStakeRewards(\n    isTriple ? multiRewardPool?.address : undefined,\n    dualPool,\n    3,\n    multiRewardPool?.active ?? false\n  )\n  return triplePool || dualPool\n}\n\ninterface UnclaimedInfo {\n  /**\n   * Total tokens left in the contract\n   */\n  balanceRemaining: BigNumber | null\n  /**\n   * Earned but unclaimed tokens\n   */\n  earned: BigNumber | null\n  /**\n   * Tokens not in the circulating supply\n   */\n  noncirculatingSupply: BigNumber | null\n}\n\nexport const useUnclaimedStakingRewards = (): UnclaimedInfo => {\n  const { network } = useCelo()\n  const { chainId } = network\n  const ube = chainId ? UBE[chainId as unknown as UbeswapChainId] : undefined\n  const ubeContract = useTokenContract(ube?.address)\n  const poolManagerContract = usePoolManagerContract(\n    [ChainId.Mainnet, ChainId.Alfajores].includes(chainId) ? POOL_MANAGER[chainId] : undefined\n  )\n  const poolsCountBigNumber = useSingleCallResult(poolManagerContract, 'poolsCount').result?.[0] as\n    | BigNumber\n    | undefined\n  const poolsCount = poolsCountBigNumber?.toNumber() ?? 0\n  const poolAddresses = useStakingPoolAddresses(poolManagerContract, poolsCount)\n\n  // compute amount that is locked up\n  const balancesRaw = useSingleContractMultipleData(\n    ubeContract,\n    'balanceOf',\n    poolAddresses.map((addr) => [addr])\n  )\n  const balances = balancesRaw.find((b) => !b.result)\n    ? null\n    : (balancesRaw.map((b) => b.result?.[0] ?? BigNumber.from(0)) as readonly BigNumber[])\n  const balanceRemaining = balances?.reduce((sum, b) => b.add(sum), BigNumber.from(0)) ?? null\n\n  // tokens per second, constants\n  const rewardRates = useMultipleContractSingleData(\n    poolAddresses,\n    STAKING_REWARDS_INTERFACE,\n    'rewardRate',\n    undefined,\n    NEVER_RELOAD\n  )\n\n  const periodFinishes = useMultipleContractSingleData(\n    poolAddresses,\n    STAKING_REWARDS_INTERFACE,\n    'periodFinish',\n    undefined,\n    NEVER_RELOAD\n  )\n\n  const now = useCurrentBlockTimestamp()\n  const amounts = now\n    ? zip(rewardRates, periodFinishes).map(([rate, finish]): BigNumber => {\n        const rawRate = rate?.result?.[0] as BigNumber | undefined\n        const finishTime = finish?.result?.[0] as BigNumber | undefined\n        if (rawRate && finishTime && finishTime.gt(now)) {\n          return rawRate.mul(finishTime.sub(now).toNumber())\n        }\n        return BigNumber.from(0)\n      })\n    : undefined\n  const earned =\n    rewardRates?.[0]?.loading || !amounts ? null : amounts.reduce((sum, amt) => sum.add(amt), BigNumber.from(0))\n\n  return {\n    balanceRemaining,\n    earned,\n    noncirculatingSupply: balanceRemaining && earned ? balanceRemaining.sub(earned) : null,\n  }\n}\n\ninterface IStakingPool {\n  stakingRewardAddress: string\n  tokens?: readonly [Token, Token]\n  poolInfo: IRawPool\n}\n\nexport function useStakingPools(pairToFilterBy?: Pair | null, stakingAddress?: string): readonly IStakingPool[] {\n  const { network } = useCelo()\n  const chainId = network.chainId as unknown as UbeswapChainId\n  const ube = chainId ? UBE[chainId] : undefined\n\n  const poolManagerContract = usePoolManagerContract(\n    chainId !== UbeswapChainId.BAKLAVA ? POOL_MANAGER[chainId] : undefined\n  )\n  const poolsCountBigNumber = useSingleCallResult(poolManagerContract, 'poolsCount').result?.[0] as\n    | BigNumber\n    | undefined\n  const poolsCount = poolsCountBigNumber?.toNumber() ?? 0\n\n  const poolAddresses = useStakingPoolAddresses(poolManagerContract, poolsCount)\n  const pools = useStakingPoolsInfo(poolManagerContract, poolAddresses)\n\n  const stakingTokens = pools.map((p) => p?.stakingToken as string)\n  const poolPairs = usePairDataFromAddresses(stakingTokens)\n\n  return useMemo(() => {\n    if (!ube || !pools || !poolPairs) return []\n\n    return (\n      pools\n        .reduce((memo: IStakingPool[], poolInfo, index) => {\n          return [\n            ...memo,\n            {\n              stakingRewardAddress: poolInfo.poolAddress,\n              tokens: poolPairs[index],\n              poolInfo,\n            },\n          ]\n        }, [])\n        .filter((stakingRewardInfo) => {\n          if (stakingAddress) {\n            return stakingAddress.toLowerCase() === stakingRewardInfo.stakingRewardAddress.toLowerCase()\n          }\n          if (pairToFilterBy === undefined) {\n            return true\n          }\n          if (pairToFilterBy === null) {\n            return false\n          }\n          return (\n            stakingRewardInfo.tokens &&\n            pairToFilterBy.involvesToken(stakingRewardInfo.tokens[0]) &&\n            pairToFilterBy.involvesToken(stakingRewardInfo.tokens[1])\n          )\n        }) ?? []\n    )\n  }, [ube, pools, poolPairs, pairToFilterBy, stakingAddress])\n}\n\nexport function useStakingPoolAddresses(\n  poolManagerContract: PoolManager | null,\n  poolsCount: number\n): readonly string[] {\n  // Get rewards pools addresses\n  const inputs = [...Array(poolsCount).keys()].map((i) => [i])\n  const poolAddresses = useSingleContractMultipleData(poolManagerContract, 'poolsByIndex', inputs)\n\n  return useMemo(() => {\n    return !poolAddresses.length || !poolAddresses[0] || poolAddresses[0].loading\n      ? []\n      : poolAddresses.map((p) => p?.result?.[0]).filter((x): x is string => !!x)\n  }, [poolAddresses])\n}\n\ninterface IRawPool {\n  index: number\n  stakingToken: string\n  poolAddress: string\n  weight: number\n  rewardToken?: string\n  rewardTokenSymbol?: string\n  nextPeriod?: number\n  nextPeriodRewards?: BigNumber | null\n}\n\nconst EXTERNAL_POOLS: IRawPool[] = [\n  {\n    index: -1,\n    poolAddress: '0x33F819986FE80A4f4A9032260A24770918511849',\n    stakingToken: '0xF97E6168283e38FC42725082FC63b47B6cD16B18',\n    rewardToken: '0x18414Ce6dAece0365f935F3e78A7C1993e77d8Cd',\n    rewardTokenSymbol: 'LAPIS',\n    weight: 0,\n  },\n  {\n    index: -1,\n    poolAddress: '0xD409B7C4F67F5C845c53505b3d3B5aCD44e479AB',\n    stakingToken: '0x573bcEBD09Ff805eD32df2cb1A968418DC74DCf7',\n    rewardToken: '0x18414Ce6dAece0365f935F3e78A7C1993e77d8Cd',\n    rewardTokenSymbol: 'LAPIS',\n    weight: 0,\n  },\n  {\n    index: -1,\n    poolAddress: '0x478b8D37eE976228d17704d95B5430Cd93a31b87',\n    stakingToken: '0x12E42ccf14B283Ef0a36A791892D18BF75Da5c80',\n    rewardToken: '0x94140c2eA9D208D8476cA4E3045254169791C59e',\n    rewardTokenSymbol: 'PREMIO',\n    weight: 0,\n  },\n]\n\nexport function useStakingPoolsInfo(\n  poolManagerContract: PoolManager | null,\n  poolAddresses: readonly string[]\n): readonly IRawPool[] {\n  const pools = useSingleContractMultipleData(\n    poolManagerContract,\n    'pools',\n    poolAddresses.map((addr) => [addr])\n  )\n\n  const rawPools = useMemo(() => {\n    return !pools || !pools[0] || pools[0].loading\n      ? []\n      : pools.map((p) => p?.result as unknown as IRawPool | undefined).filter((x): x is IRawPool => !!x)\n  }, [pools])\n\n  const nextPeriod = useSingleCallResult(poolManagerContract, 'nextPeriod')\n  const poolRewards = useSingleContractMultipleData(\n    poolManagerContract,\n    'computeAmountForPool',\n    rawPools.map((p) => [p.stakingToken, nextPeriod?.result?.[0]])\n  )\n  return rawPools.concat(EXTERNAL_POOLS).map((pool, i) => ({\n    ...pool,\n    nextPeriodRewards: poolRewards?.[i]?.result?.[0] ?? null,\n  }))\n}\n\nexport function usePairDataFromAddresses(\n  pairAddresses: readonly string[]\n): readonly (readonly [Token, Token] | undefined)[] {\n  const { network } = useCelo()\n  const chainId = network.chainId as unknown as UbeswapChainId\n\n  const token0Data = useMultipleContractSingleData(\n    pairAddresses,\n    UNISWAP_V2_PAIR_INTERFACE,\n    'token0',\n    undefined,\n    NEVER_RELOAD\n  )\n\n  const token1Data = useMultipleContractSingleData(\n    pairAddresses,\n    UNISWAP_V2_PAIR_INTERFACE,\n    'token1',\n    undefined,\n    NEVER_RELOAD\n  )\n\n  const tokens0 = token0Data.map((t) => t?.result?.[0] as string | undefined)\n  const tokens1 = token1Data.map((t) => t?.result?.[0] as string | undefined)\n  const tokensDb = useAllTokens()\n\n  // Construct a set of all the unique token addresses that are not in the tokenlists.\n  const tokenAddressesNeededToFetch = useMemo(\n    () =>\n      [...new Set([...tokens0, ...tokens1])].filter((addr): addr is string => addr !== undefined && !tokensDb[addr]),\n    [tokensDb, tokens0, tokens1]\n  )\n\n  const names = useMultipleContractSingleData(\n    tokenAddressesNeededToFetch,\n    ERC_20_INTERFACE,\n    'name',\n    undefined,\n    NEVER_RELOAD\n  )\n\n  const symbols = useMultipleContractSingleData(\n    tokenAddressesNeededToFetch,\n    ERC_20_INTERFACE,\n    'symbol',\n    undefined,\n    NEVER_RELOAD\n  )\n\n  const tokenDecimals = useMultipleContractSingleData(\n    tokenAddressesNeededToFetch,\n    ERC_20_INTERFACE,\n    'decimals',\n    undefined,\n    NEVER_RELOAD\n  )\n\n  // Construct the full token data\n  const tokensNeededToFetch: readonly Token[] | null = useMemo(() => {\n    if (!tokenAddressesNeededToFetch.length || !names.length || !symbols.length || !tokenDecimals.length) return null\n    if (names[0].loading || tokenDecimals[0].loading || symbols[0].loading) return null\n    if (!names[0].result || !tokenDecimals[0].result || !symbols[0].result) return null\n\n    return tokenAddressesNeededToFetch.reduce((memo: Token[], address, index) => {\n      const decimals = tokenDecimals[index].result?.[0]\n      const name = names[index].result?.[0] === 'Celo Gold' ? 'Celo' : names[index].result?.[0]\n      const symbol = symbols[index].result?.[0] === 'cGLD' ? 'CELO' : symbols[index].result?.[0] // todo - remove hardcoded symbol swap for CELO\n\n      // Sometimes, decimals/name/symbol can be undefined, causing an error. TODO: Look into a root cause\n      if (chainId && address && decimals && symbol && name) {\n        const token = new Token(chainId, address, decimals, symbol, name)\n        return [...memo, token]\n      }\n      return memo\n    }, [])\n  }, [chainId, tokenAddressesNeededToFetch, names, symbols, tokenDecimals])\n\n  const pairsData: readonly (readonly [Token, Token] | undefined)[] = useMemo(() => {\n    const tokens = tokensNeededToFetch ?? []\n    return tokens0.reduce((pairs: readonly (readonly [Token, Token] | undefined)[], token0Address, index) => {\n      if (!token0Address) {\n        return [...pairs, undefined]\n      }\n      const token1Address = tokens1[index]\n      if (!token1Address) {\n        return [...pairs, undefined]\n      }\n      const token0 = tokensDb[token0Address] ?? tokens.find((t) => t.address === token0Address)\n      const token1 = tokensDb[token1Address] ?? tokens.find((t) => t.address === token1Address)\n      if (!token0 || !token1) {\n        return [...pairs, undefined]\n      }\n      return [...pairs, [token0, token1]]\n    }, [])\n  }, [tokensNeededToFetch, tokens0, tokens1, tokensDb])\n\n  return pairsData\n}\n\nexport function useTotalUbeEarned(): TokenAmount | undefined {\n  const { network } = useCelo()\n  const { chainId } = network\n  const ube = chainId ? UBE[chainId as unknown as UbeswapChainId] : undefined\n  const stakingInfos = useStakingInfo()\n\n  return useMemo(() => {\n    if (!ube) return undefined\n    return (\n      stakingInfos\n        ?.filter((stakingInfo) => stakingInfo.rewardTokens.includes(ube))\n        .reduce(\n          (accumulator, stakingInfo) =>\n            accumulator.add(\n              stakingInfo.earnedAmounts?.find((earnedAmount) => earnedAmount.token == ube) ?? new TokenAmount(ube, '0')\n            ),\n          new TokenAmount(ube, '0')\n        ) ?? new TokenAmount(ube, '0')\n    )\n  }, [stakingInfos, ube])\n}\n\nexport function useFilteredStakingInfo(stakingAddresses: string[]): readonly StakingInfo[] | undefined {\n  const { network } = useCelo()\n  const { chainId } = network\n  const ube = chainId ? UBE[chainId as unknown as UbeswapChainId] : undefined\n  const stakingInfos = useStakingInfo()\n  return useMemo(() => {\n    if (!ube) return\n    return stakingInfos.filter(\n      (stakingInfo) => stakingInfo.stakingToken.address && stakingAddresses.includes(stakingInfo.stakingToken.address)\n    )\n  }, [stakingInfos, ube, stakingAddresses])\n}\n\nexport function useFarmRewardsInfo(stakingAddresses: string[]): readonly StakingInfo[] | undefined {\n  const { network } = useCelo()\n  const { chainId } = network\n  const ube = chainId ? UBE[chainId as unknown as UbeswapChainId] : undefined\n  const stakingInfos = useStakingInfo()\n  return useMemo(() => {\n    if (!ube) return\n    return stakingInfos.filter(\n      (stakingInfo) => stakingInfo.stakingToken.address && stakingAddresses.includes(stakingInfo.stakingToken.address)\n    )\n  }, [stakingInfos, ube, stakingAddresses])\n}\n\n// based on typed value\nexport function useDerivedStakeInfo(\n  typedValue: string,\n  stakingToken: Token | null | undefined,\n  userLiquidityUnstaked: TokenAmount | undefined\n): {\n  parsedAmount?: TokenAmount\n  error?: string\n} {\n  const { address } = useCelo()\n\n  const parsedInput: TokenAmount | undefined = tryParseAmount(typedValue, stakingToken ?? undefined)\n\n  const parsedAmount =\n    parsedInput && userLiquidityUnstaked && JSBI.lessThanOrEqual(parsedInput.raw, userLiquidityUnstaked.raw)\n      ? parsedInput\n      : undefined\n\n  let error: string | undefined\n  if (!address) {\n    error = 'Connect Wallet'\n  }\n  if (!parsedAmount) {\n    error = error ?? 'Enter an amount'\n  }\n\n  return {\n    parsedAmount,\n    error,\n  }\n}\n\n// based on typed value\nexport function useDerivedUnstakeInfo(\n  typedValue: string,\n  stakingAmount: TokenAmount\n): {\n  parsedAmount?: TokenAmount\n  error?: string\n} {\n  const { address } = useCelo()\n\n  const parsedInput: TokenAmount | undefined = tryParseAmount(typedValue, stakingAmount.token)\n\n  const parsedAmount = parsedInput && JSBI.lessThanOrEqual(parsedInput.raw, stakingAmount.raw) ? parsedInput : undefined\n\n  let error: string | undefined\n  if (!address) {\n    error = 'Connect Wallet'\n  }\n  if (!parsedAmount) {\n    error = error ?? 'Enter an amount'\n  }\n\n  return {\n    parsedAmount,\n    error,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}