{"ast":null,"code":"/**\n * Given a URI that may be ipfs, ipns, http, or https protocol, return the fetch-able http(s) URLs for the same content\n * @param uri to convert to fetch-able http url\n */\nexport default function uriToHttp(uri) {\n  const protocol = uri.split(':')[0].toLowerCase();\n  switch (protocol) {\n    case 'https':\n      return [uri];\n    case 'http':\n      return ['https' + uri.substr(4), uri];\n    case 'ipfs':\n      {\n        var _uri$match;\n        const hash = (_uri$match = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)) === null || _uri$match === void 0 ? void 0 : _uri$match[2];\n        return [\"https://cloudflare-ipfs.com/ipfs/\".concat(hash, \"/\"), \"https://ipfs.io/ipfs/\".concat(hash, \"/\")];\n      }\n    case 'ipns':\n      {\n        var _uri$match2;\n        const name = (_uri$match2 = uri.match(/^ipns:(\\/\\/)?(.*)$/i)) === null || _uri$match2 === void 0 ? void 0 : _uri$match2[2];\n        return [\"https://cloudflare-ipfs.com/ipns/\".concat(name, \"/\"), \"https://ipfs.io/ipns/\".concat(name, \"/\")];\n      }\n    default:\n      return [];\n  }\n}","map":{"version":3,"names":["uriToHttp","uri","protocol","split","toLowerCase","substr","_uri$match","hash","match","concat","_uri$match2","name"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/utils/uriToHttp.ts"],"sourcesContent":["/**\n * Given a URI that may be ipfs, ipns, http, or https protocol, return the fetch-able http(s) URLs for the same content\n * @param uri to convert to fetch-able http url\n */\nexport default function uriToHttp(uri: string): string[] {\n  const protocol = uri.split(':')[0].toLowerCase()\n  switch (protocol) {\n    case 'https':\n      return [uri]\n    case 'http':\n      return ['https' + uri.substr(4), uri]\n    case 'ipfs': {\n      const hash = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)?.[2]\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`]\n    }\n    case 'ipns': {\n      const name = uri.match(/^ipns:(\\/\\/)?(.*)$/i)?.[2]\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`]\n    }\n    default:\n      return []\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,SAASA,SAASA,CAACC,GAAW,EAAY;EACvD,MAAMC,QAAQ,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAChD,QAAQF,QAAQ;IACd,KAAK,OAAO;MACV,OAAO,CAACD,GAAG,CAAC;IACd,KAAK,MAAM;MACT,OAAO,CAAC,OAAO,GAAGA,GAAG,CAACI,MAAM,CAAC,CAAC,CAAC,EAAEJ,GAAG,CAAC;IACvC,KAAK,MAAM;MAAE;QAAA,IAAAK,UAAA;QACX,MAAMC,IAAI,IAAAD,UAAA,GAAGL,GAAG,CAACO,KAAK,CAAC,qBAAqB,CAAC,cAAAF,UAAA,uBAAhCA,UAAA,CAAmC,CAAC,CAAC;QAClD,OAAO,qCAAAG,MAAA,CAAqCF,IAAI,gCAAAE,MAAA,CAA6BF,IAAI,OAAI;MACvF;IACA,KAAK,MAAM;MAAE;QAAA,IAAAG,WAAA;QACX,MAAMC,IAAI,IAAAD,WAAA,GAAGT,GAAG,CAACO,KAAK,CAAC,qBAAqB,CAAC,cAAAE,WAAA,uBAAhCA,WAAA,CAAmC,CAAC,CAAC;QAClD,OAAO,qCAAAD,MAAA,CAAqCE,IAAI,gCAAAF,MAAA,CAA6BE,IAAI,OAAI;MACvF;IACA;MACE,OAAO,EAAE;EACb;AACF"},"metadata":{},"sourceType":"module"}