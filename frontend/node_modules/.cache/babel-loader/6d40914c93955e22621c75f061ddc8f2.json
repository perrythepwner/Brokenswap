{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAsyncMiddleware = void 0;\n/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n */\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (req, res, next, end) {\n      // nextPromise is the key to the implementation\n      // it is resolved by the return handler passed to the\n      // \"next\" function\n      let resolveNextPromise;\n      const nextPromise = new Promise(resolve => {\n        resolveNextPromise = resolve;\n      });\n      let returnHandlerCallback = null;\n      let nextWasCalled = false;\n      // This will be called by the consumer's async middleware.\n      const asyncNext = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* () {\n          nextWasCalled = true;\n          // We pass a return handler to next(). When it is called by the engine,\n          // the consumer's async middleware will resume executing.\n          // eslint-disable-next-line node/callback-return\n          next(runReturnHandlersCallback => {\n            // This callback comes from JsonRpcEngine._runReturnHandlers\n            returnHandlerCallback = runReturnHandlersCallback;\n            resolveNextPromise();\n          });\n          yield nextPromise;\n        });\n        return function asyncNext() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n      try {\n        yield asyncMiddleware(req, res, asyncNext);\n        if (nextWasCalled) {\n          yield nextPromise; // we must wait until the return handler is called\n          returnHandlerCallback(null);\n        } else {\n          end(null);\n        }\n      } catch (error) {\n        if (returnHandlerCallback) {\n          returnHandlerCallback(error);\n        } else {\n          end(error);\n        }\n      }\n    });\n    return function (_x, _x2, _x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\nexports.createAsyncMiddleware = createAsyncMiddleware;","map":{"version":3,"sources":["../src/createAsyncMiddleware.ts"],"names":[],"mappings":";;;;;;;AAgBA;;;;;;;;;;;;;;;;AAgBG;AACH,SAAgB,qBAAqB,CACnC,eAA6C,EAAA;EAE7C;IAAA,IAAA,IAAA,GAAA,iBAAA,CAAO,WAAO,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAI;MACnC;MACA;MACA;MACA,IAAI,kBAA8B;MAClC,MAAM,WAAW,GAAG,IAAI,OAAO,CAAE,OAAO,IAAI;QAC1C,kBAAkB,GAAG,OAAO;MAC9B,CAAC,CAAC;MAEF,IAAI,qBAAqB,GAAY,IAAI;MACzC,IAAI,aAAa,GAAG,KAAK;MAEzB;MACA,MAAM,SAAS;QAAA,IAAA,KAAA,GAAA,iBAAA,CAAG,aAAW;UAC3B,aAAa,GAAG,IAAI;UAEpB;UACA;UACA;UACA,IAAI,CAAE,yBAAyB,IAAI;YACjC;YACA,qBAAqB,GAAG,yBAAyB;YACjD,kBAAkB,CAAA,CAAE;UACtB,CAAC,CAAC;UACF,MAAM,WAAW;QACnB,CAAC;QAAA,gBAZK,SAAS,CAAA;UAAA,OAAA,KAAA,CAAA,KAAA,OAAA,SAAA;QAAA;MAAA,GAYd;MAED,IAAI;QACF,MAAM,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,SAAS,CAAC;QAE1C,IAAI,aAAa,EAAE;UACjB,MAAM,WAAW,CAAC,CAAC;UAClB,qBAA+C,CAAC,IAAI,CAAC;SACvD,MAAM;UACL,GAAG,CAAC,IAAI,CAAC;QACV;OACF,CAAC,OAAO,KAAK,EAAE;QACd,IAAI,qBAAqB,EAAE;UACxB,qBAA+C,CAAC,KAAK,CAAC;SACxD,MAAM;UACL,GAAG,CAAC,KAAK,CAAC;QACX;MACF;IACH,CAAC;IAAA,iBAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA;MAAA,OAAA,IAAA,CAAA,KAAA,OAAA,SAAA;IAAA;EAAA;AACH;AA/CA,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createAsyncMiddleware = void 0;\n/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n */\nfunction createAsyncMiddleware(asyncMiddleware) {\n    return async (req, res, next, end) => {\n        // nextPromise is the key to the implementation\n        // it is resolved by the return handler passed to the\n        // \"next\" function\n        let resolveNextPromise;\n        const nextPromise = new Promise((resolve) => {\n            resolveNextPromise = resolve;\n        });\n        let returnHandlerCallback = null;\n        let nextWasCalled = false;\n        // This will be called by the consumer's async middleware.\n        const asyncNext = async () => {\n            nextWasCalled = true;\n            // We pass a return handler to next(). When it is called by the engine,\n            // the consumer's async middleware will resume executing.\n            // eslint-disable-next-line node/callback-return\n            next((runReturnHandlersCallback) => {\n                // This callback comes from JsonRpcEngine._runReturnHandlers\n                returnHandlerCallback = runReturnHandlersCallback;\n                resolveNextPromise();\n            });\n            await nextPromise;\n        };\n        try {\n            await asyncMiddleware(req, res, asyncNext);\n            if (nextWasCalled) {\n                await nextPromise; // we must wait until the return handler is called\n                returnHandlerCallback(null);\n            }\n            else {\n                end(null);\n            }\n        }\n        catch (error) {\n            if (returnHandlerCallback) {\n                returnHandlerCallback(error);\n            }\n            else {\n                end(error);\n            }\n        }\n    };\n}\nexports.createAsyncMiddleware = createAsyncMiddleware;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlQXN5bmNNaWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NyZWF0ZUFzeW5jTWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFnQkE7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFDSCxTQUFnQixxQkFBcUIsQ0FDbkMsZUFBNkM7SUFFN0MsT0FBTyxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDbkMsK0NBQStDO1FBQy9DLHFEQUFxRDtRQUNyRCxrQkFBa0I7UUFDbEIsSUFBSSxrQkFBOEIsQ0FBQztRQUNuQyxNQUFNLFdBQVcsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztRQUVILElBQUkscUJBQXFCLEdBQVksSUFBSSxDQUFDO1FBQzFDLElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztRQUUxQiwwREFBMEQ7UUFDMUQsTUFBTSxTQUFTLEdBQUcsS0FBSyxJQUFJLEVBQUU7WUFDM0IsYUFBYSxHQUFHLElBQUksQ0FBQztZQUVyQix1RUFBdUU7WUFDdkUseURBQXlEO1lBQ3pELGdEQUFnRDtZQUNoRCxJQUFJLENBQUMsQ0FBQyx5QkFBeUIsRUFBRSxFQUFFO2dCQUNqQyw0REFBNEQ7Z0JBQzVELHFCQUFxQixHQUFHLHlCQUF5QixDQUFDO2dCQUNsRCxrQkFBa0IsRUFBRSxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxXQUFXLENBQUM7UUFDcEIsQ0FBQyxDQUFDO1FBRUYsSUFBSTtZQUNGLE1BQU0sZUFBZSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFM0MsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLE1BQU0sV0FBVyxDQUFDLENBQUMsa0RBQWtEO2dCQUNwRSxxQkFBK0MsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN4RDtpQkFBTTtnQkFDTCxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDWDtTQUNGO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxJQUFJLHFCQUFxQixFQUFFO2dCQUN4QixxQkFBK0MsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN6RDtpQkFBTTtnQkFDTCxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDWjtTQUNGO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQS9DRCxzREErQ0MifQ=="]},"metadata":{},"sourceType":"script"}