{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContainerTreeViewClass = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst basic_1 = require(\"../type/basic\");\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\n/**\n * Intented usage:\n *\n * - Get initial BeaconState from disk.\n * - Before applying next block, switch to mutable\n * - Get some field, create a view in mutable mode\n * - Do modifications of the state in the state transition function\n * - When done, commit and apply new root node once to og BeaconState\n * - However, keep all the caches and transfer them to the new BeaconState\n *\n * Questions:\n * - Can the child views created in mutable mode switch to not mutable? If so, it seems that it needs to recursively\n *   iterate the entire data structure and views\n *\n */\nclass ContainerTreeView extends abstract_1.TreeView {\n  constructor(type, tree) {\n    super();\n    this.type = type;\n    this.tree = tree;\n  }\n  get node() {\n    return this.tree.rootNode;\n  }\n}\nfunction getContainerTreeViewClass(type) {\n  class CustomContainerTreeView extends ContainerTreeView {}\n  // Dynamically define prototype methods\n  for (let index = 0; index < type.fieldsEntries.length; index++) {\n    const {\n      fieldName,\n      fieldType\n    } = type.fieldsEntries[index];\n    // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n    // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n    // and use the cached views array to store the new node.\n    if (basic_1.isBasicType(fieldType)) {\n      Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // TODO: Review the memory cost of this closures\n        get: function get() {\n          const leafNode = persistent_merkle_tree_1.getNodeAtDepth(this.node, this.type.depth, index);\n          return fieldType.tree_getFromNode(leafNode);\n        },\n        set: function set(value) {\n          const leafNodePrev = persistent_merkle_tree_1.getNodeAtDepth(this.node, this.type.depth, index);\n          const leafNode = leafNodePrev.clone();\n          fieldType.tree_setToNode(leafNode, value);\n          this.tree.setNodeAtDepth(this.type.depth, index, leafNode);\n        }\n      });\n    }\n    // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n    // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n    // set it to the parent tree in the field gindex.\n    else if (composite_1.isCompositeType(fieldType)) {\n      Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // Returns TreeView of fieldName\n        get: function get() {\n          const gindex = persistent_merkle_tree_1.toGindexBitstring(this.type.depth, index);\n          return fieldType.getView(this.tree.getSubtree(gindex));\n        },\n        // Expects TreeView of fieldName\n        set: function set(value) {\n          const node = fieldType.commitView(value);\n          this.tree.setNodeAtDepth(this.type.depth, index, node);\n        }\n      });\n    }\n    // Should never happen\n    else {\n      /* istanbul ignore next - unreachable code */\n      throw Error(\"Unknown fieldType \".concat(fieldType.typeName, \" for fieldName \").concat(fieldName));\n    }\n  }\n  // Change class name\n  Object.defineProperty(CustomContainerTreeView, \"name\", {\n    value: type.typeName,\n    writable: false\n  });\n  return CustomContainerTreeView;\n}\nexports.getContainerTreeViewClass = getContainerTreeViewClass;","map":null,"metadata":{},"sourceType":"script"}