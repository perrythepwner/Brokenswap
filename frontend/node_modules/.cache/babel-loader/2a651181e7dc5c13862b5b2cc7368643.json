{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mapAddressListDataOnto = exports.mapAddressListOnto = exports.findAddressIndex = exports.NULL_ADDRESS = exports.bufferToHex = exports.hexToBuffer = exports.isHexString = exports.getAddressChunks = exports.ensureLeading0x = exports.trimLeading0x = exports.normalizeAddressWith0x = exports.isNullAddress = exports.normalizeAddress = exports.eqAddress = void 0;\nvar HEX_REGEX = /^0x[0-9A-F]*$/i;\nvar eqAddress = function eqAddress(a, b) {\n  return (0, exports.normalizeAddress)(a) === (0, exports.normalizeAddress)(b);\n};\nexports.eqAddress = eqAddress;\nvar normalizeAddress = function normalizeAddress(a) {\n  return (0, exports.trimLeading0x)(a).toLowerCase();\n};\nexports.normalizeAddress = normalizeAddress;\nvar isNullAddress = function isNullAddress(a) {\n  return (0, exports.normalizeAddress)(a) === (0, exports.normalizeAddress)(exports.NULL_ADDRESS);\n};\nexports.isNullAddress = isNullAddress;\nvar normalizeAddressWith0x = function normalizeAddressWith0x(a) {\n  return (0, exports.ensureLeading0x)(a).toLowerCase();\n};\nexports.normalizeAddressWith0x = normalizeAddressWith0x;\nvar trimLeading0x = function trimLeading0x(input) {\n  return input.startsWith('0x') ? input.slice(2) : input;\n};\nexports.trimLeading0x = trimLeading0x;\nvar ensureLeading0x = function ensureLeading0x(input) {\n  return input.startsWith('0x') ? input : \"0x\".concat(input);\n};\nexports.ensureLeading0x = ensureLeading0x;\n// Turns '0xce10ce10ce10ce10ce10ce10ce10ce10ce10ce10'\n// into ['ce10','ce10','ce10','ce10','ce10','ce10','ce10','ce10','ce10','ce10']\nvar getAddressChunks = function getAddressChunks(input) {\n  return (0, exports.trimLeading0x)(input).match(/.{1,4}/g) || [];\n};\nexports.getAddressChunks = getAddressChunks;\nvar isHexString = function isHexString(input) {\n  return HEX_REGEX.test(input);\n};\nexports.isHexString = isHexString;\nvar hexToBuffer = function hexToBuffer(input) {\n  return Buffer.from((0, exports.trimLeading0x)(input), 'hex');\n};\nexports.hexToBuffer = hexToBuffer;\nvar bufferToHex = function bufferToHex(buf) {\n  return (0, exports.ensureLeading0x)(buf.toString('hex'));\n};\nexports.bufferToHex = bufferToHex;\nexports.NULL_ADDRESS = '0x0000000000000000000000000000000000000000';\nvar findAddressIndex = function findAddressIndex(address, addresses) {\n  return addresses.findIndex(function (x) {\n    return (0, exports.eqAddress)(x, address);\n  });\n};\nexports.findAddressIndex = findAddressIndex;\n// Returns an array of indices mapping the entries of oldAddress[] to newAddress[]\nvar mapAddressListOnto = function mapAddressListOnto(oldAddress, newAddress) {\n  var oldAddressIndex = oldAddress.map(function (x, index) {\n    return {\n      address: (0, exports.normalizeAddress)(x),\n      index: index\n    };\n  });\n  var newAddressIndex = newAddress.map(function (x, index) {\n    return {\n      address: (0, exports.normalizeAddress)(x),\n      index: index\n    };\n  });\n  oldAddressIndex.sort(function (a, b) {\n    return a.address.localeCompare(b.address);\n  });\n  newAddressIndex.sort(function (a, b) {\n    return a.address.localeCompare(b.address);\n  });\n  var res = __spreadArray([], Array(oldAddress.length).fill(-1), true);\n  for (var i = 0, j = 0; i < oldAddress.length && j < newAddress.length;) {\n    var cmp = oldAddressIndex[i].address.localeCompare(newAddressIndex[j].address);\n    if (cmp < 0) {\n      i++;\n    } else if (cmp > 0) {\n      j++;\n    } else {\n      // Address is present in both lists\n      res[oldAddressIndex[i].index] = newAddressIndex[j].index;\n      i++;\n      j++;\n    }\n  }\n  return res;\n};\nexports.mapAddressListOnto = mapAddressListOnto;\n// Returns data[] reordered by mapAddressListOnto(), and initiaValue for any entry of\n// oldAddress[] not present in newAddress[].\nfunction mapAddressListDataOnto(data, oldAddress, newAddress, initialValue) {\n  var res = __spreadArray([], Array(oldAddress.length).fill(initialValue), true);\n  if (data.length === 0) {\n    return res;\n  }\n  var addressIndexMap = (0, exports.mapAddressListOnto)(oldAddress, newAddress);\n  for (var i = 0; i < addressIndexMap.length; i++) {\n    if (addressIndexMap[i] >= 0) {\n      res[addressIndexMap[i]] = data[i];\n    }\n  }\n  return res;\n}\nexports.mapAddressListDataOnto = mapAddressListDataOnto;","map":null,"metadata":{},"sourceType":"script"}