{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.base64 = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param options - Optional options to specialize base64 validation. See {@link Base64Options} documentation.\n * @returns A superstruct validating base64.\n */\nconst base64 = function base64(struct) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a, _b;\n  const paddingRequired = (_a = options.paddingRequired) !== null && _a !== void 0 ? _a : false;\n  const characterSet = (_b = options.characterSet) !== null && _b !== void 0 ? _b : 'base64';\n  let letters;\n  if (characterSet === 'base64') {\n    letters = String.raw(_templateObject || (_templateObject = _taggedTemplateLiteral([\"[A-Za-z0-9+/]\"], [\"[A-Za-z0-9+\\\\/]\"])));\n  } else {\n    (0, assert_1.assert)(characterSet === 'base64url');\n    letters = String.raw(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"[-_A-Za-z0-9]\"])));\n  }\n  let re;\n  if (paddingRequired) {\n    re = new RegExp(\"^(?:\".concat(letters, \"{4})*(?:\").concat(letters, \"{3}=|\").concat(letters, \"{2}==)?$\"), 'u');\n  } else {\n    re = new RegExp(\"^(?:\".concat(letters, \"{4})*(?:\").concat(letters, \"{2,3}|\").concat(letters, \"{3}=|\").concat(letters, \"{2}==)?$\"), 'u');\n  }\n  return (0, superstruct_1.pattern)(struct, re);\n};\nexports.base64 = base64;","map":null,"metadata":{},"sourceType":"script"}