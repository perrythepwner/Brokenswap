{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst formats_1 = require(\"./formats\");\nconst limit_1 = require(\"./limit\");\nconst codegen_1 = require(\"ajv/dist/compile/codegen\");\nconst fullName = new codegen_1.Name(\"fullFormats\");\nconst fastName = new codegen_1.Name(\"fastFormats\");\nconst formatsPlugin = function formatsPlugin(ajv) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    keywords: true\n  };\n  if (Array.isArray(opts)) {\n    addFormats(ajv, opts, formats_1.fullFormats, fullName);\n    return ajv;\n  }\n  const [formats, exportName] = opts.mode === \"fast\" ? [formats_1.fastFormats, fastName] : [formats_1.fullFormats, fullName];\n  const list = opts.formats || formats_1.formatNames;\n  addFormats(ajv, list, formats, exportName);\n  if (opts.keywords) limit_1.default(ajv);\n  return ajv;\n};\nformatsPlugin.get = function (name) {\n  let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"full\";\n  const formats = mode === \"fast\" ? formats_1.fastFormats : formats_1.fullFormats;\n  const f = formats[name];\n  if (!f) throw new Error(\"Unknown format \\\"\".concat(name, \"\\\"\"));\n  return f;\n};\nfunction addFormats(ajv, list, fs, exportName) {\n  var _a;\n  var _b;\n  (_a = (_b = ajv.opts.code).formats) !== null && _a !== void 0 ? _a : _b.formats = codegen_1._(_templateObject || (_templateObject = _taggedTemplateLiteral([\"require(\\\"ajv-formats/dist/formats\\\").\", \"\"])), exportName);\n  for (const f of list) ajv.addFormat(f, fs[f]);\n}\nmodule.exports = exports = formatsPlugin;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatsPlugin;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAQA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAGA,MAAA,SAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;AAgBA,MAAM,QAAQ,GAAG,IAAI,SAAA,CAAA,IAAI,CAAC,aAAa,CAAC;AACxC,MAAM,QAAQ,GAAG,IAAI,SAAA,CAAA,IAAI,CAAC,aAAa,CAAC;AAExC,MAAM,aAAa,GAAkB,SAA/B,aAAa,CACjB,GAAQ,EAED;EAAA,IADP,IAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAA6B;IAAC,QAAQ,EAAE;EAAI,CAAC;EAE7C,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;IACvB,UAAU,CAAC,GAAG,EAAE,IAAI,EAAE,SAAA,CAAA,WAAW,EAAE,QAAQ,CAAC;IAC5C,OAAO,GAAG;EACX;EACD,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GACzB,IAAI,CAAC,IAAI,KAAK,MAAM,GAAG,CAAC,SAAA,CAAA,WAAW,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAA,CAAA,WAAW,EAAE,QAAQ,CAAC;EAC1E,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,IAAI,SAAA,CAAA,WAAW;EACxC,UAAU,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,CAAC;EAC1C,IAAI,IAAI,CAAC,QAAQ,EAAE,OAAA,CAAA,OAAW,CAAC,GAAG,CAAC;EACnC,OAAO,GAAG;AACZ,CAAC;AAED,aAAa,CAAC,GAAG,GAAG,UAAC,IAAgB,EAAuC;EAAA,IAArC,IAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAmB,MAAM;EAC9D,MAAM,OAAO,GAAG,IAAI,KAAK,MAAM,GAAG,SAAA,CAAA,WAAW,GAAG,SAAA,CAAA,WAAW;EAC3D,MAAM,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;EACvB,IAAI,CAAC,CAAC,EAAE,MAAM,IAAI,KAAK,qBAAA,MAAA,CAAoB,IAAI,OAAG,CAAC;EACnD,OAAO,CAAC;AACV,CAAC;AAED,SAAS,UAAU,CAAC,GAAQ,EAAE,IAAkB,EAAE,EAAkB,EAAE,UAAgB,EAAA;;;EACpF,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,GAAG,CAAC,IAAI,CAAC,IAAI,EAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAA,CAAP,OAAO,GAAK,SAAA,CAAA,CAAC,CAAA,eAAA,KAAA,eAAA,GAAA,sBAAA,mDAAuC,UAAU,CAAE;EAC9E,KAAK,MAAM,CAAC,IAAI,IAAI,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAC/C;AAEA,MAAM,CAAC,OAAO,GAAG,OAAO,GAAG,aAAa;AACxC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE;EAAC,KAAK,EAAE;AAAI,CAAC,CAAC;AAE3D,OAAA,CAAA,OAAA,GAAe,aAAa","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst formats_1 = require(\"./formats\");\nconst limit_1 = require(\"./limit\");\nconst codegen_1 = require(\"ajv/dist/compile/codegen\");\nconst fullName = new codegen_1.Name(\"fullFormats\");\nconst fastName = new codegen_1.Name(\"fastFormats\");\nconst formatsPlugin = (ajv, opts = { keywords: true }) => {\n    if (Array.isArray(opts)) {\n        addFormats(ajv, opts, formats_1.fullFormats, fullName);\n        return ajv;\n    }\n    const [formats, exportName] = opts.mode === \"fast\" ? [formats_1.fastFormats, fastName] : [formats_1.fullFormats, fullName];\n    const list = opts.formats || formats_1.formatNames;\n    addFormats(ajv, list, formats, exportName);\n    if (opts.keywords)\n        limit_1.default(ajv);\n    return ajv;\n};\nformatsPlugin.get = (name, mode = \"full\") => {\n    const formats = mode === \"fast\" ? formats_1.fastFormats : formats_1.fullFormats;\n    const f = formats[name];\n    if (!f)\n        throw new Error(`Unknown format \"${name}\"`);\n    return f;\n};\nfunction addFormats(ajv, list, fs, exportName) {\n    var _a;\n    var _b;\n    (_a = (_b = ajv.opts.code).formats) !== null && _a !== void 0 ? _a : (_b.formats = codegen_1._ `require(\"ajv-formats/dist/formats\").${exportName}`);\n    for (const f of list)\n        ajv.addFormat(f, fs[f]);\n}\nmodule.exports = exports = formatsPlugin;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = formatsPlugin;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}