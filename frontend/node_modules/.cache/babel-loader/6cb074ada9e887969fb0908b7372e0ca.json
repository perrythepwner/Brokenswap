{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListBasicTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nclass ListBasicTreeViewDU extends arrayBasic_1.ArrayBasicTreeViewDU {\n  constructor(type, _rootNode, cache) {\n    super(type, _rootNode, cache);\n    this.type = type;\n    this._rootNode = _rootNode;\n  }\n  /**\n   * Adds one value element at the end of the array and adds 1 to the un-commited ViewDU length\n   */\n  push(value) {\n    if (this._length >= this.type.limit) {\n      throw Error(\"Error pushing over limit\");\n    }\n    // Mutate length before .set()\n    this.dirtyLength = true;\n    const index = this._length++;\n    // If in new node..\n    if (index % this.type.itemsPerChunk === 0) {\n      // Set a zero node to the nodes array to avoid a navigation downwards in .set()\n      const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n      this.nodes[chunkIndex] = persistent_merkle_tree_1.zeroNode(0);\n    }\n    this.set(index, value);\n  }\n}\nexports.ListBasicTreeViewDU = ListBasicTreeViewDU;","map":{"version":3,"sources":["../../src/viewDU/listBasic.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,wBAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;AAIA,MAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAEA,MAAa,mBAA4D,SAAQ,YAAA,CAAA,oBAAiC,CAAA;EAChH,WAAA,CAAqB,IAAgC,EAAY,SAAe,EAAE,KAAiC,EAAA;IACjH,KAAK,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC;IADV,IAAA,CAAA,IAAI,GAAJ,IAAI;IAAwC,IAAA,CAAA,SAAS,GAAT,SAAS;EAE1E;EAEA;;AAEG;EACH,IAAI,CAAC,KAA2B,EAAA;IAC9B,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;MACnC,MAAM,KAAK,CAAC,0BAA0B,CAAC;IACxC;IAED;IACA,IAAI,CAAC,WAAW,GAAG,IAAI;IACvB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,EAAE;IAE5B;IACA,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,KAAK,CAAC,EAAE;MACzC;MACA,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;MAC9D,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,wBAAA,CAAA,QAAQ,CAAC,CAAC,CAAa;IACjD;IAED,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC;EACxB;AACD;AA1BD,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListBasicTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nclass ListBasicTreeViewDU extends arrayBasic_1.ArrayBasicTreeViewDU {\n    constructor(type, _rootNode, cache) {\n        super(type, _rootNode, cache);\n        this.type = type;\n        this._rootNode = _rootNode;\n    }\n    /**\n     * Adds one value element at the end of the array and adds 1 to the un-commited ViewDU length\n     */\n    push(value) {\n        if (this._length >= this.type.limit) {\n            throw Error(\"Error pushing over limit\");\n        }\n        // Mutate length before .set()\n        this.dirtyLength = true;\n        const index = this._length++;\n        // If in new node..\n        if (index % this.type.itemsPerChunk === 0) {\n            // Set a zero node to the nodes array to avoid a navigation downwards in .set()\n            const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n            this.nodes[chunkIndex] = persistent_merkle_tree_1.zeroNode(0);\n        }\n        this.set(index, value);\n    }\n}\nexports.ListBasicTreeViewDU = ListBasicTreeViewDU;\n//# sourceMappingURL=listBasic.js.map"]},"metadata":{},"sourceType":"script"}