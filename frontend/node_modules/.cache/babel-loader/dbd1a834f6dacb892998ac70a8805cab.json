{"ast":null,"code":"import _asyncToGenerator from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _s = $RefreshSig$();\nimport { useCelo } from '@celo/react-celo';\nimport { JSBI, TokenAmount } from '@ubeswap/sdk';\nimport { UBE } from 'constants/tokens';\nimport { BigNumber } from 'ethers';\nimport { useReleaseUbeContract, useTokenContract } from 'hooks/useContract';\nimport { useEffect, useState } from 'react';\nimport { useSingleContractMultipleData } from 'state/multicall/hooks';\nimport { useUnclaimedStakingRewards } from 'state/stake/hooks';\nconst DECIMALS = BigNumber.from(10).pow(18);\nconst HARDCAP = BigNumber.from(100000000).mul(DECIMALS);\n_c = HARDCAP;\nconst RELEASED = BigNumber.from(25700000).mul(DECIMALS);\n\n// Addresses that do not contribute to circulating supply\n_c2 = RELEASED;\nconst nonCirculatingAddresses = {\n  MiningReleaseEscrow: '0x9d0a92AA8832518328D14Ed5930eC6B44448165e',\n  PoolManager: '0x9Ee3600543eCcc85020D6bc77EB553d1747a65D2'\n};\n\n/**\n * Fetches the circulating supply\n */\nexport const useCirculatingSupply = () => {\n  _s();\n  const {\n    network\n  } = useCelo();\n  const chainId = network.chainId;\n  const ube = chainId ? UBE[chainId] : undefined;\n  const ubeContract = useTokenContract(ube === null || ube === void 0 ? void 0 : ube.address);\n  const releaseUbe = useReleaseUbeContract();\n\n  // compute amount that is locked up\n  const balancesRaw = useSingleContractMultipleData(ubeContract, 'balanceOf', Object.values(nonCirculatingAddresses).map(addr => [addr]));\n  // if we are still loading, do not load\n  const balances = balancesRaw !== null && balancesRaw !== void 0 && balancesRaw.find(result => !result.result) ? null : balancesRaw.map(b => {\n    var _b$result$, _b$result;\n    return (_b$result$ = (_b$result = b.result) === null || _b$result === void 0 ? void 0 : _b$result[0]) !== null && _b$result$ !== void 0 ? _b$result$ : BigNumber.from(0);\n  });\n  const lockedBalancesSum = balances === null || balances === void 0 ? void 0 : balances.reduce((sum, b) => b.add(sum), BigNumber.from(0));\n\n  // add amount of tokens that could be claimed but are not being claimed\n  const {\n    noncirculatingSupply\n  } = useUnclaimedStakingRewards();\n\n  // compute amount that has been released\n  const [released, setReleased] = useState(null);\n  useEffect(() => {\n    void _asyncToGenerator(function* () {\n      if (releaseUbe) {\n        setReleased(RELEASED.sub(yield releaseUbe.releasableSupplyOfPrincipal(RELEASED)));\n      }\n    })();\n  }, [releaseUbe]);\n  if (!lockedBalancesSum || !released || !noncirculatingSupply) {\n    return undefined;\n  }\n  return ube ? new TokenAmount(ube, JSBI.BigInt(HARDCAP.sub(lockedBalancesSum).sub(released).sub(noncirculatingSupply).toString())) : undefined;\n};\n_s(useCirculatingSupply, \"P5Y2Nott19yl+uR36OAVH73FmNk=\", false, function () {\n  return [useCelo, useTokenContract, useReleaseUbeContract, useSingleContractMultipleData, useUnclaimedStakingRewards];\n});\nvar _c, _c2;\n$RefreshReg$(_c, \"HARDCAP\");\n$RefreshReg$(_c2, \"RELEASED\");","map":{"version":3,"names":["useCelo","JSBI","TokenAmount","UBE","BigNumber","useReleaseUbeContract","useTokenContract","useEffect","useState","useSingleContractMultipleData","useUnclaimedStakingRewards","DECIMALS","from","pow","HARDCAP","mul","_c","RELEASED","_c2","nonCirculatingAddresses","MiningReleaseEscrow","PoolManager","useCirculatingSupply","_s","network","chainId","ube","undefined","ubeContract","address","releaseUbe","balancesRaw","Object","values","map","addr","balances","find","result","b","_b$result$","_b$result","lockedBalancesSum","reduce","sum","add","noncirculatingSupply","released","setReleased","_asyncToGenerator","sub","releasableSupplyOfPrincipal","BigInt","toString","$RefreshReg$"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/components/Header/useCirculatingSupply.ts"],"sourcesContent":["import { useCelo } from '@celo/react-celo'\nimport { ChainId as UbeswapChainId, JSBI, TokenAmount } from '@ubeswap/sdk'\nimport { UBE } from 'constants/tokens'\nimport { BigNumber } from 'ethers'\nimport { useReleaseUbeContract, useTokenContract } from 'hooks/useContract'\nimport { useEffect, useState } from 'react'\nimport { useSingleContractMultipleData } from 'state/multicall/hooks'\nimport { useUnclaimedStakingRewards } from 'state/stake/hooks'\n\nconst DECIMALS = BigNumber.from(10).pow(18)\nconst HARDCAP = BigNumber.from(100_000_000).mul(DECIMALS)\nconst RELEASED = BigNumber.from(25_700_000).mul(DECIMALS)\n\n// Addresses that do not contribute to circulating supply\nconst nonCirculatingAddresses = {\n  MiningReleaseEscrow: '0x9d0a92AA8832518328D14Ed5930eC6B44448165e',\n  PoolManager: '0x9Ee3600543eCcc85020D6bc77EB553d1747a65D2',\n}\n\n/**\n * Fetches the circulating supply\n */\nexport const useCirculatingSupply = (): TokenAmount | undefined => {\n  const { network } = useCelo()\n  const chainId = network.chainId\n  const ube = chainId ? UBE[chainId as unknown as UbeswapChainId] : undefined\n  const ubeContract = useTokenContract(ube?.address)\n  const releaseUbe = useReleaseUbeContract()\n\n  // compute amount that is locked up\n  const balancesRaw = useSingleContractMultipleData(\n    ubeContract,\n    'balanceOf',\n    Object.values(nonCirculatingAddresses).map((addr) => [addr])\n  )\n  // if we are still loading, do not load\n  const balances = balancesRaw?.find((result) => !result.result)\n    ? null\n    : (balancesRaw.map((b) => b.result?.[0] ?? BigNumber.from(0)) as readonly BigNumber[])\n  const lockedBalancesSum = balances?.reduce((sum, b) => b.add(sum), BigNumber.from(0))\n\n  // add amount of tokens that could be claimed but are not being claimed\n  const { noncirculatingSupply } = useUnclaimedStakingRewards()\n\n  // compute amount that has been released\n  const [released, setReleased] = useState<BigNumber | null>(null)\n  useEffect(() => {\n    void (async () => {\n      if (releaseUbe) {\n        setReleased(RELEASED.sub(await releaseUbe.releasableSupplyOfPrincipal(RELEASED)))\n      }\n    })()\n  }, [releaseUbe])\n\n  if (!lockedBalancesSum || !released || !noncirculatingSupply) {\n    return undefined\n  }\n\n  return ube\n    ? new TokenAmount(\n        ube,\n        JSBI.BigInt(HARDCAP.sub(lockedBalancesSum).sub(released).sub(noncirculatingSupply).toString())\n      )\n    : undefined\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}