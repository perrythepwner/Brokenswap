{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContainerTreeViewDUClass = void 0;\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\nclass ContainerTreeViewDU extends abstract_1.TreeViewDU {\n  constructor(type, node) {\n    super();\n    this.type = type;\n    this.valueChanged = null;\n    this._rootNode = node;\n  }\n  get node() {\n    return this._rootNode;\n  }\n  get cache() {\n    return;\n  }\n  commit() {\n    if (this.valueChanged === null) {\n      return;\n    }\n    const value = this.valueChanged;\n    this.valueChanged = null;\n    this._rootNode = this.type.value_toTree(value);\n  }\n  clearCache() {\n    this.valueChanged = null;\n  }\n}\nfunction getContainerTreeViewDUClass(type) {\n  class CustomContainerTreeViewDU extends ContainerTreeViewDU {}\n  // Dynamically define prototype methods\n  for (let index = 0; index < type.fieldsEntries.length; index++) {\n    const {\n      fieldName,\n      fieldType\n    } = type.fieldsEntries[index];\n    // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n    // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n    // and use the cached views array to store the new node.\n    if (fieldType.isBasic) {\n      Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // TODO: Review the memory cost of this closures\n        get: function get() {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n          return (this.valueChanged || this._rootNode.value)[fieldName];\n        },\n        set: function set(value) {\n          if (this.valueChanged === null) {\n            this.valueChanged = this.type.clone(this._rootNode.value);\n          }\n          this.valueChanged[fieldName] = value;\n        }\n      });\n    }\n    // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n    // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n    // set it to the parent tree in the field gindex.\n    else if (composite_1.isCompositeType(fieldType)) {\n      Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // Returns TreeViewDU of fieldName\n        get: function get() {\n          const value = this.valueChanged || this._rootNode.value;\n          return fieldType.toViewDU(value[fieldName]);\n        },\n        // Expects TreeViewDU of fieldName\n        set: function set(view) {\n          if (this.valueChanged === null) {\n            this.valueChanged = this.type.clone(this._rootNode.value);\n          }\n          const value = fieldType.toValueFromViewDU(view);\n          this.valueChanged[fieldName] = value;\n        }\n      });\n    }\n    // Should never happen\n    else {\n      /* istanbul ignore next - unreachable code */\n      throw Error(\"Unknown fieldType \".concat(fieldType.typeName, \" for fieldName \").concat(fieldName));\n    }\n  }\n  // Change class name\n  Object.defineProperty(CustomContainerTreeViewDU, \"name\", {\n    value: type.typeName,\n    writable: false\n  });\n  return CustomContainerTreeViewDU;\n}\nexports.getContainerTreeViewDUClass = getContainerTreeViewDUClass;","map":{"version":3,"sources":["../../src/viewDU/containerNodeStruct.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContainerTreeViewDUClass = void 0;\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\nclass ContainerTreeViewDU extends abstract_1.TreeViewDU {\n    constructor(type, node) {\n        super();\n        this.type = type;\n        this.valueChanged = null;\n        this._rootNode = node;\n    }\n    get node() {\n        return this._rootNode;\n    }\n    get cache() {\n        return;\n    }\n    commit() {\n        if (this.valueChanged === null) {\n            return;\n        }\n        const value = this.valueChanged;\n        this.valueChanged = null;\n        this._rootNode = this.type.value_toTree(value);\n    }\n    clearCache() {\n        this.valueChanged = null;\n    }\n}\nfunction getContainerTreeViewDUClass(type) {\n    class CustomContainerTreeViewDU extends ContainerTreeViewDU {\n    }\n    // Dynamically define prototype methods\n    for (let index = 0; index < type.fieldsEntries.length; index++) {\n        const { fieldName, fieldType } = type.fieldsEntries[index];\n        // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n        // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n        // and use the cached views array to store the new node.\n        if (fieldType.isBasic) {\n            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // TODO: Review the memory cost of this closures\n                get: function () {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return (this.valueChanged || this._rootNode.value)[fieldName];\n                },\n                set: function (value) {\n                    if (this.valueChanged === null) {\n                        this.valueChanged = this.type.clone(this._rootNode.value);\n                    }\n                    this.valueChanged[fieldName] = value;\n                },\n            });\n        }\n        // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n        // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n        // set it to the parent tree in the field gindex.\n        else if (composite_1.isCompositeType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // Returns TreeViewDU of fieldName\n                get: function () {\n                    const value = this.valueChanged || this._rootNode.value;\n                    return fieldType.toViewDU(value[fieldName]);\n                },\n                // Expects TreeViewDU of fieldName\n                set: function (view) {\n                    if (this.valueChanged === null) {\n                        this.valueChanged = this.type.clone(this._rootNode.value);\n                    }\n                    const value = fieldType.toValueFromViewDU(view);\n                    this.valueChanged[fieldName] = value;\n                },\n            });\n        }\n        // Should never happen\n        else {\n            /* istanbul ignore next - unreachable code */\n            throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);\n        }\n    }\n    // Change class name\n    Object.defineProperty(CustomContainerTreeViewDU, \"name\", { value: type.typeName, writable: false });\n    return CustomContainerTreeViewDU;\n}\nexports.getContainerTreeViewDUClass = getContainerTreeViewDUClass;\n//# sourceMappingURL=containerNodeStruct.js.map"]},"metadata":{},"sourceType":"script"}