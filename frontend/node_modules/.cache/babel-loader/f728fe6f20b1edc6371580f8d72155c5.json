{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayCompositeTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst abstract_1 = require(\"./abstract\");\nclass ArrayCompositeTreeViewDU extends abstract_1.TreeViewDU {\n  constructor(type, _rootNode, cache) {\n    super();\n    this.type = type;\n    this._rootNode = _rootNode;\n    this.viewsChanged = new Map();\n    // TODO: Consider these properties are not accessible in the cache object persisted in the parent's cache.\n    // nodes, caches, _length, and nodesPopulated are mutated. Consider having them in a _cache object such that\n    // mutations affect the cache already found in the parent object\n    this.dirtyLength = false;\n    if (cache) {\n      this.nodes = cache.nodes;\n      this.caches = cache.caches;\n      this._length = cache.length;\n      this.nodesPopulated = cache.nodesPopulated;\n    } else {\n      this.nodes = [];\n      this.caches = [];\n      this._length = this.type.tree_getLength(_rootNode);\n      // If there are exactly 0 nodes, nodesPopulated = true because 0 / 0 are in the nodes array\n      this.nodesPopulated = this._length === 0;\n    }\n  }\n  /**\n   * Number of elements in the array. Equal to un-commited length of the array\n   */\n  get length() {\n    return this._length;\n  }\n  get node() {\n    return this._rootNode;\n  }\n  get cache() {\n    return {\n      nodes: this.nodes,\n      caches: this.caches,\n      length: this._length,\n      nodesPopulated: this.nodesPopulated\n    };\n  }\n  /**\n   * Get element at `index`. Returns a view of the Composite element type.\n   *\n   * NOTE: Assumes that any view created here will change and will call .commit() on it.\n   * .get() should be used only for cases when something may mutate. To get all items without\n   * triggering a .commit() in all them use .getAllReadOnly().\n   */\n  get(index) {\n    const viewChanged = this.viewsChanged.get(index);\n    if (viewChanged) {\n      return viewChanged;\n    }\n    let node = this.nodes[index];\n    if (node === undefined) {\n      node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n      this.nodes[index] = node;\n    }\n    // Keep a reference to the new view to call .commit on it latter, only if mutable\n    const view = this.type.elementType.getViewDU(node, this.caches[index]);\n    if (this.type.elementType.isViewMutable) {\n      this.viewsChanged.set(index, view);\n    }\n    // No need to persist the child's view cache since a second get returns this view instance.\n    // The cache is only persisted on commit where the viewsChanged map is dropped.\n    return view;\n  }\n  /**\n   * Get element at `index`. Returns a view of the Composite element type.\n   * DOES NOT PROPAGATE CHANGES: use only for reads and to skip parent references.\n   */\n  getReadonly(index) {\n    const viewChanged = this.viewsChanged.get(index);\n    if (viewChanged) {\n      return viewChanged;\n    }\n    let node = this.nodes[index];\n    if (node === undefined) {\n      node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n      this.nodes[index] = node;\n    }\n    return this.type.elementType.getViewDU(node, this.caches[index]);\n  }\n  // Did not implemented\n  // `getReadonlyValue(index: number): ValueOf<ElementType>`\n  // because it can break in unexpected ways if there are pending changes in this.viewsChanged.\n  // This function could first check if `this.viewsChanged` has a view for `index` and commit it,\n  // but that would be pretty slow, and the same result can be achieved with\n  // `this.getReadonly(index).toValue()`\n  /**\n   * Set Composite element type `view` at `index`\n   */\n  set(index, view) {\n    if (index >= this._length) {\n      throw Error(\"Error setting index over length \".concat(index, \" > \").concat(this._length));\n    }\n    // When setting a view:\n    // - Not necessary to commit node\n    // - Not necessary to persist cache\n    // Just keeping a reference to the view in this.viewsChanged ensures consistency\n    this.viewsChanged.set(index, view);\n  }\n  /**\n   * WARNING: Returns all commited changes, if there are any pending changes commit them beforehand\n   */\n  getAllReadonly() {\n    this.populateAllNodes();\n    const views = new Array(this._length);\n    for (let i = 0; i < this._length; i++) {\n      views[i] = this.type.elementType.getViewDU(this.nodes[i], this.caches[i]);\n    }\n    return views;\n  }\n  /**\n   * WARNING: Returns all commited changes, if there are any pending changes commit them beforehand\n   */\n  getAllReadonlyValues() {\n    this.populateAllNodes();\n    const values = new Array(this._length);\n    for (let i = 0; i < this._length; i++) {\n      values[i] = this.type.elementType.tree_toValue(this.nodes[i]);\n    }\n    return values;\n  }\n  commit() {\n    if (this.viewsChanged.size === 0) {\n      return;\n    }\n    const nodesChanged = [];\n    for (const [index, view] of this.viewsChanged) {\n      const node = this.type.elementType.commitViewDU(view);\n      // Set new node in nodes array to ensure data represented in the tree and fast nodes access is equal\n      this.nodes[index] = node;\n      nodesChanged.push({\n        index,\n        node\n      });\n      // Cache the view's caches to preserve it's data after 'this.viewsChanged.clear()'\n      const cache = this.type.elementType.cacheOfViewDU(view);\n      if (cache) this.caches[index] = cache;\n    }\n    // TODO: Optimize to loop only once, Numerical sort ascending\n    const nodesChangedSorted = nodesChanged.sort((a, b) => a.index - b.index);\n    const indexes = nodesChangedSorted.map(entry => entry.index);\n    const nodes = nodesChangedSorted.map(entry => entry.node);\n    const chunksNode = this.type.tree_getChunksNode(this._rootNode);\n    // TODO: Ensure fast setNodesAtDepth() method is correct\n    const newChunksNode = persistent_merkle_tree_1.setNodesAtDepth(chunksNode, this.type.chunkDepth, indexes, nodes);\n    this._rootNode = this.type.tree_setChunksNode(this._rootNode, newChunksNode, this.dirtyLength ? this._length : undefined);\n    this.viewsChanged.clear();\n    this.dirtyLength = false;\n  }\n  clearCache() {\n    this.nodes = [];\n    this.caches = [];\n    this.nodesPopulated = false;\n    // It's not necessary to clear this.viewsChanged since they have no effect on the cache.\n    // However preserving _SOME_ caches results in a very unpredictable experience.\n    this.viewsChanged.clear();\n    // Reset cached length only if it has been mutated\n    if (this.dirtyLength) {\n      this._length = this.type.tree_getLength(this._rootNode);\n      this.dirtyLength = false;\n    }\n  }\n  populateAllNodes() {\n    // If there's uncommited changes it may break.\n    // this.length can be increased but this._rootNode doesn't have that item\n    if (this.viewsChanged.size > 0) {\n      throw Error(\"Must commit changes before reading all nodes\");\n    }\n    if (!this.nodesPopulated) {\n      this.nodes = persistent_merkle_tree_1.getNodesAtDepth(this._rootNode, this.type.depth, 0, this.length);\n      this.nodesPopulated = true;\n    }\n  }\n}\nexports.ArrayCompositeTreeViewDU = ArrayCompositeTreeViewDU;","map":{"version":3,"sources":["../../src/viewDU/arrayComposite.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,wBAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;AAIA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AASA,MAAa,wBAEX,SAAQ,UAAA,CAAA,UAA2C,CAAA;EAWnD,WAAA,CACW,IAAqC,EACpC,SAAe,EACzB,KAAqC,EAAA;IAErC,KAAK,CAAA,CAAE;IAJE,IAAA,CAAA,IAAI,GAAJ,IAAI;IACH,IAAA,CAAA,SAAS,GAAT,SAAS;IAVF,IAAA,CAAA,YAAY,GAAG,IAAI,GAAG,CAAA,CAAwC;IAEjF;IACA;IACA;IACU,IAAA,CAAA,WAAW,GAAG,KAAK;IAU3B,IAAI,KAAK,EAAE;MACT,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK;MACxB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM;MAC1B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,MAAM;MAC3B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,cAAc;KAC3C,MAAM;MACL,IAAI,CAAC,KAAK,GAAG,EAAE;MACf,IAAI,CAAC,MAAM,GAAG,EAAE;MAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC;MAClD;MACA,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,KAAK,CAAC;IACzC;EACH;EAEA;;AAEG;EACH,IAAI,MAAM,CAAA,EAAA;IACR,OAAO,IAAI,CAAC,OAAO;EACrB;EAEA,IAAI,IAAI,CAAA,EAAA;IACN,OAAO,IAAI,CAAC,SAAS;EACvB;EAEA,IAAI,KAAK,CAAA,EAAA;IACP,OAAO;MACL,KAAK,EAAE,IAAI,CAAC,KAAK;MACjB,MAAM,EAAE,IAAI,CAAC,MAAM;MACnB,MAAM,EAAE,IAAI,CAAC,OAAO;MACpB,cAAc,EAAE,IAAI,CAAC;KACtB;EACH;EAEA;;;;;;AAMG;EACH,GAAG,CAAC,KAAa,EAAA;IACf,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC;IAChD,IAAI,WAAW,EAAE;MACf,OAAO,WAAW;IACnB;IAED,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;IAC5B,IAAI,IAAI,KAAK,SAAS,EAAE;MACtB,IAAI,GAAG,wBAAA,CAAA,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC;MAC7D,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI;IACzB;IAED;IACA,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACtE,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE;MACvC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC;IACnC;IAED;IACA;IAEA,OAAO,IAAI;EACb;EAEA;;;AAGG;EACH,WAAW,CAAC,KAAa,EAAA;IACvB,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC;IAChD,IAAI,WAAW,EAAE;MACf,OAAO,WAAW;IACnB;IAED,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;IAC5B,IAAI,IAAI,KAAK,SAAS,EAAE;MACtB,IAAI,GAAG,wBAAA,CAAA,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC;MAC7D,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI;IACzB;IAED,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;EAClE;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;;AAEG;EACH,GAAG,CAAC,KAAa,EAAE,IAAkC,EAAA;IACnD,IAAI,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE;MACzB,MAAM,KAAK,oCAAA,MAAA,CAAoC,KAAK,SAAA,MAAA,CAAM,IAAI,CAAC,OAAO,CAAE,CAAC;IAC1E;IAED;IACA;IACA;IACA;IACA,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC;EACpC;EAEA;;AAEG;EACH,cAAc,CAAA,EAAA;IACZ,IAAI,CAAC,gBAAgB,CAAA,CAAE;IAEvB,MAAM,KAAK,GAAG,IAAI,KAAK,CAA+B,IAAI,CAAC,OAAO,CAAC;IACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;MACrC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1E;IACD,OAAO,KAAK;EACd;EAEA;;AAEG;EACH,oBAAoB,CAAA,EAAA;IAClB,IAAI,CAAC,gBAAgB,CAAA,CAAE;IAEvB,MAAM,MAAM,GAAG,IAAI,KAAK,CAAuB,IAAI,CAAC,OAAO,CAAC;IAC5D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;MACrC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9D;IACD,OAAO,MAAM;EACf;EAEA,MAAM,CAAA,EAAA;IACJ,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,EAAE;MAChC;IACD;IAED,MAAM,YAAY,GAAkC,EAAE;IAEtD,KAAK,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE;MAC7C,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC;MACrD;MACA,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI;MACxB,YAAY,CAAC,IAAI,CAAC;QAAC,KAAK;QAAE;MAAI,CAAC,CAAC;MAEhC;MACA,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC;MACvD,IAAI,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK;IACtC;IAED;IACA,MAAM,kBAAkB,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;IACzE,MAAM,OAAO,GAAG,kBAAkB,CAAC,GAAG,CAAE,KAAK,IAAK,KAAK,CAAC,KAAK,CAAC;IAC9D,MAAM,KAAK,GAAG,kBAAkB,CAAC,GAAG,CAAE,KAAK,IAAK,KAAK,CAAC,IAAI,CAAC;IAE3D,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC;IAC/D;IACA,MAAM,aAAa,GAAG,wBAAA,CAAA,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE,KAAK,CAAC;IAEvF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAC3C,IAAI,CAAC,SAAS,EACd,aAAa,EACb,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,GAAG,SAAS,CAC5C;IAED,IAAI,CAAC,YAAY,CAAC,KAAK,CAAA,CAAE;IACzB,IAAI,CAAC,WAAW,GAAG,KAAK;EAC1B;EAEU,UAAU,CAAA,EAAA;IAClB,IAAI,CAAC,KAAK,GAAG,EAAE;IACf,IAAI,CAAC,MAAM,GAAG,EAAE;IAChB,IAAI,CAAC,cAAc,GAAG,KAAK;IAE3B;IACA;IACA,IAAI,CAAC,YAAY,CAAC,KAAK,CAAA,CAAE;IAEzB;IACA,IAAI,IAAI,CAAC,WAAW,EAAE;MACpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC;MACvD,IAAI,CAAC,WAAW,GAAG,KAAK;IACzB;EACH;EAEQ,gBAAgB,CAAA,EAAA;IACtB;IACA;IACA,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG,CAAC,EAAE;MAC9B,MAAM,KAAK,CAAC,8CAA8C,CAAC;IAC5D;IAED,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;MACxB,IAAI,CAAC,KAAK,GAAG,wBAAA,CAAA,eAAe,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC;MAC7E,IAAI,CAAC,cAAc,GAAG,IAAI;IAC3B;EACH;AACD;AAzND,OAAA,CAAA,wBAAA,GAAA,wBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayCompositeTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst abstract_1 = require(\"./abstract\");\nclass ArrayCompositeTreeViewDU extends abstract_1.TreeViewDU {\n    constructor(type, _rootNode, cache) {\n        super();\n        this.type = type;\n        this._rootNode = _rootNode;\n        this.viewsChanged = new Map();\n        // TODO: Consider these properties are not accessible in the cache object persisted in the parent's cache.\n        // nodes, caches, _length, and nodesPopulated are mutated. Consider having them in a _cache object such that\n        // mutations affect the cache already found in the parent object\n        this.dirtyLength = false;\n        if (cache) {\n            this.nodes = cache.nodes;\n            this.caches = cache.caches;\n            this._length = cache.length;\n            this.nodesPopulated = cache.nodesPopulated;\n        }\n        else {\n            this.nodes = [];\n            this.caches = [];\n            this._length = this.type.tree_getLength(_rootNode);\n            // If there are exactly 0 nodes, nodesPopulated = true because 0 / 0 are in the nodes array\n            this.nodesPopulated = this._length === 0;\n        }\n    }\n    /**\n     * Number of elements in the array. Equal to un-commited length of the array\n     */\n    get length() {\n        return this._length;\n    }\n    get node() {\n        return this._rootNode;\n    }\n    get cache() {\n        return {\n            nodes: this.nodes,\n            caches: this.caches,\n            length: this._length,\n            nodesPopulated: this.nodesPopulated,\n        };\n    }\n    /**\n     * Get element at `index`. Returns a view of the Composite element type.\n     *\n     * NOTE: Assumes that any view created here will change and will call .commit() on it.\n     * .get() should be used only for cases when something may mutate. To get all items without\n     * triggering a .commit() in all them use .getAllReadOnly().\n     */\n    get(index) {\n        const viewChanged = this.viewsChanged.get(index);\n        if (viewChanged) {\n            return viewChanged;\n        }\n        let node = this.nodes[index];\n        if (node === undefined) {\n            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n            this.nodes[index] = node;\n        }\n        // Keep a reference to the new view to call .commit on it latter, only if mutable\n        const view = this.type.elementType.getViewDU(node, this.caches[index]);\n        if (this.type.elementType.isViewMutable) {\n            this.viewsChanged.set(index, view);\n        }\n        // No need to persist the child's view cache since a second get returns this view instance.\n        // The cache is only persisted on commit where the viewsChanged map is dropped.\n        return view;\n    }\n    /**\n     * Get element at `index`. Returns a view of the Composite element type.\n     * DOES NOT PROPAGATE CHANGES: use only for reads and to skip parent references.\n     */\n    getReadonly(index) {\n        const viewChanged = this.viewsChanged.get(index);\n        if (viewChanged) {\n            return viewChanged;\n        }\n        let node = this.nodes[index];\n        if (node === undefined) {\n            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n            this.nodes[index] = node;\n        }\n        return this.type.elementType.getViewDU(node, this.caches[index]);\n    }\n    // Did not implemented\n    // `getReadonlyValue(index: number): ValueOf<ElementType>`\n    // because it can break in unexpected ways if there are pending changes in this.viewsChanged.\n    // This function could first check if `this.viewsChanged` has a view for `index` and commit it,\n    // but that would be pretty slow, and the same result can be achieved with\n    // `this.getReadonly(index).toValue()`\n    /**\n     * Set Composite element type `view` at `index`\n     */\n    set(index, view) {\n        if (index >= this._length) {\n            throw Error(`Error setting index over length ${index} > ${this._length}`);\n        }\n        // When setting a view:\n        // - Not necessary to commit node\n        // - Not necessary to persist cache\n        // Just keeping a reference to the view in this.viewsChanged ensures consistency\n        this.viewsChanged.set(index, view);\n    }\n    /**\n     * WARNING: Returns all commited changes, if there are any pending changes commit them beforehand\n     */\n    getAllReadonly() {\n        this.populateAllNodes();\n        const views = new Array(this._length);\n        for (let i = 0; i < this._length; i++) {\n            views[i] = this.type.elementType.getViewDU(this.nodes[i], this.caches[i]);\n        }\n        return views;\n    }\n    /**\n     * WARNING: Returns all commited changes, if there are any pending changes commit them beforehand\n     */\n    getAllReadonlyValues() {\n        this.populateAllNodes();\n        const values = new Array(this._length);\n        for (let i = 0; i < this._length; i++) {\n            values[i] = this.type.elementType.tree_toValue(this.nodes[i]);\n        }\n        return values;\n    }\n    commit() {\n        if (this.viewsChanged.size === 0) {\n            return;\n        }\n        const nodesChanged = [];\n        for (const [index, view] of this.viewsChanged) {\n            const node = this.type.elementType.commitViewDU(view);\n            // Set new node in nodes array to ensure data represented in the tree and fast nodes access is equal\n            this.nodes[index] = node;\n            nodesChanged.push({ index, node });\n            // Cache the view's caches to preserve it's data after 'this.viewsChanged.clear()'\n            const cache = this.type.elementType.cacheOfViewDU(view);\n            if (cache)\n                this.caches[index] = cache;\n        }\n        // TODO: Optimize to loop only once, Numerical sort ascending\n        const nodesChangedSorted = nodesChanged.sort((a, b) => a.index - b.index);\n        const indexes = nodesChangedSorted.map((entry) => entry.index);\n        const nodes = nodesChangedSorted.map((entry) => entry.node);\n        const chunksNode = this.type.tree_getChunksNode(this._rootNode);\n        // TODO: Ensure fast setNodesAtDepth() method is correct\n        const newChunksNode = persistent_merkle_tree_1.setNodesAtDepth(chunksNode, this.type.chunkDepth, indexes, nodes);\n        this._rootNode = this.type.tree_setChunksNode(this._rootNode, newChunksNode, this.dirtyLength ? this._length : undefined);\n        this.viewsChanged.clear();\n        this.dirtyLength = false;\n    }\n    clearCache() {\n        this.nodes = [];\n        this.caches = [];\n        this.nodesPopulated = false;\n        // It's not necessary to clear this.viewsChanged since they have no effect on the cache.\n        // However preserving _SOME_ caches results in a very unpredictable experience.\n        this.viewsChanged.clear();\n        // Reset cached length only if it has been mutated\n        if (this.dirtyLength) {\n            this._length = this.type.tree_getLength(this._rootNode);\n            this.dirtyLength = false;\n        }\n    }\n    populateAllNodes() {\n        // If there's uncommited changes it may break.\n        // this.length can be increased but this._rootNode doesn't have that item\n        if (this.viewsChanged.size > 0) {\n            throw Error(\"Must commit changes before reading all nodes\");\n        }\n        if (!this.nodesPopulated) {\n            this.nodes = persistent_merkle_tree_1.getNodesAtDepth(this._rootNode, this.type.depth, 0, this.length);\n            this.nodesPopulated = true;\n        }\n    }\n}\nexports.ArrayCompositeTreeViewDU = ArrayCompositeTreeViewDU;\n//# sourceMappingURL=arrayComposite.js.map"]},"metadata":{},"sourceType":"script"}