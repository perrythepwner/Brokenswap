{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\nconst internal_1 = require(\"./internal\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nconst assertIsHexString = function assertIsHexString(input) {\n  if (!(0, internal_1.isHexString)(input)) {\n    const msg = \"This method only supports 0x-prefixed hex strings but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\nexports.assertIsHexString = assertIsHexString;\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nconst assertIsBuffer = function assertIsBuffer(input) {\n  if (!Buffer.isBuffer(input)) {\n    const msg = \"This method only supports Buffer but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\nexports.assertIsBuffer = assertIsBuffer;\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nconst assertIsArray = function assertIsArray(input) {\n  if (!Array.isArray(input)) {\n    const msg = \"This method only supports number arrays but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\nexports.assertIsArray = assertIsArray;\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nconst assertIsString = function assertIsString(input) {\n  if (typeof input !== 'string') {\n    const msg = \"This method only supports strings but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\nexports.assertIsString = assertIsString;","map":{"version":3,"sources":["../src/helpers.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;;AAGG;AACI,MAAM,iBAAiB,GAAG,SAApB,iBAAiB,CAAa,KAAa,EAAA;EACtD,IAAI,CAAC,CAAA,CAAA,EAAA,UAAA,CAAA,WAAW,EAAC,KAAK,CAAC,EAAE;IACvB,MAAM,GAAG,uEAAA,MAAA,CAAuE,KAAK,CAAE;IACvF,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC;EACrB;AACH,CAAC;AALY,OAAA,CAAA,iBAAiB,GAAA,iBAAA;AAO9B;;;AAGG;AACI,MAAM,cAAc,GAAG,SAAjB,cAAc,CAAa,KAAa,EAAA;EACnD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;IAC3B,MAAM,GAAG,sDAAA,MAAA,CAAsD,KAAK,CAAE;IACtE,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC;EACrB;AACH,CAAC;AALY,OAAA,CAAA,cAAc,GAAA,cAAA;AAO3B;;;AAGG;AACI,MAAM,aAAa,GAAG,SAAhB,aAAa,CAAa,KAAe,EAAA;EACpD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;IACzB,MAAM,GAAG,6DAAA,MAAA,CAA6D,KAAK,CAAE;IAC7E,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC;EACrB;AACH,CAAC;AALY,OAAA,CAAA,aAAa,GAAA,aAAA;AAO1B;;;AAGG;AACI,MAAM,cAAc,GAAG,SAAjB,cAAc,CAAa,KAAa,EAAA;EACnD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAM,GAAG,uDAAA,MAAA,CAAuD,KAAK,CAAE;IACvE,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC;EACrB;AACH,CAAC;AALY,OAAA,CAAA,cAAc,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\nconst internal_1 = require(\"./internal\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nconst assertIsHexString = function (input) {\n    if (!(0, internal_1.isHexString)(input)) {\n        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsHexString = assertIsHexString;\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nconst assertIsBuffer = function (input) {\n    if (!Buffer.isBuffer(input)) {\n        const msg = `This method only supports Buffer but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsBuffer = assertIsBuffer;\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nconst assertIsArray = function (input) {\n    if (!Array.isArray(input)) {\n        const msg = `This method only supports number arrays but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsArray = assertIsArray;\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nconst assertIsString = function (input) {\n    if (typeof input !== 'string') {\n        const msg = `This method only supports strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsString = assertIsString;\n//# sourceMappingURL=helpers.js.map"]},"metadata":{},"sourceType":"script"}