{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TreeViewDU = void 0;\nconst abstract_1 = require(\"../view/abstract\");\n/* eslint-disable @typescript-eslint/member-ordering  */\n/**\n * A Deferred Update Tree View (`ViewDU`) is a wrapper around a type and\n * a SSZ Node that contains:\n * - data merkleized\n * - some arbitrary caches to speed up data manipulation required by the type\n *\n * **ViewDU**\n * - Best for complex usage where performance is important\n * - Defers changes to when commit is called\n * - Does NOT have a reference to the parent ViewDU\n * - Has caches for fast get / set ops\n */\nclass TreeViewDU extends abstract_1.TreeView {\n  /**\n   * Merkleize view and compute its hashTreeRoot.\n   * Commits any pending changes before computing the root.\n   *\n   * See spec for definition of hashTreeRoot:\n   * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization\n   */\n  hashTreeRoot() {\n    this.commit();\n    return super.hashTreeRoot();\n  }\n  /**\n   * Serialize view to binary data.\n   * Commits any pending changes before computing the root.\n   */\n  serialize() {\n    this.commit();\n    return super.serialize();\n  }\n  /**\n   * Return a new ViewDU instance referencing the same internal `Node`.\n   *\n   * By default it will transfer the cache of this ViewDU to the new cloned instance. Set `dontTransferCache` to true\n   * to NOT transfer the cache to the cloned instance.\n   */\n  clone(dontTransferCache) {\n    if (dontTransferCache) {\n      return this.type.getViewDU(this.node);\n    } else {\n      const cache = this.cache;\n      this.clearCache();\n      return this.type.getViewDU(this.node, cache);\n    }\n  }\n}\nexports.TreeViewDU = TreeViewDU;","map":{"version":3,"sources":["../../src/viewDU/abstract.ts"],"names":[],"mappings":";;;;;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAEA;AAEA;;;;;;;;;;;AAWG;AACH,MAAsB,UAA+D,SAAQ,UAAA,CAAA,QAAW,CAAA;EAkBtG;;;;;;AAMG;EACH,YAAY,CAAA,EAAA;IACV,IAAI,CAAC,MAAM,CAAA,CAAE;IACb,OAAO,KAAK,CAAC,YAAY,CAAA,CAAE;EAC7B;EAEA;;;AAGG;EACH,SAAS,CAAA,EAAA;IACP,IAAI,CAAC,MAAM,CAAA,CAAE;IACb,OAAO,KAAK,CAAC,SAAS,CAAA,CAAE;EAC1B;EAEA;;;;;AAKG;EACH,KAAK,CAAC,iBAA2B,EAAA;IAC/B,IAAI,iBAAiB,EAAE;MACrB,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAS;KAC9C,MAAM;MACL,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK;MACxB,IAAI,CAAC,UAAU,CAAA,CAAE;MACjB,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAS;IACrD;EACH;AACD;AAtDD,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TreeViewDU = void 0;\nconst abstract_1 = require(\"../view/abstract\");\n/* eslint-disable @typescript-eslint/member-ordering  */\n/**\n * A Deferred Update Tree View (`ViewDU`) is a wrapper around a type and\n * a SSZ Node that contains:\n * - data merkleized\n * - some arbitrary caches to speed up data manipulation required by the type\n *\n * **ViewDU**\n * - Best for complex usage where performance is important\n * - Defers changes to when commit is called\n * - Does NOT have a reference to the parent ViewDU\n * - Has caches for fast get / set ops\n */\nclass TreeViewDU extends abstract_1.TreeView {\n    /**\n     * Merkleize view and compute its hashTreeRoot.\n     * Commits any pending changes before computing the root.\n     *\n     * See spec for definition of hashTreeRoot:\n     * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization\n     */\n    hashTreeRoot() {\n        this.commit();\n        return super.hashTreeRoot();\n    }\n    /**\n     * Serialize view to binary data.\n     * Commits any pending changes before computing the root.\n     */\n    serialize() {\n        this.commit();\n        return super.serialize();\n    }\n    /**\n     * Return a new ViewDU instance referencing the same internal `Node`.\n     *\n     * By default it will transfer the cache of this ViewDU to the new cloned instance. Set `dontTransferCache` to true\n     * to NOT transfer the cache to the cloned instance.\n     */\n    clone(dontTransferCache) {\n        if (dontTransferCache) {\n            return this.type.getViewDU(this.node);\n        }\n        else {\n            const cache = this.cache;\n            this.clearCache();\n            return this.type.getViewDU(this.node, cache);\n        }\n    }\n}\nexports.TreeViewDU = TreeViewDU;\n//# sourceMappingURL=abstract.js.map"]},"metadata":{},"sourceType":"script"}