{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport * as React from \"react\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { wrapQueryRef } from \"../cache/QueryReference.js\";\nimport { getSuspenseCache } from \"../cache/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nexport function useBackgroundQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n  var client = useApolloClient(options.client);\n  var suspenseCache = getSuspenseCache(client);\n  var watchQueryOptions = useWatchQueryOptions({\n    client: client,\n    query: query,\n    options: options\n  });\n  var fetchPolicy = watchQueryOptions.fetchPolicy,\n    variables = watchQueryOptions.variables;\n  var _a = options.queryKey,\n    queryKey = _a === void 0 ? [] : _a;\n  var didFetchResult = React.useRef(fetchPolicy !== \"standby\");\n  didFetchResult.current || (didFetchResult.current = fetchPolicy !== \"standby\");\n  var cacheKey = __spreadArray([query, canonicalStringify(variables)], [].concat(queryKey), true);\n  var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\n    return client.watchQuery(watchQueryOptions);\n  });\n  var _b = React.useState(function () {\n      return new Map([[queryRef.key, queryRef.promise]]);\n    }),\n    promiseCache = _b[0],\n    setPromiseCache = _b[1];\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    var promise = queryRef.applyOptions(watchQueryOptions);\n    promiseCache.set(queryRef.key, promise);\n  }\n  React.useEffect(function () {\n    return queryRef.retain();\n  }, [queryRef]);\n  var fetchMore = React.useCallback(function (options) {\n    var promise = queryRef.fetchMore(options);\n    setPromiseCache(function (promiseCache) {\n      return new Map(promiseCache).set(queryRef.key, queryRef.promise);\n    });\n    return promise;\n  }, [queryRef]);\n  var refetch = React.useCallback(function (variables) {\n    var promise = queryRef.refetch(variables);\n    setPromiseCache(function (promiseCache) {\n      return new Map(promiseCache).set(queryRef.key, queryRef.promise);\n    });\n    return promise;\n  }, [queryRef]);\n  queryRef.promiseCache = promiseCache;\n  var wrappedQueryRef = React.useMemo(function () {\n    return wrapQueryRef(queryRef);\n  }, [queryRef]);\n  return [didFetchResult.current ? wrappedQueryRef : void 0, {\n    fetchMore: fetchMore,\n    refetch: refetch\n  }];\n}","map":{"version":3,"sources":["../../../src/react/hooks/useBackgroundQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport type {\n  DocumentNode,\n  OperationVariables,\n  TypedDocumentNode,\n} from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { wrapQueryRef } from \"../cache/QueryReference.js\";\nimport type { QueryReference } from \"../cache/QueryReference.js\";\nimport type { BackgroundQueryHookOptions, NoInfer } from \"../types/types.js\";\nimport { __use } from \"./internal/index.js\";\nimport { getSuspenseCache } from \"../cache/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport type { FetchMoreFunction, RefetchFunction } from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport type { CacheKey } from \"../cache/types.js\";\nimport type { SkipToken } from \"./constants.js\";\n\nexport type UseBackgroundQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = {\n  fetchMore: FetchMoreFunction<TData, TVariables>;\n  refetch: RefetchFunction<TData, TVariables>;\n};\n\ntype BackgroundQueryHookOptionsNoInfer<\n  TData,\n  TVariables extends OperationVariables,\n> = BackgroundQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>;\n\nexport function useBackgroundQuery<\n  TData,\n  TVariables extends OperationVariables,\n  TOptions extends Omit<BackgroundQueryHookOptions<TData>, \"variables\">,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & TOptions\n): [\n  (\n    | QueryReference<\n        TOptions[\"errorPolicy\"] extends \"ignore\" | \"all\"\n          ? TOptions[\"returnPartialData\"] extends true\n            ? DeepPartial<TData> | undefined\n            : TData | undefined\n          : TOptions[\"returnPartialData\"] extends true\n          ? DeepPartial<TData>\n          : TData\n      >\n    | (TOptions[\"skip\"] extends boolean ? undefined : never)\n  ),\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    returnPartialData: true;\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): [\n  QueryReference<DeepPartial<TData> | undefined>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): [\n  QueryReference<TData | undefined>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    skip: boolean;\n    returnPartialData: true;\n  }\n): [\n  QueryReference<DeepPartial<TData>> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    returnPartialData: true;\n  }\n): [\n  QueryReference<DeepPartial<TData>>,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n    skip: boolean;\n  }\n): [\n  QueryReference<TData> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: BackgroundQueryHookOptionsNoInfer<TData, TVariables>\n): [QueryReference<TData>, UseBackgroundQueryResult<TData, TVariables>];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SkipToken\n): [undefined, UseBackgroundQueryResult<TData, TVariables>];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | SkipToken\n    | (BackgroundQueryHookOptionsNoInfer<TData, TVariables> & {\n        returnPartialData: true;\n      })\n): [\n  QueryReference<DeepPartial<TData>> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SkipToken | BackgroundQueryHookOptionsNoInfer<TData, TVariables>\n): [\n  QueryReference<TData> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n];\n\nexport function useBackgroundQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | (SkipToken &\n        Partial<BackgroundQueryHookOptionsNoInfer<TData, TVariables>>)\n    | BackgroundQueryHookOptionsNoInfer<TData, TVariables> = Object.create(null)\n): [\n  QueryReference<TData> | undefined,\n  UseBackgroundQueryResult<TData, TVariables>,\n] {\n  const client = useApolloClient(options.client);\n  const suspenseCache = getSuspenseCache(client);\n  const watchQueryOptions = useWatchQueryOptions({ client, query, options });\n  const { fetchPolicy, variables } = watchQueryOptions;\n  const { queryKey = [] } = options;\n\n  // This ref tracks the first time query execution is enabled to determine\n  // whether to return a query ref or `undefined`. When initialized\n  // in a skipped state (either via `skip: true` or `skipToken`) we return\n  // `undefined` for the `queryRef` until the query has been enabled. Once\n  // enabled, a query ref is always returned regardless of whether the query is\n  // skipped again later.\n  const didFetchResult = React.useRef(fetchPolicy !== \"standby\");\n  didFetchResult.current ||= fetchPolicy !== \"standby\";\n\n  const cacheKey: CacheKey = [\n    query,\n    canonicalStringify(variables),\n    ...([] as any[]).concat(queryKey),\n  ];\n\n  const queryRef = suspenseCache.getQueryRef(cacheKey, () =>\n    client.watchQuery(watchQueryOptions)\n  );\n\n  const [promiseCache, setPromiseCache] = React.useState(\n    () => new Map([[queryRef.key, queryRef.promise]])\n  );\n\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    const promise = queryRef.applyOptions(watchQueryOptions);\n    promiseCache.set(queryRef.key, promise);\n  }\n\n  React.useEffect(() => queryRef.retain(), [queryRef]);\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      const promise = queryRef.fetchMore(options);\n\n      setPromiseCache((promiseCache) =>\n        new Map(promiseCache).set(queryRef.key, queryRef.promise)\n      );\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (variables) => {\n      const promise = queryRef.refetch(variables);\n\n      setPromiseCache((promiseCache) =>\n        new Map(promiseCache).set(queryRef.key, queryRef.promise)\n      );\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  queryRef.promiseCache = promiseCache;\n\n  const wrappedQueryRef = React.useMemo(\n    () => wrapQueryRef(queryRef),\n    [queryRef]\n  );\n\n  return [\n    didFetchResult.current ? wrappedQueryRef : void 0,\n    { fetchMore, refetch },\n  ];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}