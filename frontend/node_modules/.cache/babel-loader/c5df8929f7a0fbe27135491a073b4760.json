{"ast":null,"code":"import _asyncToGenerator from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _s = $RefreshSig$();\nimport { useCelo, useProvider } from '@celo/react-celo';\nimport ENS from '@ensdomains/ensjs';\nimport { useEffect, useState } from 'react';\n/**\n * Fetches the account summary of a Celo account.\n */\nexport default function useAccountSummary(address) {\n  _s();\n  const [summary, setSummary] = useState(null);\n  const [nom, setNom] = useState(null);\n  const {\n    kit\n  } = useCelo();\n  const provider = useProvider();\n  useEffect(() => {\n    ;\n    _asyncToGenerator(function* () {\n      if (!address) {\n        return;\n      }\n      try {\n        const accounts = yield kit.contracts.getAccounts();\n        const account = yield accounts.signerToAccount(address);\n        setSummary(yield accounts.getAccountSummary(account));\n      } catch (e) {\n        console.error('Could not fetch account summary', e);\n      }\n      const nom = new ENS({\n        provider,\n        ensAddress: '0x3DE51c3960400A0F752d3492652Ae4A0b2A36FB3'\n      });\n      try {\n        const {\n          name\n        } = yield nom.getName(address);\n        if (name) setNom(\"\".concat(name, \".nom\"));\n      } catch (e) {\n        console.error('Could not fetch nom data', e);\n      }\n    })();\n  }, [address, kit, provider]);\n  return {\n    summary,\n    nom,\n    loading: summary === null\n  };\n}\n_s(useAccountSummary, \"p6xjF6K3obQDxrH6QHK9Aof+iys=\", false, function () {\n  return [useCelo, useProvider];\n});","map":{"version":3,"names":["useCelo","useProvider","ENS","useEffect","useState","useAccountSummary","address","_s","summary","setSummary","nom","setNom","kit","provider","_asyncToGenerator","accounts","contracts","getAccounts","account","signerToAccount","getAccountSummary","e","console","error","ensAddress","name","getName","concat","loading"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/hooks/useAccountSummary.ts"],"sourcesContent":["import { AccountsWrapper } from '@celo/contractkit/lib/wrappers/Accounts'\nimport { useCelo, useProvider } from '@celo/react-celo'\nimport ENS from '@ensdomains/ensjs'\nimport { useEffect, useState } from 'react'\n\ntype AsyncReturnType<T extends (...args: any) => any> = T extends (...args: any) => Promise<infer U>\n  ? U\n  : T extends (...args: any) => infer U\n  ? U\n  : any\n\ntype AccountSummary = AsyncReturnType<AccountsWrapper['getAccountSummary']>\n\n/**\n * Fetches the account summary of a Celo account.\n */\nexport default function useAccountSummary(address?: string | null): {\n  summary: AccountSummary | null\n  nom: string | null\n  loading: boolean\n} {\n  const [summary, setSummary] = useState<AccountSummary | null>(null)\n  const [nom, setNom] = useState<string | null>(null)\n  const { kit } = useCelo()\n  const provider = useProvider()\n\n  useEffect(() => {\n    ;(async () => {\n      if (!address) {\n        return\n      }\n      try {\n        const accounts = await kit.contracts.getAccounts()\n        const account = await accounts.signerToAccount(address)\n        setSummary(await accounts.getAccountSummary(account))\n      } catch (e) {\n        console.error('Could not fetch account summary', e)\n      }\n\n      const nom = new ENS({ provider, ensAddress: '0x3DE51c3960400A0F752d3492652Ae4A0b2A36FB3' })\n      try {\n        const { name } = await nom.getName(address)\n        if (name) setNom(`${name}.nom`)\n      } catch (e) {\n        console.error('Could not fetch nom data', e)\n      }\n    })()\n  }, [address, kit, provider])\n\n  return { summary, nom, loading: summary === null }\n}\n"],"mappings":";;AACA,SAASA,OAAO,EAAEC,WAAW,QAAQ,kBAAkB;AACvD,OAAOC,GAAG,MAAM,mBAAmB;AACnC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAU3C;AACA;AACA;AACA,eAAe,SAASC,iBAAiBA,CAACC,OAAuB,EAI/D;EAAAC,EAAA;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAwB,IAAI,CAAC;EACnE,MAAM,CAACM,GAAG,EAAEC,MAAM,CAAC,GAAGP,QAAQ,CAAgB,IAAI,CAAC;EACnD,MAAM;IAAEQ;EAAI,CAAC,GAAGZ,OAAO,CAAC,CAAC;EACzB,MAAMa,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAE9BE,SAAS,CAAC,MAAM;IACd;IAACW,iBAAA,CAAC,aAAY;MACZ,IAAI,CAACR,OAAO,EAAE;QACZ;MACF;MACA,IAAI;QACF,MAAMS,QAAQ,SAASH,GAAG,CAACI,SAAS,CAACC,WAAW,CAAC,CAAC;QAClD,MAAMC,OAAO,SAASH,QAAQ,CAACI,eAAe,CAACb,OAAO,CAAC;QACvDG,UAAU,OAAOM,QAAQ,CAACK,iBAAiB,CAACF,OAAO,CAAC,CAAC;MACvD,CAAC,CAAC,OAAOG,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEF,CAAC,CAAC;MACrD;MAEA,MAAMX,GAAG,GAAG,IAAIR,GAAG,CAAC;QAAEW,QAAQ;QAAEW,UAAU,EAAE;MAA6C,CAAC,CAAC;MAC3F,IAAI;QACF,MAAM;UAAEC;QAAK,CAAC,SAASf,GAAG,CAACgB,OAAO,CAACpB,OAAO,CAAC;QAC3C,IAAImB,IAAI,EAAEd,MAAM,IAAAgB,MAAA,CAAIF,IAAI,SAAM,CAAC;MACjC,CAAC,CAAC,OAAOJ,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,CAAC,CAAC;MAC9C;IACF,CAAC,EAAE,CAAC;EACN,CAAC,EAAE,CAACf,OAAO,EAAEM,GAAG,EAAEC,QAAQ,CAAC,CAAC;EAE5B,OAAO;IAAEL,OAAO;IAAEE,GAAG;IAAEkB,OAAO,EAAEpB,OAAO,KAAK;EAAK,CAAC;AACpD;AAACD,EAAA,CAlCuBF,iBAAiB;EAAA,QAOvBL,OAAO,EACNC,WAAW;AAAA"},"metadata":{},"sourceType":"module"}