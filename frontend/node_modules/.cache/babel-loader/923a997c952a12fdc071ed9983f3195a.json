{"ast":null,"code":"import _objectSpread from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _s = $RefreshSig$();\nimport { useCelo, useConnectedSigner } from '@celo/react-celo';\nimport { ChainId } from '@ubeswap/sdk';\nimport useENS from 'hooks/useENS';\nimport { SwapCallbackState, useSwapCallback } from 'hooks/useSwapCallback';\nimport { useMemo } from 'react';\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../../constants';\nimport { isAddress, shortenAddress } from '../../../utils';\nimport { useDoTransaction } from '.';\nimport { executeMinimaTrade } from './minima/executeMinimaTrade';\nimport { executeMoolaDirectTrade } from './moola/executeMoolaDirectTrade';\nimport { MoolaDirectTrade } from './moola/MoolaDirectTrade';\nimport { MinimaRouterTrade } from './trade';\n/**\n * Use callback to allow trading\n * @param trade\n * @param allowedSlippage\n * @param recipientAddressOrName\n * @returns\n */\nexport const useTradeCallback = function useTradeCallback(trade) {\n  _s();\n  let allowedSlippage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : INITIAL_ALLOWED_SLIPPAGE;\n  let recipientAddressOrName = arguments.length > 2 ? arguments[2] : undefined;\n  const {\n    address: account,\n    network\n  } = useCelo();\n  const signer = useConnectedSigner();\n  const chainId = network.chainId;\n  const doTransaction = useDoTransaction();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  const withRecipient = recipient === account ? '' : \" to \".concat(recipientAddressOrName && isAddress(recipientAddressOrName) ? shortenAddress(recipientAddressOrName) : recipientAddressOrName);\n  const {\n    state: swapState,\n    callback: swapCallback,\n    error\n  } = useSwapCallback(trade, allowedSlippage, recipientAddressOrName);\n  return useMemo(() => {\n    if (error) {\n      return {\n        state: swapState,\n        callback: null,\n        error\n      };\n    }\n    if (!trade || !account) {\n      return {\n        state: SwapCallbackState.INVALID,\n        callback: null,\n        error: 'Missing dependencies'\n      };\n    }\n    if (chainId === ChainId.BAKLAVA) {\n      return {\n        state: SwapCallbackState.INVALID,\n        callback: null,\n        error: 'Baklava is not supported'\n      };\n    }\n    const env = {\n      signer,\n      chainId,\n      doTransaction\n    };\n    if (trade instanceof MinimaRouterTrade) {\n      return {\n        state: SwapCallbackState.VALID,\n        callback: function () {\n          var _callback = _asyncToGenerator(function* () {\n            return (yield executeMinimaTrade(_objectSpread(_objectSpread({}, env), {}, {\n              trade,\n              recipient,\n              withRecipient\n            }))).hash;\n          });\n          function callback() {\n            return _callback.apply(this, arguments);\n          }\n          return callback;\n        }(),\n        error: null\n      };\n    } else if (trade instanceof MoolaDirectTrade) {\n      return {\n        state: SwapCallbackState.VALID,\n        callback: function () {\n          var _callback2 = _asyncToGenerator(function* () {\n            return (yield executeMoolaDirectTrade(_objectSpread(_objectSpread({}, env), {}, {\n              trade\n            }))).hash;\n          });\n          function callback() {\n            return _callback2.apply(this, arguments);\n          }\n          return callback;\n        }(),\n        error: null\n      };\n    } else if (swapCallback) {\n      return {\n        state: SwapCallbackState.VALID,\n        callback: swapCallback,\n        error: null\n      };\n    } else {\n      return {\n        state: SwapCallbackState.INVALID,\n        callback: null,\n        error: 'Unknown trade type'\n      };\n    }\n  }, [error, signer, trade, account, chainId, doTransaction, swapCallback, swapState, recipient, withRecipient]);\n};\n_s(useTradeCallback, \"3pfgXO31xWB2uEOT20AjY47o5Ks=\", false, function () {\n  return [useCelo, useConnectedSigner, useDoTransaction, useENS, useSwapCallback];\n});","map":{"version":3,"names":["useCelo","useConnectedSigner","ChainId","useENS","SwapCallbackState","useSwapCallback","useMemo","INITIAL_ALLOWED_SLIPPAGE","isAddress","shortenAddress","useDoTransaction","executeMinimaTrade","executeMoolaDirectTrade","MoolaDirectTrade","MinimaRouterTrade","useTradeCallback","trade","_s","allowedSlippage","arguments","length","undefined","recipientAddressOrName","address","account","network","signer","chainId","doTransaction","recipientAddress","recipient","withRecipient","concat","state","swapState","callback","swapCallback","error","INVALID","BAKLAVA","env","VALID","_callback","_asyncToGenerator","_objectSpread","hash","apply","_callback2"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/components/swap/routing/useTradeCallback.ts"],"sourcesContent":["import { useCelo, useConnectedSigner } from '@celo/react-celo'\nimport { JsonRpcSigner } from '@ethersproject/providers'\nimport { ChainId, Trade } from '@ubeswap/sdk'\nimport useENS from 'hooks/useENS'\nimport { SwapCallbackState, useSwapCallback } from 'hooks/useSwapCallback'\nimport { useMemo } from 'react'\n\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../../constants'\nimport { isAddress, shortenAddress } from '../../../utils'\nimport { useDoTransaction } from '.'\nimport { executeMinimaTrade } from './minima/executeMinimaTrade'\nimport { executeMoolaDirectTrade } from './moola/executeMoolaDirectTrade'\nimport { MoolaDirectTrade } from './moola/MoolaDirectTrade'\nimport { MinimaRouterTrade } from './trade'\n/**\n * Use callback to allow trading\n * @param trade\n * @param allowedSlippage\n * @param recipientAddressOrName\n * @returns\n */\nexport const useTradeCallback = (\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } => {\n  const { address: account, network } = useCelo()\n  const signer = useConnectedSigner() as JsonRpcSigner\n  const chainId = network.chainId as unknown as ChainId\n  const doTransaction = useDoTransaction()\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n  const withRecipient =\n    recipient === account\n      ? ''\n      : ` to ${\n          recipientAddressOrName && isAddress(recipientAddressOrName)\n            ? shortenAddress(recipientAddressOrName)\n            : recipientAddressOrName\n        }`\n\n  const {\n    state: swapState,\n    callback: swapCallback,\n    error,\n  } = useSwapCallback(trade, allowedSlippage, recipientAddressOrName)\n\n  return useMemo(() => {\n    if (error) {\n      return { state: swapState, callback: null, error }\n    }\n\n    if (!trade || !account) {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\n    }\n\n    if (chainId === ChainId.BAKLAVA) {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Baklava is not supported' }\n    }\n\n    const env = { signer, chainId, doTransaction }\n    if (trade instanceof MinimaRouterTrade) {\n      return {\n        state: SwapCallbackState.VALID,\n        callback: async () => (await executeMinimaTrade({ ...env, trade, recipient, withRecipient })).hash,\n        error: null,\n      }\n    } else if (trade instanceof MoolaDirectTrade) {\n      return {\n        state: SwapCallbackState.VALID,\n        callback: async () => (await executeMoolaDirectTrade({ ...env, trade })).hash,\n        error: null,\n      }\n    } else if (swapCallback) {\n      return { state: SwapCallbackState.VALID, callback: swapCallback, error: null }\n    } else {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Unknown trade type' }\n    }\n  }, [error, signer, trade, account, chainId, doTransaction, swapCallback, swapState, recipient, withRecipient])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}