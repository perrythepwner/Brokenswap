{"ast":null,"code":"import _asyncToGenerator from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{useCelo,useConnectedSigner,useProvider}from'@celo/react-celo';import{JSBI,Percent,Router}from'@ubeswap/sdk';import{MoolaRouterTrade}from'components/swap/routing/hooks/useTrade';import{useMemo}from'react';import{useTransactionAdder}from'state/transactions/hooks';import invariant from'tiny-invariant';import{BIPS_BASE,INITIAL_ALLOWED_SLIPPAGE}from'../constants';import{calculateGasMargin,getMoolaRouterContract,getRouterContract,isAddress,shortenAddress}from'../utils';import isZero from'../utils/isZero';import useENS from'./useENS';import useTransactionDeadline from'./useTransactionDeadline';export let SwapCallbackState=/*#__PURE__*/function(SwapCallbackState){SwapCallbackState[SwapCallbackState[\"INVALID\"]=0]=\"INVALID\";SwapCallbackState[SwapCallbackState[\"LOADING\"]=1]=\"LOADING\";SwapCallbackState[SwapCallbackState[\"VALID\"]=2]=\"VALID\";return SwapCallbackState;}({});/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */function useSwapCallArguments(trade){let allowedSlippage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:INITIAL_ALLOWED_SLIPPAGE;let// in bips\nrecipientAddressOrName=arguments.length>2?arguments[2]:undefined;const{address:account,network}=useCelo();const library=useProvider();const chainId=network.chainId;const{address:recipientAddress}=useENS(recipientAddressOrName);const recipient=recipientAddressOrName===null?account:recipientAddress;const deadline=useTransactionDeadline();return useMemo(()=>{if(!trade||!recipient||!library||!account||!chainId||!deadline)return[];const contract=trade instanceof MoolaRouterTrade?getMoolaRouterContract(chainId,library,account):getRouterContract(chainId,library,account);const swapCallParameters=Router.swapCallParameters(trade,{feeOnTransfer:!(trade instanceof MoolaRouterTrade),allowedSlippage:new Percent(JSBI.BigInt(allowedSlippage),BIPS_BASE),recipient,deadline:deadline.toNumber()});invariant(Array.isArray(swapCallParameters.args[2]),'arg 2 not path');if(trade instanceof MoolaRouterTrade){swapCallParameters.args[2]=trade.path.map(p=>p.address);}const swapMethods=[swapCallParameters];// TODO(igm): figure out why this is failing\n// if (trade.tradeType === TradeType.EXACT_INPUT) {\n//   swapMethods.push(\n//     Router.swapCallParameters(trade, {\n//       feeOnTransfer: true,\n//       allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n//       recipient,\n//       deadline: deadline.toNumber()\n//     })\n//   )\n// }\nreturn swapMethods.map(parameters=>({parameters,contract}));},[account,allowedSlippage,chainId,deadline,library,recipient,trade]);}// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(trade){let allowedSlippage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:INITIAL_ALLOWED_SLIPPAGE;let// in bips\nrecipientAddressOrName=arguments.length>2?arguments[2]:undefined;const{network,address:account}=useCelo();const chainId=network.chainId;const swapCalls=useSwapCallArguments(trade,allowedSlippage,recipientAddressOrName);const addTransaction=useTransactionAdder();const{address:recipientAddress}=useENS(recipientAddressOrName);const recipient=recipientAddressOrName===null?account:recipientAddress;const signer=useConnectedSigner();return useMemo(()=>{if(!trade||!account||!chainId){return{state:SwapCallbackState.INVALID,callback:null,error:'Missing dependencies'};}if(!recipient){if(recipientAddressOrName!==null){return{state:SwapCallbackState.INVALID,callback:null,error:'Invalid recipient'};}else{return{state:SwapCallbackState.LOADING,callback:null,error:null};}}return{state:SwapCallbackState.VALID,callback:function(){var _onSwap=_asyncToGenerator(function*(){const estimatedCalls=yield Promise.all(swapCalls.map(call=>{const{parameters:{methodName,args,value},contract}=call;const options=!value||isZero(value)?{}:{value};return contract.estimateGas[methodName](...args,options).then(gasEstimate=>{return{call,gasEstimate};}).catch(gasError=>{console.debug('Gas estimate failed, trying eth_call to extract error',call);return contract.callStatic[methodName](...args,options).then(result=>{console.debug('Unexpected successful call after failed estimate gas',call,gasError,result);return{call,error:new Error('Unexpected issue with estimating the gas. Please try again.')};}).catch(callError=>{console.debug('Call threw error',call,callError);let errorMessage;switch(callError.reason){case'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':case'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':errorMessage='This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.';break;default:errorMessage=\"The transaction cannot succeed due to error: \".concat(callError.reason,\". This is probably an issue with one of the tokens you are swapping.\");}return{call,error:new Error(errorMessage)};});});}));// a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\nconst successfulEstimation=estimatedCalls.find((el,ix,list)=>'gasEstimate'in el&&(ix===list.length-1||'gasEstimate'in list[ix+1]));if(!successfulEstimation){const errorCalls=estimatedCalls.filter(call=>'error'in call);if(errorCalls.length>0)throw errorCalls[errorCalls.length-1].error;throw new Error('Unexpected error. Please contact support: none of the calls threw an error');}const{call:{contract:disconnectedContract,parameters:{methodName,args,value}},gasEstimate}=successfulEstimation;const contract=disconnectedContract.connect(signer);return contract[methodName](...args,{gasLimit:calculateGasMargin(gasEstimate)}).then(response=>{const inputSymbol=trade instanceof MoolaRouterTrade?trade.path[0].symbol:trade.inputAmount.currency.symbol;const outputSymbol=trade instanceof MoolaRouterTrade?trade.path[trade.path.length-1].symbol:trade.outputAmount.currency.symbol;const inputAmount=trade.inputAmount.toSignificant(3);const outputAmount=trade.outputAmount.toSignificant(3);const base=\"Swap \".concat(inputAmount,\" \").concat(inputSymbol,\" for \").concat(outputAmount,\" \").concat(outputSymbol);const withRecipient=recipient===account?base:\"\".concat(base,\" to \").concat(recipientAddressOrName&&isAddress(recipientAddressOrName)?shortenAddress(recipientAddressOrName):recipientAddressOrName);addTransaction(response,{summary:withRecipient});return response.hash;}).catch(error=>{// if the user rejected the tx, pass this along\nif((error===null||error===void 0?void 0:error.code)===4001){throw new Error('Transaction rejected.');}else{// otherwise, the error was unexpected and we need to convey that\nconsole.error(\"Swap failed\",error,methodName,args,value);throw new Error(\"Swap failed: \".concat(error.message));}});});function onSwap(){return _onSwap.apply(this,arguments);}return onSwap;}(),error:null};},[trade,account,chainId,recipient,recipientAddressOrName,swapCalls,signer,addTransaction]);}","map":{"version":3,"names":["useCelo","useConnectedSigner","useProvider","JSBI","Percent","Router","MoolaRouterTrade","useMemo","useTransactionAdder","invariant","BIPS_BASE","INITIAL_ALLOWED_SLIPPAGE","calculateGasMargin","getMoolaRouterContract","getRouterContract","isAddress","shortenAddress","isZero","useENS","useTransactionDeadline","SwapCallbackState","useSwapCallArguments","trade","allowedSlippage","arguments","length","undefined","recipientAddressOrName","address","account","network","library","chainId","recipientAddress","recipient","deadline","contract","swapCallParameters","feeOnTransfer","BigInt","toNumber","Array","isArray","args","path","map","p","swapMethods","parameters","useSwapCallback","swapCalls","addTransaction","signer","state","INVALID","callback","error","LOADING","VALID","_onSwap","_asyncToGenerator","estimatedCalls","Promise","all","call","methodName","value","options","estimateGas","then","gasEstimate","catch","gasError","console","debug","callStatic","result","Error","callError","errorMessage","reason","concat","successfulEstimation","find","el","ix","list","errorCalls","filter","disconnectedContract","connect","gasLimit","response","inputSymbol","symbol","inputAmount","currency","outputSymbol","outputAmount","toSignificant","base","withRecipient","summary","hash","code","message","onSwap","apply"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/hooks/useSwapCallback.ts"],"sourcesContent":["import { useCelo, useConnectedSigner, useProvider } from '@celo/react-celo'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { JsonRpcSigner } from '@ethersproject/providers'\nimport { JSBI, Percent, Router, SwapParameters, Trade } from '@ubeswap/sdk'\nimport { MoolaRouterTrade } from 'components/swap/routing/hooks/useTrade'\nimport { ContractTransaction } from 'ethers'\nimport { useMemo } from 'react'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport invariant from 'tiny-invariant'\n\nimport { BIPS_BASE, INITIAL_ALLOWED_SLIPPAGE } from '../constants'\nimport { calculateGasMargin, getMoolaRouterContract, getRouterContract, isAddress, shortenAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport useENS from './useENS'\nimport useTransactionDeadline from './useTransactionDeadline'\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID,\n}\n\ninterface SwapCall {\n  contract: Contract\n  parameters: SwapParameters\n}\n\ninterface SuccessfulCall {\n  call: SwapCall\n  gasEstimate: BigNumber\n}\n\ninterface FailedCall {\n  call: SwapCall\n  error: Error\n}\n\ntype EstimatedSwapCall = SuccessfulCall | FailedCall\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nfunction useSwapCallArguments(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): SwapCall[] {\n  const { address: account, network } = useCelo()\n  const library = useProvider()\n  const chainId = network.chainId\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n  const deadline = useTransactionDeadline()\n\n  return useMemo(() => {\n    if (!trade || !recipient || !library || !account || !chainId || !deadline) return []\n\n    const contract =\n      trade instanceof MoolaRouterTrade\n        ? getMoolaRouterContract(chainId, library, account)\n        : getRouterContract(chainId, library, account)\n\n    const swapCallParameters = Router.swapCallParameters(trade, {\n      feeOnTransfer: !(trade instanceof MoolaRouterTrade),\n      allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n      recipient,\n      deadline: deadline.toNumber(),\n    })\n    invariant(Array.isArray(swapCallParameters.args[2]), 'arg 2 not path')\n    if (trade instanceof MoolaRouterTrade) {\n      swapCallParameters.args[2] = trade.path.map((p) => p.address)\n    }\n\n    const swapMethods = [swapCallParameters]\n\n    // TODO(igm): figure out why this is failing\n    // if (trade.tradeType === TradeType.EXACT_INPUT) {\n    //   swapMethods.push(\n    //     Router.swapCallParameters(trade, {\n    //       feeOnTransfer: true,\n    //       allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n    //       recipient,\n    //       deadline: deadline.toNumber()\n    //     })\n    //   )\n    // }\n\n    return swapMethods.map((parameters) => ({ parameters, contract }))\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade])\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\n  const { network, address: account } = useCelo()\n  const chainId = network.chainId\n\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, recipientAddressOrName)\n\n  const addTransaction = useTransactionAdder()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n\n  const signer = useConnectedSigner() as JsonRpcSigner\n\n  return useMemo(() => {\n    if (!trade || !account || !chainId) {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\n      } else {\n        return { state: SwapCallbackState.LOADING, callback: null, error: null }\n      }\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<string> {\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\n          swapCalls.map((call) => {\n            const {\n              parameters: { methodName, args, value },\n              contract,\n            } = call\n            const options = !value || isZero(value) ? {} : { value }\n\n            return contract.estimateGas[methodName](...args, options)\n              .then((gasEstimate) => {\n                return {\n                  call,\n                  gasEstimate,\n                }\n              })\n              .catch((gasError) => {\n                console.debug('Gas estimate failed, trying eth_call to extract error', call)\n\n                return contract.callStatic[methodName](...args, options)\n                  .then((result) => {\n                    console.debug('Unexpected successful call after failed estimate gas', call, gasError, result)\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') }\n                  })\n                  .catch((callError) => {\n                    console.debug('Call threw error', call, callError)\n                    let errorMessage: string\n                    switch (callError.reason) {\n                      case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n                      case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n                        errorMessage =\n                          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\n                        break\n                      default:\n                        errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`\n                    }\n                    return { call, error: new Error(errorMessage) }\n                  })\n              })\n          })\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1])\n        )\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error')\n        }\n\n        const {\n          call: {\n            contract: disconnectedContract,\n            parameters: { methodName, args, value },\n          },\n          gasEstimate,\n        } = successfulEstimation\n\n        const contract = disconnectedContract.connect(signer)\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n        })\n          .then((response: ContractTransaction) => {\n            const inputSymbol =\n              trade instanceof MoolaRouterTrade ? trade.path[0].symbol : trade.inputAmount.currency.symbol\n            const outputSymbol =\n              trade instanceof MoolaRouterTrade\n                ? trade.path[trade.path.length - 1].symbol\n                : trade.outputAmount.currency.symbol\n            const inputAmount = trade.inputAmount.toSignificant(3)\n            const outputAmount = trade.outputAmount.toSignificant(3)\n\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\n            const withRecipient =\n              recipient === account\n                ? base\n                : `${base} to ${\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\n                      ? shortenAddress(recipientAddressOrName)\n                      : recipientAddressOrName\n                  }`\n\n            addTransaction(response, {\n              summary: withRecipient,\n            })\n\n            return response.hash\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.')\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, methodName, args, value)\n              throw new Error(`Swap failed: ${error.message}`)\n            }\n          })\n      },\n      error: null,\n    }\n  }, [trade, account, chainId, recipient, recipientAddressOrName, swapCalls, signer, addTransaction])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}