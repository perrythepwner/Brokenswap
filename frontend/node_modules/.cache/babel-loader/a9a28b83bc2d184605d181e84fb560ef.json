{"ast":null,"code":"// type Var = {\n//   name: String\n//   type: \"uint256\" | \"bytes32\" | ...\n// }\n//\n// type Method = {\n//   name: String\n//   inputs: [Var]\n//   output: [Var]\n//   constant: Bool\n//   payable: Bool\n// }\n\nconst Bytes = require(\"./bytes\");\nconst Nat = require(\"./nat\");\nconst keccak256s = require(\"./hash\").keccak256s;\n\n// (type : String), JSType(type) -> {data: Bytes, dynamic: Bool}\n//   ABI-encodes a single term.\nconst encode = (type, value) => {\n  if (type === \"bytes\") {\n    const length = Bytes.length(value);\n    const nextMul32 = (((length - 1) / 32 | 0) + 1) * 32;\n    const lengthEncoded = encode(\"uint256\", Nat.fromNumber(length)).data;\n    const bytesEncoded = Bytes.padRight(nextMul32, value);\n    return {\n      data: Bytes.concat(lengthEncoded, bytesEncoded),\n      dynamic: true\n    };\n  } else if (type === \"uint256\" || type === \"bytes32\" || type === \"address\") {\n    return {\n      data: Bytes.pad(32, value),\n      dynamic: false\n    };\n  } else {\n    throw \"Eth-lib can't encode ABI type \" + type + \" yet.\";\n  }\n};\n\n// (method : Method), [JSType(method.inputs[i].type)] -> Bytes\n//   ABI-encodes the transaction data to call a method.\nconst methodData = (method, params) => {\n  const methodSig = method.name + \"(\" + method.inputs.map(i => i.type).join(\",\") + \")\";\n  const methodHash = keccak256s(methodSig).slice(0, 10);\n  let encodedParams = params.map((param, i) => encode(method.inputs[i].type, param));\n  var headBlock = \"0x\";\n  let dataBlock = \"0x\";\n  for (var i = 0; i < encodedParams.length; ++i) {\n    if (encodedParams[i].dynamic) {\n      var dataLoc = encodedParams.length * 32 + Bytes.length(dataBlock);\n      headBlock = Bytes.concat(headBlock, Bytes.pad(32, Nat.fromNumber(dataLoc)));\n      dataBlock = Bytes.concat(dataBlock, encodedParams[i].data);\n    } else {\n      headBlock = Bytes.concat(headBlock, encodedParams[i].data);\n    }\n  }\n  return Bytes.flatten([methodHash, headBlock, dataBlock]);\n};\nmodule.exports = {\n  encode,\n  methodData\n};","map":null,"metadata":{},"sourceType":"script"}