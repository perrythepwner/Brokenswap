{"ast":null,"code":"import _objectSpread from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _taggedTemplateLiteral from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";\nvar _templateObject,\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { gql, useApolloClient, useQuery } from '@apollo/client';\nimport { useCelo } from '@celo/react-celo';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { formatEther, parseEther } from '@ethersproject/units';\nimport { Percent } from '@ubeswap/sdk';\nimport { ethers } from 'ethers';\nimport React, { useEffect } from 'react';\nimport farmRegistryAbi from '../../constants/abis/FarmRegistry.json';\nimport { CACHED_FARM_INFO_BLOCK, cachedFarmInfoEvents, cachedLpInfoEvents } from './cachedFarmInfo';\nimport { useCustomStakingInfo } from './useCustomStakingInfo';\nconst blacklist = {\n  '0x4488682fd16562a68ea0d0f898413e075f42e6da': true,\n  '0xC245976Db329Bb0414253376246a367B7c96C762': true\n};\nconst featuredPoolWhitelist = {\n  '0x6F11B6eA70DEe4f167b1A4ED1F01C903f6781960': false,\n  // PACT\n  '0xEfe2f9d62E45815837b4f20c1F44F0A83605B540': false,\n  // ARI\n  '0x155DA6F164D925E3a91F510B50DEC08aA03B4071': false,\n  // IMMO\n  '0x3c8e2eB988f0890B68b5667C2FB867249E68E3C7': false // CELO-SYMM\n};\n\nconst pairDataGql = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query getPairHourData($id: String!) {\\n    pair(id: $id) {\\n      pairHourData(first: 24, orderBy: hourStartUnix, orderDirection: desc) {\\n        hourStartUnix\\n        hourlyVolumeUSD\\n      }\\n    }\\n  }\\n\"])));\nconst COMPOUNDS_PER_YEAR = 2;\nconst CREATION_BLOCK = 9840049;\nconst LAST_N_BLOCKS = 5760; // Last 8 hours\n\nexport const useFarmRegistry = () => {\n  _s();\n  const {\n    kit\n  } = useCelo();\n  const client = useApolloClient();\n  const [farmSummaries, setFarmSummaries] = React.useState([]);\n  const call = React.useCallback( /*#__PURE__*/_asyncToGenerator(function* () {\n    const farmRegistry = new kit.connection.web3.eth.Contract(farmRegistryAbi, '0xa2bf67e12EeEDA23C7cA1e5a34ae2441a17789Ec');\n    const lastBlock = yield kit.connection.web3.eth.getBlockNumber();\n    const [farmInfoEvents, lpInfoEvents, farmDataEvents] = yield Promise.all([farmRegistry.getPastEvents('FarmInfo', {\n      fromBlock: CACHED_FARM_INFO_BLOCK,\n      toBlock: lastBlock\n    }).then(events => events.concat(cachedFarmInfoEvents)), farmRegistry.getPastEvents('LPInfo', {\n      fromBlock: CACHED_FARM_INFO_BLOCK,\n      toBlock: lastBlock\n    }).then(events => events.concat(cachedLpInfoEvents)), farmRegistry.getPastEvents('FarmData', {\n      fromBlock: lastBlock - LAST_N_BLOCKS,\n      toBlock: lastBlock\n    })]);\n    const lps = {};\n    lpInfoEvents.forEach(e => {\n      lps[e.returnValues.lpAddress] = [e.returnValues.token0Address, e.returnValues.token1Address];\n    });\n    const farmData = {};\n    farmDataEvents.forEach(e => {\n      farmData[e.returnValues.stakingAddress] = {\n        tvlUSD: e.returnValues.tvlUSD,\n        rewardsUSDPerYear: e.returnValues.rewardsUSDPerYear\n      };\n    });\n    const farmSummaries = [];\n    farmInfoEvents.filter(e => !blacklist[e.returnValues.stakingAddress.toLowerCase()]).forEach(e => {\n      // sometimes there is no farm data for the staking address return early to avoid crash\n      if (!farmData[e.returnValues.stakingAddress]) {\n        return;\n      }\n      farmSummaries.push({\n        farmName: ethers.utils.parseBytes32String(e.returnValues.farmName),\n        stakingAddress: e.returnValues.stakingAddress,\n        lpAddress: e.returnValues.lpAddress,\n        token0Address: lps[e.returnValues.lpAddress][0],\n        token1Address: lps[e.returnValues.lpAddress][1],\n        tvlUSD: BigNumber.from(farmData[e.returnValues.stakingAddress].tvlUSD),\n        rewardsUSDPerYear: BigNumber.from(farmData[e.returnValues.stakingAddress].rewardsUSDPerYear),\n        isFeatured: !!featuredPoolWhitelist[e.returnValues.stakingAddress],\n        isImported: false\n      });\n    });\n    farmSummaries.sort((a, b) => Number(formatEther(b.rewardsUSDPerYear.sub(a.rewardsUSDPerYear)))).sort((a, b) => Number(a.tvlUSD && b.tvlUSD ? formatEther(b.tvlUSD.sub(a.tvlUSD)) : 0));\n    const results = yield Promise.all(farmSummaries.map(summary => {\n      return client.query({\n        query: pairDataGql,\n        variables: {\n          id: summary.lpAddress.toLowerCase()\n        }\n      });\n    }));\n    const farmInfos = results.map((result, index) => calcAPR(result, farmSummaries[index]));\n    setFarmSummaries(farmSummaries.map((summary, index) => _objectSpread(_objectSpread({}, summary), farmInfos[index])));\n  }), [kit.connection.web3.eth, client]);\n  useEffect(() => {\n    call();\n  }, [call]);\n  return farmSummaries;\n};\n_s(useFarmRegistry, \"bOHbSQsJMItR4GZ8u4vBMlBjsvE=\", false, function () {\n  return [useCelo, useApolloClient];\n});\nexport const useImportedFarmRegistry = farmAddress => {\n  _s2();\n  const {\n    stakingToken,\n    totalRewardRates,\n    valueOfTotalStakedAmountInCUSD,\n    tokens,\n    rewardsUSDPerYear,\n    totalStakedAmount\n  } = useCustomStakingInfo(farmAddress);\n  const result = useQuery(pairDataGql, {\n    variables: {\n      id: stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.address.toLowerCase()\n    }\n  });\n  if (stakingToken && totalRewardRates && tokens) {\n    const farmSummary = {\n      farmName: '',\n      stakingAddress: farmAddress,\n      lpAddress: stakingToken === null || stakingToken === void 0 ? void 0 : stakingToken.address,\n      token0Address: tokens[0].address,\n      token1Address: tokens[1].address,\n      isFeatured: false,\n      tvlUSD: valueOfTotalStakedAmountInCUSD ? parseEther(valueOfTotalStakedAmountInCUSD) : undefined,\n      totalStakedAmount: totalStakedAmount,\n      rewardsUSDPerYear: BigNumber.from(rewardsUSDPerYear),\n      isImported: true,\n      totalRewardRates\n    };\n    const farmInfo = calcAPR(result, farmSummary);\n    return _objectSpread(_objectSpread({}, farmSummary), farmInfo);\n  }\n  return undefined;\n};\n_s2(useImportedFarmRegistry, \"aRIaRCpptkHcWjK5gS2ir1mdlP8=\", false, function () {\n  return [useCustomStakingInfo, useQuery];\n});\nexport const useUniqueBestFarms = () => {\n  _s3();\n  const farmSummaries = useFarmRegistry();\n  const farmsUniqueByBestFarm = farmSummaries.reduce((prev, current) => {\n    if (!prev[current.lpAddress]) {\n      prev[current.lpAddress] = current;\n    } else if (current.rewardsUSDPerYear.gt(prev[current.lpAddress].rewardsUSDPerYear)) {\n      prev[current.lpAddress] = current;\n    }\n    return prev;\n  }, {});\n  return farmsUniqueByBestFarm;\n};\n\n// formula is 1 + ((nom/compoundsPerYear)^compoundsPerYear) - 1\n_s3(useUniqueBestFarms, \"IN+GkKA0Tq5p7POd0SBJ/0T4c90=\", false, function () {\n  return [useFarmRegistry];\n});\nfunction annualizedPercentageYield(nominal, compounds) {\n  const ONE = 1;\n  const divideNominalByNAddOne = Number(nominal.divide(BigInt(compounds)).add(BigInt(ONE)).toFixed(10));\n\n  // multiply 100 to turn decimal into percent, to fixed since we only display integer\n  return ((divideNominalByNAddOne ** compounds - ONE) * 100).toFixed(0);\n}\n\n// calculate rewardAPR, swapAPR, APY & APR from a farmSummary\nfunction calcAPR(result, summary) {\n  var _summary$tvlUSD, _summary$tvlUSD2, _summary$tvlUSD3, _summary$tvlUSD4;\n  let swapRewardsUSDPerYear = BigNumber.from(0);\n  const {\n    loading,\n    error,\n    data\n  } = result;\n  if (!loading && !error && data !== null && data !== void 0 && data.pair) {\n    const lastDayVolumeUsd = data.pair.pairHourData.reduce((acc, curr) => acc + Number(curr.hourlyVolumeUSD), 0);\n    swapRewardsUSDPerYear = parseEther(Math.floor(lastDayVolumeUsd * 365 * 0.0025).toString());\n  }\n  const rewardApr = new Percent(summary.rewardsUSDPerYear.toString(), (_summary$tvlUSD = summary.tvlUSD) === null || _summary$tvlUSD === void 0 ? void 0 : _summary$tvlUSD.toString());\n  const swapApr = new Percent(swapRewardsUSDPerYear.toString(), (_summary$tvlUSD2 = summary.tvlUSD) === null || _summary$tvlUSD2 === void 0 ? void 0 : _summary$tvlUSD2.toString());\n  const apr = new Percent(swapRewardsUSDPerYear.add(summary.rewardsUSDPerYear).toString(), (_summary$tvlUSD3 = summary.tvlUSD) === null || _summary$tvlUSD3 === void 0 ? void 0 : _summary$tvlUSD3.toString());\n  let apy = '0';\n  if ((_summary$tvlUSD4 = summary.tvlUSD) !== null && _summary$tvlUSD4 !== void 0 && _summary$tvlUSD4.gt(0)) {\n    try {\n      apy = annualizedPercentageYield(apr, COMPOUNDS_PER_YEAR);\n    } catch (e) {\n      console.error('apy calc overflow', summary.farmName, e);\n    }\n  }\n  return {\n    rewardApr,\n    swapApr,\n    apr,\n    apy\n  };\n}","map":{"version":3,"names":["gql","useApolloClient","useQuery","useCelo","BigNumber","formatEther","parseEther","Percent","ethers","React","useEffect","farmRegistryAbi","CACHED_FARM_INFO_BLOCK","cachedFarmInfoEvents","cachedLpInfoEvents","useCustomStakingInfo","blacklist","featuredPoolWhitelist","pairDataGql","_templateObject","_taggedTemplateLiteral","COMPOUNDS_PER_YEAR","CREATION_BLOCK","LAST_N_BLOCKS","useFarmRegistry","_s","kit","client","farmSummaries","setFarmSummaries","useState","call","useCallback","_asyncToGenerator","farmRegistry","connection","web3","eth","Contract","lastBlock","getBlockNumber","farmInfoEvents","lpInfoEvents","farmDataEvents","Promise","all","getPastEvents","fromBlock","toBlock","then","events","concat","lps","forEach","e","returnValues","lpAddress","token0Address","token1Address","farmData","stakingAddress","tvlUSD","rewardsUSDPerYear","filter","toLowerCase","push","farmName","utils","parseBytes32String","from","isFeatured","isImported","sort","a","b","Number","sub","results","map","summary","query","variables","id","farmInfos","result","index","calcAPR","_objectSpread","useImportedFarmRegistry","farmAddress","_s2","stakingToken","totalRewardRates","valueOfTotalStakedAmountInCUSD","tokens","totalStakedAmount","address","farmSummary","undefined","farmInfo","useUniqueBestFarms","_s3","farmsUniqueByBestFarm","reduce","prev","current","gt","annualizedPercentageYield","nominal","compounds","ONE","divideNominalByNAddOne","divide","BigInt","add","toFixed","_summary$tvlUSD","_summary$tvlUSD2","_summary$tvlUSD3","_summary$tvlUSD4","swapRewardsUSDPerYear","loading","error","data","pair","lastDayVolumeUsd","pairHourData","acc","curr","hourlyVolumeUSD","Math","floor","toString","rewardApr","swapApr","apr","apy","console"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/pages/Earn/useFarmRegistry.ts"],"sourcesContent":["import { ApolloQueryResult, gql, useApolloClient, useQuery } from '@apollo/client'\nimport { useCelo } from '@celo/react-celo'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther, parseEther } from '@ethersproject/units'\nimport { Percent, TokenAmount } from '@ubeswap/sdk'\nimport { ethers } from 'ethers'\nimport React, { useEffect } from 'react'\nimport { AbiItem } from 'web3-utils'\n\nimport farmRegistryAbi from '../../constants/abis/FarmRegistry.json'\nimport { CACHED_FARM_INFO_BLOCK, cachedFarmInfoEvents, cachedLpInfoEvents } from './cachedFarmInfo'\nimport { useCustomStakingInfo } from './useCustomStakingInfo'\n\ntype FarmData = {\n  tvlUSD: string\n  rewardsUSDPerYear: string\n}\n\nexport type FarmSummary = {\n  farmName: string\n  stakingAddress: string\n  lpAddress: string\n  rewardsUSDPerYear: BigNumber\n  tvlUSD: BigNumber | undefined\n  totalStakedAmount?: TokenAmount | undefined\n  token0Address: string\n  token1Address: string\n  isFeatured: boolean\n  rewardApr?: Percent\n  swapApr?: Percent\n  apr?: Percent\n  apy?: string\n  isImported: boolean\n  totalRewardRates?: TokenAmount[]\n}\n\nconst blacklist: Record<string, boolean> = {\n  '0x4488682fd16562a68ea0d0f898413e075f42e6da': true,\n  '0xC245976Db329Bb0414253376246a367B7c96C762': true,\n}\n\nconst featuredPoolWhitelist: Record<string, boolean> = {\n  '0x6F11B6eA70DEe4f167b1A4ED1F01C903f6781960': false, // PACT\n  '0xEfe2f9d62E45815837b4f20c1F44F0A83605B540': false, // ARI\n  '0x155DA6F164D925E3a91F510B50DEC08aA03B4071': false, // IMMO\n  '0x3c8e2eB988f0890B68b5667C2FB867249E68E3C7': false, // CELO-SYMM\n}\n\nconst pairDataGql = gql`\n  query getPairHourData($id: String!) {\n    pair(id: $id) {\n      pairHourData(first: 24, orderBy: hourStartUnix, orderDirection: desc) {\n        hourStartUnix\n        hourlyVolumeUSD\n      }\n    }\n  }\n`\nconst COMPOUNDS_PER_YEAR = 2\nconst CREATION_BLOCK = 9840049\nconst LAST_N_BLOCKS = 5760 // Last 8 hours\n\nexport interface WarningInfo {\n  poolName: string\n  link: string\n}\n\nexport const useFarmRegistry = () => {\n  const { kit } = useCelo()\n  const client = useApolloClient()\n  const [farmSummaries, setFarmSummaries] = React.useState<FarmSummary[]>([])\n  const call = React.useCallback(async () => {\n    const farmRegistry = new kit.connection.web3.eth.Contract(\n      farmRegistryAbi as AbiItem[],\n      '0xa2bf67e12EeEDA23C7cA1e5a34ae2441a17789Ec'\n    )\n    const lastBlock = await kit.connection.web3.eth.getBlockNumber()\n    const [farmInfoEvents, lpInfoEvents, farmDataEvents] = await Promise.all([\n      farmRegistry\n        .getPastEvents('FarmInfo', {\n          fromBlock: CACHED_FARM_INFO_BLOCK,\n          toBlock: lastBlock,\n        })\n        .then((events) => events.concat(cachedFarmInfoEvents)),\n      farmRegistry\n        .getPastEvents('LPInfo', { fromBlock: CACHED_FARM_INFO_BLOCK, toBlock: lastBlock })\n        .then((events) => events.concat(cachedLpInfoEvents)),\n      farmRegistry.getPastEvents('FarmData', {\n        fromBlock: lastBlock - LAST_N_BLOCKS,\n        toBlock: lastBlock,\n      }),\n    ])\n\n    const lps: Record<string, [string, string]> = {}\n    lpInfoEvents.forEach((e) => {\n      lps[e.returnValues.lpAddress] = [e.returnValues.token0Address, e.returnValues.token1Address]\n    })\n    const farmData: Record<string, FarmData> = {}\n    farmDataEvents.forEach((e) => {\n      farmData[e.returnValues.stakingAddress] = {\n        tvlUSD: e.returnValues.tvlUSD,\n        rewardsUSDPerYear: e.returnValues.rewardsUSDPerYear,\n      }\n    })\n    const farmSummaries: FarmSummary[] = []\n    farmInfoEvents\n      .filter((e) => !blacklist[e.returnValues.stakingAddress.toLowerCase()])\n      .forEach((e) => {\n        // sometimes there is no farm data for the staking address return early to avoid crash\n        if (!farmData[e.returnValues.stakingAddress]) {\n          return\n        }\n        farmSummaries.push({\n          farmName: ethers.utils.parseBytes32String(e.returnValues.farmName),\n          stakingAddress: e.returnValues.stakingAddress,\n          lpAddress: e.returnValues.lpAddress,\n          token0Address: lps[e.returnValues.lpAddress][0],\n          token1Address: lps[e.returnValues.lpAddress][1],\n          tvlUSD: BigNumber.from(farmData[e.returnValues.stakingAddress].tvlUSD),\n          rewardsUSDPerYear: BigNumber.from(farmData[e.returnValues.stakingAddress].rewardsUSDPerYear),\n          isFeatured: !!featuredPoolWhitelist[e.returnValues.stakingAddress],\n          isImported: false,\n        })\n      })\n\n    farmSummaries\n      .sort((a, b) => Number(formatEther(b.rewardsUSDPerYear.sub(a.rewardsUSDPerYear))))\n      .sort((a, b) => Number(a.tvlUSD && b.tvlUSD ? formatEther(b.tvlUSD.sub(a.tvlUSD)) : 0))\n\n    const results = await Promise.all(\n      farmSummaries.map((summary) => {\n        return client.query({ query: pairDataGql, variables: { id: summary.lpAddress.toLowerCase() } })\n      })\n    )\n    const farmInfos = results.map((result: ApolloQueryResult<any>, index) => calcAPR(result, farmSummaries[index]))\n    setFarmSummaries(\n      farmSummaries.map((summary, index) => ({\n        ...summary,\n        ...farmInfos[index],\n      }))\n    )\n  }, [kit.connection.web3.eth, client])\n\n  useEffect(() => {\n    call()\n  }, [call])\n\n  return farmSummaries\n}\n\nexport const useImportedFarmRegistry = (farmAddress: string): FarmSummary | undefined => {\n  const {\n    stakingToken,\n    totalRewardRates,\n    valueOfTotalStakedAmountInCUSD,\n    tokens,\n    rewardsUSDPerYear,\n    totalStakedAmount,\n  } = useCustomStakingInfo(farmAddress)\n\n  const result = useQuery(pairDataGql, {\n    variables: { id: stakingToken?.address.toLowerCase() },\n  })\n\n  if (stakingToken && totalRewardRates && tokens) {\n    const farmSummary: FarmSummary = {\n      farmName: '',\n      stakingAddress: farmAddress,\n      lpAddress: stakingToken?.address,\n      token0Address: tokens[0].address,\n      token1Address: tokens[1].address,\n      isFeatured: false,\n      tvlUSD: valueOfTotalStakedAmountInCUSD ? parseEther(valueOfTotalStakedAmountInCUSD) : undefined,\n      totalStakedAmount: totalStakedAmount,\n      rewardsUSDPerYear: BigNumber.from(rewardsUSDPerYear),\n      isImported: true,\n      totalRewardRates,\n    }\n    const farmInfo = calcAPR(result, farmSummary)\n    return { ...farmSummary, ...farmInfo }\n  }\n  return undefined\n}\n\nexport const useUniqueBestFarms = () => {\n  const farmSummaries = useFarmRegistry()\n  const farmsUniqueByBestFarm = farmSummaries.reduce((prev: Record<string, FarmSummary>, current) => {\n    if (!prev[current.lpAddress]) {\n      prev[current.lpAddress] = current\n    } else if (current.rewardsUSDPerYear.gt(prev[current.lpAddress].rewardsUSDPerYear)) {\n      prev[current.lpAddress] = current\n    }\n    return prev\n  }, {})\n\n  return farmsUniqueByBestFarm\n}\n\n// formula is 1 + ((nom/compoundsPerYear)^compoundsPerYear) - 1\nfunction annualizedPercentageYield(nominal: Percent, compounds: number) {\n  const ONE = 1\n\n  const divideNominalByNAddOne = Number(nominal.divide(BigInt(compounds)).add(BigInt(ONE)).toFixed(10))\n\n  // multiply 100 to turn decimal into percent, to fixed since we only display integer\n  return ((divideNominalByNAddOne ** compounds - ONE) * 100).toFixed(0)\n}\n\n// calculate rewardAPR, swapAPR, APY & APR from a farmSummary\nfunction calcAPR(\n  result: ApolloQueryResult<any>,\n  summary: FarmSummary\n): {\n  rewardApr: Percent\n  swapApr: Percent\n  apr: Percent\n  apy: string\n} {\n  let swapRewardsUSDPerYear: BigNumber = BigNumber.from(0)\n  const { loading, error, data } = result\n  if (!loading && !error && data?.pair) {\n    const lastDayVolumeUsd = data.pair.pairHourData.reduce(\n      (acc: number, curr: { hourlyVolumeUSD: string }) => acc + Number(curr.hourlyVolumeUSD),\n      0\n    )\n    swapRewardsUSDPerYear = parseEther(Math.floor(lastDayVolumeUsd * 365 * 0.0025).toString())\n  }\n  const rewardApr = new Percent(summary.rewardsUSDPerYear.toString(), summary.tvlUSD?.toString())\n  const swapApr = new Percent(swapRewardsUSDPerYear.toString(), summary.tvlUSD?.toString())\n  const apr = new Percent(swapRewardsUSDPerYear.add(summary.rewardsUSDPerYear).toString(), summary.tvlUSD?.toString())\n  let apy = '0'\n  if (summary.tvlUSD?.gt(0)) {\n    try {\n      apy = annualizedPercentageYield(apr, COMPOUNDS_PER_YEAR)\n    } catch (e) {\n      console.error('apy calc overflow', summary.farmName, e)\n    }\n  }\n  return {\n    rewardApr,\n    swapApr,\n    apr,\n    apy,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}