{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAdditionalItems = void 0;\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n  message: _ref => {\n    let {\n      params: {\n        len\n      }\n    } = _ref;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must NOT have more than \", \" items\"])), len);\n  },\n  params: _ref2 => {\n    let {\n      params: {\n        len\n      }\n    } = _ref2;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{limit: \", \"}\"])), len);\n  }\n};\nconst def = {\n  keyword: \"additionalItems\",\n  type: \"array\",\n  schemaType: [\"boolean\", \"object\"],\n  before: \"uniqueItems\",\n  error,\n  code(cxt) {\n    const {\n      parentSchema,\n      it\n    } = cxt;\n    const {\n      items\n    } = parentSchema;\n    if (!Array.isArray(items)) {\n      (0, util_1.checkStrictMode)(it, '\"additionalItems\" is ignored when \"items\" is not an array of schemas');\n      return;\n    }\n    validateAdditionalItems(cxt, items);\n  }\n};\nfunction validateAdditionalItems(cxt, items) {\n  const {\n    gen,\n    schema,\n    data,\n    keyword,\n    it\n  } = cxt;\n  it.items = true;\n  const len = gen.const(\"len\", (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \".length\"])), data));\n  if (schema === false) {\n    cxt.setParams({\n      len: items.length\n    });\n    cxt.pass((0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \" <= \", \"\"])), len, items.length));\n  } else if (typeof schema == \"object\" && !(0, util_1.alwaysValidSchema)(it, schema)) {\n    const valid = gen.var(\"valid\", (0, codegen_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \" <= \", \"\"])), len, items.length)); // TODO var\n    gen.if((0, codegen_1.not)(valid), () => validateItems(valid));\n    cxt.ok(valid);\n  }\n  function validateItems(valid) {\n    gen.forRange(\"i\", items.length, len, i => {\n      cxt.subschema({\n        keyword,\n        dataProp: i,\n        dataPropType: util_1.Type.Num\n      }, valid);\n      if (!it.allErrors) gen.if((0, codegen_1.not)(valid), () => gen.break());\n    });\n  }\n}\nexports.validateAdditionalItems = validateAdditionalItems;\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/applicator/additionalItems.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateAdditionalItems = void 0;\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n    message: ({ params: { len } }) => (0, codegen_1.str) `must NOT have more than ${len} items`,\n    params: ({ params: { len } }) => (0, codegen_1._) `{limit: ${len}}`,\n};\nconst def = {\n    keyword: \"additionalItems\",\n    type: \"array\",\n    schemaType: [\"boolean\", \"object\"],\n    before: \"uniqueItems\",\n    error,\n    code(cxt) {\n        const { parentSchema, it } = cxt;\n        const { items } = parentSchema;\n        if (!Array.isArray(items)) {\n            (0, util_1.checkStrictMode)(it, '\"additionalItems\" is ignored when \"items\" is not an array of schemas');\n            return;\n        }\n        validateAdditionalItems(cxt, items);\n    },\n};\nfunction validateAdditionalItems(cxt, items) {\n    const { gen, schema, data, keyword, it } = cxt;\n    it.items = true;\n    const len = gen.const(\"len\", (0, codegen_1._) `${data}.length`);\n    if (schema === false) {\n        cxt.setParams({ len: items.length });\n        cxt.pass((0, codegen_1._) `${len} <= ${items.length}`);\n    }\n    else if (typeof schema == \"object\" && !(0, util_1.alwaysValidSchema)(it, schema)) {\n        const valid = gen.var(\"valid\", (0, codegen_1._) `${len} <= ${items.length}`); // TODO var\n        gen.if((0, codegen_1.not)(valid), () => validateItems(valid));\n        cxt.ok(valid);\n    }\n    function validateItems(valid) {\n        gen.forRange(\"i\", items.length, len, (i) => {\n            cxt.subschema({ keyword, dataProp: i, dataPropType: util_1.Type.Num }, valid);\n            if (!it.allErrors)\n                gen.if((0, codegen_1.not)(valid), () => gen.break());\n        });\n    }\n}\nexports.validateAdditionalItems = validateAdditionalItems;\nexports.default = def;\n//# sourceMappingURL=additionalItems.js.map"]},"metadata":{},"sourceType":"script"}