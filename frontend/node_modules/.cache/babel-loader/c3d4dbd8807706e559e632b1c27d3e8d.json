{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { CeloContract } from '@celo/contractkit';\nimport { useCelo, useProvider } from '@celo/react-celo';\nimport { CELO, ChainId, cREAL, currencyEquals, cUSD } from '@ubeswap/sdk';\nimport { CEUR, MCELO, MCEUR, MCREAL, MCUSD } from 'constants/index';\nimport { useMemo } from 'react';\nimport { LendingPool__factory } from '../../../../generated';\nexport const moolaLendingPools = {\n  // Addresses from: https://github.com/moolamarket/moola\n  [ChainId.ALFAJORES]: {\n    dataProvider: '0x31ccB9dC068058672D96E92BAf96B1607855822E',\n    lendingPool: '0x58ad305f1eCe49ca55ADE0D5cCC90114C3902E88',\n    lendingPoolCore: '0x090D652d1Bb0FEFbEe2531e9BBbb3604bE71f5de',\n    [CeloContract.GoldToken]: CELO[ChainId.ALFAJORES],\n    [CeloContract.StableToken]: cUSD[ChainId.ALFAJORES],\n    mcUSD: MCUSD[ChainId.ALFAJORES],\n    mCREAL: MCREAL[ChainId.ALFAJORES],\n    mCELO: MCELO[ChainId.ALFAJORES]\n  },\n  [ChainId.MAINNET]: {\n    dataProvider: '0x43d067ed784D9DD2ffEda73775e2CC4c560103A1',\n    lendingPool: '0x970b12522CA9b4054807a2c5B736149a5BE6f670',\n    lendingPoolCore: '0xAF106F8D4756490E7069027315F4886cc94A8F73',\n    [CeloContract.GoldToken]: CELO[ChainId.MAINNET],\n    [CeloContract.StableToken]: cUSD[ChainId.MAINNET],\n    mcUSD: MCUSD[ChainId.MAINNET],\n    mCREAL: MCREAL[ChainId.MAINNET],\n    mCELO: MCELO[ChainId.MAINNET]\n  }\n};\nexport const moolaDuals = [[MCREAL, cREAL], [MCUSD, cUSD], [MCELO, CELO], [MCEUR, CEUR]].flatMap(dual => [dual, [dual[1], dual[0]]]);\n\n/**\n * Gets the Moola token that the token can be converted to/from.\n * @param currency\n * @returns\n */\nexport const getMoolaDual = currency => {\n  var _moolaDuals$find$1$ch, _moolaDuals$find, _moolaDuals$find$;\n  const {\n    chainId\n  } = currency;\n  if (chainId === ChainId.BAKLAVA) {\n    return null;\n  }\n  return (_moolaDuals$find$1$ch = (_moolaDuals$find = moolaDuals.find(dual => currencyEquals(dual[0][chainId], currency))) === null || _moolaDuals$find === void 0 ? void 0 : (_moolaDuals$find$ = _moolaDuals$find[1]) === null || _moolaDuals$find$ === void 0 ? void 0 : _moolaDuals$find$[chainId]) !== null && _moolaDuals$find$1$ch !== void 0 ? _moolaDuals$find$1$ch : null;\n};\nexport const useMoolaConfig = () => {\n  _s();\n  const {\n    network\n  } = useCelo();\n  const chainId = network.chainId;\n  // TODO(igm): this breaks on baklava\n  const chainCfg = moolaLendingPools[chainId];\n  if (chainCfg) {\n    const {\n      lendingPool,\n      lendingPoolCore\n    } = chainCfg;\n    return {\n      lendingPoolCore,\n      lendingPool\n    };\n  }\n  return null;\n};\n_s(useMoolaConfig, \"iJ9mbYURWyT1q6QP3jDxUgUAoQA=\", false, function () {\n  return [useCelo];\n});\nexport const useLendingPool = () => {\n  _s2();\n  const cfg = useMoolaConfig();\n  if (!cfg) {\n    throw new Error('no cfg');\n  }\n  const library = useProvider();\n  return useMemo(() => LendingPool__factory.connect(cfg.lendingPool, library), [cfg.lendingPool, library]);\n};\n_s2(useLendingPool, \"odpf5zNrNrghkViSZuufsJKaaKo=\", false, function () {\n  return [useMoolaConfig, useProvider];\n});","map":{"version":3,"names":["CeloContract","useCelo","useProvider","CELO","ChainId","cREAL","currencyEquals","cUSD","CEUR","MCELO","MCEUR","MCREAL","MCUSD","useMemo","LendingPool__factory","moolaLendingPools","ALFAJORES","dataProvider","lendingPool","lendingPoolCore","GoldToken","StableToken","mcUSD","mCREAL","mCELO","MAINNET","moolaDuals","flatMap","dual","getMoolaDual","currency","_moolaDuals$find$1$ch","_moolaDuals$find","_moolaDuals$find$","chainId","BAKLAVA","find","useMoolaConfig","_s","network","chainCfg","useLendingPool","_s2","cfg","Error","library","connect"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/components/swap/routing/moola/useMoola.ts"],"sourcesContent":["import { CeloContract } from '@celo/contractkit'\nimport { useCelo, useProvider } from '@celo/react-celo'\nimport { CELO, ChainId, cREAL, currencyEquals, cUSD, Token } from '@ubeswap/sdk'\nimport { CEUR, MCELO, MCEUR, MCREAL, MCUSD } from 'constants/index'\nimport { useMemo } from 'react'\n\nimport { LendingPool, LendingPool__factory } from '../../../../generated'\n\nexport const moolaLendingPools = {\n  // Addresses from: https://github.com/moolamarket/moola\n  [ChainId.ALFAJORES]: {\n    dataProvider: '0x31ccB9dC068058672D96E92BAf96B1607855822E',\n    lendingPool: '0x58ad305f1eCe49ca55ADE0D5cCC90114C3902E88',\n    lendingPoolCore: '0x090D652d1Bb0FEFbEe2531e9BBbb3604bE71f5de',\n    [CeloContract.GoldToken]: CELO[ChainId.ALFAJORES],\n    [CeloContract.StableToken]: cUSD[ChainId.ALFAJORES],\n    mcUSD: MCUSD[ChainId.ALFAJORES],\n    mCREAL: MCREAL[ChainId.ALFAJORES],\n    mCELO: MCELO[ChainId.ALFAJORES],\n  },\n  [ChainId.MAINNET]: {\n    dataProvider: '0x43d067ed784D9DD2ffEda73775e2CC4c560103A1',\n    lendingPool: '0x970b12522CA9b4054807a2c5B736149a5BE6f670',\n    lendingPoolCore: '0xAF106F8D4756490E7069027315F4886cc94A8F73',\n    [CeloContract.GoldToken]: CELO[ChainId.MAINNET],\n    [CeloContract.StableToken]: cUSD[ChainId.MAINNET],\n    mcUSD: MCUSD[ChainId.MAINNET],\n    mCREAL: MCREAL[ChainId.MAINNET],\n    mCELO: MCELO[ChainId.MAINNET],\n  },\n}\n\nexport const moolaDuals = (\n  [\n    [MCREAL, cREAL],\n    [MCUSD, cUSD],\n    [MCELO, CELO],\n    [MCEUR, CEUR],\n  ] as const\n).flatMap((dual) => [dual, [dual[1], dual[0]] as const])\n\n/**\n * Gets the Moola token that the token can be converted to/from.\n * @param currency\n * @returns\n */\nexport const getMoolaDual = (currency: Token): Token | null => {\n  const { chainId } = currency\n  if (chainId === ChainId.BAKLAVA) {\n    return null\n  }\n  return moolaDuals.find((dual) => currencyEquals(dual[0][chainId], currency))?.[1]?.[chainId] ?? null\n}\n\nexport type IMoolaChain = keyof typeof moolaLendingPools\n\nexport type MoolaConfig = typeof moolaLendingPools[IMoolaChain]\n\nexport const useMoolaConfig = () => {\n  const { network } = useCelo()\n  const chainId = network.chainId as unknown as ChainId\n  // TODO(igm): this breaks on baklava\n  const chainCfg = moolaLendingPools[chainId as IMoolaChain]\n  if (chainCfg) {\n    const { lendingPool, lendingPoolCore } = chainCfg\n    return {\n      lendingPoolCore,\n      lendingPool,\n    }\n  }\n  return null\n}\n\nexport const useLendingPool = (): LendingPool => {\n  const cfg = useMoolaConfig()\n  if (!cfg) {\n    throw new Error('no cfg')\n  }\n  const library = useProvider()\n  return useMemo(() => LendingPool__factory.connect(cfg.lendingPool, library as any), [cfg.lendingPool, library])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}