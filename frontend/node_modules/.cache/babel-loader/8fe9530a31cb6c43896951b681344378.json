{"ast":null,"code":"import{useEffect,useState}from'react';// modified from https://usehooks.com/useDebounce/\nexport default function useDebounce(value,delay){const[debouncedValue,setDebouncedValue]=useState(value);useEffect(()=>{// Update debounced value after delay\nconst handler=setTimeout(()=>{setDebouncedValue(value);},delay);// Cancel the timeout if value changes (also on delay change or unmount)\n// This is how we prevent debounced value from updating if value is changed ...\n// .. within the delay period. Timeout gets cleared and restarted.\nreturn()=>{clearTimeout(handler);};},[value,delay]);return debouncedValue;}","map":null,"metadata":{},"sourceType":"module"}