{"ast":null,"code":"import _asyncToGenerator from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CeloContract } from '@celo/contractkit';\nimport { currencyEquals } from '@ubeswap/sdk';\nimport { LendingPool__factory } from '../../../../generated';\nimport { moolaLendingPools } from './useMoola';\n\n/**\n * Executes a trade on Moola.\n * @param trade\n * @returns\n */\nexport const executeMoolaDirectTrade = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (_ref) {\n    let {\n      trade,\n      signer,\n      chainId,\n      doTransaction\n    } = _ref;\n    const chainCfg = moolaLendingPools[chainId];\n    const {\n      mcUSD,\n      mCELO\n    } = chainCfg;\n    const pool = LendingPool__factory.connect(chainCfg.lendingPool, signer);\n    const {\n      inputAmount,\n      outputAmount\n    } = trade;\n    const token = inputAmount.token;\n    const convert = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* () {\n        var _token$symbol;\n        const symbol = currencyEquals(token, chainCfg[CeloContract.StableToken]) ? 'cUSD' : currencyEquals(token, chainCfg[CeloContract.GoldToken]) ? 'CELO' : currencyEquals(token, mcUSD) ? 'mcUSD' : currencyEquals(token, mCELO) ? 'mCELO' : (_token$symbol = token.symbol) !== null && _token$symbol !== void 0 ? _token$symbol : null;\n        if (symbol !== null && symbol !== void 0 && symbol.startsWith('m')) {\n          const recipient = yield signer.getAddress();\n          return yield doTransaction(pool, 'withdraw', {\n            args: [outputAmount.token.address, outputAmount.raw.toString(), recipient],\n            summary: \"Withdraw \".concat(inputAmount.toSignificant(2), \" \").concat(symbol, \" from Moola\")\n          });\n        }\n        if (symbol) {\n          const recipient = yield signer.getAddress();\n          return yield doTransaction(pool, 'deposit', {\n            args: [inputAmount.token.address, inputAmount.raw.toString(), recipient, 0x0421],\n            summary: \"Deposit \".concat(inputAmount.toSignificant(2), \" \").concat(symbol, \" into Moola\")\n          });\n        }\n        throw new Error(\"unknown currency: \".concat(token.address));\n      });\n      return function convert() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    return {\n      hash: (yield convert()).hash\n    };\n  });\n  return function executeMoolaDirectTrade(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["CeloContract","currencyEquals","LendingPool__factory","moolaLendingPools","executeMoolaDirectTrade","_ref2","_asyncToGenerator","_ref","trade","signer","chainId","doTransaction","chainCfg","mcUSD","mCELO","pool","connect","lendingPool","inputAmount","outputAmount","token","convert","_ref3","_token$symbol","symbol","StableToken","GoldToken","startsWith","recipient","getAddress","args","address","raw","toString","summary","concat","toSignificant","Error","apply","arguments","hash","_x"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/components/swap/routing/moola/executeMoolaDirectTrade.ts"],"sourcesContent":["import { CeloContract } from '@celo/contractkit'\nimport { currencyEquals } from '@ubeswap/sdk'\nimport { ContractTransaction } from 'ethers'\n\nimport { LendingPool__factory } from '../../../../generated'\nimport { TradeExecutor } from '..'\nimport { MoolaDirectTrade } from './MoolaDirectTrade'\nimport { moolaLendingPools } from './useMoola'\n\n/**\n * Executes a trade on Moola.\n * @param trade\n * @returns\n */\nexport const executeMoolaDirectTrade: TradeExecutor<MoolaDirectTrade> = async ({\n  trade,\n  signer,\n  chainId,\n  doTransaction,\n}) => {\n  const chainCfg = moolaLendingPools[chainId]\n  const { mcUSD, mCELO } = chainCfg\n\n  const pool = LendingPool__factory.connect(chainCfg.lendingPool, signer)\n\n  const { inputAmount, outputAmount } = trade\n  const token = inputAmount.token\n\n  const convert = async (): Promise<ContractTransaction> => {\n    const symbol = currencyEquals(token, chainCfg[CeloContract.StableToken])\n      ? 'cUSD'\n      : currencyEquals(token, chainCfg[CeloContract.GoldToken])\n      ? 'CELO'\n      : currencyEquals(token, mcUSD)\n      ? 'mcUSD'\n      : currencyEquals(token, mCELO)\n      ? 'mCELO'\n      : token.symbol ?? null\n\n    if (symbol?.startsWith('m')) {\n      const recipient = await signer.getAddress()\n      return await doTransaction(pool, 'withdraw', {\n        args: [outputAmount.token.address, outputAmount.raw.toString(), recipient],\n        summary: `Withdraw ${inputAmount.toSignificant(2)} ${symbol} from Moola`,\n      })\n    }\n    if (symbol) {\n      const recipient = await signer.getAddress()\n      return await doTransaction(pool, 'deposit', {\n        args: [inputAmount.token.address, inputAmount.raw.toString(), recipient, 0x0421],\n        summary: `Deposit ${inputAmount.toSignificant(2)} ${symbol} into Moola`,\n      })\n    }\n    throw new Error(`unknown currency: ${token.address}`)\n  }\n\n  return { hash: (await convert()).hash }\n}\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,mBAAmB;AAChD,SAASC,cAAc,QAAQ,cAAc;AAG7C,SAASC,oBAAoB,QAAQ,uBAAuB;AAG5D,SAASC,iBAAiB,QAAQ,YAAY;;AAE9C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,uBAAwD;EAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,WAAAC,IAAA,EAKlE;IAAA,IALyE;MAC7EC,KAAK;MACLC,MAAM;MACNC,OAAO;MACPC;IACF,CAAC,GAAAJ,IAAA;IACC,MAAMK,QAAQ,GAAGT,iBAAiB,CAACO,OAAO,CAAC;IAC3C,MAAM;MAAEG,KAAK;MAAEC;IAAM,CAAC,GAAGF,QAAQ;IAEjC,MAAMG,IAAI,GAAGb,oBAAoB,CAACc,OAAO,CAACJ,QAAQ,CAACK,WAAW,EAAER,MAAM,CAAC;IAEvE,MAAM;MAAES,WAAW;MAAEC;IAAa,CAAC,GAAGX,KAAK;IAC3C,MAAMY,KAAK,GAAGF,WAAW,CAACE,KAAK;IAE/B,MAAMC,OAAO;MAAA,IAAAC,KAAA,GAAAhB,iBAAA,CAAG,aAA0C;QAAA,IAAAiB,aAAA;QACxD,MAAMC,MAAM,GAAGvB,cAAc,CAACmB,KAAK,EAAER,QAAQ,CAACZ,YAAY,CAACyB,WAAW,CAAC,CAAC,GACpE,MAAM,GACNxB,cAAc,CAACmB,KAAK,EAAER,QAAQ,CAACZ,YAAY,CAAC0B,SAAS,CAAC,CAAC,GACvD,MAAM,GACNzB,cAAc,CAACmB,KAAK,EAAEP,KAAK,CAAC,GAC5B,OAAO,GACPZ,cAAc,CAACmB,KAAK,EAAEN,KAAK,CAAC,GAC5B,OAAO,IAAAS,aAAA,GACPH,KAAK,CAACI,MAAM,cAAAD,aAAA,cAAAA,aAAA,GAAI,IAAI;QAExB,IAAIC,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEG,UAAU,CAAC,GAAG,CAAC,EAAE;UAC3B,MAAMC,SAAS,SAASnB,MAAM,CAACoB,UAAU,CAAC,CAAC;UAC3C,aAAalB,aAAa,CAACI,IAAI,EAAE,UAAU,EAAE;YAC3Ce,IAAI,EAAE,CAACX,YAAY,CAACC,KAAK,CAACW,OAAO,EAAEZ,YAAY,CAACa,GAAG,CAACC,QAAQ,CAAC,CAAC,EAAEL,SAAS,CAAC;YAC1EM,OAAO,cAAAC,MAAA,CAAcjB,WAAW,CAACkB,aAAa,CAAC,CAAC,CAAC,OAAAD,MAAA,CAAIX,MAAM;UAC7D,CAAC,CAAC;QACJ;QACA,IAAIA,MAAM,EAAE;UACV,MAAMI,SAAS,SAASnB,MAAM,CAACoB,UAAU,CAAC,CAAC;UAC3C,aAAalB,aAAa,CAACI,IAAI,EAAE,SAAS,EAAE;YAC1Ce,IAAI,EAAE,CAACZ,WAAW,CAACE,KAAK,CAACW,OAAO,EAAEb,WAAW,CAACc,GAAG,CAACC,QAAQ,CAAC,CAAC,EAAEL,SAAS,EAAE,MAAM,CAAC;YAChFM,OAAO,aAAAC,MAAA,CAAajB,WAAW,CAACkB,aAAa,CAAC,CAAC,CAAC,OAAAD,MAAA,CAAIX,MAAM;UAC5D,CAAC,CAAC;QACJ;QACA,MAAM,IAAIa,KAAK,sBAAAF,MAAA,CAAsBf,KAAK,CAACW,OAAO,CAAE,CAAC;MACvD,CAAC;MAAA,gBA1BKV,OAAOA,CAAA;QAAA,OAAAC,KAAA,CAAAgB,KAAA,OAAAC,SAAA;MAAA;IAAA,GA0BZ;IAED,OAAO;MAAEC,IAAI,EAAE,OAAOnB,OAAO,CAAC,CAAC,EAAEmB;IAAK,CAAC;EACzC,CAAC;EAAA,gBA3CYpC,uBAAwDA,CAAAqC,EAAA;IAAA,OAAApC,KAAA,CAAAiC,KAAA,OAAAC,SAAA;EAAA;AAAA,GA2CpE"},"metadata":{},"sourceType":"module"}