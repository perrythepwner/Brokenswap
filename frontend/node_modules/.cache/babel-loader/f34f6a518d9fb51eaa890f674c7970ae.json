{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPresent = exports.Connection = void 0;\nvar address_1 = require(\"@celo/utils/lib/address\");\nvar sign_typed_data_utils_1 = require(\"@celo/utils/lib/sign-typed-data-utils\");\nvar signatureUtils_1 = require(\"@celo/utils/lib/signatureUtils\");\nvar util_1 = require(\"@ethereumjs/util\");\nvar debug_1 = __importDefault(require(\"debug\"));\nvar web3_1 = __importDefault(require(\"web3\"));\nvar celo_provider_1 = require(\"./celo-provider\");\nvar abi_utils_1 = require(\"./utils/abi-utils\");\nvar formatter_1 = require(\"./utils/formatter\");\nvar provider_utils_1 = require(\"./utils/provider-utils\");\nvar rpc_caller_1 = require(\"./utils/rpc-caller\");\nvar tx_params_normalizer_1 = require(\"./utils/tx-params-normalizer\");\nvar tx_result_1 = require(\"./utils/tx-result\");\nvar debugGasEstimation = (0, debug_1.default)('connection:gas-estimation');\n/**\n * Connection is a Class for connecting to Celo, sending Transactions, etc\n * @param web3 an instance of web3\n * @optional wallet a child class of {@link WalletBase}\n * @optional handleRevert sets handleRevert on the web3.eth instance passed in\n */\nvar Connection = /** @class */function () {\n  function Connection(web3, wallet, handleRevert) {\n    if (handleRevert === void 0) {\n      handleRevert = true;\n    }\n    var _this = this;\n    var _a;\n    this.web3 = web3;\n    this.wallet = wallet;\n    this.keccak256 = function (value) {\n      return _this.web3.utils.keccak256(value);\n    };\n    this.hexToAscii = function (hex) {\n      return _this.web3.utils.hexToAscii(hex);\n    };\n    /**\n     * Send a transaction to celo-blockchain.\n     *\n     * Similar to `web3.eth.sendTransaction()` but with following differences:\n     *  - applies connections tx's defaults\n     *  - estimatesGas before sending\n     *  - returns a `TransactionResult` instead of `PromiEvent`\n     */\n    this.sendTransaction = function (tx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var gas;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              tx = this.fillTxDefaults(tx);\n              gas = tx.gas;\n              if (!(gas == null)) return [3 /*break*/, 2];\n              return [4 /*yield*/, this.estimateGasWithInflationFactor(tx)];\n            case 1:\n              gas = _a.sent();\n              _a.label = 2;\n            case 2:\n              return [2 /*return*/, (0, tx_result_1.toTxResult)(this.web3.eth.sendTransaction(__assign(__assign({}, tx), {\n                gas: gas\n              })))];\n          }\n        });\n      });\n    };\n    this.sendTransactionObject = function (txObj, tx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var gas, gasEstimator, getCallTx_1, caller;\n        var _this = this;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              tx = this.fillTxDefaults(tx);\n              gas = tx.gas;\n              if (!(gas == null)) return [3 /*break*/, 2];\n              gasEstimator = function gasEstimator(_tx) {\n                return txObj.estimateGas(__assign({}, _tx));\n              };\n              getCallTx_1 = function getCallTx_1(_tx) {\n                // @ts-ignore missing _parent property from TransactionObject type.\n                return __assign(__assign({}, _tx), {\n                  data: txObj.encodeABI(),\n                  to: txObj._parent._address\n                });\n              };\n              caller = function caller(_tx) {\n                return _this.web3.eth.call(getCallTx_1(_tx));\n              };\n              return [4 /*yield*/, this.estimateGasWithInflationFactor(tx, gasEstimator, caller)];\n            case 1:\n              gas = _a.sent();\n              _a.label = 2;\n            case 2:\n              return [2 /*return*/, (0, tx_result_1.toTxResult)(txObj.send(__assign(__assign({}, tx), {\n                gas: gas\n              })))];\n          }\n        });\n      });\n    };\n    /*\n     * @param signer - The address of account signing this data\n     * @param typedData - Structured data to be signed\n     * @param version - Optionally provide a version which will be appended to the method. E.G. (4) becomes 'eth_signTypedData_v4'\n     * @remarks Some providers like Metamask treat eth_signTypedData differently from versioned method eth_signTypedData_v4\n     * @see [Metamask info in signing Typed Data](https://docs.metamask.io/guide/signing-data.html)\n     */\n    this.signTypedData = function (signer, typedData, version) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var shouldStringify, signature, messageHash;\n        var _this = this;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              shouldStringify = version === 3 || version === 4;\n              return [4 /*yield*/, new Promise(function (resolve, reject) {\n                var method = version ? \"eth_signTypedData_v\".concat(version) : 'eth_signTypedData';\n                _this.web3.currentProvider.send({\n                  id: (0, rpc_caller_1.getRandomId)(),\n                  jsonrpc: '2.0',\n                  method: method,\n                  params: [(0, formatter_1.inputAddressFormatter)(signer), shouldStringify ? JSON.stringify(typedData) : typedData]\n                }, function (error, resp) {\n                  if (error) {\n                    reject(error);\n                  } else if (resp) {\n                    resolve(resp.result);\n                  } else {\n                    reject(new Error('empty-response'));\n                  }\n                });\n              })];\n            case 1:\n              signature = _a.sent();\n              messageHash = (0, util_1.bufferToHex)((0, sign_typed_data_utils_1.generateTypedDataHash)(typedData));\n              return [2 /*return*/, (0, signatureUtils_1.parseSignatureWithoutPrefix)(messageHash, signature, signer)];\n          }\n        });\n      });\n    };\n    this.sign = function (dataToSign, address) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var signature;\n        var _this = this;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, new Promise(function (resolve, reject) {\n                ;\n                _this.web3.currentProvider.send({\n                  id: (0, rpc_caller_1.getRandomId)(),\n                  jsonrpc: '2.0',\n                  method: 'eth_sign',\n                  params: [(0, formatter_1.inputAddressFormatter)(address.toString()), (0, formatter_1.inputSignFormatter)(dataToSign)]\n                }, function (error, resp) {\n                  if (error) {\n                    reject(error);\n                  } else if (resp) {\n                    resolve(resp.result);\n                  } else {\n                    reject(new Error('empty-response'));\n                  }\n                });\n              })];\n            case 1:\n              signature = _a.sent();\n              return [2 /*return*/, signature];\n          }\n        });\n      });\n    };\n    this.sendSignedTransaction = function (signedTransactionData) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2 /*return*/, (0, tx_result_1.toTxResult)(this.web3.eth.sendSignedTransaction(signedTransactionData))];\n        });\n      });\n    };\n    // if neither gas price nor feeMarket fields are present set them.\n    this.setFeeMarketGas = function (tx) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var calls, _a, maxFeePerGas, maxPriorityFeePerGas;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              calls = [Promise.resolve(tx.maxFeePerGas), Promise.resolve(tx.maxPriorityFeePerGas)];\n              if (isEmpty(tx.maxFeePerGas)) {\n                calls[0] = this.gasPrice(tx.feeCurrency);\n              }\n              if (isEmpty(tx.maxPriorityFeePerGas)) {\n                calls[1] = this.rpcCaller.call('eth_maxPriorityFeePerGas', []).then(function (rpcResponse) {\n                  return rpcResponse.result;\n                });\n              }\n              return [4 /*yield*/, Promise.all(calls)];\n            case 1:\n              _a = _b.sent(), maxFeePerGas = _a[0], maxPriorityFeePerGas = _a[1];\n              return [2 /*return*/, __assign(__assign({}, tx), {\n                gasPrice: undefined,\n                maxFeePerGas: maxFeePerGas,\n                maxPriorityFeePerGas: maxPriorityFeePerGas\n              })];\n          }\n        });\n      });\n    };\n    this.estimateGas = function (tx, gasEstimator, caller) {\n      if (gasEstimator === void 0) {\n        gasEstimator = _this.web3.eth.estimateGas;\n      }\n      if (caller === void 0) {\n        caller = _this.web3.eth.call;\n      }\n      return __awaiter(_this, void 0, void 0, function () {\n        var gas, e_1, called, revertReason;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 4]);\n              return [4 /*yield*/, gasEstimator(__assign({}, tx))];\n            case 1:\n              gas = _a.sent();\n              debugGasEstimation('estimatedGas: %s', gas.toString());\n              return [2 /*return*/, gas];\n            case 2:\n              e_1 = _a.sent();\n              return [4 /*yield*/, caller({\n                data: tx.data,\n                to: tx.to,\n                from: tx.from\n              })];\n            case 3:\n              called = _a.sent();\n              revertReason = 'Could not decode transaction failure reason';\n              if (called.startsWith('0x08c379a')) {\n                revertReason = (0, abi_utils_1.decodeStringParameter)(this.getAbiCoder(), called.substring(10));\n              }\n              debugGasEstimation('Recover transaction failure reason', {\n                called: called,\n                data: tx.data,\n                to: tx.to,\n                from: tx.from,\n                error: e_1,\n                revertReason: revertReason\n              });\n              return [2 /*return*/, Promise.reject(\"Gas estimation failed: \".concat(revertReason, \" or \").concat(e_1))];\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    this.estimateGasWithInflationFactor = function (tx, gasEstimator, caller) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var gas, _a, _b, e_2;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              _c.trys.push([0, 2,, 3]);\n              _b = (_a = Math).round;\n              return [4 /*yield*/, this.estimateGas(tx, gasEstimator, caller)];\n            case 1:\n              gas = _b.apply(_a, [_c.sent() * this.config.gasInflationFactor]);\n              debugGasEstimation('estimatedGasWithInflationFactor: %s', gas);\n              return [2 /*return*/, gas];\n            case 2:\n              e_2 = _c.sent();\n              throw new Error(e_2);\n            case 3:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n    // An instance of Connection will only change chain id if provider is changed.\n    this.chainId = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var response, chainID;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (this._chainID) {\n                return [2 /*return*/, this._chainID];\n              }\n              return [4 /*yield*/, this.rpcCaller.call('net_version', [])];\n            case 1:\n              response = _a.sent();\n              chainID = parseInt(response.result.toString(), 10);\n              this._chainID = chainID;\n              return [2 /*return*/, chainID];\n          }\n        });\n      });\n    };\n    this.getTransactionCount = function (address) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var response;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.rpcCaller.call('eth_getTransactionCount', [address, 'pending'])];\n            case 1:\n              response = _a.sent();\n              return [2 /*return*/, (0, formatter_1.hexToNumber)(response.result)];\n          }\n        });\n      });\n    };\n    this.nonce = function (address) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2 /*return*/, this.getTransactionCount(address)];\n        });\n      });\n    };\n    this.coinbase = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var response;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.rpcCaller.call('eth_coinbase', [])];\n            case 1:\n              response = _a.sent();\n              return [2 /*return*/, response.result.toString()];\n          }\n        });\n      });\n    };\n    this.gasPrice = function (feeCurrency) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var parameter, response, gasPriceInHex;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              parameter = feeCurrency ? [feeCurrency] : [];\n              return [4 /*yield*/, this.rpcCaller.call('eth_gasPrice', parameter)];\n            case 1:\n              response = _a.sent();\n              gasPriceInHex = response.result.toString();\n              return [2 /*return*/, gasPriceInHex];\n          }\n        });\n      });\n    };\n    this.getBlockNumber = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var response;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.rpcCaller.call('eth_blockNumber', [])];\n            case 1:\n              response = _a.sent();\n              return [2 /*return*/, (0, formatter_1.hexToNumber)(response.result)];\n          }\n        });\n      });\n    };\n    this.isBlockNumberHash = function (blockNumber) {\n      return blockNumber instanceof String && blockNumber.indexOf('0x') === 0;\n    };\n    this.getBlock = function (blockHashOrBlockNumber, fullTxObjects) {\n      if (fullTxObjects === void 0) {\n        fullTxObjects = true;\n      }\n      return __awaiter(_this, void 0, void 0, function () {\n        var endpoint, response;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              endpoint = this.isBlockNumberHash(blockHashOrBlockNumber) ? 'eth_getBlockByHash' // Reference: https://eth.wiki/json-rpc/API#eth_getBlockByHash\n              : 'eth_getBlockByNumber' // Reference: https://eth.wiki/json-rpc/API#eth_getBlockByNumber\n              ;\n\n              return [4 /*yield*/, this.rpcCaller.call(endpoint, [(0, formatter_1.inputBlockNumberFormatter)(blockHashOrBlockNumber), fullTxObjects])];\n            case 1:\n              response = _a.sent();\n              return [2 /*return*/, (0, formatter_1.outputBlockFormatter)(response.result)];\n          }\n        });\n      });\n    };\n    this.getBlockHeader = function (blockHashOrBlockNumber) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var endpoint, response;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              endpoint = this.isBlockNumberHash(blockHashOrBlockNumber) ? 'eth_getHeaderByHash' : 'eth_getHeaderByNumber';\n              return [4 /*yield*/, this.rpcCaller.call(endpoint, [(0, formatter_1.inputBlockNumberFormatter)(blockHashOrBlockNumber)])];\n            case 1:\n              response = _a.sent();\n              return [2 /*return*/, (0, formatter_1.outputBlockHeaderFormatter)(response.result)];\n          }\n        });\n      });\n    };\n    this.getBalance = function (address, defaultBlock) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var response;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.rpcCaller.call('eth_getBalance', [(0, formatter_1.inputAddressFormatter)(address), (0, formatter_1.inputDefaultBlockNumberFormatter)(defaultBlock)])];\n            case 1:\n              response = _a.sent();\n              return [2 /*return*/, (0, formatter_1.outputBigNumberFormatter)(response.result)];\n          }\n        });\n      });\n    };\n    this.getTransaction = function (transactionHash) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var response;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.rpcCaller.call('eth_getTransactionByHash', [(0, address_1.ensureLeading0x)(transactionHash)])];\n            case 1:\n              response = _a.sent();\n              return [2 /*return*/, (0, formatter_1.outputCeloTxFormatter)(response.result)];\n          }\n        });\n      });\n    };\n    this.getTransactionReceipt = function (txhash) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var response;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.rpcCaller.call('eth_getTransactionReceipt', [(0, address_1.ensureLeading0x)(txhash)])];\n            case 1:\n              response = _a.sent();\n              if (response.result === null) {\n                return [2 /*return*/, null];\n              }\n              return [2 /*return*/, (0, formatter_1.outputCeloTxReceiptFormatter)(response.result)];\n          }\n        });\n      });\n    };\n    web3.eth.handleRevert = handleRevert;\n    this.config = {\n      gasInflationFactor: 1.3\n    };\n    var existingProvider = web3.currentProvider;\n    this.setProvider(existingProvider);\n    // TODO: Add this line with the wallets separation completed\n    // this.wallet = _wallet ?? new LocalWallet()\n    this.config.from = (_a = web3.eth.defaultAccount) !== null && _a !== void 0 ? _a : undefined;\n    this.paramsPopulator = new tx_params_normalizer_1.TxParamsNormalizer(this);\n  }\n  Connection.prototype.setProvider = function (provider) {\n    if (!provider) {\n      throw new Error('Must have a valid Provider');\n    }\n    this._chainID = undefined;\n    try {\n      if (!(provider instanceof celo_provider_1.CeloProvider)) {\n        this.rpcCaller = new rpc_caller_1.HttpRpcCaller(provider);\n        provider = new celo_provider_1.CeloProvider(provider, this);\n      }\n      this.web3.setProvider(provider);\n      return true;\n    } catch (error) {\n      console.error(\"could not attach provider\", error);\n      return false;\n    }\n  };\n  Object.defineProperty(Connection.prototype, \"defaultAccount\", {\n    /**\n     * Default account for generated transactions (eg. tx.from)\n     */\n    get: function get() {\n      return this.config.from;\n    },\n    /**\n     * Set default account for generated transactions (eg. tx.from )\n     */\n    set: function set(address) {\n      this.config.from = address;\n      this.web3.eth.defaultAccount = address ? address : null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Connection.prototype, \"defaultGasInflationFactor\", {\n    get: function get() {\n      return this.config.gasInflationFactor;\n    },\n    set: function set(factor) {\n      this.config.gasInflationFactor = factor;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Connection.prototype, \"defaultFeeCurrency\", {\n    get: function get() {\n      return this.config.feeCurrency;\n    },\n    /**\n     * Set the ERC20 address for the token to use to pay for transaction fees.\n     * The ERC20 must be whitelisted for gas.\n     *\n     * Set to `null` to use CELO\n     *\n     * @param address ERC20 address\n     */\n    set: function set(address) {\n      this.config.feeCurrency = address;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Connection.prototype.isLocalAccount = function (address) {\n    return this.wallet != null && this.wallet.hasAccount(address);\n  };\n  Connection.prototype.addAccount = function (privateKey) {\n    if (this.wallet) {\n      if ((0, provider_utils_1.hasProperty)(this.wallet, 'addAccount')) {\n        this.wallet.addAccount(privateKey);\n      } else {\n        throw new Error(\"The wallet used, can't add accounts\");\n      }\n    } else {\n      throw new Error('No wallet set');\n    }\n  };\n  Connection.prototype.removeAccount = function (address) {\n    if (this.wallet) {\n      if ((0, provider_utils_1.hasProperty)(this.wallet, 'removeAccount')) {\n        this.wallet.removeAccount(address);\n      } else {\n        throw new Error(\"The wallet used, can't remove accounts\");\n      }\n    } else {\n      throw new Error('No wallet set');\n    }\n  };\n  Connection.prototype.getNodeAccounts = function () {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var nodeAccountsResp;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.rpcCaller.call('eth_accounts', [])];\n          case 1:\n            nodeAccountsResp = _b.sent();\n            return [2 /*return*/, this.toChecksumAddresses((_a = nodeAccountsResp.result) !== null && _a !== void 0 ? _a : [])];\n        }\n      });\n    });\n  };\n  Connection.prototype.getLocalAccounts = function () {\n    return this.wallet ? this.toChecksumAddresses(this.wallet.getAccounts()) : [];\n  };\n  Connection.prototype.getAccounts = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getNodeAccounts()];\n          case 1:\n            return [2 /*return*/, _a.sent().concat(this.getLocalAccounts())];\n        }\n      });\n    });\n  };\n  Connection.prototype.toChecksumAddresses = function (addresses) {\n    return addresses.map(function (value) {\n      return (0, address_1.toChecksumAddress)(value);\n    });\n  };\n  Connection.prototype.isListening = function () {\n    return this.web3.eth.net.isListening();\n  };\n  Connection.prototype.isSyncing = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this.web3.eth.isSyncing().then(function (response) {\n        // isSyncing returns a syncProgress object when it's still syncing\n        if (typeof response === 'boolean') {\n          resolve(response);\n        } else {\n          resolve(true);\n        }\n      }).catch(reject);\n    });\n  };\n  Connection.prototype.getAbiCoder = function () {\n    return this.web3.eth.abi;\n  };\n  Connection.prototype.fillTxDefaults = function (tx) {\n    var defaultTx = {\n      from: this.config.from,\n      feeCurrency: this.config.feeCurrency\n    };\n    return __assign(__assign({}, defaultTx), tx);\n  };\n  Connection.prototype.stop = function () {\n    (0, celo_provider_1.assertIsCeloProvider)(this.web3.currentProvider);\n    this.web3.currentProvider.stop();\n  };\n  return Connection;\n}();\nexports.Connection = Connection;\nfunction isEmpty(value) {\n  return value === 0 || value === undefined || value === null || value === '0' || typeof value === 'string' && (value.toLowerCase() === '0x' || value.toLowerCase() === '0x0') || web3_1.default.utils.toBN(value.toString()).eq(web3_1.default.utils.toBN(0));\n}\nfunction isPresent(value) {\n  return !isEmpty(value);\n}\nexports.isPresent = isPresent;","map":null,"metadata":{},"sourceType":"script"}