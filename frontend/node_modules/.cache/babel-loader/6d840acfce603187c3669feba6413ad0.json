{"ast":null,"code":"import { __extends, __spreadArray } from \"tslib\";\nimport \"../utilities/globals/index.js\";\nimport { isNonNullObject } from \"../utilities/index.js\";\nexport var PROTOCOL_ERRORS_SYMBOL = Symbol();\nexport function graphQLResultHasProtocolErrors(result) {\n  if (result.extensions) {\n    return Array.isArray(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n  }\n  return false;\n}\nexport function isApolloError(err) {\n  return err.hasOwnProperty(\"graphQLErrors\");\n}\nvar generateErrorMessage = function generateErrorMessage(err) {\n  var errors = __spreadArray(__spreadArray(__spreadArray([], err.graphQLErrors, true), err.clientErrors, true), err.protocolErrors, true);\n  if (err.networkError) errors.push(err.networkError);\n  return errors.map(function (err) {\n    return isNonNullObject(err) && err.message || \"Error message not found.\";\n  }).join(\"\\n\");\n};\nvar ApolloError = function (_super) {\n  __extends(ApolloError, _super);\n  function ApolloError(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n      protocolErrors = _a.protocolErrors,\n      clientErrors = _a.clientErrors,\n      networkError = _a.networkError,\n      errorMessage = _a.errorMessage,\n      extraInfo = _a.extraInfo;\n    var _this = _super.call(this, errorMessage) || this;\n    _this.name = \"ApolloError\";\n    _this.graphQLErrors = graphQLErrors || [];\n    _this.protocolErrors = protocolErrors || [];\n    _this.clientErrors = clientErrors || [];\n    _this.networkError = networkError || null;\n    _this.message = errorMessage || generateErrorMessage(_this);\n    _this.extraInfo = extraInfo;\n    _this.__proto__ = ApolloError.prototype;\n    return _this;\n  }\n  return ApolloError;\n}(Error);\nexport { ApolloError };","map":{"version":3,"sources":["../../src/errors/index.ts"],"names":[],"mappings":";AAAA,OAAO,+BAA+B;AAItC,SAAS,eAAe,QAAQ,uBAAuB;AAQvD,OAAO,IAAM,sBAAsB,GAAkB,MAAM,CAAA,CAAE;AAkB7D,OAAM,SAAU,8BAA8B,CAC5C,MAAsB,EAAA;EAEtB,IAAI,MAAM,CAAC,UAAU,EAAE;IACrB,OAAO,KAAK,CAAC,OAAO,CACjB,MAA6C,CAAC,UAAU,CACvD,sBAAsB,CACvB,CACF;EACF;EACD,OAAO,KAAK;AACd;AAEA,OAAM,SAAU,aAAa,CAAC,GAAU,EAAA;EACtC,OAAO,GAAG,CAAC,cAAc,CAAC,eAAe,CAAC;AAC5C;AAMA,IAAM,oBAAoB,GAAG,SAAvB,oBAAoB,CAAI,GAAgB,EAAA;EAC5C,IAAM,MAAM,GAAA,aAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACP,GAAG,CAAC,aAAa,EAAA,IAAA,CAAA,EACjB,GAAG,CAAC,YAAY,EAAA,IAAA,CAAA,EAChB,GAAG,CAAC,cAAc,EAAA,IAAA,CACtB;EACD,IAAI,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC;EACnD,OACE,MAAM,CAEH,GAAG,CACF,UAAC,GAAG,EAAA;IACF,OAAC,eAAe,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,OAAO,IAAK,0BAA0B;EAAnE,CAAmE,CACtE,CACA,IAAI,CAAC,IAAI,CAAC;AAEjB,CAAC;AAMD,IAAA,WAAA,GAAA,UAAA,MAAA,EAAA;EAAiC,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;EAmB/B,SAAA,WAAA,CAAY,EAOS,EAAA;QANnB,aAAa,GAAA,EAAA,CAAA,aAAA;MACb,cAAc,GAAA,EAAA,CAAA,cAAA;MACd,YAAY,GAAA,EAAA,CAAA,YAAA;MACZ,YAAY,GAAA,EAAA,CAAA,YAAA;MACZ,YAAY,GAAA,EAAA,CAAA,YAAA;MACZ,SAAS,GAAA,EAAA,CAAA,SAAA;IANX,IAAA,KAAA,GAQE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,YAAY,CAAC,IAAA,IAAA;IACnB,KAAI,CAAC,IAAI,GAAG,aAAa;IACzB,KAAI,CAAC,aAAa,GAAG,aAAa,IAAI,EAAE;IACxC,KAAI,CAAC,cAAc,GAAG,cAAc,IAAI,EAAE;IAC1C,KAAI,CAAC,YAAY,GAAG,YAAY,IAAI,EAAE;IACtC,KAAI,CAAC,YAAY,GAAG,YAAY,IAAI,IAAI;IACxC,KAAI,CAAC,OAAO,GAAG,YAAY,IAAI,oBAAoB,CAAC,KAAI,CAAC;IACzD,KAAI,CAAC,SAAS,GAAG,SAAS;IAIzB,KAAY,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS;;EACjD;EACF,OAAA,WAAC;AAAD,CAAC,CAxCgC,KAAK,CAAA","sourcesContent":["import \"../utilities/globals/index.js\";\n\nimport type { GraphQLError, GraphQLErrorExtensions } from \"graphql\";\n\nimport { isNonNullObject } from \"../utilities/index.js\";\nimport type { ServerParseError } from \"../link/http/index.js\";\nimport type { ServerError } from \"../link/utils/index.js\";\nimport type { FetchResult } from \"../link/core/index.js\";\n\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nexport const PROTOCOL_ERRORS_SYMBOL: unique symbol = Symbol();\n\ntype FetchResultWithSymbolExtensions<T> = FetchResult<T> & {\n  extensions: Record<string | symbol, any>;\n};\n\nexport interface ApolloErrorOptions {\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  protocolErrors?: ReadonlyArray<{\n    message: string;\n    extensions?: GraphQLErrorExtensions[];\n  }>;\n  clientErrors?: ReadonlyArray<Error>;\n  networkError?: Error | ServerParseError | ServerError | null;\n  errorMessage?: string;\n  extraInfo?: any;\n}\n\nexport function graphQLResultHasProtocolErrors<T>(\n  result: FetchResult<T>\n): result is FetchResultWithSymbolExtensions<T> {\n  if (result.extensions) {\n    return Array.isArray(\n      (result as FetchResultWithSymbolExtensions<T>).extensions[\n        PROTOCOL_ERRORS_SYMBOL\n      ]\n    );\n  }\n  return false;\n}\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty(\"graphQLErrors\");\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  const errors = [\n    ...err.graphQLErrors,\n    ...err.clientErrors,\n    ...err.protocolErrors,\n  ];\n  if (err.networkError) errors.push(err.networkError);\n  return (\n    errors\n      // The rest of the code sometimes unsafely types non-Error objects as GraphQLErrors\n      .map(\n        (err) =>\n          (isNonNullObject(err) && err.message) || \"Error message not found.\"\n      )\n      .join(\"\\n\")\n  );\n};\n\nexport type GraphQLErrors = ReadonlyArray<GraphQLError>;\n\nexport type NetworkError = Error | ServerParseError | ServerError | null;\n\nexport class ApolloError extends Error {\n  public name: string;\n  public message: string;\n  public graphQLErrors: GraphQLErrors;\n  public protocolErrors: ReadonlyArray<{\n    message: string;\n    extensions?: GraphQLErrorExtensions[];\n  }>;\n  public clientErrors: ReadonlyArray<Error>;\n  public networkError: Error | ServerParseError | ServerError | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    protocolErrors,\n    clientErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: ApolloErrorOptions) {\n    super(errorMessage);\n    this.name = \"ApolloError\";\n    this.graphQLErrors = graphQLErrors || [];\n    this.protocolErrors = protocolErrors || [];\n    this.clientErrors = clientErrors || [];\n    this.networkError = networkError || null;\n    this.message = errorMessage || generateErrorMessage(this);\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}