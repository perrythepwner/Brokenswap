{"ast":null,"code":"var _asyncToGenerator = require(\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst BaseFilter = require('./base-filter');\nconst getBlocksForRange = require('./getBlocksForRange');\nconst {\n  incrementHexInt\n} = require('./hexUtils');\nclass BlockFilter extends BaseFilter {\n  constructor(_ref) {\n    let {\n      provider,\n      params\n    } = _ref;\n    super();\n    this.type = 'block';\n    this.provider = provider;\n  }\n  update(_ref2) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let {\n        oldBlock,\n        newBlock\n      } = _ref2;\n      const toBlock = newBlock;\n      const fromBlock = incrementHexInt(oldBlock);\n      const blockBodies = yield getBlocksForRange({\n        provider: _this.provider,\n        fromBlock,\n        toBlock\n      });\n      const blockHashes = blockBodies.map(block => block.hash);\n      _this.addResults(blockHashes);\n    })();\n  }\n}\nmodule.exports = BlockFilter;","map":{"version":3,"names":["BaseFilter","require","getBlocksForRange","incrementHexInt","BlockFilter","constructor","_ref","provider","params","type","update","_ref2","_this","_asyncToGenerator","oldBlock","newBlock","toBlock","fromBlock","blockBodies","blockHashes","map","block","hash","addResults","module","exports"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/eth-json-rpc-filters/block-filter.js"],"sourcesContent":["const BaseFilter = require('./base-filter')\nconst getBlocksForRange = require('./getBlocksForRange')\nconst { incrementHexInt } = require('./hexUtils')\n\nclass BlockFilter extends BaseFilter {\n\n  constructor ({ provider, params }) {\n    super()\n    this.type = 'block'\n    this.provider = provider\n  }\n\n  async update ({ oldBlock, newBlock }) {\n    const toBlock = newBlock\n    const fromBlock = incrementHexInt(oldBlock)\n    const blockBodies = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock })\n    const blockHashes = blockBodies.map((block) => block.hash)\n    this.addResults(blockHashes)\n  }\n\n}\n\nmodule.exports = BlockFilter\n"],"mappings":";AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AACxD,MAAM;EAAEE;AAAgB,CAAC,GAAGF,OAAO,CAAC,YAAY,CAAC;AAEjD,MAAMG,WAAW,SAASJ,UAAU,CAAC;EAEnCK,WAAWA,CAAAC,IAAA,EAAwB;IAAA,IAAtB;MAAEC,QAAQ;MAAEC;IAAO,CAAC,GAAAF,IAAA;IAC/B,KAAK,CAAC,CAAC;IACP,IAAI,CAACG,IAAI,GAAG,OAAO;IACnB,IAAI,CAACF,QAAQ,GAAGA,QAAQ;EAC1B;EAEMG,MAAMA,CAAAC,KAAA,EAA0B;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAAA,IAAxB;QAAEC,QAAQ;QAAEC;MAAS,CAAC,GAAAJ,KAAA;MAClC,MAAMK,OAAO,GAAGD,QAAQ;MACxB,MAAME,SAAS,GAAGd,eAAe,CAACW,QAAQ,CAAC;MAC3C,MAAMI,WAAW,SAAShB,iBAAiB,CAAC;QAAEK,QAAQ,EAAEK,KAAI,CAACL,QAAQ;QAAEU,SAAS;QAAED;MAAQ,CAAC,CAAC;MAC5F,MAAMG,WAAW,GAAGD,WAAW,CAACE,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;MAC1DV,KAAI,CAACW,UAAU,CAACJ,WAAW,CAAC;IAAA;EAC9B;AAEF;AAEAK,MAAM,CAACC,OAAO,GAAGrB,WAAW"},"metadata":{},"sourceType":"script"}