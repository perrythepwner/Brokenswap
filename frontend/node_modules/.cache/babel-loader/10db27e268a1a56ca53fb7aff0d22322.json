{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListCompositeTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nclass ListCompositeTreeViewDU extends arrayComposite_1.ArrayCompositeTreeViewDU {\n  constructor(type, _rootNode, cache) {\n    super(type, _rootNode, cache);\n    this.type = type;\n    this._rootNode = _rootNode;\n  }\n  /**\n   * Adds one value element at the end of the array and adds 1 to the un-commited ViewDU length\n   */\n  push(view) {\n    if (this._length >= this.type.limit) {\n      throw Error(\"Error pushing over limit\");\n    }\n    this.dirtyLength = true;\n    const index = this._length++;\n    // No need for pre-initialization like in ListBasic.push since ArrayCompositeTreeViewDU.set() doesn't do a get node\n    this.set(index, view);\n  }\n  /**\n   * Returns a new ListCompositeTreeViewDU instance with the values from 0 to `index`.\n   * The new list is equivalent to (pseudo-code):\n   *\n   * ```ts\n   * const nodes = getChunkNodes()\n   * return listFromChunkNodes(nodes.slice(0, index + 1))\n   * ```\n   *\n   * To achieve it, rebinds the underlying tree zero-ing all nodes right of `index`.\n   *\n   * Note: Using index = -1, returns an empty list of length 0.\n   */\n  sliceTo(index) {\n    // Commit before getting rootNode to ensure all pending data is in the rootNode\n    this.commit();\n    const rootNode = this._rootNode;\n    const length = this.type.tree_getLength(rootNode);\n    // All nodes beyond length are already zero\n    // Array of length 2: [X,X,0,0], for index >= 1 no action needed\n    if (index >= length - 1) {\n      return this;\n    }\n    // Since this is a List, do the treeZeroAfterIndex operation on the chunks tree\n    const chunksNode = this.type.tree_getChunksNode(rootNode);\n    const newChunksNode = persistent_merkle_tree_1.treeZeroAfterIndex(chunksNode, this.type.chunkDepth, index);\n    // Must set new length and commit to tree to restore the same tree at that index\n    const newLength = index + 1;\n    const newRootNode = this.type.tree_setChunksNode(rootNode, newChunksNode, newLength);\n    return this.type.getViewDU(newRootNode);\n  }\n}\nexports.ListCompositeTreeViewDU = ListCompositeTreeViewDU;","map":{"version":3,"sources":["../../src/viewDU/listComposite.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,wBAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;AAIA,MAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAEA,MAAa,uBAEX,SAAQ,gBAAA,CAAA,wBAAqC,CAAA;EAC7C,WAAA,CACW,IAAoC,EACnC,SAAe,EACzB,KAAqC,EAAA;IAErC,KAAK,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC;IAJpB,IAAA,CAAA,IAAI,GAAJ,IAAI;IACH,IAAA,CAAA,SAAS,GAAT,SAAS;EAIrB;EAEA;;AAEG;EACH,IAAI,CAAC,IAAkC,EAAA;IACrC,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;MACnC,MAAM,KAAK,CAAC,0BAA0B,CAAC;IACxC;IAED,IAAI,CAAC,WAAW,GAAG,IAAI;IACvB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,EAAE;IAC5B;IACA,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC;EACvB;EAEA;;;;;;;;;;;;AAYG;EACH,OAAO,CAAC,KAAa,EAAA;IACnB;IACA,IAAI,CAAC,MAAM,CAAA,CAAE;IACb,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS;IAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;IAEjD;IACA;IACA,IAAI,KAAK,IAAI,MAAM,GAAG,CAAC,EAAE;MACvB,OAAO,IAAI;IACZ;IAED;IACA,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC;IACzD,MAAM,aAAa,GAAG,wBAAA,CAAA,kBAAkB,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC;IAEjF;IACA,MAAM,SAAS,GAAG,KAAK,GAAG,CAAC;IAC3B,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,aAAa,EAAE,SAAS,CAAC;IAEpF,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAS;EACjD;AACD;AA5DD,OAAA,CAAA,uBAAA,GAAA,uBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCompositeTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nclass ListCompositeTreeViewDU extends arrayComposite_1.ArrayCompositeTreeViewDU {\n    constructor(type, _rootNode, cache) {\n        super(type, _rootNode, cache);\n        this.type = type;\n        this._rootNode = _rootNode;\n    }\n    /**\n     * Adds one value element at the end of the array and adds 1 to the un-commited ViewDU length\n     */\n    push(view) {\n        if (this._length >= this.type.limit) {\n            throw Error(\"Error pushing over limit\");\n        }\n        this.dirtyLength = true;\n        const index = this._length++;\n        // No need for pre-initialization like in ListBasic.push since ArrayCompositeTreeViewDU.set() doesn't do a get node\n        this.set(index, view);\n    }\n    /**\n     * Returns a new ListCompositeTreeViewDU instance with the values from 0 to `index`.\n     * The new list is equivalent to (pseudo-code):\n     *\n     * ```ts\n     * const nodes = getChunkNodes()\n     * return listFromChunkNodes(nodes.slice(0, index + 1))\n     * ```\n     *\n     * To achieve it, rebinds the underlying tree zero-ing all nodes right of `index`.\n     *\n     * Note: Using index = -1, returns an empty list of length 0.\n     */\n    sliceTo(index) {\n        // Commit before getting rootNode to ensure all pending data is in the rootNode\n        this.commit();\n        const rootNode = this._rootNode;\n        const length = this.type.tree_getLength(rootNode);\n        // All nodes beyond length are already zero\n        // Array of length 2: [X,X,0,0], for index >= 1 no action needed\n        if (index >= length - 1) {\n            return this;\n        }\n        // Since this is a List, do the treeZeroAfterIndex operation on the chunks tree\n        const chunksNode = this.type.tree_getChunksNode(rootNode);\n        const newChunksNode = persistent_merkle_tree_1.treeZeroAfterIndex(chunksNode, this.type.chunkDepth, index);\n        // Must set new length and commit to tree to restore the same tree at that index\n        const newLength = index + 1;\n        const newRootNode = this.type.tree_setChunksNode(rootNode, newChunksNode, newLength);\n        return this.type.getViewDU(newRootNode);\n    }\n}\nexports.ListCompositeTreeViewDU = ListCompositeTreeViewDU;\n//# sourceMappingURL=listComposite.js.map"]},"metadata":{},"sourceType":"script"}