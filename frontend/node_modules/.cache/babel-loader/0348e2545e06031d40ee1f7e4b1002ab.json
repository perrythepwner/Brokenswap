{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWeb3ForKit = exports.ensureCurrentProvider = exports.setupAPIKey = exports.API_KEY_HEADER_KEY = void 0;\nvar web3_1 = __importDefault(require(\"web3\"));\nexports.API_KEY_HEADER_KEY = 'apiKey';\n/** @internal */\nfunction setupAPIKey(apiKey) {\n  var options = {};\n  options.headers = [];\n  options.headers.push({\n    name: exports.API_KEY_HEADER_KEY,\n    value: apiKey\n  });\n  return options;\n}\nexports.setupAPIKey = setupAPIKey;\n/** @internal */\nfunction ensureCurrentProvider(web3) {\n  if (!web3.currentProvider) {\n    throw new Error('Must have a valid Provider');\n  }\n}\nexports.ensureCurrentProvider = ensureCurrentProvider;\n/** @internal */\nfunction getWeb3ForKit(url, options) {\n  var web3;\n  if (url.endsWith('.ipc')) {\n    try {\n      var net = require('net');\n      web3 = new web3_1.default(new web3_1.default.providers.IpcProvider(url, net));\n    } catch (e) {\n      console.error('.ipc only works in environments with native net module');\n    }\n    web3 = new web3_1.default(url);\n  } else if (url.toLowerCase().startsWith('http')) {\n    web3 = new web3_1.default(new web3_1.default.providers.HttpProvider(url, options));\n  } else {\n    web3 = new web3_1.default(url);\n  }\n  return web3;\n}\nexports.getWeb3ForKit = getWeb3ForKit;","map":null,"metadata":{},"sourceType":"script"}