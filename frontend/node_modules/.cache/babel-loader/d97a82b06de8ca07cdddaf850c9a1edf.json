{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport * as React from \"react\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { ApolloError, NetworkStatus } from \"../../core/index.js\";\nimport { isNonEmptyArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { __use, useDeepMemo } from \"./internal/index.js\";\nimport { getSuspenseCache } from \"../cache/index.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { skipToken } from \"./constants.js\";\nexport function useSuspenseQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n  var client = useApolloClient(options.client);\n  var suspenseCache = getSuspenseCache(client);\n  var watchQueryOptions = useWatchQueryOptions({\n    client: client,\n    query: query,\n    options: options\n  });\n  var fetchPolicy = watchQueryOptions.fetchPolicy,\n    variables = watchQueryOptions.variables;\n  var _a = options.queryKey,\n    queryKey = _a === void 0 ? [] : _a;\n  var cacheKey = __spreadArray([query, canonicalStringify(variables)], [].concat(queryKey), true);\n  var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\n    return client.watchQuery(watchQueryOptions);\n  });\n  var _b = React.useState(function () {\n      return new Map([[queryRef.key, queryRef.promise]]);\n    }),\n    promiseCache = _b[0],\n    setPromiseCache = _b[1];\n  var promise = promiseCache.get(queryRef.key);\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    promise = queryRef.applyOptions(watchQueryOptions);\n    promiseCache.set(queryRef.key, promise);\n  }\n  if (!promise) {\n    promise = queryRef.promise;\n    promiseCache.set(queryRef.key, promise);\n  }\n  React.useEffect(function () {\n    var dispose = queryRef.retain();\n    var removeListener = queryRef.listen(function (promise) {\n      setPromiseCache(function (promiseCache) {\n        return new Map(promiseCache).set(queryRef.key, promise);\n      });\n    });\n    return function () {\n      removeListener();\n      dispose();\n    };\n  }, [queryRef]);\n  var skipResult = React.useMemo(function () {\n    var error = toApolloError(queryRef.result);\n    return {\n      loading: false,\n      data: queryRef.result.data,\n      networkStatus: error ? NetworkStatus.error : NetworkStatus.ready,\n      error: error\n    };\n  }, [queryRef.result]);\n  var result = fetchPolicy === \"standby\" ? skipResult : __use(promise);\n  var fetchMore = React.useCallback(function (options) {\n    var promise = queryRef.fetchMore(options);\n    setPromiseCache(function (previousPromiseCache) {\n      return new Map(previousPromiseCache).set(queryRef.key, queryRef.promise);\n    });\n    return promise;\n  }, [queryRef]);\n  var refetch = React.useCallback(function (variables) {\n    var promise = queryRef.refetch(variables);\n    setPromiseCache(function (previousPromiseCache) {\n      return new Map(previousPromiseCache).set(queryRef.key, queryRef.promise);\n    });\n    return promise;\n  }, [queryRef]);\n  var subscribeToMore = React.useCallback(function (options) {\n    return queryRef.observable.subscribeToMore(options);\n  }, [queryRef]);\n  return React.useMemo(function () {\n    return {\n      client: client,\n      data: result.data,\n      error: toApolloError(result),\n      networkStatus: result.networkStatus,\n      fetchMore: fetchMore,\n      refetch: refetch,\n      subscribeToMore: subscribeToMore\n    };\n  }, [client, fetchMore, refetch, result, subscribeToMore]);\n}\nfunction validateOptions(options) {\n  var query = options.query,\n    fetchPolicy = options.fetchPolicy,\n    returnPartialData = options.returnPartialData;\n  verifyDocumentType(query, DocumentType.Query);\n  validateFetchPolicy(fetchPolicy);\n  validatePartialDataReturn(fetchPolicy, returnPartialData);\n}\nfunction validateFetchPolicy(fetchPolicy) {\n  if (fetchPolicy === void 0) {\n    fetchPolicy = \"cache-first\";\n  }\n  var supportedFetchPolicies = [\"cache-first\", \"network-only\", \"no-cache\", \"cache-and-network\"];\n  invariant(supportedFetchPolicies.includes(fetchPolicy), 56, fetchPolicy);\n}\nfunction validatePartialDataReturn(fetchPolicy, returnPartialData) {\n  if (fetchPolicy === \"no-cache\" && returnPartialData) {\n    globalThis.__DEV__ !== false && invariant.warn(57);\n  }\n}\nexport function toApolloError(result) {\n  return isNonEmptyArray(result.errors) ? new ApolloError({\n    graphQLErrors: result.errors\n  }) : result.error;\n}\nexport function useWatchQueryOptions(_a) {\n  var client = _a.client,\n    query = _a.query,\n    options = _a.options;\n  return useDeepMemo(function () {\n    var _a;\n    if (options === skipToken) {\n      return {\n        query: query,\n        fetchPolicy: \"standby\"\n      };\n    }\n    var fetchPolicy = options.fetchPolicy || ((_a = client.defaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || \"cache-first\";\n    var watchQueryOptions = __assign(__assign({}, options), {\n      fetchPolicy: fetchPolicy,\n      query: query,\n      notifyOnNetworkStatusChange: false,\n      nextFetchPolicy: void 0\n    });\n    if (globalThis.__DEV__ !== false) {\n      validateOptions(watchQueryOptions);\n    }\n    if (options.skip) {\n      watchQueryOptions.fetchPolicy = \"standby\";\n    }\n    return watchQueryOptions;\n  }, [client, options, query]);\n}","map":{"version":3,"sources":["../../../src/react/hooks/useSuspenseQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport type {\n  ApolloClient,\n  ApolloQueryResult,\n  DocumentNode,\n  OperationVariables,\n  TypedDocumentNode,\n  WatchQueryFetchPolicy,\n  FetchMoreQueryOptions,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { ApolloError, NetworkStatus } from \"../../core/index.js\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { isNonEmptyArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport type {\n  SuspenseQueryHookOptions,\n  ObservableQueryFields,\n  NoInfer,\n} from \"../types/types.js\";\nimport { __use, useDeepMemo } from \"./internal/index.js\";\nimport { getSuspenseCache } from \"../cache/index.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { skipToken } from \"./constants.js\";\nimport type { SkipToken } from \"./constants.js\";\nimport type { CacheKey } from \"../cache/types.js\";\n\nexport interface UseSuspenseQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> {\n  client: ApolloClient<any>;\n  data: TData;\n  error: ApolloError | undefined;\n  fetchMore: FetchMoreFunction<TData, TVariables>;\n  networkStatus: NetworkStatus;\n  refetch: RefetchFunction<TData, TVariables>;\n  subscribeToMore: SubscribeToMoreFunction<TData, TVariables>;\n}\n\nexport type FetchMoreFunction<TData, TVariables extends OperationVariables> = (\n  fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> & {\n    updateQuery?: (\n      previousQueryResult: TData,\n      options: {\n        fetchMoreResult: TData;\n        variables: TVariables;\n      }\n    ) => TData;\n  }\n) => Promise<ApolloQueryResult<TData>>;\n\nexport type RefetchFunction<\n  TData,\n  TVariables extends OperationVariables,\n> = ObservableQueryFields<TData, TVariables>[\"refetch\"];\n\nexport type SubscribeToMoreFunction<\n  TData,\n  TVariables extends OperationVariables,\n> = ObservableQueryFields<TData, TVariables>[\"subscribeToMore\"];\n\nexport function useSuspenseQuery<\n  TData,\n  TVariables extends OperationVariables,\n  TOptions extends Omit<SuspenseQueryHookOptions<TData>, \"variables\">,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> &\n    TOptions\n): UseSuspenseQueryResult<\n  TOptions[\"errorPolicy\"] extends \"ignore\" | \"all\"\n    ? TOptions[\"returnPartialData\"] extends true\n      ? DeepPartial<TData> | undefined\n      : TData | undefined\n    : TOptions[\"returnPartialData\"] extends true\n    ? TOptions[\"skip\"] extends boolean\n      ? DeepPartial<TData> | undefined\n      : DeepPartial<TData>\n    : TOptions[\"skip\"] extends boolean\n    ? TData | undefined\n    : TData,\n  TVariables\n>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    returnPartialData: true;\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseSuspenseQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseSuspenseQueryResult<TData | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    skip: boolean;\n    returnPartialData: true;\n  }\n): UseSuspenseQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    returnPartialData: true;\n  }\n): UseSuspenseQueryResult<DeepPartial<TData>, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n    skip: boolean;\n  }\n): UseSuspenseQueryResult<TData | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): UseSuspenseQueryResult<TData, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | SkipToken\n    | (SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>> & {\n        returnPartialData: true;\n      })\n): UseSuspenseQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?:\n    | SkipToken\n    | SuspenseQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): UseSuspenseQueryResult<TData | undefined, TVariables>;\n\nexport function useSuspenseQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options:\n    | (SkipToken & Partial<SuspenseQueryHookOptions<TData, TVariables>>)\n    | SuspenseQueryHookOptions<TData, TVariables> = Object.create(null)\n): UseSuspenseQueryResult<TData | undefined, TVariables> {\n  const client = useApolloClient(options.client);\n  const suspenseCache = getSuspenseCache(client);\n  const watchQueryOptions = useWatchQueryOptions({ client, query, options });\n  const { fetchPolicy, variables } = watchQueryOptions;\n  const { queryKey = [] } = options;\n\n  const cacheKey: CacheKey = [\n    query,\n    canonicalStringify(variables),\n    ...([] as any[]).concat(queryKey),\n  ];\n\n  const queryRef = suspenseCache.getQueryRef(cacheKey, () =>\n    client.watchQuery(watchQueryOptions)\n  );\n\n  const [promiseCache, setPromiseCache] = React.useState(\n    () => new Map([[queryRef.key, queryRef.promise]])\n  );\n\n  let promise = promiseCache.get(queryRef.key);\n\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    promise = queryRef.applyOptions(watchQueryOptions);\n    promiseCache.set(queryRef.key, promise);\n  }\n\n  if (!promise) {\n    promise = queryRef.promise;\n    promiseCache.set(queryRef.key, promise);\n  }\n\n  React.useEffect(() => {\n    const dispose = queryRef.retain();\n\n    const removeListener = queryRef.listen((promise) => {\n      setPromiseCache((promiseCache) =>\n        new Map(promiseCache).set(queryRef.key, promise)\n      );\n    });\n\n    return () => {\n      removeListener();\n      dispose();\n    };\n  }, [queryRef]);\n\n  const skipResult = React.useMemo(() => {\n    const error = toApolloError(queryRef.result);\n\n    return {\n      loading: false,\n      data: queryRef.result.data,\n      networkStatus: error ? NetworkStatus.error : NetworkStatus.ready,\n      error,\n    };\n  }, [queryRef.result]);\n\n  const result = fetchPolicy === \"standby\" ? skipResult : __use(promise);\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      const promise = queryRef.fetchMore(options);\n\n      setPromiseCache((previousPromiseCache) =>\n        new Map(previousPromiseCache).set(queryRef.key, queryRef.promise)\n      );\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (variables) => {\n      const promise = queryRef.refetch(variables);\n\n      setPromiseCache((previousPromiseCache) =>\n        new Map(previousPromiseCache).set(queryRef.key, queryRef.promise)\n      );\n\n      return promise;\n    },\n    [queryRef]\n  );\n\n  const subscribeToMore: SubscribeToMoreFunction<TData, TVariables> =\n    React.useCallback(\n      (options) => queryRef.observable.subscribeToMore(options),\n      [queryRef]\n    );\n\n  return React.useMemo(() => {\n    return {\n      client,\n      data: result.data,\n      error: toApolloError(result),\n      networkStatus: result.networkStatus,\n      fetchMore,\n      refetch,\n      subscribeToMore,\n    };\n  }, [client, fetchMore, refetch, result, subscribeToMore]);\n}\n\nfunction validateOptions(options: WatchQueryOptions) {\n  const { query, fetchPolicy, returnPartialData } = options;\n\n  verifyDocumentType(query, DocumentType.Query);\n  validateFetchPolicy(fetchPolicy);\n  validatePartialDataReturn(fetchPolicy, returnPartialData);\n}\n\nfunction validateFetchPolicy(\n  fetchPolicy: WatchQueryFetchPolicy = \"cache-first\"\n) {\n  const supportedFetchPolicies: WatchQueryFetchPolicy[] = [\n    \"cache-first\",\n    \"network-only\",\n    \"no-cache\",\n    \"cache-and-network\",\n  ];\n\n  invariant(\n    supportedFetchPolicies.includes(fetchPolicy),\n    `The fetch policy \\`%s\\` is not supported with suspense.`,\n    fetchPolicy\n  );\n}\n\nfunction validatePartialDataReturn(\n  fetchPolicy: WatchQueryFetchPolicy | undefined,\n  returnPartialData: boolean | undefined\n) {\n  if (fetchPolicy === \"no-cache\" && returnPartialData) {\n    invariant.warn(\n      \"Using `returnPartialData` with a `no-cache` fetch policy has no effect. To read partial data from the cache, consider using an alternate fetch policy.\"\n    );\n  }\n}\n\nexport function toApolloError(result: ApolloQueryResult<any>) {\n  return isNonEmptyArray(result.errors)\n    ? new ApolloError({ graphQLErrors: result.errors })\n    : result.error;\n}\n\ninterface UseWatchQueryOptionsHookOptions<\n  TData,\n  TVariables extends OperationVariables,\n> {\n  client: ApolloClient<unknown>;\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n  options: SkipToken | SuspenseQueryHookOptions<TData, TVariables>;\n}\n\nexport function useWatchQueryOptions<\n  TData,\n  TVariables extends OperationVariables,\n>({\n  client,\n  query,\n  options,\n}: UseWatchQueryOptionsHookOptions<TData, TVariables>): WatchQueryOptions<\n  TVariables,\n  TData\n> {\n  return useDeepMemo<WatchQueryOptions<TVariables, TData>>(() => {\n    if (options === skipToken) {\n      return { query, fetchPolicy: \"standby\" };\n    }\n\n    const fetchPolicy =\n      options.fetchPolicy ||\n      client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\";\n\n    const watchQueryOptions = {\n      ...options,\n      fetchPolicy,\n      query,\n      notifyOnNetworkStatusChange: false,\n      nextFetchPolicy: void 0,\n    };\n\n    if (__DEV__) {\n      validateOptions(watchQueryOptions);\n    }\n\n    // Assign the updated fetch policy after our validation since `standby` is\n    // not a supported fetch policy on its own without the use of `skip`.\n    if (options.skip) {\n      watchQueryOptions.fetchPolicy = \"standby\";\n    }\n\n    return watchQueryOptions;\n  }, [client, options, query]);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}