{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LockedGoldWrapper = void 0;\nvar collections_1 = require(\"@celo/base/lib/collections\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar BaseWrapper_1 = require(\"../wrappers/BaseWrapper\");\nvar BaseWrapperForGoverning_1 = require(\"./BaseWrapperForGoverning\");\nvar bigNumberComparator = function bigNumberComparator(a, b) {\n  return a.lt(b);\n};\nfunction linkedListChanges(groups, changed) {\n  return (0, collections_1.linkedListChanges)(groups, changed, bigNumberComparator);\n}\n/**\n * Contract for handling deposits needed for voting.\n */\nvar LockedGoldWrapper = /** @class */function (_super) {\n  __extends(LockedGoldWrapper, _super);\n  function LockedGoldWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Withdraws a gold that has been unlocked after the unlocking period has passed.\n     * @param index The index of the pending withdrawal to withdraw.\n     */\n    _this.withdraw = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.withdraw);\n    /**\n     * Locks gold to be used for voting.\n     * The gold to be locked, must be specified as the `tx.value`\n     */\n    _this.lock = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.lock);\n    /**\n     * Unlocks gold that becomes withdrawable after the unlocking period.\n     * @param value The amount of gold to unlock.\n     */\n    _this.unlock = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.unlock, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.valueToString));\n    /**\n     * Relocks gold that has been unlocked but not withdrawn.\n     * @param index The index of the pending withdrawal to relock from.\n     * @param value The value to relock from the specified pending withdrawal.\n     */\n    _this._relock = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.relock, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.valueToString, BaseWrapper_1.valueToString));\n    /**\n     * Returns the total amount of locked gold for an account.\n     * @param account The account.\n     * @return The total amount of locked gold for an account.\n     */\n    _this.getAccountTotalLockedGold = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAccountTotalLockedGold, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the total amount of locked gold in the system. Note that this does not include\n     *   gold that has been unlocked but not yet withdrawn.\n     * @returns The total amount of locked gold in the system.\n     */\n    _this.getTotalLockedGold = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getTotalLockedGold, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the total amount of non-voting locked gold for an account.\n     * @param account The account.\n     * @return The total amount of non-voting locked gold for an account.\n     */\n    _this.getAccountNonvotingLockedGold = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAccountNonvotingLockedGold, undefined, BaseWrapper_1.valueToBigNumber);\n    return _this;\n  }\n  LockedGoldWrapper.prototype.getPendingWithdrawalsTotalValue = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pendingWithdrawals, values, reducer;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getPendingWithdrawals(account)\n            // Ensure there are enough pending withdrawals to relock.\n            ];\n\n          case 1:\n            pendingWithdrawals = _a.sent();\n            values = pendingWithdrawals.map(function (pw) {\n              return pw.value;\n            });\n            reducer = function reducer(total, pw) {\n              return pw.plus(total);\n            };\n            return [2 /*return*/, values.reduce(reducer, new bignumber_js_1.default(0))];\n        }\n      });\n    });\n  };\n  /**\n   * Relocks gold that has been unlocked but not withdrawn.\n   * @param value The value to relock from pending withdrawals.\n   */\n  LockedGoldWrapper.prototype.relock = function (account, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pendingWithdrawals, totalValue, throwIfNotSorted, remainingToRelock, relockPw;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getPendingWithdrawals(account)\n            // Ensure there are enough pending withdrawals to relock.\n            ];\n\n          case 1:\n            pendingWithdrawals = _a.sent();\n            return [4 /*yield*/, this.getPendingWithdrawalsTotalValue(account)];\n          case 2:\n            totalValue = _a.sent();\n            if (totalValue.isLessThan(value)) {\n              throw new Error(\"Not enough pending withdrawals to relock \".concat(value));\n            }\n            throwIfNotSorted = function throwIfNotSorted(pw, i) {\n              if (i > 0 && !pw.time.isGreaterThanOrEqualTo(pendingWithdrawals[i - 1].time)) {\n                throw new Error('Pending withdrawals not sorted by timestamp');\n              }\n            };\n            pendingWithdrawals.forEach(throwIfNotSorted);\n            remainingToRelock = new bignumber_js_1.default(value);\n            relockPw = function relockPw(acc, pw, i) {\n              var valueToRelock = bignumber_js_1.default.minimum(pw.value, remainingToRelock);\n              if (!valueToRelock.isZero()) {\n                remainingToRelock = remainingToRelock.minus(valueToRelock);\n                acc.push(_this._relock(i, valueToRelock));\n              }\n              return acc;\n            };\n            return [2 /*return*/, pendingWithdrawals.reduceRight(relockPw, [])];\n        }\n      });\n    });\n  };\n  /**\n   * Returns current configuration parameters.\n   */\n  LockedGoldWrapper.prototype.getConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      var _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = {};\n            _a = BaseWrapper_1.valueToBigNumber;\n            return [4 /*yield*/, this.contract.methods.unlockingPeriod().call()];\n          case 1:\n            _b.unlockingPeriod = _a.apply(void 0, [_c.sent()]);\n            return [4 /*yield*/, this.getTotalLockedGold()];\n          case 2:\n            return [2 /*return*/, (_b.totalLockedGold = _c.sent(), _b)];\n        }\n      });\n    });\n  };\n  /**\n   * @dev Returns human readable configuration of the lockedgold contract\n   * @return LockedGoldConfig object\n   */\n  LockedGoldWrapper.prototype.getHumanReadableConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getConfig()];\n          case 1:\n            config = _a.sent();\n            return [2 /*return*/, __assign(__assign({}, config), {\n              unlockingPeriod: (0, BaseWrapper_1.secondsToDurationString)(config.unlockingPeriod)\n            })];\n        }\n      });\n    });\n  };\n  LockedGoldWrapper.prototype.getAccountSummary = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var nonvoting, total, validators, requirement, pendingWithdrawals;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getAccountNonvotingLockedGold(account)];\n          case 1:\n            nonvoting = _a.sent();\n            return [4 /*yield*/, this.getAccountTotalLockedGold(account)];\n          case 2:\n            total = _a.sent();\n            return [4 /*yield*/, this.contracts.getValidators()];\n          case 3:\n            validators = _a.sent();\n            return [4 /*yield*/, validators.getAccountLockedGoldRequirement(account)];\n          case 4:\n            requirement = _a.sent();\n            return [4 /*yield*/, this.getPendingWithdrawals(account)];\n          case 5:\n            pendingWithdrawals = _a.sent();\n            return [2 /*return*/, {\n              lockedGold: {\n                total: total,\n                nonvoting: nonvoting,\n                requirement: requirement\n              },\n              pendingWithdrawals: pendingWithdrawals\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the pending withdrawals from unlocked gold for an account.\n   * @param account The address of the account.\n   * @return The value and timestamp for each pending withdrawal.\n   */\n  LockedGoldWrapper.prototype.getPendingWithdrawals = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var withdrawals;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getPendingWithdrawals(account).call()];\n          case 1:\n            withdrawals = _a.sent();\n            return [2 /*return*/, (0, collections_1.zip)(function (time, value) {\n              return {\n                time: (0, BaseWrapper_1.valueToBigNumber)(time),\n                value: (0, BaseWrapper_1.valueToBigNumber)(value)\n              };\n            }, withdrawals[1], withdrawals[0])];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves AccountSlashed for epochNumber.\n   * @param epochNumber The epoch to retrieve AccountSlashed at.\n   */\n  LockedGoldWrapper.prototype.getAccountsSlashed = function (epochNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockchainParamsWrapper, events, _a, _b;\n      var _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getBlockchainParameters()];\n          case 1:\n            blockchainParamsWrapper = _d.sent();\n            _a = this.getPastEvents;\n            _b = ['AccountSlashed'];\n            _c = {};\n            return [4 /*yield*/, blockchainParamsWrapper.getFirstBlockNumberForEpoch(epochNumber)];\n          case 2:\n            _c.fromBlock = _d.sent();\n            return [4 /*yield*/, blockchainParamsWrapper.getLastBlockNumberForEpoch(epochNumber)];\n          case 3:\n            return [4 /*yield*/, _a.apply(this, _b.concat([(_c.toBlock = _d.sent(), _c)]))];\n          case 4:\n            events = _d.sent();\n            return [2 /*return*/, events.map(function (e) {\n              return {\n                epochNumber: epochNumber,\n                slashed: e.returnValues.slashed,\n                penalty: (0, BaseWrapper_1.valueToBigNumber)(e.returnValues.penalty),\n                reporter: e.returnValues.reporter,\n                reward: (0, BaseWrapper_1.valueToBigNumber)(e.returnValues.reward)\n              };\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Computes parameters for slashing `penalty` from `account`.\n   * @param account The account to slash.\n   * @param penalty The amount to slash as penalty.\n   * @return List of (group, voting gold) to decrement from `account`.\n   */\n  LockedGoldWrapper.prototype.computeInitialParametersForSlashing = function (account, penalty) {\n    return __awaiter(this, void 0, void 0, function () {\n      var election, eligible, groups;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getElection()];\n          case 1:\n            election = _a.sent();\n            return [4 /*yield*/, election.getEligibleValidatorGroupsVotes()];\n          case 2:\n            eligible = _a.sent();\n            groups = eligible.map(function (x) {\n              return {\n                address: x.address,\n                value: x.votes\n              };\n            });\n            return [2 /*return*/, this.computeParametersForSlashing(account, penalty, groups)];\n        }\n      });\n    });\n  };\n  LockedGoldWrapper.prototype.computeParametersForSlashing = function (account, penalty, groups) {\n    return __awaiter(this, void 0, void 0, function () {\n      var changed, changes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.computeDecrementsForSlashing(account, penalty, groups)];\n          case 1:\n            changed = _a.sent();\n            changes = linkedListChanges(groups, changed);\n            return [2 /*return*/, __assign(__assign({}, changes), {\n              indices: changed.map(function (a) {\n                return a.index;\n              })\n            })];\n        }\n      });\n    });\n  };\n  // Returns how much voting gold will be decremented from the groups voted by an account\n  // Implementation follows protocol/test/common/integration slashingOfGroups()\n  LockedGoldWrapper.prototype.computeDecrementsForSlashing = function (account, penalty, allGroups) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var nonVoting, difference, election, groups, res, _loop_1, i, state_1;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.getAccountNonvotingLockedGold(account)];\n          case 1:\n            nonVoting = _b.sent();\n            if (penalty.isLessThan(nonVoting)) {\n              return [2 /*return*/, []];\n            }\n            difference = penalty.minus(nonVoting);\n            return [4 /*yield*/, this.contracts.getElection()];\n          case 2:\n            election = _b.sent();\n            return [4 /*yield*/, election.getGroupsVotedForByAccount(account)];\n          case 3:\n            groups = _b.sent();\n            res = [];\n            _loop_1 = function _loop_1(i) {\n              var group, totalVotes, votes, slashedVotes;\n              return __generator(this, function (_c) {\n                switch (_c.label) {\n                  case 0:\n                    group = groups[i];\n                    totalVotes = (_a = allGroups.find(function (a) {\n                      return a.address === group;\n                    })) === null || _a === void 0 ? void 0 : _a.value;\n                    if (!totalVotes) {\n                      throw new Error(\"Cannot find group \".concat(group));\n                    }\n                    return [4 /*yield*/, election.getTotalVotesForGroupByAccount(group, account)];\n                  case 1:\n                    votes = _c.sent();\n                    slashedVotes = votes.lt(difference) ? votes : difference;\n                    res.push({\n                      address: group,\n                      value: totalVotes.minus(slashedVotes),\n                      index: i\n                    });\n                    difference = difference.minus(slashedVotes);\n                    if (difference.eq(new bignumber_js_1.default(0))) {\n                      return [2 /*return*/, \"break\"];\n                    }\n                    return [2 /*return*/];\n                }\n              });\n            };\n\n            i = groups.length - 1;\n            _b.label = 4;\n          case 4:\n            if (!(i >= 0)) return [3 /*break*/, 7];\n            return [5 /*yield**/, _loop_1(i)];\n          case 5:\n            state_1 = _b.sent();\n            if (state_1 === \"break\") return [3 /*break*/, 7];\n            _b.label = 6;\n          case 6:\n            i--;\n            return [3 /*break*/, 4];\n          case 7:\n            return [2 /*return*/, res];\n        }\n      });\n    });\n  };\n  return LockedGoldWrapper;\n}(BaseWrapperForGoverning_1.BaseWrapperForGoverning);\nexports.LockedGoldWrapper = LockedGoldWrapper;","map":null,"metadata":{},"sourceType":"script"}