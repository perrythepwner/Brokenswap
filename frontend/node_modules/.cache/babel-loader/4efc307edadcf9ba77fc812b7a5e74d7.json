{"ast":null,"code":"import{isAddress}from'../../utils';export function filterTokens(tokens,search){if(search.length===0)return tokens;const searchingAddress=isAddress(search);if(searchingAddress){return tokens.filter(token=>token.address===searchingAddress);}const lowerSearchParts=search.toLowerCase().split(/\\s+/).filter(s=>s.length>0);if(lowerSearchParts.length===0){return tokens;}const matchesSearch=s=>{const sParts=s.toLowerCase().split(/\\s+/).filter(s=>s.length>0);return lowerSearchParts.every(p=>p.length===0||sParts.some(sp=>sp.startsWith(p)||sp.endsWith(p)));};return tokens.filter(token=>{const{symbol,name}=token;return symbol&&matchesSearch(symbol)||name&&matchesSearch(name);});// .sort((t0: Token, t1: Token) => {\n//   if (t0.symbol && matchesSearch(t0.symbol) && t1.symbol && !matchesSearch(t1.symbol)) {\n//     return -1\n//   }\n//   if (t0.symbol && !matchesSearch(t0.symbol) && t1.symbol && matchesSearch(t1.symbol)) {\n//     return 1\n//   }\n//   return 0\n// })\n}","map":{"version":3,"names":["isAddress","filterTokens","tokens","search","length","searchingAddress","filter","token","address","lowerSearchParts","toLowerCase","split","s","matchesSearch","sParts","every","p","some","sp","startsWith","endsWith","symbol","name"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/components/SearchModal/filtering.ts"],"sourcesContent":["import { Token } from '@ubeswap/sdk'\n\nimport { isAddress } from '../../utils'\n\nexport function filterTokens(tokens: Token[], search: string): Token[] {\n  if (search.length === 0) return tokens\n\n  const searchingAddress = isAddress(search)\n\n  if (searchingAddress) {\n    return tokens.filter((token) => token.address === searchingAddress)\n  }\n\n  const lowerSearchParts = search\n    .toLowerCase()\n    .split(/\\s+/)\n    .filter((s) => s.length > 0)\n\n  if (lowerSearchParts.length === 0) {\n    return tokens\n  }\n\n  const matchesSearch = (s: string): boolean => {\n    const sParts = s\n      .toLowerCase()\n      .split(/\\s+/)\n      .filter((s) => s.length > 0)\n\n    return lowerSearchParts.every((p) => p.length === 0 || sParts.some((sp) => sp.startsWith(p) || sp.endsWith(p)))\n  }\n\n  return tokens.filter((token) => {\n    const { symbol, name } = token\n    return (symbol && matchesSearch(symbol)) || (name && matchesSearch(name))\n  })\n  // .sort((t0: Token, t1: Token) => {\n  //   if (t0.symbol && matchesSearch(t0.symbol) && t1.symbol && !matchesSearch(t1.symbol)) {\n  //     return -1\n  //   }\n  //   if (t0.symbol && !matchesSearch(t0.symbol) && t1.symbol && matchesSearch(t1.symbol)) {\n  //     return 1\n  //   }\n  //   return 0\n  // })\n}\n"],"mappings":"AAEA,OAASA,SAAS,KAAQ,aAAa,CAEvC,MAAO,SAAS,CAAAC,YAAYA,CAACC,MAAe,CAAEC,MAAc,CAAW,CACrE,GAAIA,MAAM,CAACC,MAAM,GAAK,CAAC,CAAE,MAAO,CAAAF,MAAM,CAEtC,KAAM,CAAAG,gBAAgB,CAAGL,SAAS,CAACG,MAAM,CAAC,CAE1C,GAAIE,gBAAgB,CAAE,CACpB,MAAO,CAAAH,MAAM,CAACI,MAAM,CAAEC,KAAK,EAAKA,KAAK,CAACC,OAAO,GAAKH,gBAAgB,CAAC,CACrE,CAEA,KAAM,CAAAI,gBAAgB,CAAGN,MAAM,CAC5BO,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,KAAK,CAAC,CACZL,MAAM,CAAEM,CAAC,EAAKA,CAAC,CAACR,MAAM,CAAG,CAAC,CAAC,CAE9B,GAAIK,gBAAgB,CAACL,MAAM,GAAK,CAAC,CAAE,CACjC,MAAO,CAAAF,MAAM,CACf,CAEA,KAAM,CAAAW,aAAa,CAAID,CAAS,EAAc,CAC5C,KAAM,CAAAE,MAAM,CAAGF,CAAC,CACbF,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,KAAK,CAAC,CACZL,MAAM,CAAEM,CAAC,EAAKA,CAAC,CAACR,MAAM,CAAG,CAAC,CAAC,CAE9B,MAAO,CAAAK,gBAAgB,CAACM,KAAK,CAAEC,CAAC,EAAKA,CAAC,CAACZ,MAAM,GAAK,CAAC,EAAIU,MAAM,CAACG,IAAI,CAAEC,EAAE,EAAKA,EAAE,CAACC,UAAU,CAACH,CAAC,CAAC,EAAIE,EAAE,CAACE,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC,CACjH,CAAC,CAED,MAAO,CAAAd,MAAM,CAACI,MAAM,CAAEC,KAAK,EAAK,CAC9B,KAAM,CAAEc,MAAM,CAAEC,IAAK,CAAC,CAAGf,KAAK,CAC9B,MAAQ,CAAAc,MAAM,EAAIR,aAAa,CAACQ,MAAM,CAAC,EAAMC,IAAI,EAAIT,aAAa,CAACS,IAAI,CAAE,CAC3E,CAAC,CAAC,CACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF"},"metadata":{},"sourceType":"module"}