{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar chacha_1 = require(\"@stablelib/chacha\");\nvar poly1305_1 = require(\"@stablelib/poly1305\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nvar binary_1 = require(\"@stablelib/binary\");\nvar constant_time_1 = require(\"@stablelib/constant-time\");\nexports.KEY_LENGTH = 32;\nexports.NONCE_LENGTH = 12;\nexports.TAG_LENGTH = 16;\nvar ZEROS = new Uint8Array(16);\n/**\n * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.\n *\n * Defined in RFC7539.\n */\nvar ChaCha20Poly1305 = /** @class */function () {\n  /**\n   * Creates a new instance with the given 32-byte key.\n   */\n  function ChaCha20Poly1305(key) {\n    this.nonceLength = exports.NONCE_LENGTH;\n    this.tagLength = exports.TAG_LENGTH;\n    if (key.length !== exports.KEY_LENGTH) {\n      throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n    }\n    // Copy key.\n    this._key = new Uint8Array(key);\n  }\n  /**\n   * Encrypts and authenticates plaintext, authenticates associated data,\n   * and returns sealed ciphertext, which includes authentication tag.\n   *\n   * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n   * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n   * and nonce.\n   *\n   * If dst is given (it must be the size of plaintext + the size of tag\n   * length) the result will be put into it. Dst and plaintext must not\n   * overlap.\n   */\n  ChaCha20Poly1305.prototype.seal = function (nonce, plaintext, associatedData, dst) {\n    if (nonce.length > 16) {\n      throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n    }\n    // Allocate space for counter, and set nonce as last bytes of it.\n    var counter = new Uint8Array(16);\n    counter.set(nonce, counter.length - nonce.length);\n    // Generate authentication key by taking first 32-bytes of stream.\n    // We pass full counter, which has 12-byte nonce and 4-byte block counter,\n    // and it will get incremented after generating the block, which is\n    // exactly what we need: we only use the first 32 bytes of 64-byte\n    // ChaCha block and discard the next 32 bytes.\n    var authKey = new Uint8Array(32);\n    chacha_1.stream(this._key, counter, authKey, 4);\n    // Allocate space for sealed ciphertext.\n    var resultLength = plaintext.length + this.tagLength;\n    var result;\n    if (dst) {\n      if (dst.length !== resultLength) {\n        throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n      }\n      result = dst;\n    } else {\n      result = new Uint8Array(resultLength);\n    }\n    // Encrypt plaintext.\n    chacha_1.streamXOR(this._key, counter, plaintext, result, 4);\n    // Authenticate.\n    // XXX: can \"simplify\" here: pass full result (which is already padded\n    // due to zeroes prepared for tag), and ciphertext length instead of\n    // subarray of result.\n    this._authenticate(result.subarray(result.length - this.tagLength, result.length), authKey, result.subarray(0, result.length - this.tagLength), associatedData);\n    // Cleanup.\n    wipe_1.wipe(counter);\n    return result;\n  };\n  /**\n   * Authenticates sealed ciphertext (which includes authentication tag) and\n   * associated data, decrypts ciphertext and returns decrypted plaintext.\n   *\n   * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n   * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n   * and nonce.\n   *\n   * If authentication fails, it returns null.\n   *\n   * If dst is given (it must be of ciphertext length minus tag length),\n   * the result will be put into it. Dst and plaintext must not overlap.\n   */\n  ChaCha20Poly1305.prototype.open = function (nonce, sealed, associatedData, dst) {\n    if (nonce.length > 16) {\n      throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n    }\n    // Sealed ciphertext should at least contain tag.\n    if (sealed.length < this.tagLength) {\n      // TODO(dchest): should we throw here instead?\n      return null;\n    }\n    // Allocate space for counter, and set nonce as last bytes of it.\n    var counter = new Uint8Array(16);\n    counter.set(nonce, counter.length - nonce.length);\n    // Generate authentication key by taking first 32-bytes of stream.\n    var authKey = new Uint8Array(32);\n    chacha_1.stream(this._key, counter, authKey, 4);\n    // Authenticate.\n    // XXX: can simplify and avoid allocation: since authenticate()\n    // already allocates tag (from Poly1305.digest(), it can return)\n    // it instead of copying to calculatedTag. But then in seal()\n    // we'll need to copy it.\n    var calculatedTag = new Uint8Array(this.tagLength);\n    this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData);\n    // Constant-time compare tags and return null if they differ.\n    if (!constant_time_1.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) {\n      return null;\n    }\n    // Allocate space for decrypted plaintext.\n    var resultLength = sealed.length - this.tagLength;\n    var result;\n    if (dst) {\n      if (dst.length !== resultLength) {\n        throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n      }\n      result = dst;\n    } else {\n      result = new Uint8Array(resultLength);\n    }\n    // Decrypt.\n    chacha_1.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4);\n    // Cleanup.\n    wipe_1.wipe(counter);\n    return result;\n  };\n  ChaCha20Poly1305.prototype.clean = function () {\n    wipe_1.wipe(this._key);\n    return this;\n  };\n  ChaCha20Poly1305.prototype._authenticate = function (tagOut, authKey, ciphertext, associatedData) {\n    // Initialize Poly1305 with authKey.\n    var h = new poly1305_1.Poly1305(authKey);\n    // Authenticate padded associated data.\n    if (associatedData) {\n      h.update(associatedData);\n      if (associatedData.length % 16 > 0) {\n        h.update(ZEROS.subarray(associatedData.length % 16));\n      }\n    }\n    // Authenticate padded ciphertext.\n    h.update(ciphertext);\n    if (ciphertext.length % 16 > 0) {\n      h.update(ZEROS.subarray(ciphertext.length % 16));\n    }\n    // Authenticate length of associated data.\n    // XXX: can avoid allocation here?\n    var length = new Uint8Array(8);\n    if (associatedData) {\n      binary_1.writeUint64LE(associatedData.length, length);\n    }\n    h.update(length);\n    // Authenticate length of ciphertext.\n    binary_1.writeUint64LE(ciphertext.length, length);\n    h.update(length);\n    // Get tag and copy it into tagOut.\n    var tag = h.digest();\n    for (var i = 0; i < tag.length; i++) {\n      tagOut[i] = tag[i];\n    }\n    // Cleanup.\n    h.clean();\n    wipe_1.wipe(tag);\n    wipe_1.wipe(length);\n  };\n  return ChaCha20Poly1305;\n}();\nexports.ChaCha20Poly1305 = ChaCha20Poly1305;","map":{"version":3,"sources":["../chacha20poly1305.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chacha_1 = require(\"@stablelib/chacha\");\nvar poly1305_1 = require(\"@stablelib/poly1305\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nvar binary_1 = require(\"@stablelib/binary\");\nvar constant_time_1 = require(\"@stablelib/constant-time\");\nexports.KEY_LENGTH = 32;\nexports.NONCE_LENGTH = 12;\nexports.TAG_LENGTH = 16;\nvar ZEROS = new Uint8Array(16);\n/**\n * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.\n *\n * Defined in RFC7539.\n */\nvar ChaCha20Poly1305 = /** @class */ (function () {\n    /**\n     * Creates a new instance with the given 32-byte key.\n     */\n    function ChaCha20Poly1305(key) {\n        this.nonceLength = exports.NONCE_LENGTH;\n        this.tagLength = exports.TAG_LENGTH;\n        if (key.length !== exports.KEY_LENGTH) {\n            throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n        }\n        // Copy key.\n        this._key = new Uint8Array(key);\n    }\n    /**\n     * Encrypts and authenticates plaintext, authenticates associated data,\n     * and returns sealed ciphertext, which includes authentication tag.\n     *\n     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n     * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n     * and nonce.\n     *\n     * If dst is given (it must be the size of plaintext + the size of tag\n     * length) the result will be put into it. Dst and plaintext must not\n     * overlap.\n     */\n    ChaCha20Poly1305.prototype.seal = function (nonce, plaintext, associatedData, dst) {\n        if (nonce.length > 16) {\n            throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        }\n        // Allocate space for counter, and set nonce as last bytes of it.\n        var counter = new Uint8Array(16);\n        counter.set(nonce, counter.length - nonce.length);\n        // Generate authentication key by taking first 32-bytes of stream.\n        // We pass full counter, which has 12-byte nonce and 4-byte block counter,\n        // and it will get incremented after generating the block, which is\n        // exactly what we need: we only use the first 32 bytes of 64-byte\n        // ChaCha block and discard the next 32 bytes.\n        var authKey = new Uint8Array(32);\n        chacha_1.stream(this._key, counter, authKey, 4);\n        // Allocate space for sealed ciphertext.\n        var resultLength = plaintext.length + this.tagLength;\n        var result;\n        if (dst) {\n            if (dst.length !== resultLength) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        }\n        else {\n            result = new Uint8Array(resultLength);\n        }\n        // Encrypt plaintext.\n        chacha_1.streamXOR(this._key, counter, plaintext, result, 4);\n        // Authenticate.\n        // XXX: can \"simplify\" here: pass full result (which is already padded\n        // due to zeroes prepared for tag), and ciphertext length instead of\n        // subarray of result.\n        this._authenticate(result.subarray(result.length - this.tagLength, result.length), authKey, result.subarray(0, result.length - this.tagLength), associatedData);\n        // Cleanup.\n        wipe_1.wipe(counter);\n        return result;\n    };\n    /**\n     * Authenticates sealed ciphertext (which includes authentication tag) and\n     * associated data, decrypts ciphertext and returns decrypted plaintext.\n     *\n     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n     * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n     * and nonce.\n     *\n     * If authentication fails, it returns null.\n     *\n     * If dst is given (it must be of ciphertext length minus tag length),\n     * the result will be put into it. Dst and plaintext must not overlap.\n     */\n    ChaCha20Poly1305.prototype.open = function (nonce, sealed, associatedData, dst) {\n        if (nonce.length > 16) {\n            throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        }\n        // Sealed ciphertext should at least contain tag.\n        if (sealed.length < this.tagLength) {\n            // TODO(dchest): should we throw here instead?\n            return null;\n        }\n        // Allocate space for counter, and set nonce as last bytes of it.\n        var counter = new Uint8Array(16);\n        counter.set(nonce, counter.length - nonce.length);\n        // Generate authentication key by taking first 32-bytes of stream.\n        var authKey = new Uint8Array(32);\n        chacha_1.stream(this._key, counter, authKey, 4);\n        // Authenticate.\n        // XXX: can simplify and avoid allocation: since authenticate()\n        // already allocates tag (from Poly1305.digest(), it can return)\n        // it instead of copying to calculatedTag. But then in seal()\n        // we'll need to copy it.\n        var calculatedTag = new Uint8Array(this.tagLength);\n        this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData);\n        // Constant-time compare tags and return null if they differ.\n        if (!constant_time_1.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) {\n            return null;\n        }\n        // Allocate space for decrypted plaintext.\n        var resultLength = sealed.length - this.tagLength;\n        var result;\n        if (dst) {\n            if (dst.length !== resultLength) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        }\n        else {\n            result = new Uint8Array(resultLength);\n        }\n        // Decrypt.\n        chacha_1.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4);\n        // Cleanup.\n        wipe_1.wipe(counter);\n        return result;\n    };\n    ChaCha20Poly1305.prototype.clean = function () {\n        wipe_1.wipe(this._key);\n        return this;\n    };\n    ChaCha20Poly1305.prototype._authenticate = function (tagOut, authKey, ciphertext, associatedData) {\n        // Initialize Poly1305 with authKey.\n        var h = new poly1305_1.Poly1305(authKey);\n        // Authenticate padded associated data.\n        if (associatedData) {\n            h.update(associatedData);\n            if (associatedData.length % 16 > 0) {\n                h.update(ZEROS.subarray(associatedData.length % 16));\n            }\n        }\n        // Authenticate padded ciphertext.\n        h.update(ciphertext);\n        if (ciphertext.length % 16 > 0) {\n            h.update(ZEROS.subarray(ciphertext.length % 16));\n        }\n        // Authenticate length of associated data.\n        // XXX: can avoid allocation here?\n        var length = new Uint8Array(8);\n        if (associatedData) {\n            binary_1.writeUint64LE(associatedData.length, length);\n        }\n        h.update(length);\n        // Authenticate length of ciphertext.\n        binary_1.writeUint64LE(ciphertext.length, length);\n        h.update(length);\n        // Get tag and copy it into tagOut.\n        var tag = h.digest();\n        for (var i = 0; i < tag.length; i++) {\n            tagOut[i] = tag[i];\n        }\n        // Cleanup.\n        h.clean();\n        wipe_1.wipe(tag);\n        wipe_1.wipe(length);\n    };\n    return ChaCha20Poly1305;\n}());\nexports.ChaCha20Poly1305 = ChaCha20Poly1305;\n//# sourceMappingURL=chacha20poly1305.js.map"]},"metadata":{},"sourceType":"script"}