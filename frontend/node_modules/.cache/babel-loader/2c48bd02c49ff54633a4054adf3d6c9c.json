{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timeSince = exports.inMilliseconds = exports.Duration = void 0;\n/**\n * Common duration constants, in milliseconds.\n */\nvar Duration;\n(function (Duration) {\n  /**\n   * A millisecond.\n   */\n  Duration[Duration[\"Millisecond\"] = 1] = \"Millisecond\";\n  /**\n   * A second, in milliseconds.\n   */\n  Duration[Duration[\"Second\"] = 1000] = \"Second\";\n  /**\n   * A minute, in milliseconds.\n   */\n  Duration[Duration[\"Minute\"] = 60000] = \"Minute\";\n  /**\n   * An hour, in milliseconds.\n   */\n  Duration[Duration[\"Hour\"] = 3600000] = \"Hour\";\n  /**\n   * A day, in milliseconds.\n   */\n  Duration[Duration[\"Day\"] = 86400000] = \"Day\";\n  /**\n   * A week, in milliseconds.\n   */\n  Duration[Duration[\"Week\"] = 604800000] = \"Week\";\n  /**\n   * A year, in milliseconds.\n   */\n  Duration[Duration[\"Year\"] = 31536000000] = \"Year\";\n})(Duration = exports.Duration || (exports.Duration = {}));\nconst isNonNegativeInteger = number => Number.isInteger(number) && number >= 0;\nconst assertIsNonNegativeInteger = (number, name) => {\n  if (!isNonNegativeInteger(number)) {\n    throw new Error(\"\\\"\".concat(name, \"\\\" must be a non-negative integer. Received: \\\"\").concat(number, \"\\\".\"));\n  }\n};\n/**\n * Calculates the millisecond value of the specified number of units of time.\n *\n * @param count - The number of units of time.\n * @param duration - The unit of time to count.\n * @returns The count multiplied by the specified duration.\n */\nfunction inMilliseconds(count, duration) {\n  assertIsNonNegativeInteger(count, 'count');\n  return count * duration;\n}\nexports.inMilliseconds = inMilliseconds;\n/**\n * Gets the milliseconds since a particular Unix epoch timestamp.\n *\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */\nfunction timeSince(timestamp) {\n  assertIsNonNegativeInteger(timestamp, 'timestamp');\n  return Date.now() - timestamp;\n}\nexports.timeSince = timeSince;","map":null,"metadata":{},"sourceType":"script"}