{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n  var name;\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n  return name;\n}\nexport function parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  invariant(!!document && !!document.kind, 59, document);\n  var fragments = [];\n  var queries = [];\n  var mutations = [];\n  var subscriptions = [];\n  for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n    var x = _a[_i];\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n        case \"mutation\":\n          mutations.push(x);\n          break;\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n  invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 60);\n  invariant(queries.length + mutations.length + subscriptions.length <= 1, 61, document, queries.length, subscriptions.length, mutations.length);\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  invariant(definitions.length === 1, 62, document, definitions.length);\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\";\n  }\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}\nexport function verifyDocumentType(document, type) {\n  var operation = parser(document);\n  var requiredOperationName = operationName(type);\n  var usedOperationName = operationName(operation.type);\n  invariant(operation.type === type, 63, requiredOperationName, requiredOperationName, usedOperationName);\n}","map":{"version":3,"sources":["../../../src/react/parser/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport type {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode,\n} from \"graphql\";\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription,\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of %s passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`,\n    document\n  );\n\n  const fragments: DefinitionNode[] = [];\n  const queries: DefinitionNode[] = [];\n  const mutations: DefinitionNode[] = [];\n  const subscriptions: DefinitionNode[] = [];\n\n  for (const x of document.definitions) {\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n        case \"mutation\":\n          mutations.push(x);\n          break;\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      queries.length ||\n      mutations.length ||\n      subscriptions.length,\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `%s had %s queries, %s ` +\n      `subscriptions and %s mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    queries.length,\n    subscriptions.length,\n    mutations.length\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. %s had ` +\n      `%s definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    definitions.length\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\"; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a %s requires a graphql ` + `%s, but a %s was used instead.`,\n    requiredOperationName,\n    requiredOperationName,\n    usedOperationName\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}