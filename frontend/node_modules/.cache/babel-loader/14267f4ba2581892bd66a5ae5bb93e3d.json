{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hmac = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n  constructor(hash, _key) {\n    super();\n    this.finished = false;\n    this.destroyed = false;\n    _assert_js_1.default.hash(hash);\n    const key = (0, utils_js_1.toBytes)(_key);\n    this.iHash = hash.create();\n    if (typeof this.iHash.update !== 'function') throw new TypeError('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create();\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf) {\n    _assert_js_1.default.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out) {\n    _assert_js_1.default.exists(this);\n    _assert_js_1.default.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to) {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to || (to = Object.create(Object.getPrototypeOf(this), {}));\n    const {\n      oHash,\n      iHash,\n      finished,\n      destroyed,\n      blockLen,\n      outputLen\n    } = this;\n    to = to;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);","map":{"version":3,"sources":["src/hmac.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        _assert_js_1.default.hash(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        _assert_js_1.default.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map"]},"metadata":{},"sourceType":"script"}