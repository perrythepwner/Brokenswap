{"ast":null,"code":"import{Percent,Price,TokenAmount,TradeType}from'@ubeswap/sdk';import{UbeswapTrade}from'../trade';const moolaDirectRouter={};/**\n * A trade that directly happens with moola.\n */export class MoolaDirectTrade extends UbeswapTrade{isWithdrawal(){var _this$inputAmount$cur,_this$inputAmount$cur2;return(_this$inputAmount$cur=(_this$inputAmount$cur2=this.inputAmount.currency.symbol)===null||_this$inputAmount$cur2===void 0?void 0:_this$inputAmount$cur2.startsWith('m'))!==null&&_this$inputAmount$cur!==void 0?_this$inputAmount$cur:false;}constructor(route,inputAmount,outputAmount,tradeType){super(route,inputAmount,tradeType,moolaDirectRouter,[inputAmount.token,outputAmount.token]);/**\n   * The input amount for the trade assuming no slippage.\n   */this.inputAmount=void 0;/**\n   * The output amount for the trade assuming no slippage.\n   */this.outputAmount=void 0;/**\n   * The price expressed in terms of output amount/input amount.\n   */this.executionPrice=void 0;/**\n   * The mid price after the trade executes assuming no slippage.\n   */this.nextMidPrice=void 0;/**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */this.priceImpact=void 0;this.inputAmount=inputAmount;this.outputAmount=outputAmount;this.executionPrice=new Price(inputAmount.token,outputAmount.token,'1','1');this.nextMidPrice=new Price(inputAmount.token,outputAmount.token,'1','1');this.priceImpact=new Percent('0');this.hidePairAnalytics=true;}static fromIn(route,inputAmount){return new MoolaDirectTrade(route,inputAmount,new TokenAmount(route.output,inputAmount.raw),TradeType.EXACT_INPUT);}static fromOut(route,outputAmount){return new MoolaDirectTrade(route,new TokenAmount(route.output,outputAmount.raw),outputAmount,TradeType.EXACT_OUTPUT);}}","map":null,"metadata":{},"sourceType":"module"}