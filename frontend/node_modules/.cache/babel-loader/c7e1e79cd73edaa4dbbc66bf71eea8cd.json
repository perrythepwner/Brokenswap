{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst base_1 = require(\"@celo/contractkit/lib/base\");\nconst mini_kit_1 = require(\"@celo/contractkit/lib/mini-kit\");\nconst wallet_sdk_1 = require(\"@coinbase/wallet-sdk\");\nconst constants_1 = require(\"../constants\");\nconst logger_1 = require(\"../utils/logger\");\nconst metamask_1 = require(\"../utils/metamask\");\nconst common_1 = require(\"./common\");\nclass CoinbaseWalletConnector extends common_1.AbstractConnector {\n  constructor(network, manualNetworkingMode, dapp) {\n    var _a, _b;\n    super();\n    this.network = network;\n    this.manualNetworkingMode = manualNetworkingMode;\n    this.initialised = false;\n    this.type = constants_1.WalletTypes.CoinbaseWallet;\n    this.feeCurrency = base_1.CeloContract.GoldToken;\n    this.provider = null;\n    this.onChainChanged = chainIdHex => {\n      const chainId = parseInt(chainIdHex, 16);\n      if (this.network.chainId !== chainId) {\n        this.emit(common_1.ConnectorEvents.WALLET_CHAIN_CHANGED, chainId);\n      }\n    };\n    this.onAccountsChanged = accounts => {\n      if (accounts[0]) {\n        this.kit.connection.defaultAccount = accounts[0];\n        this.emit(common_1.ConnectorEvents.ADDRESS_CHANGED, accounts[0]);\n      }\n    };\n    this.kit = (0, mini_kit_1.newKit)(network.rpcUrl);\n    const sdk = new wallet_sdk_1.CoinbaseWalletSDK({\n      appName: (_a = dapp === null || dapp === void 0 ? void 0 : dapp.name) !== null && _a !== void 0 ? _a : '',\n      appLogoUrl: (_b = dapp === null || dapp === void 0 ? void 0 : dapp.icon) !== null && _b !== void 0 ? _b : '',\n      reloadOnDisconnect: false,\n      diagnosticLogger: {\n        log: (e, p) => {\n          // this fixes the app trying to resurrect the cb connector after the wallet has initiated a disconnection as the sdk then reloads the page\n          if ('walletlink_sdk_metadata_destroyed' === e && (p === null || p === void 0 ? void 0 : p.alreadyDestroyed) === false) {\n            this.close();\n          }\n          (0, logger_1.getApplicationLogger)().debug('[coinbase-wallet] sdk event', e, 'properties', p);\n        }\n      }\n    });\n    this.provider = sdk.makeWeb3Provider(network.rpcUrl, network.chainId);\n  }\n  initialise() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.provider) {\n        throw new Error('Coinbase wallet provider not instantiated');\n      }\n      if (this.initialised) {\n        return this;\n      }\n      const {\n        default: Web3\n      } = yield Promise.resolve().then(() => __importStar(require('web3')));\n      const web3 = new Web3(this.provider);\n      const [defaultAccount] = yield this.provider.request({\n        method: 'eth_requestAccounts'\n      });\n      this.removeListeners();\n      try {\n        if (!this.manualNetworkingMode) {\n          yield (0, metamask_1.switchToNetwork)(this.network, this.provider, () => web3.eth.getChainId());\n        }\n      } catch (e) {\n        // if user rejects the switch it will throw but we dont want it to disrupt everything\n        // they different chain ids will be enough for dapp devs to decided to reprompt\n      }\n      const walletChainId = yield this.provider.request({\n        method: 'eth_chainId'\n      });\n      this.provider.on('chainChanged', this.onChainChanged);\n      this.provider.on('accountsChanged', this.onAccountsChanged);\n      this.newKit(web3, defaultAccount);\n      this.initialised = true;\n      this.emit(common_1.ConnectorEvents.CONNECTED, {\n        walletType: this.type,\n        walletChainId: parseInt(walletChainId, 16),\n        networkName: this.network.name,\n        address: defaultAccount\n      });\n      return this;\n    });\n  }\n  removeListeners() {\n    if (this.provider) {\n      this.provider.removeListener('chainChanged', this.onChainChanged);\n      this.provider.removeListener('accountsChanged', this.onAccountsChanged);\n    }\n  }\n  newKit(web3, defaultAccount) {\n    this.kit = (0, mini_kit_1.newKitFromWeb3)(web3);\n    this.kit.connection.defaultAccount = defaultAccount;\n    return this.kit;\n  }\n  supportsFeeCurrency() {\n    return false;\n  }\n  startNetworkChangeFromApp(network) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const web3 = this.kit.connection.web3;\n      yield (0, metamask_1.switchToNetwork)(network, this.provider, () => web3.eth.getChainId());\n      this.continueNetworkUpdateFromWallet(network);\n    });\n  }\n  // for when the wallet is already on the desired network and the kit / dapp need to catch up.\n  continueNetworkUpdateFromWallet(network) {\n    this.network = network; // must set to prevent loop\n    const web3 = this.kit.connection.web3;\n    this.newKit(web3, this.account); // kit caches things so it need to be recreated\n    this.emit(common_1.ConnectorEvents.NETWORK_CHANGED, network.name);\n  }\n  close() {\n    var _a, _b;\n    this.removeListeners();\n    try {\n      this.kit.connection.stop();\n    } catch (e) {\n      (0, logger_1.getApplicationLogger)().error('[methods.close] could not stop a already stopped CeloConnection', e);\n    }\n    this.disconnect();\n    if ((_a = this.provider) === null || _a === void 0 ? void 0 : _a.connected) {\n      // must be called last as it refreshes page which then starts the resurector if disconnect has not been called\n      void ((_b = this.provider) === null || _b === void 0 ? void 0 : _b.close());\n    }\n    return;\n  }\n}\nexports.default = CoinbaseWalletConnector;","map":null,"metadata":{},"sourceType":"script"}