{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RLP = exports.utils = exports.decode = exports.encode = void 0;\n/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nfunction encode(input) {\n  if (Array.isArray(input)) {\n    const output = [];\n    let outputLength = 0;\n    for (let i = 0; i < input.length; i++) {\n      const encoded = encode(input[i]);\n      output.push(encoded);\n      outputLength += encoded.length;\n    }\n    return concatBytes(encodeLength(outputLength, 192), ...output);\n  }\n  const inputBuf = toBytes(input);\n  if (inputBuf.length === 1 && inputBuf[0] < 128) {\n    return inputBuf;\n  }\n  return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\nexports.encode = encode;\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input, start, end) {\n  if (end > input.length) {\n    throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');\n  }\n  return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v) {\n  if (v[0] === 0) {\n    throw new Error('invalid RLP: extra zeros');\n  }\n  return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return Uint8Array.from([len + offset]);\n  }\n  const hexLength = numberToHex(len);\n  const lLength = hexLength.length / 2;\n  const firstByte = numberToHex(offset + 55 + lLength);\n  return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nfunction decode(input) {\n  let stream = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (typeof input === 'undefined' || input === null || input.length === 0) {\n    return Uint8Array.from([]);\n  }\n  const inputBytes = toBytes(input);\n  const decoded = _decode(inputBytes);\n  if (stream) {\n    return decoded;\n  }\n  if (decoded.remainder.length !== 0) {\n    throw new Error('invalid RLP: remainder must be zero');\n  }\n  return decoded.data;\n}\nexports.decode = decode;\n/** Decode an input with RLP */\nfunction _decode(input) {\n  let length, llength, data, innerRemainder, d;\n  const decoded = [];\n  const firstByte = input[0];\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    };\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f;\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = Uint8Array.from([]);\n    } else {\n      data = safeSlice(input, 1, length);\n    }\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');\n    }\n    return {\n      data,\n      remainder: input.slice(length)\n    };\n  } else if (firstByte <= 0xbf) {\n    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n    // followed by the length, followed by the string\n    llength = firstByte - 0xb6;\n    if (input.length - 1 < llength) {\n      throw new Error('invalid RLP: not enough bytes for string length');\n    }\n    length = decodeLength(safeSlice(input, 1, llength));\n    if (length <= 55) {\n      throw new Error('invalid RLP: expected string length to be greater than 55');\n    }\n    data = safeSlice(input, llength, length + llength);\n    return {\n      data,\n      remainder: input.slice(length + llength)\n    };\n  } else if (firstByte <= 0xf7) {\n    // a list between 0-55 bytes long\n    length = firstByte - 0xbf;\n    innerRemainder = safeSlice(input, 1, length);\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    };\n  } else {\n    // a list over 55 bytes long\n    llength = firstByte - 0xf6;\n    length = decodeLength(safeSlice(input, 1, llength));\n    if (length < 56) {\n      throw new Error('invalid RLP: encoded list too short');\n    }\n    const totalLength = llength + length;\n    if (totalLength > input.length) {\n      throw new Error('invalid RLP: total length is larger than the data');\n    }\n    innerRemainder = safeSlice(input, llength, totalLength);\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    };\n  }\n}\nconst cachedHexes = Array.from({\n  length: 256\n}, (_v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n  // Pre-caching chars with `cachedHexes` speeds this up 6x\n  let hex = '';\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += cachedHexes[uint8a[i]];\n  }\n  return hex;\n}\nfunction parseHexByte(hexByte) {\n  const byte = Number.parseInt(hexByte, 16);\n  if (Number.isNaN(byte)) throw new Error('Invalid byte sequence');\n  return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    array[i] = parseHexByte(hex.slice(j, j + 2));\n  }\n  return array;\n}\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\nfunction utf8ToBytes(utf) {\n  return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer) {\n  if (integer < 0) {\n    throw new Error('Invalid integer as argument, must be unsigned!');\n  }\n  const hex = integer.toString(16);\n  return hex.length % 2 ? \"0\".concat(hex) : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n  return a.length % 2 ? \"0\".concat(a) : a;\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n  return str.length >= 2 && str[0] === '0' && str[1] === 'x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */\nfunction toBytes(v) {\n  if (v instanceof Uint8Array) {\n    return v;\n  }\n  if (typeof v === 'string') {\n    if (isHexPrefixed(v)) {\n      return hexToBytes(padToEven(stripHexPrefix(v)));\n    }\n    return utf8ToBytes(v);\n  }\n  if (typeof v === 'number' || typeof v === 'bigint') {\n    if (!v) {\n      return Uint8Array.from([]);\n    }\n    return hexToBytes(numberToHex(v));\n  }\n  if (v === null || v === undefined) {\n    return Uint8Array.from([]);\n  }\n  throw new Error('toBytes: received unsupported type ' + typeof v);\n}\nexports.utils = {\n  bytesToHex,\n  concatBytes,\n  hexToBytes,\n  utf8ToBytes\n};\nexports.RLP = {\n  encode,\n  decode\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RLP = exports.utils = exports.decode = exports.encode = void 0;\n/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        const output = [];\n        let outputLength = 0;\n        for (let i = 0; i < input.length; i++) {\n            const encoded = encode(input[i]);\n            output.push(encoded);\n            outputLength += encoded.length;\n        }\n        return concatBytes(encodeLength(outputLength, 192), ...output);\n    }\n    const inputBuf = toBytes(input);\n    if (inputBuf.length === 1 && inputBuf[0] < 128) {\n        return inputBuf;\n    }\n    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\nexports.encode = encode;\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input, start, end) {\n    if (end > input.length) {\n        throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');\n    }\n    return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v) {\n    if (v[0] === 0) {\n        throw new Error('invalid RLP: extra zeros');\n    }\n    return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Uint8Array.from([len + offset]);\n    }\n    const hexLength = numberToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = numberToHex(offset + 55 + lLength);\n    return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nfunction decode(input, stream = false) {\n    if (typeof input === 'undefined' || input === null || input.length === 0) {\n        return Uint8Array.from([]);\n    }\n    const inputBytes = toBytes(input);\n    const decoded = _decode(inputBytes);\n    if (stream) {\n        return decoded;\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error('invalid RLP: remainder must be zero');\n    }\n    return decoded.data;\n}\nexports.decode = decode;\n/** Decode an input with RLP */\nfunction _decode(input) {\n    let length, llength, data, innerRemainder, d;\n    const decoded = [];\n    const firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.slice(1),\n        };\n    }\n    else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Uint8Array.from([]);\n        }\n        else {\n            data = safeSlice(input, 1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');\n        }\n        return {\n            data,\n            remainder: input.slice(length),\n        };\n    }\n    else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error('invalid RLP: not enough bytes for string length');\n        }\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length <= 55) {\n            throw new Error('invalid RLP: expected string length to be greater than 55');\n        }\n        data = safeSlice(input, llength, length + llength);\n        return {\n            data,\n            remainder: input.slice(length + llength),\n        };\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between 0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = safeSlice(input, 1, length);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(length),\n        };\n    }\n    else {\n        // a list over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length < 56) {\n            throw new Error('invalid RLP: encoded list too short');\n        }\n        const totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error('invalid RLP: total length is larger than the data');\n        }\n        innerRemainder = safeSlice(input, llength, totalLength);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(totalLength),\n        };\n    }\n}\nconst cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    // Pre-caching chars with `cachedHexes` speeds this up 6x\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += cachedHexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte))\n        throw new Error('Invalid byte sequence');\n    return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes(...arrays) {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction utf8ToBytes(utf) {\n    return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer) {\n    if (integer < 0) {\n        throw new Error('Invalid integer as argument, must be unsigned!');\n    }\n    const hex = integer.toString(16);\n    return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n    return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n    return str.length >= 2 && str[0] === '0' && str[1] === 'x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */\nfunction toBytes(v) {\n    if (v instanceof Uint8Array) {\n        return v;\n    }\n    if (typeof v === 'string') {\n        if (isHexPrefixed(v)) {\n            return hexToBytes(padToEven(stripHexPrefix(v)));\n        }\n        return utf8ToBytes(v);\n    }\n    if (typeof v === 'number' || typeof v === 'bigint') {\n        if (!v) {\n            return Uint8Array.from([]);\n        }\n        return hexToBytes(numberToHex(v));\n    }\n    if (v === null || v === undefined) {\n        return Uint8Array.from([]);\n    }\n    throw new Error('toBytes: received unsupported type ' + typeof v);\n}\nexports.utils = {\n    bytesToHex,\n    concatBytes,\n    hexToBytes,\n    utf8ToBytes,\n};\nexports.RLP = { encode, decode };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}