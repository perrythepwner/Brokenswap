{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayBasicTreeView = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst abstract_1 = require(\"./abstract\");\nclass ArrayBasicTreeView extends abstract_1.TreeView {\n  constructor(type, tree) {\n    super();\n    this.type = type;\n    this.tree = tree;\n  }\n  /**\n   * Number of elements in the array. Equal to the Uint32 value of the Tree's length node\n   */\n  get length() {\n    return this.type.tree_getLength(this.tree.rootNode);\n  }\n  get node() {\n    return this.tree.rootNode;\n  }\n  /**\n   * Get element at `index`. Returns the Basic element type value directly\n   */\n  get(index) {\n    // First walk through the tree to get the root node for that index\n    const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n    const leafNode = this.tree.getNodeAtDepth(this.type.depth, chunkIndex);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return this.type.elementType.tree_getFromPackedNode(leafNode, index);\n  }\n  /**\n   * Set Basic element type `value` at `index`\n   */\n  set(index, value) {\n    const length = this.length;\n    if (index >= length) {\n      throw Error(\"Error setting index over length \".concat(index, \" > \").concat(length));\n    }\n    const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n    const leafNodePrev = this.tree.getNodeAtDepth(this.type.depth, chunkIndex);\n    // Create a new node to preserve immutability\n    const leafNode = leafNodePrev.clone();\n    this.type.elementType.tree_setToPackedNode(leafNode, index, value);\n    // Commit immediately\n    this.tree.setNodeAtDepth(this.type.depth, chunkIndex, leafNode);\n  }\n  /**\n   * Get all values of this array as Basic element type values, from index zero to `this.length - 1`\n   */\n  getAll() {\n    const length = this.length;\n    const chunksNode = this.type.tree_getChunksNode(this.node);\n    const chunkCount = Math.ceil(length / this.type.itemsPerChunk);\n    const leafNodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.type.chunkDepth, 0, chunkCount);\n    const values = new Array(length);\n    const itemsPerChunk = this.type.itemsPerChunk; // Prevent many access in for loop below\n    const lenFullNodes = Math.floor(length / itemsPerChunk);\n    const remainder = length % itemsPerChunk;\n    for (let n = 0; n < lenFullNodes; n++) {\n      const leafNode = leafNodes[n];\n      // TODO: Implement add a fast bulk packed element reader in the elementType\n      // ```\n      // abstract getValuesFromPackedNode(leafNode: LeafNode, output: V[], indexOffset: number): void;\n      // ```\n      // if performance here is a problem\n      for (let i = 0; i < itemsPerChunk; i++) {\n        values[n * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);\n      }\n    }\n    if (remainder > 0) {\n      const leafNode = leafNodes[lenFullNodes];\n      for (let i = 0; i < remainder; i++) {\n        values[lenFullNodes * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);\n      }\n    }\n    return values;\n  }\n}\nexports.ArrayBasicTreeView = ArrayBasicTreeView;","map":null,"metadata":{},"sourceType":"script"}