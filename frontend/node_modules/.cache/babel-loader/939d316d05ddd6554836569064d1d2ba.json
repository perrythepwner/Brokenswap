{"ast":null,"code":"import _objectSpread from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useCelo}from'@celo/react-celo';import{parseBytes32String}from'@ethersproject/strings';import{currencyEquals,Token}from'@ubeswap/sdk';import{arrayify}from'ethers/lib/utils';import{useMemo}from'react';import{filterTokens}from'../components/SearchModal/filtering';import{useCombinedActiveList,useCombinedInactiveList}from'../state/lists/hooks';import{NEVER_RELOAD,useSingleCallResult}from'../state/multicall/hooks';import{useUserAddedTokens}from'../state/user/hooks';import{isAddress}from'../utils';import{useDefaultTokenList,useUnsupportedTokenList}from'./../state/lists/hooks';import{useBytes32TokenContract,useTokenContract}from'./useContract';// reduce token map into standard address <-> Token mapping, optionally include user added tokens\nfunction useTokensFromMap(tokenMap,includeUserAdded,chainIdOpt){const{network}=useCelo();const chainId=chainIdOpt||network.chainId;const userAddedTokens=useUserAddedTokens();return useMemo(()=>{if(!chainId||!tokenMap[chainId])return{};// reduce to just tokens\nconst mapWithoutUrls=Object.keys(tokenMap[chainId]).reduce((newMap,address)=>{newMap[address]=tokenMap[chainId][address].token;return newMap;},{});if(includeUserAdded){return userAddedTokens// reduce into all ALL_TOKENS filtered by the current chain\n.reduce((tokenMap,token)=>{tokenMap[token.address]=token;return tokenMap;},// must make a copy because reduce modifies the map, and we do not\n// want to make a copy in every iteration\n_objectSpread({},mapWithoutUrls));}return mapWithoutUrls;},[chainId,userAddedTokens,tokenMap,includeUserAdded]);}export function useDefaultTokens(){const defaultList=useDefaultTokenList();return useTokensFromMap(defaultList,false);}export function useAllTokens(chainId){const allTokens=useCombinedActiveList();return useTokensFromMap(allTokens,true,chainId);}export function useAllInactiveTokens(){// get inactive tokens\nconst inactiveTokensMap=useCombinedInactiveList();const inactiveTokens=useTokensFromMap(inactiveTokensMap,false);// filter out any token that are on active list\nconst activeTokensAddresses=Object.keys(useAllTokens());const filteredInactive=activeTokensAddresses?Object.keys(inactiveTokens).reduce((newMap,address)=>{if(!activeTokensAddresses.includes(address)){newMap[address]=inactiveTokens[address];}return newMap;},{}):inactiveTokens;return filteredInactive;}export function useUnsupportedTokens(){const unsupportedTokensMap=useUnsupportedTokenList();return useTokensFromMap(unsupportedTokensMap,false);}export function useIsTokenActive(token){const activeTokens=useAllTokens();if(!activeTokens||!token){return false;}return!!activeTokens[token.address];}// used to detect extra search results\nexport function useFoundOnInactiveList(searchQuery){const{network}=useCelo();const chainId=network.chainId;const inactiveTokens=useAllInactiveTokens();return useMemo(()=>{if(!chainId||searchQuery===''){return undefined;}else{const tokens=filterTokens(Object.values(inactiveTokens),searchQuery);return tokens;}},[chainId,inactiveTokens,searchQuery]);}// Check if currency is included in custom list from user storage\nexport function useIsUserAddedToken(currency){const userAddedTokens=useUserAddedTokens();if(!currency){return false;}return!!userAddedTokens.find(token=>currencyEquals(currency,token));}// parse a name or symbol from a token response\nconst BYTES32_REGEX=/^0x[a-fA-F0-9]{64}$/;export function parseStringOrBytes32(str,bytes32,defaultValue){return str&&str.length>0?str:// need to check for proper bytes string and valid terminator\nbytes32&&BYTES32_REGEX.test(bytes32)&&arrayify(bytes32)[31]===0?parseBytes32String(bytes32):defaultValue;}// undefined if invalid or does not exist\n// null if loading\n// otherwise returns the token\nexport function useToken(tokenAddress){const{network}=useCelo();const chainId=network.chainId;const tokens=useAllTokens();const address=isAddress(tokenAddress);const tokenContract=useTokenContract(address?address:undefined,false);const tokenContractBytes32=useBytes32TokenContract(address?address:undefined,false);const token=address?tokens[address]:undefined;const tokenName=useSingleCallResult(token?undefined:tokenContract,'name',undefined,NEVER_RELOAD);const tokenNameBytes32=useSingleCallResult(token?undefined:tokenContractBytes32,'name',undefined,NEVER_RELOAD);const symbol=useSingleCallResult(token?undefined:tokenContract,'symbol',undefined,NEVER_RELOAD);const symbolBytes32=useSingleCallResult(token?undefined:tokenContractBytes32,'symbol',undefined,NEVER_RELOAD);const decimals=useSingleCallResult(token?undefined:tokenContract,'decimals',undefined,NEVER_RELOAD);return useMemo(()=>{if(token)return token;if(!chainId||!address)return undefined;if(decimals.loading||symbol.loading||tokenName.loading)return null;if(decimals.result){var _symbol$result,_symbolBytes32$result,_tokenName$result,_tokenNameBytes32$res;return new Token(chainId,address,decimals.result[0],parseStringOrBytes32((_symbol$result=symbol.result)===null||_symbol$result===void 0?void 0:_symbol$result[0],(_symbolBytes32$result=symbolBytes32.result)===null||_symbolBytes32$result===void 0?void 0:_symbolBytes32$result[0],'UNKNOWN'),parseStringOrBytes32((_tokenName$result=tokenName.result)===null||_tokenName$result===void 0?void 0:_tokenName$result[0],(_tokenNameBytes32$res=tokenNameBytes32.result)===null||_tokenNameBytes32$res===void 0?void 0:_tokenNameBytes32$res[0],'Unknown Token'));}return undefined;},[address,chainId,decimals.loading,decimals.result,symbol.loading,symbol.result,symbolBytes32.result,token,tokenName.loading,tokenName.result,tokenNameBytes32.result]);}export function useCurrency(currencyId){const token=useToken(currencyId);return token;}","map":{"version":3,"names":["useCelo","parseBytes32String","currencyEquals","Token","arrayify","useMemo","filterTokens","useCombinedActiveList","useCombinedInactiveList","NEVER_RELOAD","useSingleCallResult","useUserAddedTokens","isAddress","useDefaultTokenList","useUnsupportedTokenList","useBytes32TokenContract","useTokenContract","useTokensFromMap","tokenMap","includeUserAdded","chainIdOpt","network","chainId","userAddedTokens","mapWithoutUrls","Object","keys","reduce","newMap","address","token","_objectSpread","useDefaultTokens","defaultList","useAllTokens","allTokens","useAllInactiveTokens","inactiveTokensMap","inactiveTokens","activeTokensAddresses","filteredInactive","includes","useUnsupportedTokens","unsupportedTokensMap","useIsTokenActive","activeTokens","useFoundOnInactiveList","searchQuery","undefined","tokens","values","useIsUserAddedToken","currency","find","BYTES32_REGEX","parseStringOrBytes32","str","bytes32","defaultValue","length","test","useToken","tokenAddress","tokenContract","tokenContractBytes32","tokenName","tokenNameBytes32","symbol","symbolBytes32","decimals","loading","result","_symbol$result","_symbolBytes32$result","_tokenName$result","_tokenNameBytes32$res","useCurrency","currencyId"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/hooks/Tokens.ts"],"sourcesContent":["import { ChainId, useCelo } from '@celo/react-celo'\nimport { parseBytes32String } from '@ethersproject/strings'\nimport { currencyEquals, Token } from '@ubeswap/sdk'\nimport { arrayify } from 'ethers/lib/utils'\nimport { useMemo } from 'react'\n\nimport { filterTokens } from '../components/SearchModal/filtering'\nimport { useCombinedActiveList, useCombinedInactiveList } from '../state/lists/hooks'\nimport { NEVER_RELOAD, useSingleCallResult } from '../state/multicall/hooks'\nimport { useUserAddedTokens } from '../state/user/hooks'\nimport { isAddress } from '../utils'\nimport { TokenAddressMap, useDefaultTokenList, useUnsupportedTokenList } from './../state/lists/hooks'\nimport { useBytes32TokenContract, useTokenContract } from './useContract'\n\n// reduce token map into standard address <-> Token mapping, optionally include user added tokens\nfunction useTokensFromMap(\n  tokenMap: TokenAddressMap,\n  includeUserAdded: boolean,\n  chainIdOpt?: ChainId\n): { [address: string]: Token } {\n  const { network } = useCelo()\n  const chainId = chainIdOpt || network.chainId\n  const userAddedTokens = useUserAddedTokens()\n\n  return useMemo(() => {\n    if (!chainId || !tokenMap[chainId]) return {}\n\n    // reduce to just tokens\n    const mapWithoutUrls = Object.keys(tokenMap[chainId]).reduce<{ [address: string]: Token }>((newMap, address) => {\n      newMap[address] = tokenMap[chainId][address].token\n      return newMap\n    }, {})\n\n    if (includeUserAdded) {\n      return (\n        userAddedTokens\n          // reduce into all ALL_TOKENS filtered by the current chain\n          .reduce<{ [address: string]: Token }>(\n            (tokenMap, token) => {\n              tokenMap[token.address] = token\n              return tokenMap\n            },\n            // must make a copy because reduce modifies the map, and we do not\n            // want to make a copy in every iteration\n            { ...mapWithoutUrls }\n          )\n      )\n    }\n\n    return mapWithoutUrls\n  }, [chainId, userAddedTokens, tokenMap, includeUserAdded])\n}\n\nexport function useDefaultTokens(): { [address: string]: Token } {\n  const defaultList = useDefaultTokenList()\n  return useTokensFromMap(defaultList, false)\n}\n\nexport function useAllTokens(chainId?: ChainId): { [address: string]: Token } {\n  const allTokens = useCombinedActiveList()\n  return useTokensFromMap(allTokens, true, chainId)\n}\n\nexport function useAllInactiveTokens(): { [address: string]: Token } {\n  // get inactive tokens\n  const inactiveTokensMap = useCombinedInactiveList()\n  const inactiveTokens = useTokensFromMap(inactiveTokensMap, false)\n\n  // filter out any token that are on active list\n  const activeTokensAddresses = Object.keys(useAllTokens())\n  const filteredInactive = activeTokensAddresses\n    ? Object.keys(inactiveTokens).reduce<{ [address: string]: Token }>((newMap, address) => {\n        if (!activeTokensAddresses.includes(address)) {\n          newMap[address] = inactiveTokens[address]\n        }\n        return newMap\n      }, {})\n    : inactiveTokens\n\n  return filteredInactive\n}\n\nexport function useUnsupportedTokens(): { [address: string]: Token } {\n  const unsupportedTokensMap = useUnsupportedTokenList()\n  return useTokensFromMap(unsupportedTokensMap, false)\n}\n\nexport function useIsTokenActive(token: Token | undefined | null): boolean {\n  const activeTokens = useAllTokens()\n\n  if (!activeTokens || !token) {\n    return false\n  }\n\n  return !!activeTokens[token.address]\n}\n\n// used to detect extra search results\nexport function useFoundOnInactiveList(searchQuery: string): Token[] | undefined {\n  const { network } = useCelo()\n  const chainId = network.chainId\n  const inactiveTokens = useAllInactiveTokens()\n\n  return useMemo(() => {\n    if (!chainId || searchQuery === '') {\n      return undefined\n    } else {\n      const tokens = filterTokens(Object.values(inactiveTokens), searchQuery)\n      return tokens\n    }\n  }, [chainId, inactiveTokens, searchQuery])\n}\n\n// Check if currency is included in custom list from user storage\nexport function useIsUserAddedToken(currency: Token | undefined | null): boolean {\n  const userAddedTokens = useUserAddedTokens()\n\n  if (!currency) {\n    return false\n  }\n\n  return !!userAddedTokens.find((token) => currencyEquals(currency, token))\n}\n\n// parse a name or symbol from a token response\nconst BYTES32_REGEX = /^0x[a-fA-F0-9]{64}$/\n\nexport function parseStringOrBytes32(\n  str: string | undefined,\n  bytes32: string | undefined,\n  defaultValue: string\n): string {\n  return str && str.length > 0\n    ? str\n    : // need to check for proper bytes string and valid terminator\n    bytes32 && BYTES32_REGEX.test(bytes32) && arrayify(bytes32)[31] === 0\n    ? parseBytes32String(bytes32)\n    : defaultValue\n}\n\n// undefined if invalid or does not exist\n// null if loading\n// otherwise returns the token\nexport function useToken(tokenAddress?: string): Token | undefined | null {\n  const { network } = useCelo()\n  const chainId = network.chainId\n  const tokens = useAllTokens()\n\n  const address = isAddress(tokenAddress)\n\n  const tokenContract = useTokenContract(address ? address : undefined, false)\n  const tokenContractBytes32 = useBytes32TokenContract(address ? address : undefined, false)\n  const token: Token | undefined = address ? tokens[address] : undefined\n\n  const tokenName = useSingleCallResult(token ? undefined : tokenContract, 'name', undefined, NEVER_RELOAD)\n  const tokenNameBytes32 = useSingleCallResult(\n    token ? undefined : tokenContractBytes32,\n    'name',\n    undefined,\n    NEVER_RELOAD\n  )\n  const symbol = useSingleCallResult(token ? undefined : tokenContract, 'symbol', undefined, NEVER_RELOAD)\n  const symbolBytes32 = useSingleCallResult(token ? undefined : tokenContractBytes32, 'symbol', undefined, NEVER_RELOAD)\n  const decimals = useSingleCallResult(token ? undefined : tokenContract, 'decimals', undefined, NEVER_RELOAD)\n\n  return useMemo(() => {\n    if (token) return token\n    if (!chainId || !address) return undefined\n    if (decimals.loading || symbol.loading || tokenName.loading) return null\n    if (decimals.result) {\n      return new Token(\n        chainId as number,\n        address,\n        decimals.result[0],\n        parseStringOrBytes32(symbol.result?.[0], symbolBytes32.result?.[0], 'UNKNOWN'),\n        parseStringOrBytes32(tokenName.result?.[0], tokenNameBytes32.result?.[0], 'Unknown Token')\n      )\n    }\n    return undefined\n  }, [\n    address,\n    chainId,\n    decimals.loading,\n    decimals.result,\n    symbol.loading,\n    symbol.result,\n    symbolBytes32.result,\n    token,\n    tokenName.loading,\n    tokenName.result,\n    tokenNameBytes32.result,\n  ])\n}\n\nexport function useCurrency(currencyId: string | undefined): Token | null | undefined {\n  const token = useToken(currencyId)\n  return token\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}