{"ast":null,"code":"var _asyncToGenerator = require(\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Mutex = require('async-mutex').Mutex;\nconst {\n  createAsyncMiddleware,\n  createScaffoldMiddleware\n} = require('json-rpc-engine');\nconst LogFilter = require('./log-filter.js');\nconst BlockFilter = require('./block-filter.js');\nconst TxFilter = require('./tx-filter.js');\nconst {\n  intToHex,\n  hexToInt\n} = require('./hexUtils');\nmodule.exports = createEthFilterMiddleware;\nfunction createEthFilterMiddleware(_ref) {\n  let {\n    blockTracker,\n    provider\n  } = _ref;\n  // create filter collection\n  let filterIndex = 0;\n  let filters = {};\n  // create update mutex\n  const mutex = new Mutex();\n  const waitForFree = mutexMiddlewareWrapper({\n    mutex\n  });\n  const middleware = createScaffoldMiddleware({\n    // install filters\n    eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))\n  });\n\n  // setup filter updating and destroy handler\n  const filterUpdater = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* (_ref2) {\n      let {\n        oldBlock,\n        newBlock\n      } = _ref2;\n      if (filters.length === 0) return;\n      // lock update reads\n      const releaseLock = yield mutex.acquire();\n      try {\n        // process all filters in parallel\n        yield Promise.all(objValues(filters).map( /*#__PURE__*/function () {\n          var _ref4 = _asyncToGenerator(function* (filter) {\n            try {\n              yield filter.update({\n                oldBlock,\n                newBlock\n              });\n            } catch (err) {\n              // handle each error individually so filter update errors don't affect other filters\n              console.error(err);\n            }\n          });\n          return function (_x2) {\n            return _ref4.apply(this, arguments);\n          };\n        }()));\n      } catch (err) {\n        // log error so we don't skip the releaseLock\n        console.error(err);\n      }\n      // unlock update reads\n      releaseLock();\n    });\n    return function filterUpdater(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter;\n  middleware.newBlockFilter = newBlockFilter;\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter;\n  middleware.uninstallFilter = uninstallFilterHandler;\n  middleware.getFilterChanges = getFilterChanges;\n  middleware.getFilterLogs = getFilterLogs;\n\n  // expose destroy method for cleanup\n  middleware.destroy = () => {\n    uninstallAllFilters();\n  };\n  return middleware;\n\n  //\n  // new filters\n  //\n  function newLogFilter(_x3) {\n    return _newLogFilter.apply(this, arguments);\n  }\n  function _newLogFilter() {\n    _newLogFilter = _asyncToGenerator(function* (params) {\n      const filter = new LogFilter({\n        provider,\n        params\n      });\n      const filterIndex = yield installFilter(filter);\n      return filter;\n    });\n    return _newLogFilter.apply(this, arguments);\n  }\n  function newBlockFilter() {\n    return _newBlockFilter.apply(this, arguments);\n  }\n  function _newBlockFilter() {\n    _newBlockFilter = _asyncToGenerator(function* () {\n      const filter = new BlockFilter({\n        provider\n      });\n      const filterIndex = yield installFilter(filter);\n      return filter;\n    });\n    return _newBlockFilter.apply(this, arguments);\n  }\n  function newPendingTransactionFilter() {\n    return _newPendingTransactionFilter.apply(this, arguments);\n  } //\n  // get filter changes\n  //\n  function _newPendingTransactionFilter() {\n    _newPendingTransactionFilter = _asyncToGenerator(function* () {\n      const filter = new TxFilter({\n        provider\n      });\n      const filterIndex = yield installFilter(filter);\n      return filter;\n    });\n    return _newPendingTransactionFilter.apply(this, arguments);\n  }\n  function getFilterChanges(_x4) {\n    return _getFilterChanges.apply(this, arguments);\n  }\n  function _getFilterChanges() {\n    _getFilterChanges = _asyncToGenerator(function* (filterIndexHex) {\n      const filterIndex = hexToInt(filterIndexHex);\n      const filter = filters[filterIndex];\n      if (!filter) {\n        throw new Error(\"No filter for index \\\"\".concat(filterIndex, \"\\\"\"));\n      }\n      const results = filter.getChangesAndClear();\n      return results;\n    });\n    return _getFilterChanges.apply(this, arguments);\n  }\n  function getFilterLogs(_x5) {\n    return _getFilterLogs.apply(this, arguments);\n  } //\n  // remove filters\n  //\n  function _getFilterLogs() {\n    _getFilterLogs = _asyncToGenerator(function* (filterIndexHex) {\n      const filterIndex = hexToInt(filterIndexHex);\n      const filter = filters[filterIndex];\n      if (!filter) {\n        throw new Error(\"No filter for index \\\"\".concat(filterIndex, \"\\\"\"));\n      }\n      // only return results for log filters\n      let results = [];\n      if (filter.type === 'log') {\n        results = filter.getAllResults();\n      }\n      return results;\n    });\n    return _getFilterLogs.apply(this, arguments);\n  }\n  function uninstallFilterHandler(_x6) {\n    return _uninstallFilterHandler.apply(this, arguments);\n  } //\n  // utils\n  //\n  function _uninstallFilterHandler() {\n    _uninstallFilterHandler = _asyncToGenerator(function* (filterIndexHex) {\n      // check filter exists\n      const filterIndex = hexToInt(filterIndexHex);\n      const filter = filters[filterIndex];\n      const result = Boolean(filter);\n      // uninstall filter\n      if (result) {\n        yield uninstallFilter(filterIndex);\n      }\n      return result;\n    });\n    return _uninstallFilterHandler.apply(this, arguments);\n  }\n  function installFilter(_x7) {\n    return _installFilter.apply(this, arguments);\n  }\n  function _installFilter() {\n    _installFilter = _asyncToGenerator(function* (filter) {\n      const prevFilterCount = objValues(filters).length;\n      // install filter\n      const currentBlock = yield blockTracker.getLatestBlock();\n      yield filter.initialize({\n        currentBlock\n      });\n      filterIndex++;\n      filters[filterIndex] = filter;\n      filter.id = filterIndex;\n      filter.idHex = intToHex(filterIndex);\n      // update block tracker subs\n      const newFilterCount = objValues(filters).length;\n      updateBlockTrackerSubs({\n        prevFilterCount,\n        newFilterCount\n      });\n      return filterIndex;\n    });\n    return _installFilter.apply(this, arguments);\n  }\n  function uninstallFilter(_x8) {\n    return _uninstallFilter.apply(this, arguments);\n  }\n  function _uninstallFilter() {\n    _uninstallFilter = _asyncToGenerator(function* (filterIndex) {\n      const prevFilterCount = objValues(filters).length;\n      delete filters[filterIndex];\n      // update block tracker subs\n      const newFilterCount = objValues(filters).length;\n      updateBlockTrackerSubs({\n        prevFilterCount,\n        newFilterCount\n      });\n    });\n    return _uninstallFilter.apply(this, arguments);\n  }\n  function uninstallAllFilters() {\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n  function _uninstallAllFilters() {\n    _uninstallAllFilters = _asyncToGenerator(function* () {\n      const prevFilterCount = objValues(filters).length;\n      filters = {};\n      // update block tracker subs\n      updateBlockTrackerSubs({\n        prevFilterCount,\n        newFilterCount: 0\n      });\n    });\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n  function updateBlockTrackerSubs(_ref5) {\n    let {\n      prevFilterCount,\n      newFilterCount\n    } = _ref5;\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater);\n      return;\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater);\n      return;\n    }\n  }\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware( /*#__PURE__*/_asyncToGenerator(function* () {\n    const filter = yield createFilterFn(...arguments);\n    const result = intToHex(filter.id);\n    return result;\n  }));\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware( /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator(function* (req, res) {\n      const result = yield asyncFn.apply(null, req.params);\n      res.result = result;\n    });\n    return function (_x9, _x10) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n}\nfunction mutexMiddlewareWrapper(_ref8) {\n  let {\n    mutex\n  } = _ref8;\n  return middleware => {\n    return /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator(function* (req, res, next, end) {\n        // wait for mutex available\n        // we can release immediately because\n        // we just need to make sure updates aren't active\n        const releaseLock = yield mutex.acquire();\n        releaseLock();\n        middleware(req, res, next, end);\n      });\n      return function (_x11, _x12, _x13, _x14) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n  };\n}\nfunction objValues(obj, fn) {\n  const values = [];\n  for (let key in obj) {\n    values.push(obj[key]);\n  }\n  return values;\n}","map":{"version":3,"names":["Mutex","require","createAsyncMiddleware","createScaffoldMiddleware","LogFilter","BlockFilter","TxFilter","intToHex","hexToInt","module","exports","createEthFilterMiddleware","_ref","blockTracker","provider","filterIndex","filters","mutex","waitForFree","mutexMiddlewareWrapper","middleware","eth_newFilter","toFilterCreationMiddleware","newLogFilter","eth_newBlockFilter","newBlockFilter","eth_newPendingTransactionFilter","newPendingTransactionFilter","eth_uninstallFilter","toAsyncRpcMiddleware","uninstallFilterHandler","eth_getFilterChanges","getFilterChanges","eth_getFilterLogs","getFilterLogs","filterUpdater","_ref3","_asyncToGenerator","_ref2","oldBlock","newBlock","length","releaseLock","acquire","Promise","all","objValues","map","_ref4","filter","update","err","console","error","_x2","apply","arguments","_x","uninstallFilter","destroy","uninstallAllFilters","_x3","_newLogFilter","params","installFilter","_newBlockFilter","_newPendingTransactionFilter","_x4","_getFilterChanges","filterIndexHex","Error","concat","results","getChangesAndClear","_x5","_getFilterLogs","type","getAllResults","_x6","_uninstallFilterHandler","result","Boolean","_x7","_installFilter","prevFilterCount","currentBlock","getLatestBlock","initialize","id","idHex","newFilterCount","updateBlockTrackerSubs","_x8","_uninstallFilter","_uninstallAllFilters","_ref5","on","removeListener","createFilterFn","asyncFn","_ref7","req","res","_x9","_x10","_ref8","_ref9","next","end","_x11","_x12","_x13","_x14","obj","fn","values","key","push"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/eth-json-rpc-filters/index.js"],"sourcesContent":["const Mutex = require('async-mutex').Mutex\nconst { createAsyncMiddleware, createScaffoldMiddleware } = require('json-rpc-engine')\nconst LogFilter = require('./log-filter.js')\nconst BlockFilter = require('./block-filter.js')\nconst TxFilter = require('./tx-filter.js')\nconst { intToHex, hexToInt } = require('./hexUtils')\n\nmodule.exports = createEthFilterMiddleware\n\nfunction createEthFilterMiddleware({ blockTracker, provider }) {\n\n  // create filter collection\n  let filterIndex = 0\n  let filters = {}\n  // create update mutex\n  const mutex = new Mutex()\n  const waitForFree = mutexMiddlewareWrapper({ mutex })\n\n  const middleware = createScaffoldMiddleware({\n    // install filters\n    eth_newFilter:                   waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter:              waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter:             waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges:            waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs:               waitForFree(toAsyncRpcMiddleware(getFilterLogs)),\n  })\n\n  // setup filter updating and destroy handler\n  const filterUpdater = async ({ oldBlock, newBlock }) => {\n    if (filters.length === 0) return\n    // lock update reads\n    const releaseLock = await mutex.acquire()\n    try {\n      // process all filters in parallel\n      await Promise.all(objValues(filters).map(async (filter) => {\n        try {\n         await filter.update({ oldBlock, newBlock })\n        } catch (err) {\n          // handle each error individually so filter update errors don't affect other filters\n          console.error(err)\n        }\n      }))\n    } catch (err) {\n      // log error so we don't skip the releaseLock\n      console.error(err)\n    }\n    // unlock update reads\n    releaseLock()\n  }\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter\n  middleware.newBlockFilter = newBlockFilter\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter\n  middleware.uninstallFilter = uninstallFilterHandler\n  middleware.getFilterChanges = getFilterChanges\n  middleware.getFilterLogs = getFilterLogs\n\n  // expose destroy method for cleanup\n  middleware.destroy = () => {\n    uninstallAllFilters()\n  }\n\n  return middleware\n\n  //\n  // new filters\n  //\n\n  async function newLogFilter(params) {\n    const filter = new LogFilter({ provider, params })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newBlockFilter() {\n    const filter = new BlockFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newPendingTransactionFilter() {\n    const filter = new TxFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  //\n  // get filter changes\n  //\n\n  async function getFilterChanges(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    const results = filter.getChangesAndClear()\n    return results\n  }\n\n  async function getFilterLogs(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    // only return results for log filters\n    let results = []\n    if (filter.type === 'log') {\n      results = filter.getAllResults()\n    }\n    return results\n  }\n\n\n  //\n  // remove filters\n  //\n\n\n  async function uninstallFilterHandler(filterIndexHex) {\n    // check filter exists\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    const result = Boolean(filter)\n    // uninstall filter\n    if (result) {\n      await uninstallFilter(filterIndex)\n    }\n    return result\n  }\n\n  //\n  // utils\n  //\n\n  async function installFilter(filter) {\n    const prevFilterCount = objValues(filters).length\n    // install filter\n    const currentBlock = await blockTracker.getLatestBlock()\n    await filter.initialize({ currentBlock })\n    filterIndex++\n    filters[filterIndex] = filter\n    filter.id = filterIndex\n    filter.idHex = intToHex(filterIndex)\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n    return filterIndex\n  }\n\n  async function uninstallFilter(filterIndex) {\n    const prevFilterCount = objValues(filters).length\n    delete filters[filterIndex]\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n  }\n\n  async function uninstallAllFilters() {\n    const prevFilterCount = objValues(filters).length\n    filters = {}\n    // update block tracker subs\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount: 0 })\n  }\n\n  function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater)\n      return\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater)\n      return\n    }\n  }\n\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware(async (...args) => {\n    const filter = await createFilterFn(...args)\n    const result = intToHex(filter.id)\n    return result\n  })\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware(async (req, res) => {\n    const result = await asyncFn.apply(null, req.params)\n    res.result = result\n  })\n}\n\nfunction mutexMiddlewareWrapper({ mutex }) {\n  return (middleware) => {\n    return async (req, res, next, end) => {\n      // wait for mutex available\n      // we can release immediately because\n      // we just need to make sure updates aren't active\n      const releaseLock = await mutex.acquire()\n      releaseLock()\n      middleware(req, res, next, end)\n    }\n  }\n}\n\nfunction objValues(obj, fn){\n  const values = []\n  for (let key in obj) {\n    values.push(obj[key])\n  }\n  return values\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}