{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListBasicTreeView = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nclass ListBasicTreeView extends arrayBasic_1.ArrayBasicTreeView {\n  constructor(type, tree) {\n    super(type, tree);\n    this.type = type;\n    this.tree = tree;\n  }\n  /**\n   * Adds one value element at the end of the array and adds 1 to the current Tree length.\n   */\n  push(value) {\n    const length = this.length;\n    if (length >= this.type.limit) {\n      throw Error(\"Error pushing over limit\");\n    }\n    this.type.tree_setLength(this.tree, length + 1);\n    // If in new node..\n    if (length % this.type.itemsPerChunk === 0) {\n      // TODO: Optimize: This `inNewNode` could be ommitted but it would cause a full navigation in .set()\n      // Benchmark the cost of that navigation vs the extra math here\n      // TODO: Optimize: prevent double initialization\n      const leafNode = persistent_merkle_tree_1.LeafNode.fromZero();\n      this.type.elementType.tree_setToPackedNode(leafNode, length, value);\n      // Commit immediately\n      const chunkIndex = Math.floor(length / this.type.itemsPerChunk);\n      this.tree.setNodeAtDepth(this.type.depth, chunkIndex, leafNode);\n    } else {\n      // Re-use .set() since no new node is added\n      this.set(length, value);\n    }\n  }\n}\nexports.ListBasicTreeView = ListBasicTreeView;","map":{"version":3,"sources":["../../src/view/listBasic.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,wBAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;AAGA,MAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAOA,MAAa,iBAA0D,SAAQ,YAAA,CAAA,kBAA+B,CAAA;EAC5G,WAAA,CAAqB,IAAgC,EAAY,IAAU,EAAA;IACzE,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;IADE,IAAA,CAAA,IAAI,GAAJ,IAAI;IAAwC,IAAA,CAAA,IAAI,GAAJ,IAAI;EAErE;EAEA;;AAEG;EACH,IAAI,CAAC,KAA2B,EAAA;IAC9B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM;IAC1B,IAAI,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;MAC7B,MAAM,KAAK,CAAC,0BAA0B,CAAC;IACxC;IAED,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,GAAG,CAAC,CAAC;IAE/C;IACA,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,KAAK,CAAC,EAAE;MAC1C;MACA;MACA;MACA,MAAM,QAAQ,GAAG,wBAAA,CAAA,QAAQ,CAAC,QAAQ,CAAA,CAAE;MACpC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC;MAEnE;MACA,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;MAC/D,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC;KAChE,MAAM;MACL;MACA,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC;IACxB;EACH;AACD;AAhCD,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListBasicTreeView = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nclass ListBasicTreeView extends arrayBasic_1.ArrayBasicTreeView {\n    constructor(type, tree) {\n        super(type, tree);\n        this.type = type;\n        this.tree = tree;\n    }\n    /**\n     * Adds one value element at the end of the array and adds 1 to the current Tree length.\n     */\n    push(value) {\n        const length = this.length;\n        if (length >= this.type.limit) {\n            throw Error(\"Error pushing over limit\");\n        }\n        this.type.tree_setLength(this.tree, length + 1);\n        // If in new node..\n        if (length % this.type.itemsPerChunk === 0) {\n            // TODO: Optimize: This `inNewNode` could be ommitted but it would cause a full navigation in .set()\n            // Benchmark the cost of that navigation vs the extra math here\n            // TODO: Optimize: prevent double initialization\n            const leafNode = persistent_merkle_tree_1.LeafNode.fromZero();\n            this.type.elementType.tree_setToPackedNode(leafNode, length, value);\n            // Commit immediately\n            const chunkIndex = Math.floor(length / this.type.itemsPerChunk);\n            this.tree.setNodeAtDepth(this.type.depth, chunkIndex, leafNode);\n        }\n        else {\n            // Re-use .set() since no new node is added\n            this.set(length, value);\n        }\n    }\n}\nexports.ListBasicTreeView = ListBasicTreeView;\n//# sourceMappingURL=listBasic.js.map"]},"metadata":{},"sourceType":"script"}