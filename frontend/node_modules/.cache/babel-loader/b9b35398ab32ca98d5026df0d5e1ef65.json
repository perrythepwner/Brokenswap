{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CeloProvider = exports.assertIsCeloProvider = void 0;\nvar lock_1 = require(\"@celo/base/lib/lock\");\nvar debug_1 = __importDefault(require(\"debug\"));\nvar provider_utils_1 = require(\"./utils/provider-utils\");\nvar rpc_caller_1 = require(\"./utils/rpc-caller\");\nvar debug = (0, debug_1.default)('provider:connection');\nvar debugPayload = (0, debug_1.default)('provider:payload');\nvar debugTxToSend = (0, debug_1.default)('provider:tx-to-send');\nvar debugEncodedTx = (0, debug_1.default)('provider:encoded-tx');\nvar debugResponse = (0, debug_1.default)('provider:response');\nvar InterceptedMethods;\n(function (InterceptedMethods) {\n  InterceptedMethods[\"accounts\"] = \"eth_accounts\";\n  InterceptedMethods[\"sendTransaction\"] = \"eth_sendTransaction\";\n  InterceptedMethods[\"signTransaction\"] = \"eth_signTransaction\";\n  InterceptedMethods[\"sign\"] = \"eth_sign\";\n  InterceptedMethods[\"personalSign\"] = \"personal_sign\";\n  InterceptedMethods[\"signTypedData\"] = \"eth_signTypedData\";\n  InterceptedMethods[\"signTypedDataV1\"] = \"eth_signTypedData_v1\";\n  InterceptedMethods[\"signTypedDataV3\"] = \"eth_signTypedData_v3\";\n  InterceptedMethods[\"signTypedDataV4\"] = \"eth_signTypedData_v4\";\n  InterceptedMethods[\"signTypedDataV5\"] = \"eth_signTypedData_v5\";\n})(InterceptedMethods || (InterceptedMethods = {}));\nfunction assertIsCeloProvider(provider) {\n  if (!(provider instanceof CeloProvider)) {\n    throw new Error('A different Provider was manually added to the kit. The kit should have a CeloProvider');\n  }\n}\nexports.assertIsCeloProvider = assertIsCeloProvider;\n/*\n * CeloProvider wraps a web3.js provider for use with Celo\n */\nvar CeloProvider = /** @class */function () {\n  function CeloProvider(existingProvider, connection) {\n    this.existingProvider = existingProvider;\n    this.connection = connection;\n    this.alreadyStopped = false;\n    // Transaction nonce is calculated as the max of an account's nonce on-chain, and any pending transactions in a node's\n    // transaction pool. As a result, once a nonce is used, the transaction must be sent to the node before the nonce can\n    // be calculated for another transaction. In particular the sign and send operation must be completed atomically with\n    // relation to other sign and send operations.\n    this.nonceLock = new lock_1.Lock();\n    this.addProviderDelegatedFunctions();\n  }\n  // @deprecated  Use the `addAccount` from the Connection\n  CeloProvider.prototype.addAccount = function (privateKey) {\n    this.connection.addAccount(privateKey);\n  };\n  // @deprecated  Use the `removeAccount` from the Connection\n  CeloProvider.prototype.removeAccount = function (address) {\n    this.connection.removeAccount(address);\n  };\n  // @deprecated  Use the `getAccounts` from the Connection\n  CeloProvider.prototype.getAccounts = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.connection.getAccounts()];\n      });\n    });\n  };\n  CeloProvider.prototype.isLocalAccount = function (address) {\n    return this.connection.wallet != null && this.connection.wallet.hasAccount(address);\n  };\n  /**\n   * Send method as expected by web3.js\n   */\n  CeloProvider.prototype.send = function (payload, callback) {\n    var txParams;\n    var address;\n    debugPayload('%O', payload);\n    var decoratedCallback = function decoratedCallback(error, result) {\n      debugResponse('%O', result);\n      callback(error, result);\n    };\n    if (this.alreadyStopped) {\n      throw Error('CeloProvider already stopped');\n    }\n    switch (payload.method) {\n      case InterceptedMethods.accounts:\n        {\n          (0, rpc_caller_1.rpcCallHandler)(payload, this.handleAccounts.bind(this), decoratedCallback);\n          return;\n        }\n      case InterceptedMethods.sendTransaction:\n        {\n          this.checkPayloadWithAtLeastNParams(payload, 1);\n          txParams = payload.params[0];\n          if (this.connection.isLocalAccount(txParams.from)) {\n            (0, rpc_caller_1.rpcCallHandler)(payload, this.handleSendTransaction.bind(this), decoratedCallback);\n          } else {\n            this.forwardSend(payload, callback);\n          }\n          return;\n        }\n      case InterceptedMethods.signTransaction:\n        {\n          this.checkPayloadWithAtLeastNParams(payload, 1);\n          txParams = payload.params[0];\n          if (this.connection.isLocalAccount(txParams.from)) {\n            (0, rpc_caller_1.rpcCallHandler)(payload, this.handleSignTransaction.bind(this), decoratedCallback);\n          } else {\n            this.forwardSend(payload, callback);\n          }\n          return;\n        }\n      case InterceptedMethods.sign:\n      case InterceptedMethods.personalSign:\n        {\n          this.checkPayloadWithAtLeastNParams(payload, 2);\n          address = payload.method === InterceptedMethods.sign ? payload.params[0] : payload.params[1];\n          if (this.connection.isLocalAccount(address)) {\n            (0, rpc_caller_1.rpcCallHandler)(payload, this.handleSignPersonalMessage.bind(this), decoratedCallback);\n          } else {\n            this.forwardSend(payload, callback);\n          }\n          return;\n        }\n      case InterceptedMethods.signTypedData:\n      case InterceptedMethods.signTypedDataV1:\n      case InterceptedMethods.signTypedDataV3:\n      case InterceptedMethods.signTypedDataV4:\n      case InterceptedMethods.signTypedDataV5:\n        {\n          this.checkPayloadWithAtLeastNParams(payload, 1);\n          address = payload.params[0];\n          if (this.connection.isLocalAccount(address)) {\n            (0, rpc_caller_1.rpcCallHandler)(payload, this.handleSignTypedData.bind(this), decoratedCallback);\n          } else {\n            this.forwardSend(payload, callback);\n          }\n          return;\n        }\n      default:\n        {\n          this.forwardSend(payload, callback);\n          return;\n        }\n    }\n  };\n  CeloProvider.prototype.stop = function () {\n    if (this.alreadyStopped) {\n      return;\n    }\n    try {\n      (0, provider_utils_1.stopProvider)(this.existingProvider);\n      this.alreadyStopped = true;\n    } catch (error) {\n      debug(\"Failed to close the connection: \".concat(error));\n    }\n  };\n  CeloProvider.prototype.handleAccounts = function (_payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.connection.getAccounts()];\n      });\n    });\n  };\n  CeloProvider.prototype.handleSignTypedData = function (payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, address, typedData, signature;\n      return __generator(this, function (_b) {\n        _a = payload.params, address = _a[0], typedData = _a[1];\n        signature = this.connection.wallet.signTypedData(address, typedData);\n        return [2 /*return*/, signature];\n      });\n    });\n  };\n  CeloProvider.prototype.handleSignPersonalMessage = function (payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var address, data, ecSignatureHex;\n      return __generator(this, function (_a) {\n        address = payload.method === 'eth_sign' ? payload.params[0] : payload.params[1];\n        data = payload.method === 'eth_sign' ? payload.params[1] : payload.params[0];\n        ecSignatureHex = this.connection.wallet.signPersonalMessage(address, data);\n        return [2 /*return*/, ecSignatureHex];\n      });\n    });\n  };\n  CeloProvider.prototype.handleSignTransaction = function (payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var txParams, filledParams, signedTx;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            txParams = payload.params[0];\n            return [4 /*yield*/, this.connection.paramsPopulator.populate(txParams)];\n          case 1:\n            filledParams = _a.sent();\n            debugTxToSend('%O', filledParams);\n            return [4 /*yield*/, this.connection.wallet.signTransaction(filledParams)];\n          case 2:\n            signedTx = _a.sent();\n            debugEncodedTx('%O', signedTx);\n            return [2 /*return*/, signedTx];\n        }\n      });\n    });\n  };\n  CeloProvider.prototype.handleSendTransaction = function (payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var signedTx, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.nonceLock.acquire()];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2,, 5, 6]);\n            return [4 /*yield*/, this.handleSignTransaction(payload)];\n          case 3:\n            signedTx = _a.sent();\n            return [4 /*yield*/, this.connection.rpcCaller.call('eth_sendRawTransaction', [signedTx.raw])];\n          case 4:\n            response = _a.sent();\n            return [2 /*return*/, response.result];\n          case 5:\n            this.nonceLock.release();\n            return [7 /*endfinally*/];\n          case 6:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  CeloProvider.prototype.forwardSend = function (payload, callback) {\n    this.connection.rpcCaller.send(payload, callback);\n  };\n  CeloProvider.prototype.checkPayloadWithAtLeastNParams = function (payload, n) {\n    if (!payload.params || payload.params.length < n) {\n      throw Error('Invalid params');\n    }\n  };\n  // Functions required to act as a delefator for the existingProvider\n  CeloProvider.prototype.addProviderDelegatedFunctions = function () {\n    if ((0, provider_utils_1.hasProperty)(this.existingProvider, 'on')) {\n      // @ts-ignore\n      this.on = this.defaultOn;\n    }\n    if ((0, provider_utils_1.hasProperty)(this.existingProvider, 'once')) {\n      // @ts-ignore\n      this.once = this.defaultOnce;\n    }\n    if ((0, provider_utils_1.hasProperty)(this.existingProvider, 'removeListener')) {\n      // @ts-ignore\n      this.removeListener = this.defaultRemoveListener;\n    }\n    if ((0, provider_utils_1.hasProperty)(this.existingProvider, 'removeAllListener')) {\n      // @ts-ignore\n      this.removeAllListener = this.defaultRemoveAllListeners;\n    }\n    if ((0, provider_utils_1.hasProperty)(this.existingProvider, 'reset')) {\n      // @ts-ignore\n      this.reset = this.defaultReset;\n    }\n  };\n  Object.defineProperty(CeloProvider.prototype, \"connected\", {\n    get: function get() {\n      return this.existingProvider.connected;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  CeloProvider.prototype.supportsSubscriptions = function () {\n    return this.existingProvider.supportsSubscriptions();\n  };\n  CeloProvider.prototype.defaultOn = function (type, callback) {\n    ;\n    this.existingProvider.on(type, callback);\n  };\n  CeloProvider.prototype.defaultOnce = function (type, callback) {\n    ;\n    this.existingProvider.once(type, callback);\n  };\n  CeloProvider.prototype.defaultRemoveListener = function (type, callback) {\n    ;\n    this.existingProvider.removeListener(type, callback);\n  };\n  CeloProvider.prototype.defaultRemoveAllListeners = function (type) {\n    ;\n    this.existingProvider.removeAllListeners(type);\n  };\n  CeloProvider.prototype.defaultReset = function () {\n    ;\n    this.existingProvider.reset();\n  };\n  return CeloProvider;\n}();\nexports.CeloProvider = CeloProvider;","map":null,"metadata":{},"sourceType":"script"}