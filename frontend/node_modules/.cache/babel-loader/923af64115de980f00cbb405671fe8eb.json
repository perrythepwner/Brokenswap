{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListBasicTreeView = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nclass ListBasicTreeView extends arrayBasic_1.ArrayBasicTreeView {\n  constructor(type, tree) {\n    super(type, tree);\n    this.type = type;\n    this.tree = tree;\n  }\n  /**\n   * Adds one value element at the end of the array and adds 1 to the current Tree length.\n   */\n  push(value) {\n    const length = this.length;\n    if (length >= this.type.limit) {\n      throw Error(\"Error pushing over limit\");\n    }\n    this.type.tree_setLength(this.tree, length + 1);\n    // If in new node..\n    if (length % this.type.itemsPerChunk === 0) {\n      // TODO: Optimize: This `inNewNode` could be ommitted but it would cause a full navigation in .set()\n      // Benchmark the cost of that navigation vs the extra math here\n      // TODO: Optimize: prevent double initialization\n      const leafNode = persistent_merkle_tree_1.LeafNode.fromZero();\n      this.type.elementType.tree_setToPackedNode(leafNode, length, value);\n      // Commit immediately\n      const chunkIndex = Math.floor(length / this.type.itemsPerChunk);\n      this.tree.setNodeAtDepth(this.type.depth, chunkIndex, leafNode);\n    } else {\n      // Re-use .set() since no new node is added\n      this.set(length, value);\n    }\n  }\n}\nexports.ListBasicTreeView = ListBasicTreeView;","map":null,"metadata":{},"sourceType":"script"}