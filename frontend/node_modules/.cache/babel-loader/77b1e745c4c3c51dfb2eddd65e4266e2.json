{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AttestationUtils = exports.extractSecurityCodeWithPrefix = exports.attestToIdentifier = exports.getAttestationMessageToSignFromPhoneNumber = exports.getAttestationMessageToSignFromIdentifier = exports.hashIdentifier = exports.sanitizeMessageBase64 = exports.messageContainsAttestationCode = exports.isAccountConsideredVerified = exports.IdentifierType = exports.getIdentifierPrefix = exports.extractAttestationCodeFromMessage = exports.base64ToHex = void 0;\nvar attestations_1 = require(\"@celo/base/lib/attestations\");\nvar web3_utils_1 = require(\"web3-utils\");\nvar address_1 = require(\"./address\");\nvar signatureUtils_1 = require(\"./signatureUtils\");\n// Exports moved to @celo/base, forwarding them\n// here for backwards compatibility\nvar attestations_2 = require(\"@celo/base/lib/attestations\");\nObject.defineProperty(exports, \"base64ToHex\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.base64ToHex;\n  }\n});\nObject.defineProperty(exports, \"extractAttestationCodeFromMessage\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.extractAttestationCodeFromMessage;\n  }\n});\nObject.defineProperty(exports, \"getIdentifierPrefix\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.getIdentifierPrefix;\n  }\n});\nObject.defineProperty(exports, \"IdentifierType\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.IdentifierType;\n  }\n});\nObject.defineProperty(exports, \"isAccountConsideredVerified\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.isAccountConsideredVerified;\n  }\n});\nObject.defineProperty(exports, \"messageContainsAttestationCode\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.messageContainsAttestationCode;\n  }\n});\nObject.defineProperty(exports, \"sanitizeMessageBase64\", {\n  enumerable: true,\n  get: function get() {\n    return attestations_2.sanitizeMessageBase64;\n  }\n});\nvar sha3 = function sha3(v) {\n  return (0, web3_utils_1.soliditySha3)({\n    type: 'string',\n    value: v\n  });\n};\nfunction hashIdentifier(identifier, type, salt) {\n  return (0, attestations_1.hashIdentifier)(sha3, identifier, type, salt);\n}\nexports.hashIdentifier = hashIdentifier;\nfunction getAttestationMessageToSignFromIdentifier(identifier, account) {\n  var messageHash = (0, web3_utils_1.soliditySha3)({\n    type: 'bytes32',\n    value: identifier\n  }, {\n    type: 'address',\n    value: account\n  });\n  return messageHash;\n}\nexports.getAttestationMessageToSignFromIdentifier = getAttestationMessageToSignFromIdentifier;\nfunction getAttestationMessageToSignFromPhoneNumber(phoneNumber, account, phoneSalt) {\n  return getAttestationMessageToSignFromIdentifier(hashIdentifier(phoneNumber, attestations_1.IdentifierType.PHONE_NUMBER, phoneSalt), account);\n}\nexports.getAttestationMessageToSignFromPhoneNumber = getAttestationMessageToSignFromPhoneNumber;\nfunction attestToIdentifier(identifier, account, privateKey) {\n  var issuer = (0, address_1.privateKeyToAddress)(privateKey);\n  var _a = signatureUtils_1.SignatureUtils.signMessage(getAttestationMessageToSignFromIdentifier(identifier, account), privateKey, issuer),\n    v = _a.v,\n    r = _a.r,\n    s = _a.s;\n  return {\n    v: v,\n    r: r,\n    s: s\n  };\n}\nexports.attestToIdentifier = attestToIdentifier;\nfunction extractSecurityCodeWithPrefix(message) {\n  var matches = message.match('(\\\\d{8})');\n  if (matches && matches.length === 2) {\n    return matches[1];\n  }\n  return null;\n}\nexports.extractSecurityCodeWithPrefix = extractSecurityCodeWithPrefix;\nexports.AttestationUtils = {\n  IdentifierType: attestations_1.IdentifierType,\n  getIdentifierPrefix: attestations_1.getIdentifierPrefix,\n  hashIdentifier: hashIdentifier,\n  getAttestationMessageToSignFromIdentifier: getAttestationMessageToSignFromIdentifier,\n  getAttestationMessageToSignFromPhoneNumber: getAttestationMessageToSignFromPhoneNumber,\n  base64ToHex: attestations_1.base64ToHex,\n  attestToIdentifier: attestToIdentifier,\n  sanitizeMessageBase64: attestations_1.sanitizeMessageBase64,\n  messageContainsAttestationCode: attestations_1.messageContainsAttestationCode,\n  extractAttestationCodeFromMessage: attestations_1.extractAttestationCodeFromMessage,\n  isAccountConsideredVerified: attestations_1.isAccountConsideredVerified,\n  extractSecurityCodeWithPrefix: extractSecurityCodeWithPrefix\n};","map":{"version":3,"sources":["../src/attestations.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AttestationUtils = exports.extractSecurityCodeWithPrefix = exports.attestToIdentifier = exports.getAttestationMessageToSignFromPhoneNumber = exports.getAttestationMessageToSignFromIdentifier = exports.hashIdentifier = exports.sanitizeMessageBase64 = exports.messageContainsAttestationCode = exports.isAccountConsideredVerified = exports.IdentifierType = exports.getIdentifierPrefix = exports.extractAttestationCodeFromMessage = exports.base64ToHex = void 0;\nvar attestations_1 = require(\"@celo/base/lib/attestations\");\nvar web3_utils_1 = require(\"web3-utils\");\nvar address_1 = require(\"./address\");\nvar signatureUtils_1 = require(\"./signatureUtils\");\n// Exports moved to @celo/base, forwarding them\n// here for backwards compatibility\nvar attestations_2 = require(\"@celo/base/lib/attestations\");\nObject.defineProperty(exports, \"base64ToHex\", { enumerable: true, get: function () { return attestations_2.base64ToHex; } });\nObject.defineProperty(exports, \"extractAttestationCodeFromMessage\", { enumerable: true, get: function () { return attestations_2.extractAttestationCodeFromMessage; } });\nObject.defineProperty(exports, \"getIdentifierPrefix\", { enumerable: true, get: function () { return attestations_2.getIdentifierPrefix; } });\nObject.defineProperty(exports, \"IdentifierType\", { enumerable: true, get: function () { return attestations_2.IdentifierType; } });\nObject.defineProperty(exports, \"isAccountConsideredVerified\", { enumerable: true, get: function () { return attestations_2.isAccountConsideredVerified; } });\nObject.defineProperty(exports, \"messageContainsAttestationCode\", { enumerable: true, get: function () { return attestations_2.messageContainsAttestationCode; } });\nObject.defineProperty(exports, \"sanitizeMessageBase64\", { enumerable: true, get: function () { return attestations_2.sanitizeMessageBase64; } });\nvar sha3 = function (v) { return (0, web3_utils_1.soliditySha3)({ type: 'string', value: v }); };\nfunction hashIdentifier(identifier, type, salt) {\n    return (0, attestations_1.hashIdentifier)(sha3, identifier, type, salt);\n}\nexports.hashIdentifier = hashIdentifier;\nfunction getAttestationMessageToSignFromIdentifier(identifier, account) {\n    var messageHash = (0, web3_utils_1.soliditySha3)({ type: 'bytes32', value: identifier }, { type: 'address', value: account });\n    return messageHash;\n}\nexports.getAttestationMessageToSignFromIdentifier = getAttestationMessageToSignFromIdentifier;\nfunction getAttestationMessageToSignFromPhoneNumber(phoneNumber, account, phoneSalt) {\n    return getAttestationMessageToSignFromIdentifier(hashIdentifier(phoneNumber, attestations_1.IdentifierType.PHONE_NUMBER, phoneSalt), account);\n}\nexports.getAttestationMessageToSignFromPhoneNumber = getAttestationMessageToSignFromPhoneNumber;\nfunction attestToIdentifier(identifier, account, privateKey) {\n    var issuer = (0, address_1.privateKeyToAddress)(privateKey);\n    var _a = signatureUtils_1.SignatureUtils.signMessage(getAttestationMessageToSignFromIdentifier(identifier, account), privateKey, issuer), v = _a.v, r = _a.r, s = _a.s;\n    return { v: v, r: r, s: s };\n}\nexports.attestToIdentifier = attestToIdentifier;\nfunction extractSecurityCodeWithPrefix(message) {\n    var matches = message.match('(\\\\d{8})');\n    if (matches && matches.length === 2) {\n        return matches[1];\n    }\n    return null;\n}\nexports.extractSecurityCodeWithPrefix = extractSecurityCodeWithPrefix;\nexports.AttestationUtils = {\n    IdentifierType: attestations_1.IdentifierType,\n    getIdentifierPrefix: attestations_1.getIdentifierPrefix,\n    hashIdentifier: hashIdentifier,\n    getAttestationMessageToSignFromIdentifier: getAttestationMessageToSignFromIdentifier,\n    getAttestationMessageToSignFromPhoneNumber: getAttestationMessageToSignFromPhoneNumber,\n    base64ToHex: attestations_1.base64ToHex,\n    attestToIdentifier: attestToIdentifier,\n    sanitizeMessageBase64: attestations_1.sanitizeMessageBase64,\n    messageContainsAttestationCode: attestations_1.messageContainsAttestationCode,\n    extractAttestationCodeFromMessage: attestations_1.extractAttestationCodeFromMessage,\n    isAccountConsideredVerified: attestations_1.isAccountConsideredVerified,\n    extractSecurityCodeWithPrefix: extractSecurityCodeWithPrefix,\n};\n//# sourceMappingURL=attestations.js.map"]},"metadata":{},"sourceType":"script"}