{"ast":null,"code":"import _asyncToGenerator from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ledgerUSBVendorId } from \"@ledgerhq/devices\";\nconst ledgerDevices = [{\n  vendorId: ledgerUSBVendorId\n}];\nexport function requestLedgerDevice() {\n  return _requestLedgerDevice.apply(this, arguments);\n}\nfunction _requestLedgerDevice() {\n  _requestLedgerDevice = _asyncToGenerator(function* () {\n    // $FlowFixMe\n    const device = yield navigator.usb.requestDevice({\n      filters: ledgerDevices\n    });\n    return device;\n  });\n  return _requestLedgerDevice.apply(this, arguments);\n}\nexport function getLedgerDevices() {\n  return _getLedgerDevices.apply(this, arguments);\n}\nfunction _getLedgerDevices() {\n  _getLedgerDevices = _asyncToGenerator(function* () {\n    // $FlowFixMe\n    const devices = yield navigator.usb.getDevices();\n    return devices.filter(d => d.vendorId === ledgerUSBVendorId);\n  });\n  return _getLedgerDevices.apply(this, arguments);\n}\nexport function getFirstLedgerDevice() {\n  return _getFirstLedgerDevice.apply(this, arguments);\n}\nfunction _getFirstLedgerDevice() {\n  _getFirstLedgerDevice = _asyncToGenerator(function* () {\n    const existingDevices = yield getLedgerDevices();\n    if (existingDevices.length > 0) return existingDevices[0];\n    return requestLedgerDevice();\n  });\n  return _getFirstLedgerDevice.apply(this, arguments);\n}\nexport const isSupported = () => Promise.resolve(!!navigator &&\n// $FlowFixMe\n!!navigator.usb && typeof navigator.usb.getDevices === \"function\");","map":{"version":3,"sources":["../src/webusb.js"],"names":["ledgerUSBVendorId","ledgerDevices","vendorId","requestLedgerDevice","device","usb","requestDevice","filters","getLedgerDevices","devices","navigator","getDevices","filter","d","getFirstLedgerDevice","existingDevices","length","isSupported","Promise","resolve"],"mappings":";AACA,SAASA,iBAAT,QAAkC,mBAAlC;AAEA,MAAMC,aAAa,GAAG,CAAC;EAAEC,QAAQ,EAAEF;AAAZ,CAAD,CAAtB;AAEA,gBAAsBG,mBAAf,CAAA;EAAA,OAAA,oBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAIN,SAAA,qBAAA;EAAA,oBAAA,GAAA,iBAAA,CAJM,aAAyD;IAC9D;IACA,MAAMC,MAAM,SAAS,SAAS,CAACC,GAAV,CAAcC,aAAd,CAA4B;MAAEC,OAAO,EAAEN;IAAX,CAA5B,CAArB;IACA,OAAOG,MAAP;EACD,CAAA;EAAA,OAAA,oBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAED,gBAAsBI,gBAAf,CAAA;EAAA,OAAA,iBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAIN,SAAA,kBAAA;EAAA,iBAAA,GAAA,iBAAA,CAJM,aAAwD;IAC7D;IACA,MAAMC,OAAO,SAASC,SAAS,CAACL,GAAVK,CAAcC,UAAdD,CAAAA,CAAtB;IACA,OAAOD,OAAO,CAACG,MAARH,CAAgBI,CAAD,IAAOA,CAAC,CAACX,QAAFW,KAAeb,iBAArCS,CAAP;EACD,CAAA;EAAA,OAAA,iBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAED,gBAAsBK,oBAAf,CAAA;EAAA,OAAA,qBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAIN,SAAA,sBAAA;EAAA,qBAAA,GAAA,iBAAA,CAJM,aAA0D;IAC/D,MAAMC,eAAe,SAASP,gBAAgB,CAAA,CAA9C;IACA,IAAIO,eAAe,CAACC,MAAhBD,GAAyB,CAA7B,EAAgC,OAAOA,eAAe,CAAC,CAAD,CAAtB;IAChC,OAAOZ,mBAAmB,CAAA,CAA1B;EACD,CAAA;EAAA,OAAA,qBAAA,CAAA,KAAA,OAAA,SAAA;AAAA;AAED,OAAO,MAAMc,WAAW,GAAG,CAAA,KACzBC,OAAO,CAACC,OAARD,CACE,CAAC,CAACR,SAAF;AACE;AACA,CAAC,CAACA,SAAS,CAACL,GAFd,IAGE,OAAOK,SAAS,CAACL,GAAVK,CAAcC,UAArB,KAAoC,UAJxCO,CADK","sourcesContent":["// @flow\nimport { ledgerUSBVendorId } from \"@ledgerhq/devices\";\n\nconst ledgerDevices = [{ vendorId: ledgerUSBVendorId }];\n\nexport async function requestLedgerDevice(): Promise<USBDevice> {\n  // $FlowFixMe\n  const device = await navigator.usb.requestDevice({ filters: ledgerDevices });\n  return device;\n}\n\nexport async function getLedgerDevices(): Promise<USBDevice[]> {\n  // $FlowFixMe\n  const devices = await navigator.usb.getDevices();\n  return devices.filter((d) => d.vendorId === ledgerUSBVendorId);\n}\n\nexport async function getFirstLedgerDevice(): Promise<USBDevice> {\n  const existingDevices = await getLedgerDevices();\n  if (existingDevices.length > 0) return existingDevices[0];\n  return requestLedgerDevice();\n}\n\nexport const isSupported = (): Promise<boolean> =>\n  Promise.resolve(\n    !!navigator &&\n      // $FlowFixMe\n      !!navigator.usb &&\n      typeof navigator.usb.getDevices === \"function\"\n  );\n"]},"metadata":{},"sourceType":"module"}