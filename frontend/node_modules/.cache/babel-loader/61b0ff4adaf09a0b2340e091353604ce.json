{"ast":null,"code":"var _jsxFileName = \"/app/src/components/swap/ConfirmSwapModal.tsx\",\n  _s = $RefreshSig$();\nimport { currencyEquals } from '@ubeswap/sdk';\nimport React, { useCallback, useMemo } from 'react';\nimport TransactionConfirmationModal, { ConfirmationModalContent, TransactionErrorContent } from '../TransactionConfirmationModal';\nimport SwapModalHeader from './SwapModalHeader';\n\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction tradeMeaningfullyDiffers(tradeA, tradeB) {\n  return tradeA.tradeType !== tradeB.tradeType || !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) || !tradeA.inputAmount.equalTo(tradeB.inputAmount) || !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) || !tradeA.outputAmount.equalTo(tradeB.outputAmount);\n}\nexport default function ConfirmSwapModal(_ref) {\n  _s();\n  var _trade$inputAmount, _trade$inputAmount2, _trade$inputAmount2$c, _trade$outputAmount, _trade$outputAmount2, _trade$outputAmount2$;\n  let {\n    trade,\n    originalTrade,\n    onAcceptChanges,\n    allowedSlippage,\n    onConfirm,\n    onDismiss,\n    recipient,\n    swapErrorMessage,\n    isOpen,\n    attemptingTxn,\n    txHash\n  } = _ref;\n  const showAcceptChanges = useMemo(() => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)), [originalTrade, trade]);\n  const modalHeader = useCallback(() => {\n    return /*#__PURE__*/_jsxDEV(SwapModalHeader, {\n      trade: undefined,\n      allowedSlippage: allowedSlippage,\n      recipient: recipient,\n      showAcceptChanges: showAcceptChanges,\n      onAcceptChanges: onAcceptChanges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade]);\n  const pendingText = \"Swapping \".concat(trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : _trade$inputAmount.toSignificant(6), \" \").concat(trade === null || trade === void 0 ? void 0 : (_trade$inputAmount2 = trade.inputAmount) === null || _trade$inputAmount2 === void 0 ? void 0 : (_trade$inputAmount2$c = _trade$inputAmount2.currency) === null || _trade$inputAmount2$c === void 0 ? void 0 : _trade$inputAmount2$c.symbol, \" for \").concat(trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : _trade$outputAmount.toSignificant(6), \" \").concat(trade === null || trade === void 0 ? void 0 : (_trade$outputAmount2 = trade.outputAmount) === null || _trade$outputAmount2 === void 0 ? void 0 : (_trade$outputAmount2$ = _trade$outputAmount2.currency) === null || _trade$outputAmount2$ === void 0 ? void 0 : _trade$outputAmount2$.symbol);\n  const confirmationContent = useCallback(() => swapErrorMessage ? /*#__PURE__*/_jsxDEV(TransactionErrorContent, {\n    onDismiss: onDismiss,\n    message: swapErrorMessage\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(ConfirmationModalContent, {\n    title: \"Confirm XXX\",\n    onDismiss: onDismiss,\n    topContent: modalHeader\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this), [onDismiss, modalHeader, swapErrorMessage]);\n  return /*#__PURE__*/_jsxDEV(TransactionConfirmationModal, {\n    isOpen: isOpen,\n    onDismiss: onDismiss,\n    attemptingTxn: attemptingTxn,\n    hash: txHash,\n    content: confirmationContent,\n    pendingText: pendingText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(ConfirmSwapModal, \"TFzdHmehsqW+KNa95x8xRNPeKu8=\");\n_c = ConfirmSwapModal;\nvar _c;\n$RefreshReg$(_c, \"ConfirmSwapModal\");","map":{"version":3,"names":["currencyEquals","React","useCallback","useMemo","TransactionConfirmationModal","ConfirmationModalContent","TransactionErrorContent","SwapModalHeader","jsxDEV","_jsxDEV","tradeMeaningfullyDiffers","tradeA","tradeB","tradeType","inputAmount","currency","equalTo","outputAmount","ConfirmSwapModal","_ref","_s","_trade$inputAmount","_trade$inputAmount2","_trade$inputAmount2$c","_trade$outputAmount","_trade$outputAmount2","_trade$outputAmount2$","trade","originalTrade","onAcceptChanges","allowedSlippage","onConfirm","onDismiss","recipient","swapErrorMessage","isOpen","attemptingTxn","txHash","showAcceptChanges","Boolean","modalHeader","undefined","fileName","_jsxFileName","lineNumber","columnNumber","pendingText","concat","toSignificant","symbol","confirmationContent","message","title","topContent","hash","content","_c","$RefreshReg$"],"sources":["/app/src/components/swap/ConfirmSwapModal.tsx"],"sourcesContent":["import { currencyEquals, Trade } from '@ubeswap/sdk'\nimport React, { useCallback, useMemo } from 'react'\n\nimport TransactionConfirmationModal, {\n  ConfirmationModalContent,\n  TransactionErrorContent,\n} from '../TransactionConfirmationModal'\nimport SwapModalFooter from './SwapModalFooter'\nimport SwapModalHeader from './SwapModalHeader'\n\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */\nfunction tradeMeaningfullyDiffers(tradeA: Trade, tradeB: Trade): boolean {\n  return (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\n    !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) ||\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\n  )\n}\n\nexport default function ConfirmSwapModal({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  recipient,\n  swapErrorMessage,\n  isOpen,\n  attemptingTxn,\n  txHash,\n}: {\n  isOpen: boolean\n  trade: Trade | undefined\n  originalTrade: Trade | undefined\n  attemptingTxn: boolean\n  txHash: string | undefined\n  recipient: string | null\n  allowedSlippage: number\n  onAcceptChanges: () => void\n  onConfirm: () => void\n  swapErrorMessage: string | undefined\n  onDismiss: () => void\n}) {\n  const showAcceptChanges = useMemo(\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\n    [originalTrade, trade]\n  )\n  const modalHeader = useCallback(() => {\n    return (\n      <SwapModalHeader\n        trade={undefined}\n        allowedSlippage={allowedSlippage}\n        recipient={recipient}\n        showAcceptChanges={showAcceptChanges}\n        onAcceptChanges={onAcceptChanges}\n      />\n    )\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade])\n\n  const pendingText = `Swapping ${trade?.inputAmount?.toSignificant(6)} ${\n    trade?.inputAmount?.currency?.symbol\n  } for ${trade?.outputAmount?.toSignificant(6)} ${trade?.outputAmount?.currency?.symbol}`\n\n  const confirmationContent = useCallback(\n    () =>\n      swapErrorMessage ? (\n        <TransactionErrorContent onDismiss={onDismiss} message={swapErrorMessage} />\n      ) : (\n        <ConfirmationModalContent title={`Confirm XXX`} onDismiss={onDismiss} topContent={modalHeader} />\n      ),\n    [onDismiss, modalHeader, swapErrorMessage]\n  )\n\n  return (\n    <TransactionConfirmationModal\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      content={confirmationContent}\n      pendingText={pendingText}\n    />\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}