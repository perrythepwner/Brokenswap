{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tryObtainValueWithRetries = exports.conditionWatcher = exports.repeatTask = void 0;\nvar future_1 = require(\"./future\");\nvar logger_1 = require(\"./logger\");\n/**\n * Given task options, creates the task logger\n *\n * It will prefix taskName to the logs\n */\nvar createTaskLogger = function createTaskLogger(opts) {\n  if (opts.logger) {\n    return (0, logger_1.prefixLogger)(opts.name, opts.logger);\n  } else {\n    return logger_1.noopLogger;\n  }\n};\n/**\n * Runs an async function eternally until stopped\n *\n * @param fn function to run\n */\nfunction repeatTask(opts, fn) {\n  var _this = this;\n  var logger = createTaskLogger(opts);\n  var isActive = true;\n  var ctx = {\n    executionNumber: 0,\n    stopTask: function stopTask() {\n      isActive = false;\n    }\n  };\n  var loop = function loop() {\n    return __awaiter(_this, void 0, void 0, function () {\n      var err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!isActive) {\n              return [2 /*return*/];\n            }\n\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3, 4, 5]);\n            ctx.executionNumber++;\n            return [4 /*yield*/, fn(ctx)];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 5];\n          case 3:\n            err_1 = _a.sent();\n            logger(\"Failed with error: \".concat(err_1.message));\n            logger(err_1);\n            return [3 /*break*/, 5];\n          case 4:\n            if (isActive) {\n              setTimeout(loop, opts.timeInBetweenMS);\n            }\n            return [7 /*endfinally*/];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  if (opts.initialDelayMS != null) {\n    setTimeout(loop, opts.initialDelayMS);\n  } else {\n    // tslint:disable-next-line: no-floating-promises\n    loop();\n  }\n  return {\n    stop: ctx.stopTask,\n    isRunning: function isRunning() {\n      return isActive;\n    }\n  };\n}\nexports.repeatTask = repeatTask;\nfunction conditionWatcher(opts) {\n  var _this = this;\n  return repeatTask(opts, function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var val;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, opts.pollCondition()];\n          case 1:\n            val = _a.sent();\n            if (!val) return [3 /*break*/, 3];\n            ctx.stopTask();\n            return [4 /*yield*/, opts.onSuccess()];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  });\n}\n\nexports.conditionWatcher = conditionWatcher;\nfunction tryObtainValueWithRetries(opts) {\n  var _this = this;\n  var futureValue = new future_1.Future();\n  var task = repeatTask(opts, function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var val;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(ctx.executionNumber > opts.maxAttemps)) return [3 /*break*/, 1];\n            ctx.stopTask();\n            futureValue.reject(new Error('Max Retries & no value'));\n            return [3 /*break*/, 3];\n          case 1:\n            return [4 /*yield*/, opts.tryGetValue()];\n          case 2:\n            val = _a.sent();\n            if (val != null) {\n              futureValue.resolve(val);\n              ctx.stopTask();\n            }\n            _a.label = 3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  });\n\n  return __assign(__assign({}, task), {\n    stop: function stop() {\n      task.stop();\n      futureValue.reject(new Error('Cancelled'));\n    },\n    onValue: function onValue() {\n      return futureValue.asPromise();\n    }\n  });\n}\nexports.tryObtainValueWithRetries = tryObtainValueWithRetries;","map":{"version":3,"sources":["../src/task.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tryObtainValueWithRetries = exports.conditionWatcher = exports.repeatTask = void 0;\nvar future_1 = require(\"./future\");\nvar logger_1 = require(\"./logger\");\n/**\n * Given task options, creates the task logger\n *\n * It will prefix taskName to the logs\n */\nvar createTaskLogger = function (opts) {\n    if (opts.logger) {\n        return (0, logger_1.prefixLogger)(opts.name, opts.logger);\n    }\n    else {\n        return logger_1.noopLogger;\n    }\n};\n/**\n * Runs an async function eternally until stopped\n *\n * @param fn function to run\n */\nfunction repeatTask(opts, fn) {\n    var _this = this;\n    var logger = createTaskLogger(opts);\n    var isActive = true;\n    var ctx = {\n        executionNumber: 0,\n        stopTask: function () {\n            isActive = false;\n        },\n    };\n    var loop = function () { return __awaiter(_this, void 0, void 0, function () {\n        var err_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!isActive) {\n                        return [2 /*return*/];\n                    }\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 3, 4, 5]);\n                    ctx.executionNumber++;\n                    return [4 /*yield*/, fn(ctx)];\n                case 2:\n                    _a.sent();\n                    return [3 /*break*/, 5];\n                case 3:\n                    err_1 = _a.sent();\n                    logger(\"Failed with error: \".concat(err_1.message));\n                    logger(err_1);\n                    return [3 /*break*/, 5];\n                case 4:\n                    if (isActive) {\n                        setTimeout(loop, opts.timeInBetweenMS);\n                    }\n                    return [7 /*endfinally*/];\n                case 5: return [2 /*return*/];\n            }\n        });\n    }); };\n    if (opts.initialDelayMS != null) {\n        setTimeout(loop, opts.initialDelayMS);\n    }\n    else {\n        // tslint:disable-next-line: no-floating-promises\n        loop();\n    }\n    return {\n        stop: ctx.stopTask,\n        isRunning: function () {\n            return isActive;\n        },\n    };\n}\nexports.repeatTask = repeatTask;\nfunction conditionWatcher(opts) {\n    var _this = this;\n    return repeatTask(opts, function (ctx) { return __awaiter(_this, void 0, void 0, function () {\n        var val;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, opts.pollCondition()];\n                case 1:\n                    val = _a.sent();\n                    if (!val) return [3 /*break*/, 3];\n                    ctx.stopTask();\n                    return [4 /*yield*/, opts.onSuccess()];\n                case 2:\n                    _a.sent();\n                    _a.label = 3;\n                case 3: return [2 /*return*/];\n            }\n        });\n    }); });\n}\nexports.conditionWatcher = conditionWatcher;\nfunction tryObtainValueWithRetries(opts) {\n    var _this = this;\n    var futureValue = new future_1.Future();\n    var task = repeatTask(opts, function (ctx) { return __awaiter(_this, void 0, void 0, function () {\n        var val;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!(ctx.executionNumber > opts.maxAttemps)) return [3 /*break*/, 1];\n                    ctx.stopTask();\n                    futureValue.reject(new Error('Max Retries & no value'));\n                    return [3 /*break*/, 3];\n                case 1: return [4 /*yield*/, opts.tryGetValue()];\n                case 2:\n                    val = _a.sent();\n                    if (val != null) {\n                        futureValue.resolve(val);\n                        ctx.stopTask();\n                    }\n                    _a.label = 3;\n                case 3: return [2 /*return*/];\n            }\n        });\n    }); });\n    return __assign(__assign({}, task), { stop: function () {\n            task.stop();\n            futureValue.reject(new Error('Cancelled'));\n        }, onValue: function () { return futureValue.asPromise(); } });\n}\nexports.tryObtainValueWithRetries = tryObtainValueWithRetries;\n//# sourceMappingURL=task.js.map"]},"metadata":{},"sourceType":"script"}