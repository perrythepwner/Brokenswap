{"ast":null,"code":"import _asyncToGenerator from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{useCelo}from'@celo/react-celo';import{JSBI,TokenAmount}from'@ubeswap/sdk';import{UBE}from'constants/tokens';import{BigNumber}from'ethers';import{useReleaseUbeContract,useTokenContract}from'hooks/useContract';import{useEffect,useState}from'react';import{useSingleContractMultipleData}from'state/multicall/hooks';import{useUnclaimedStakingRewards}from'state/stake/hooks';const DECIMALS=BigNumber.from(10).pow(18);const HARDCAP=BigNumber.from(100000000).mul(DECIMALS);const RELEASED=BigNumber.from(25700000).mul(DECIMALS);// Addresses that do not contribute to circulating supply\nconst nonCirculatingAddresses={MiningReleaseEscrow:'0x9d0a92AA8832518328D14Ed5930eC6B44448165e',PoolManager:'0x9Ee3600543eCcc85020D6bc77EB553d1747a65D2'};/**\n * Fetches the circulating supply\n */export const useCirculatingSupply=()=>{const{network}=useCelo();const chainId=network.chainId;const ube=chainId?UBE[chainId]:undefined;const ubeContract=useTokenContract(ube===null||ube===void 0?void 0:ube.address);const releaseUbe=useReleaseUbeContract();// compute amount that is locked up\nconst balancesRaw=useSingleContractMultipleData(ubeContract,'balanceOf',Object.values(nonCirculatingAddresses).map(addr=>[addr]));// if we are still loading, do not load\nconst balances=balancesRaw!==null&&balancesRaw!==void 0&&balancesRaw.find(result=>!result.result)?null:balancesRaw.map(b=>{var _b$result$,_b$result;return(_b$result$=(_b$result=b.result)===null||_b$result===void 0?void 0:_b$result[0])!==null&&_b$result$!==void 0?_b$result$:BigNumber.from(0);});const lockedBalancesSum=balances===null||balances===void 0?void 0:balances.reduce((sum,b)=>b.add(sum),BigNumber.from(0));// add amount of tokens that could be claimed but are not being claimed\nconst{noncirculatingSupply}=useUnclaimedStakingRewards();// compute amount that has been released\nconst[released,setReleased]=useState(null);useEffect(()=>{void _asyncToGenerator(function*(){if(releaseUbe){setReleased(RELEASED.sub(yield releaseUbe.releasableSupplyOfPrincipal(RELEASED)));}})();},[releaseUbe]);if(!lockedBalancesSum||!released||!noncirculatingSupply){return undefined;}return ube?new TokenAmount(ube,JSBI.BigInt(HARDCAP.sub(lockedBalancesSum).sub(released).sub(noncirculatingSupply).toString())):undefined;};","map":null,"metadata":{},"sourceType":"module"}