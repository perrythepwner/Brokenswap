{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitArrayType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst byteArray_1 = require(\"../util/byteArray\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst composite_1 = require(\"./composite\");\nconst bitArray_1 = require(\"../view/bitArray\");\nconst bitArray_2 = require(\"../viewDU/bitArray\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * BitArray: ordered array collection of boolean values\n * - Value: `BitArray`, @see BitArray for a justification of its memory efficiency and performance\n * - View: `BitArrayTreeView`\n * - ViewDU: `BitArrayTreeViewDU`\n */\nclass BitArrayType extends composite_1.CompositeType {\n  constructor() {\n    super(...arguments);\n    this.isViewMutable = true;\n  }\n  getView(tree) {\n    return new bitArray_1.BitArrayTreeView(this, tree);\n  }\n  getViewDU(node) {\n    return new bitArray_2.BitArrayTreeViewDU(this, node);\n  }\n  commitView(view) {\n    return view.node;\n  }\n  commitViewDU(view) {\n    view.commit();\n    return view.node;\n  }\n  cacheOfViewDU(view) {\n    return view.cache;\n  }\n  // Merkleization\n  getRoots(value) {\n    return merkleize_1.splitIntoRootChunks(value.uint8Array);\n  }\n  // Proofs\n  getPropertyGindex() {\n    // Stop navigating below this type. Must only request complete data\n    return null;\n  }\n  getPropertyType() {\n    /* istanbul ignore next - unreachable code, getPropertyGindex null return prevents this call */\n    throw Error(\"Must only request BitArray complete data\");\n  }\n  getIndexProperty() {\n    /* istanbul ignore next - unreachable code, getPropertyGindex null return prevents this call */\n    throw Error(\"Must only request BitArray complete data\");\n  }\n  tree_fromProofNode(node) {\n    return {\n      node,\n      done: true\n    };\n  }\n  tree_getLeafGindices(rootGindex, rootNode) {\n    const byteLen = this.tree_getByteLen(rootNode);\n    const chunkCount = Math.ceil(byteLen / 32);\n    const startIndex = persistent_merkle_tree_1.concatGindices([rootGindex, persistent_merkle_tree_1.toGindex(this.depth, BigInt(0))]);\n    const gindices = new Array(chunkCount);\n    for (let i = 0, gindex = startIndex; i < chunkCount; i++, gindex++) {\n      gindices[i] = gindex;\n    }\n    // include the length chunk\n    if (this.isList) {\n      gindices.push(persistent_merkle_tree_1.concatGindices([rootGindex, composite_1.LENGTH_GINDEX]));\n    }\n    return gindices;\n  }\n  // JSON\n  fromJson(json) {\n    const uint8Array = byteArray_1.fromHexString(json);\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    // value_deserializeFromBytes MUST validate length (limit, or length)\n    return this.value_deserializeFromBytes({\n      uint8Array,\n      dataView\n    }, 0, uint8Array.length);\n  }\n  toJson(value) {\n    return byteArray_1.toHexString(this.serialize(value));\n  }\n  clone(value) {\n    return value.clone();\n  }\n  equals(a, b) {\n    return a.bitLen === b.bitLen && byteArray_1.byteArrayEquals(a.uint8Array, b.uint8Array);\n  }\n}\nexports.BitArrayType = BitArrayType;","map":null,"metadata":{},"sourceType":"script"}