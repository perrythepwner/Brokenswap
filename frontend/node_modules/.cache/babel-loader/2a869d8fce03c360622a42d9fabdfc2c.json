{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ImageBase = void 0;\nvar ImageBase = /** @class */function () {\n  function ImageBase() {}\n  ImageBase.prototype.scaleDown = function (opts) {\n    var width = this.getWidth();\n    var height = this.getHeight();\n    var ratio = 1;\n    if (opts.maxDimension > 0) {\n      var maxSide = Math.max(width, height);\n      if (maxSide > opts.maxDimension) ratio = opts.maxDimension / maxSide;\n    } else {\n      ratio = 1 / opts.quality;\n    }\n    if (ratio < 1) this.resize(width * ratio, height * ratio, ratio);\n  };\n  ImageBase.prototype.applyFilter = function (filter) {\n    var imageData = this.getImageData();\n    if (typeof filter === 'function') {\n      var pixels = imageData.data;\n      var n = pixels.length / 4;\n      var offset = void 0,\n        r = void 0,\n        g = void 0,\n        b = void 0,\n        a = void 0;\n      for (var i = 0; i < n; i++) {\n        offset = i * 4;\n        r = pixels[offset + 0];\n        g = pixels[offset + 1];\n        b = pixels[offset + 2];\n        a = pixels[offset + 3];\n        // Mark ignored color\n        if (!filter(r, g, b, a)) pixels[offset + 3] = 0;\n      }\n    }\n    return Promise.resolve(imageData);\n  };\n  return ImageBase;\n}();\nexports.ImageBase = ImageBase;","map":{"version":3,"sources":["../../src/image/base.ts"],"names":[],"mappings":";;;;;;AAEA,IAAA,SAAA,GAAA,aAAA,YAAA;EAAA,SAAA,SAAA,CAAA,EAAA,CA+CA;EApCE,SAAA,CAAA,SAAA,CAAA,SAAS,GAAT,UAAW,IAAa,EAAA;IACtB,IAAI,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAA,CAAE;IACnC,IAAI,MAAM,GAAW,IAAI,CAAC,SAAS,CAAA,CAAE;IAErC,IAAI,KAAK,GAAW,CAAC;IAErB,IAAI,IAAI,CAAC,YAAY,GAAG,CAAC,EAAE;MACzB,IAAI,OAAO,GAAW,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC;MAC7C,IAAI,OAAO,GAAG,IAAI,CAAC,YAAY,EAAE,KAAK,GAAG,IAAI,CAAC,YAAY,GAAG,OAAO;KACrE,MAAM;MACL,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO;IACzB;IAED,IAAI,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,EAAE,MAAM,GAAG,KAAK,EAAE,KAAK,CAAC;EAClE,CAAC;EAED,SAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAa,MAAc,EAAA;IACzB,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,CAAA,CAAE;IAEnC,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;MAChC,IAAI,MAAM,GAAG,SAAS,CAAC,IAAI;MAC3B,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC;MACzB,IAAI,MAAM,GAAA,KAAA,CAAA;QAAE,CAAC,GAAA,KAAA,CAAA;QAAE,CAAC,GAAA,KAAA,CAAA;QAAE,CAAC,GAAA,KAAA,CAAA;QAAE,CAAC,GAAA,KAAA,CAAA;MACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1B,MAAM,GAAG,CAAC,GAAG,CAAC;QACd,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QACtB,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QACtB,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QACtB,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QACtB;QACA,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC;MAChD;IACF;IAED,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC;EACnC,CAAC;EACH,OAAA,SAAC;AAAD,CAAC,CAAA,CAAA;AA/CqB,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImageBase = void 0;\nvar ImageBase = /** @class */ (function () {\n    function ImageBase() {\n    }\n    ImageBase.prototype.scaleDown = function (opts) {\n        var width = this.getWidth();\n        var height = this.getHeight();\n        var ratio = 1;\n        if (opts.maxDimension > 0) {\n            var maxSide = Math.max(width, height);\n            if (maxSide > opts.maxDimension)\n                ratio = opts.maxDimension / maxSide;\n        }\n        else {\n            ratio = 1 / opts.quality;\n        }\n        if (ratio < 1)\n            this.resize(width * ratio, height * ratio, ratio);\n    };\n    ImageBase.prototype.applyFilter = function (filter) {\n        var imageData = this.getImageData();\n        if (typeof filter === 'function') {\n            var pixels = imageData.data;\n            var n = pixels.length / 4;\n            var offset = void 0, r = void 0, g = void 0, b = void 0, a = void 0;\n            for (var i = 0; i < n; i++) {\n                offset = i * 4;\n                r = pixels[offset + 0];\n                g = pixels[offset + 1];\n                b = pixels[offset + 2];\n                a = pixels[offset + 3];\n                // Mark ignored color\n                if (!filter(r, g, b, a))\n                    pixels[offset + 3] = 0;\n            }\n        }\n        return Promise.resolve(imageData);\n    };\n    return ImageBase;\n}());\nexports.ImageBase = ImageBase;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"script"}