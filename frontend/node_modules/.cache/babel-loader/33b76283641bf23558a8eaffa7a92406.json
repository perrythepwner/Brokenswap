{"ast":null,"code":"import { focusOn } from './commands';\nimport { getTabbableNodes, contains } from './utils/DOMutils';\n/**\n * for a given `element` in a given `scope` returns focusable siblings\n * @param element - base element\n * @param scope - common parent. Can be document, but better to narrow it down for performance reasons\n * @returns {prev,next} - references to a focusable element before and after\n * @returns undefined - if operation is not applicable\n */\nexport var getRelativeFocusable = function getRelativeFocusable(element, scope) {\n  if (!element || !scope || !contains(scope, element)) {\n    return {};\n  }\n  var focusables = getTabbableNodes([scope], new Map());\n  var current = focusables.findIndex(function (_a) {\n    var node = _a.node;\n    return node === element;\n  });\n  if (current === -1) {\n    // an edge case, when anchor element is not found\n    return undefined;\n  }\n  return {\n    prev: focusables[current - 1],\n    next: focusables[current + 1],\n    first: focusables[0],\n    last: focusables[focusables.length - 1]\n  };\n};\nvar defaultOptions = function defaultOptions(options) {\n  return Object.assign({\n    scope: document.body,\n    cycle: true\n  }, options);\n};\n/**\n * focuses next element in the tab-order\n * @param fromElement - common parent to scope active element search or tab cycle order\n * @param {FocusNextOptions} [options] - focus options\n */\nexport var focusNextElement = function focusNextElement(fromElement, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = defaultOptions(options),\n    scope = _a.scope,\n    cycle = _a.cycle;\n  var solution = getRelativeFocusable(fromElement, scope);\n  if (!solution) {\n    return;\n  }\n  var next = solution.next,\n    first = solution.first;\n  var newTarget = next || cycle && first;\n  if (newTarget) {\n    focusOn(newTarget.node, options.focusOptions);\n  }\n};\n/**\n * focuses prev element in the tab order\n * @param fromElement - common parent to scope active element search or tab cycle order\n * @param {FocusNextOptions} [options] - focus options\n */\nexport var focusPrevElement = function focusPrevElement(fromElement, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = defaultOptions(options),\n    scope = _a.scope,\n    cycle = _a.cycle;\n  var solution = getRelativeFocusable(fromElement, scope);\n  if (!solution) {\n    return;\n  }\n  var prev = solution.prev,\n    last = solution.last;\n  var newTarget = prev || cycle && last;\n  if (newTarget) {\n    focusOn(newTarget.node, options.focusOptions);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}