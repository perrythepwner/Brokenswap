{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isStableTokenContract = exports.CeloTokens = exports.celoTokenInfos = exports.stableTokenInfos = exports.Token = exports.StableToken = void 0;\nvar base_1 = require(\"@celo/base\");\nvar base_2 = require(\"./base\");\nvar base_3 = require(\"@celo/base\");\nObject.defineProperty(exports, \"StableToken\", {\n  enumerable: true,\n  get: function get() {\n    return base_3.StableToken;\n  }\n});\nObject.defineProperty(exports, \"Token\", {\n  enumerable: true,\n  get: function get() {\n    return base_3.Token;\n  }\n});\n/** Basic info for each stable token */\nexports.stableTokenInfos = (_a = {}, _a[base_1.StableToken.cUSD] = {\n  contract: base_2.CeloContract.StableToken,\n  exchangeContract: base_2.CeloContract.Exchange,\n  symbol: base_1.StableToken.cUSD\n}, _a[base_1.StableToken.cEUR] = {\n  contract: base_2.CeloContract.StableTokenEUR,\n  exchangeContract: base_2.CeloContract.ExchangeEUR,\n  symbol: base_1.StableToken.cEUR\n}, _a[base_1.StableToken.cREAL] = {\n  contract: base_2.CeloContract.StableTokenBRL,\n  exchangeContract: base_2.CeloContract.ExchangeBRL,\n  symbol: base_1.StableToken.cREAL\n}, _a);\n/** Basic info for each supported celo token, including stable tokens */\nexports.celoTokenInfos = __assign((_b = {}, _b[base_1.Token.CELO] = {\n  contract: base_2.CeloContract.GoldToken,\n  symbol: base_1.Token.CELO\n}, _b), exports.stableTokenInfos);\n/**\n * A helper class to interact with all Celo tokens, ie CELO and stable tokens\n */\nvar CeloTokens = /** @class */function () {\n  function CeloTokens(contracts, registry) {\n    var _this = this;\n    this.contracts = contracts;\n    this.registry = registry;\n    /**\n     * Gets the address of the contract for the provided token.\n     * @param token the token to get the (proxy) contract address for\n     * @return A promise resolving to the address of the token's contract\n     */\n    this.getAddress = function (token) {\n      return _this.registry.addressFor(exports.celoTokenInfos[token].contract);\n    };\n    this.isStableTokenContract = isStableTokenContract;\n  }\n  /**\n   * Gets an address's balance for each celo token.\n   * @param address the address to look up the balances for\n   * @return a promise resolving to an object containing the address's balance\n   *  for each celo token\n   */\n  CeloTokens.prototype.balancesOf = function (address) {\n    var _this = this;\n    return this.forEachCeloToken(function (info) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var wrapper;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.contracts.getContract(info.contract)];\n            case 1:\n              wrapper = _a.sent();\n              return [2 /*return*/, wrapper.balanceOf(address)];\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Gets the wrapper for each celo token.\n   * @return an promise resolving to an object containing the wrapper for each celo token.\n   */\n  CeloTokens.prototype.getWrappers = function () {\n    var _this = this;\n    return this.forEachCeloToken(function (info) {\n      return _this.contracts.getContract(info.contract);\n    });\n  };\n  /**\n   * Gets the address for each celo token proxy contract.\n   * @return an promise resolving to an object containing the address for each celo token proxy.\n   */\n  CeloTokens.prototype.getAddresses = function () {\n    var _this = this;\n    return this.forEachCeloToken(function (info) {\n      return _this.registry.addressFor(info.contract);\n    });\n  };\n  CeloTokens.prototype.getStablesConfigs = function (humanReadable) {\n    if (humanReadable === void 0) {\n      humanReadable = false;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.forStableCeloToken(function (info) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var stableWrapper;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4 /*yield*/, this.contracts.getContract(info.contract)];\n                case 1:\n                  stableWrapper = _a.sent();\n                  if (humanReadable) {\n                    return [2 /*return*/, stableWrapper.getHumanReadableConfig()];\n                  }\n                  return [2 /*return*/, stableWrapper.getConfig()];\n              }\n            });\n          });\n        })];\n      });\n    });\n  };\n  CeloTokens.prototype.getExchangesConfigs = function (humanReadable) {\n    if (humanReadable === void 0) {\n      humanReadable = false;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.forStableCeloToken(function (info) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var exchangeWrapper;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4 /*yield*/, this.contracts.getContract(info.exchangeContract)];\n                case 1:\n                  exchangeWrapper = _a.sent();\n                  if (humanReadable) {\n                    return [2 /*return*/, exchangeWrapper.getHumanReadableConfig()];\n                  }\n                  return [2 /*return*/, exchangeWrapper.getConfig()];\n              }\n            });\n          });\n        })];\n      });\n    });\n  };\n  /**\n   * Runs fn for each celo token found in celoTokenInfos, and returns the\n   * value of each call in an object keyed by the token.\n   * @param fn the function to be called for each CeloTokenInfo.\n   * @return an object containing the resolved value the call to fn for each\n   *  celo token.\n   */\n  CeloTokens.prototype.forEachCeloToken = function (fn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var wrapperInfoFunction;\n      var _this = this;\n      return __generator(this, function (_a) {\n        wrapperInfoFunction = function wrapperInfoFunction() {\n          return __awaiter(_this, void 0, void 0, function () {\n            var _a, _b;\n            var _this = this;\n            return __generator(this, function (_c) {\n              switch (_c.label) {\n                case 0:\n                  _b = (_a = Promise).all;\n                  return [4 /*yield*/, this.validCeloTokenInfos()];\n                case 1:\n                  return [2 /*return*/, _b.apply(_a, [_c.sent().map(function (info) {\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var fnResult;\n                      var _a;\n                      return __generator(this, function (_b) {\n                        switch (_b.label) {\n                          case 0:\n                            fnResult = fn(info);\n                            _a = {\n                              symbol: info.symbol\n                            };\n                            return [4 /*yield*/, fnResult];\n                          case 1:\n                            return [2 /*return*/, (_a.data = _b.sent(), _a)];\n                        }\n                      });\n                    });\n                  })])];\n              }\n            });\n          });\n        };\n        return [2 /*return*/, this.forEachWrapperInfo(wrapperInfoFunction)];\n      });\n    });\n  };\n  /**\n   * Runs fn for each stable token found in stableTokenInfos, and returns the\n   * value of each call in an object keyed by the token.\n   * @param fn the function to be called for each StableTokenInfo.\n   * @return an object containing the resolved value the call to fn for each\n   *  celo token.\n   */\n  CeloTokens.prototype.forStableCeloToken = function (fn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var wrapperInfoFunction;\n      var _this = this;\n      return __generator(this, function (_a) {\n        wrapperInfoFunction = function wrapperInfoFunction() {\n          return __awaiter(_this, void 0, void 0, function () {\n            var _a, _b;\n            var _this = this;\n            return __generator(this, function (_c) {\n              switch (_c.label) {\n                case 0:\n                  _b = (_a = Promise).all;\n                  return [4 /*yield*/, this.validStableTokenInfos()];\n                case 1:\n                  return [2 /*return*/, _b.apply(_a, [_c.sent().map(function (info) {\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var fnResult;\n                      var _a;\n                      return __generator(this, function (_b) {\n                        switch (_b.label) {\n                          case 0:\n                            fnResult = fn(info);\n                            _a = {\n                              symbol: info.symbol\n                            };\n                            return [4 /*yield*/, fnResult];\n                          case 1:\n                            return [2 /*return*/, (_a.data = _b.sent(), _a)];\n                        }\n                      });\n                    });\n                  })])];\n              }\n            });\n          });\n        };\n        return [2 /*return*/, this.forEachWrapperInfo(wrapperInfoFunction)];\n      });\n    });\n  };\n  CeloTokens.prototype.forEachWrapperInfo = function (fn) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, fn()];\n          case 1:\n            return [2 /*return*/, _a.sent().reduce(function (obj, wrapperInfo) {\n              var _a;\n              return __assign(__assign({}, obj), (_a = {}, _a[wrapperInfo.symbol] = wrapperInfo.data, _a));\n            }, {})];\n        }\n      });\n    });\n  };\n  CeloTokens.prototype.validCeloTokenInfos = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var results;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, Promise.all(Object.values(exports.celoTokenInfos).map(function (info) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _b.trys.push([0, 2,, 3]);\n                      // The registry add the valid addresses to a cache\n                      return [4 /*yield*/, this.registry.addressFor(info.contract)];\n                    case 1:\n                      // The registry add the valid addresses to a cache\n                      _b.sent();\n                      return [2 /*return*/, true];\n                    case 2:\n                      _a = _b.sent();\n                      // The contract was not deployed in the chain\n                      return [2 /*return*/, false];\n                    case 3:\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }))];\n\n          case 1:\n            results = _a.sent();\n            return [2 /*return*/, Object.values(exports.celoTokenInfos).filter(function (_v, index) {\n              return results[index];\n            })];\n        }\n      });\n    });\n  };\n  CeloTokens.prototype.validStableTokenInfos = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var results;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, Promise.all(Object.values(exports.stableTokenInfos).map(function (info) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _b.trys.push([0, 3,, 4]);\n                      // The registry add the valid addresses to a cache\n                      return [4 /*yield*/, this.registry.addressFor(info.contract)];\n                    case 1:\n                      // The registry add the valid addresses to a cache\n                      _b.sent();\n                      return [4 /*yield*/, this.registry.addressFor(info.exchangeContract)];\n                    case 2:\n                      _b.sent();\n                      return [2 /*return*/, true];\n                    case 3:\n                      _a = _b.sent();\n                      // The contract was not deployed in the chain\n                      return [2 /*return*/, false];\n                    case 4:\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            }))];\n\n          case 1:\n            results = _a.sent();\n            return [2 /*return*/, Object.values(exports.stableTokenInfos).filter(function (_v, index) {\n              return results[index];\n            })];\n        }\n      });\n    });\n  };\n  CeloTokens.prototype.getWrapper = function (token) {\n    return this.contracts.getContract(exports.celoTokenInfos[token].contract);\n  };\n  CeloTokens.prototype.getContract = function (token) {\n    return exports.celoTokenInfos[token].contract;\n  };\n  /**\n   * Gets the exchange contract for the provided stable token\n   * @param token the stable token to get exchange contract of\n   * @return The exchange contract for the token\n   */\n  CeloTokens.prototype.getExchangeContract = function (token) {\n    return exports.stableTokenInfos[token].exchangeContract;\n  };\n  /**\n   * Gets the address to use as the feeCurrency when paying for gas with the\n   *  provided token.\n   * @param token the token to get the feeCurrency address for\n   * @return If not CELO, the address of the token's contract. If CELO, undefined.\n   */\n  CeloTokens.prototype.getFeeCurrencyAddress = function (token) {\n    if (token === base_1.Token.CELO) {\n      return undefined;\n    }\n    return this.getAddress(token);\n  };\n  /**\n   * Returns if the provided token is a StableToken\n   * @param token the token\n   * @return if token is a StableToken\n   */\n  CeloTokens.prototype.isStableToken = function (token) {\n    // We cast token as StableToken to make typescript happy\n    return Object.values(base_1.StableToken).includes(token);\n  };\n  return CeloTokens;\n}();\nexports.CeloTokens = CeloTokens;\nfunction isStableTokenContract(contract) {\n  var allStableTokenContracts = Object.values(base_1.StableToken).map(function (token) {\n    return exports.stableTokenInfos[token].contract;\n  });\n  // We cast token as StableTokenContract to make typescript happy\n  return allStableTokenContracts.includes(contract);\n}\nexports.isStableTokenContract = isStableTokenContract;","map":null,"metadata":{},"sourceType":"script"}