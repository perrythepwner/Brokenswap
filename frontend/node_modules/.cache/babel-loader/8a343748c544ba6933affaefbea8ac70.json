{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseAddress = void 0;\nconst address_1 = require(\"@celo/utils/lib/address\");\nfunction invalidChain(chain) {\n  return chain !== 'celo' && chain !== 'eip155';\n}\n// celo:0x123\nfunction parseShortNameAddress(addressLike) {\n  const [celo, address] = addressLike.split(':');\n  if (invalidChain(celo) || !(0, address_1.isValidAddress)(address)) {\n    throw new Error('Invalid short name address');\n  }\n  // default to mainnet\n  return {\n    address,\n    networkId: '42220'\n  };\n}\n// <address>@<chain>:<network_id>\n// 0x123@celo:1234\n// 0x123@eip155:1234\nfunction parseCaip50Address(addressLike) {\n  const [address, chain, networkId] = addressLike.split(/[@:]/);\n  if (!(0, address_1.isValidAddress)(address) || invalidChain(chain)) {\n    throw new Error(\"Invalid CAIP50 address \".concat(address));\n  }\n  return {\n    address,\n    networkId\n  };\n}\n// <chain>:<network_id>:<address>\n// celo:1234:0x123\n// eip155:1234:0x123\nfunction parseCaip10Address(addressLike) {\n  const [chain, networkId, address] = addressLike.split(':');\n  if (!(0, address_1.isValidAddress)(address) || invalidChain(chain)) {\n    throw new Error(\"Invalid CAIP10 address \".concat(address));\n  }\n  return {\n    address,\n    networkId\n  };\n}\nfunction parseAddress(addressLike) {\n  let lastError;\n  for (const parse of [parseCaip10Address, parseCaip50Address, parseShortNameAddress]) {\n    try {\n      return parse(addressLike);\n    } catch (e) {\n      lastError = e;\n    }\n  }\n  throw lastError;\n}\nexports.parseAddress = parseAddress;","map":null,"metadata":{},"sourceType":"script"}