{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeSig = exports.verifySignatureWithoutPrefix = exports.verifyEIP712TypedDataSigner = exports.recoverMessageSigner = exports.recoverTransaction = exports.extractSignature = exports.encodeTransaction = exports.rlpEncodedTx = exports.getHashFromEncoded = exports.chainIdTransformationForSigning = exports.thirtyTwo = exports.sixtyFour = exports.publicKeyPrefix = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar formatter_1 = require(\"@celo/connect/lib/utils/formatter\");\nvar sign_typed_data_utils_1 = require(\"@celo/utils/lib/sign-typed-data-utils\");\nvar signatureUtils_1 = require(\"@celo/utils/lib/signatureUtils\");\nvar debug_1 = __importDefault(require(\"debug\"));\n// @ts-ignore-next-line\nvar eth_lib_1 = require(\"eth-lib\");\nvar ethUtil = __importStar(require(\"ethereumjs-util\"));\nvar debug = (0, debug_1.default)('wallet-base:tx:sign');\n// Original code taken from\n// https://github.com/ethereum/web3.js/blob/1.x/packages/web3-eth-accounts/src/index.js\n// 0x04 prefix indicates that the key is not compressed\n// https://tools.ietf.org/html/rfc5480#section-2.2\nexports.publicKeyPrefix = 0x04;\nexports.sixtyFour = 64;\nexports.thirtyTwo = 32;\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\n// Simple replay attack protection\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md\nfunction chainIdTransformationForSigning(chainId) {\n  return chainId * 2 + 35;\n}\nexports.chainIdTransformationForSigning = chainIdTransformationForSigning;\nfunction getHashFromEncoded(rlpEncode) {\n  return eth_lib_1.hash.keccak256(rlpEncode);\n}\nexports.getHashFromEncoded = getHashFromEncoded;\nfunction trimLeadingZero(hex) {\n  while (hex && hex.startsWith('0x0')) {\n    hex = (0, address_1.ensureLeading0x)(hex.slice(3));\n  }\n  return hex;\n}\nfunction makeEven(hex) {\n  if (hex.length % 2 === 1) {\n    hex = hex.replace('0x', '0x0');\n  }\n  return hex;\n}\nfunction signatureFormatter(signature) {\n  return {\n    v: stringNumberToHex(signature.v),\n    r: makeEven(trimLeadingZero((0, address_1.ensureLeading0x)(signature.r.toString('hex')))),\n    s: makeEven(trimLeadingZero((0, address_1.ensureLeading0x)(signature.s.toString('hex'))))\n  };\n}\nfunction stringNumberToHex(num) {\n  var auxNumber = Number(num);\n  if (num === '0x' || num === undefined || auxNumber === 0) {\n    return '0x';\n  }\n  return eth_lib_1.bytes.fromNumber(auxNumber);\n}\nfunction rlpEncodedTx(tx) {\n  var _a, _b;\n  if (!tx.gas) {\n    throw new Error('\"gas\" is missing');\n  }\n  if (isNullOrUndefined(tx.chainId) || isNullOrUndefined(tx.gasPrice) || isNullOrUndefined(tx.nonce)) {\n    throw new Error('One of the values \"chainId\", \"gasPrice\", or \"nonce\" couldn\\'t be fetched: ' + JSON.stringify({\n      chainId: tx.chainId,\n      gasPrice: tx.gasPrice,\n      nonce: tx.nonce\n    }));\n  }\n  if (tx.nonce < 0 || tx.gas < 0 || tx.gasPrice < 0 || tx.chainId < 0) {\n    throw new Error('Gas, gasPrice, nonce or chainId is lower than 0');\n  }\n  var transaction = (0, formatter_1.inputCeloTxFormatter)(tx);\n  transaction.to = eth_lib_1.bytes.fromNat(tx.to || '0x').toLowerCase();\n  transaction.nonce = Number((tx.nonce !== '0x' ? tx.nonce : 0) || 0);\n  transaction.data = eth_lib_1.bytes.fromNat(tx.data || '0x').toLowerCase();\n  transaction.value = stringNumberToHex((_a = tx.value) === null || _a === void 0 ? void 0 : _a.toString());\n  transaction.feeCurrency = eth_lib_1.bytes.fromNat(tx.feeCurrency || '0x').toLowerCase();\n  transaction.gatewayFeeRecipient = eth_lib_1.bytes.fromNat(tx.gatewayFeeRecipient || '0x').toLowerCase();\n  transaction.gatewayFee = stringNumberToHex(tx.gatewayFee);\n  transaction.gasPrice = stringNumberToHex((_b = tx.gasPrice) === null || _b === void 0 ? void 0 : _b.toString());\n  transaction.gas = stringNumberToHex(tx.gas);\n  transaction.chainId = tx.chainId || 1;\n  // This order should match the order in Geth.\n  // https://github.com/celo-org/celo-blockchain/blob/027dba2e4584936cc5a8e8993e4e27d28d5247b8/core/types/transaction.go#L65\n  var rlpEncode = eth_lib_1.RLP.encode([stringNumberToHex(transaction.nonce), transaction.gasPrice, transaction.gas, transaction.feeCurrency, transaction.gatewayFeeRecipient, transaction.gatewayFee, transaction.to, transaction.value, transaction.data, stringNumberToHex(transaction.chainId), '0x', '0x']);\n  return {\n    transaction: transaction,\n    rlpEncode: rlpEncode\n  };\n}\nexports.rlpEncodedTx = rlpEncodedTx;\nfunction encodeTransaction(rlpEncoded, signature) {\n  return __awaiter(this, void 0, void 0, function () {\n    var sanitizedSignature, v, r, s, rawTx, rawTransaction, hash, result;\n    return __generator(this, function (_a) {\n      sanitizedSignature = signatureFormatter(signature);\n      v = sanitizedSignature.v;\n      r = sanitizedSignature.r;\n      s = sanitizedSignature.s;\n      rawTx = eth_lib_1.RLP.decode(rlpEncoded.rlpEncode).slice(0, 9).concat([v, r, s]);\n      rawTransaction = eth_lib_1.RLP.encode(rawTx);\n      hash = getHashFromEncoded(rawTransaction);\n      result = {\n        tx: {\n          nonce: rlpEncoded.transaction.nonce.toString(),\n          gasPrice: rlpEncoded.transaction.gasPrice.toString(),\n          gas: rlpEncoded.transaction.gas.toString(),\n          to: rlpEncoded.transaction.to.toString(),\n          value: rlpEncoded.transaction.value.toString(),\n          input: rlpEncoded.transaction.data,\n          feeCurrency: rlpEncoded.transaction.feeCurrency.toString(),\n          gatewayFeeRecipient: rlpEncoded.transaction.gatewayFeeRecipient.toString(),\n          gatewayFee: rlpEncoded.transaction.gatewayFee.toString(),\n          v: v,\n          r: r,\n          s: s,\n          hash: hash\n        },\n        raw: rawTransaction\n      };\n      return [2 /*return*/, result];\n    });\n  });\n}\nexports.encodeTransaction = encodeTransaction;\nfunction extractSignature(rawTx) {\n  var rawValues = eth_lib_1.RLP.decode(rawTx);\n  var r = rawValues[10];\n  var s = rawValues[11];\n  // Account.recover cannot handle canonicalized signatures\n  // A canonicalized signature may have the first byte removed if its value is 0\n  r = (0, address_1.ensureLeading0x)((0, address_1.trimLeading0x)(r).padStart(64, '0'));\n  s = (0, address_1.ensureLeading0x)((0, address_1.trimLeading0x)(s).padStart(64, '0'));\n  return {\n    v: rawValues[9],\n    r: r,\n    s: s\n  };\n}\nexports.extractSignature = extractSignature;\n// Recover transaction and sender address from a raw transaction.\n// This is used for testing.\nfunction recoverTransaction(rawTx) {\n  var rawValues = eth_lib_1.RLP.decode(rawTx);\n  debug('signing-utils@recoverTransaction: values are %s', rawValues);\n  var recovery = eth_lib_1.bytes.toNumber(rawValues[9]);\n  // tslint:disable-next-line:no-bitwise\n  var chainId = eth_lib_1.bytes.fromNumber(recovery - 35 >> 1);\n  var celoTx = {\n    nonce: rawValues[0].toLowerCase() === '0x' ? 0 : parseInt(rawValues[0], 16),\n    gasPrice: rawValues[1].toLowerCase() === '0x' ? 0 : parseInt(rawValues[1], 16),\n    gas: rawValues[2].toLowerCase() === '0x' ? 0 : parseInt(rawValues[2], 16),\n    feeCurrency: rawValues[3],\n    gatewayFeeRecipient: rawValues[4],\n    gatewayFee: rawValues[5],\n    to: rawValues[6],\n    value: rawValues[7],\n    data: rawValues[8],\n    chainId: chainId\n  };\n  var r = rawValues[10];\n  var s = rawValues[11];\n  // Account.recover cannot handle canonicalized signatures\n  // A canonicalized signature may have the first byte removed if its value is 0\n  r = (0, address_1.ensureLeading0x)((0, address_1.trimLeading0x)(r).padStart(64, '0'));\n  s = (0, address_1.ensureLeading0x)((0, address_1.trimLeading0x)(s).padStart(64, '0'));\n  var signature = eth_lib_1.account.encodeSignature([rawValues[9], r, s]);\n  var extraData = recovery < 35 ? [] : [chainId, '0x', '0x'];\n  var signingData = rawValues.slice(0, 9).concat(extraData);\n  var signingDataHex = eth_lib_1.RLP.encode(signingData);\n  var signer = eth_lib_1.account.recover(getHashFromEncoded(signingDataHex), signature);\n  return [celoTx, signer];\n}\nexports.recoverTransaction = recoverTransaction;\nfunction recoverMessageSigner(signingDataHex, signedData) {\n  var dataBuff = ethUtil.toBuffer(signingDataHex);\n  var msgHashBuff = ethUtil.hashPersonalMessage(dataBuff);\n  var signature = ethUtil.fromRpcSig(signedData);\n  var publicKey = ethUtil.ecrecover(msgHashBuff, signature.v, signature.r, signature.s);\n  var address = ethUtil.pubToAddress(publicKey, true);\n  return (0, address_1.ensureLeading0x)(address.toString('hex'));\n}\nexports.recoverMessageSigner = recoverMessageSigner;\nfunction verifyEIP712TypedDataSigner(typedData, signedData, expectedAddress) {\n  var dataBuff = (0, sign_typed_data_utils_1.generateTypedDataHash)(typedData);\n  var trimmedData = dataBuff.toString('hex');\n  return verifySignatureWithoutPrefix((0, address_1.ensureLeading0x)(trimmedData), signedData, expectedAddress);\n}\nexports.verifyEIP712TypedDataSigner = verifyEIP712TypedDataSigner;\nfunction verifySignatureWithoutPrefix(messageHash, signature, signer) {\n  try {\n    (0, signatureUtils_1.parseSignatureWithoutPrefix)(messageHash, signature, signer);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\nexports.verifySignatureWithoutPrefix = verifySignatureWithoutPrefix;\nfunction decodeSig(sig) {\n  var _a = eth_lib_1.account.decodeSignature(sig),\n    v = _a[0],\n    r = _a[1],\n    s = _a[2];\n  return {\n    v: parseInt(v, 16),\n    r: ethUtil.toBuffer(r),\n    s: ethUtil.toBuffer(s)\n  };\n}\nexports.decodeSig = decodeSig;","map":null,"metadata":{},"sourceType":"script"}