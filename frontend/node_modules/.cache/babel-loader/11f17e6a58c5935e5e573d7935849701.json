{"ast":null,"code":"import * as React from \"react\";\nimport { unwrapQueryRef } from \"../cache/QueryReference.js\";\nimport { __use } from \"./internal/index.js\";\nimport { toApolloError } from \"./useSuspenseQuery.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nexport function useReadQuery(queryRef) {\n  var internalQueryRef = unwrapQueryRef(queryRef);\n  invariant(internalQueryRef.promiseCache, 51);\n  var promiseCache = internalQueryRef.promiseCache,\n    key = internalQueryRef.key;\n  if (!promiseCache.has(key)) {\n    promiseCache.set(key, internalQueryRef.promise);\n  }\n  var promise = useSyncExternalStore(React.useCallback(function (forceUpdate) {\n    return internalQueryRef.listen(function (promise) {\n      internalQueryRef.promiseCache.set(internalQueryRef.key, promise);\n      forceUpdate();\n    });\n  }, [internalQueryRef]), function () {\n    return promiseCache.get(key);\n  }, function () {\n    return promiseCache.get(key);\n  });\n  var result = __use(promise);\n  return React.useMemo(function () {\n    return {\n      data: result.data,\n      networkStatus: result.networkStatus,\n      error: toApolloError(result)\n    };\n  }, [result]);\n}","map":{"version":3,"sources":["../../../src/react/hooks/useReadQuery.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAC9B,SAAS,cAAc,QAAQ,4BAA4B;AAE3D,SAAS,KAAK,QAAQ,qBAAqB;AAC3C,SAAS,aAAa,QAAQ,uBAAuB;AACrD,SAAS,SAAS,QAAQ,kCAAkC;AAC5D,SAAS,oBAAoB,QAAQ,2BAA2B;AAEhE,OAAM,SAAU,YAAY,CAAQ,QAA+B,EAAA;EACjE,IAAM,gBAAgB,GAAG,cAAc,CAAC,QAAQ,CAAC;EACjD,SAAS,CACP,gBAAgB,CAAC,YAAY,EAC7B,EAAA,CAAA;MACE,YAAA,GAAA,gBAAA,CAAA,YAAA;IAAA,GAAA,GAAA,gBAAA,CAAA,GAAsE;MACtE,CAAA,YAAA,CAAA,GAAA,CAAA,GAAA,CAAA,EAAA;IAGI,YAAY,CAAA,GAAU,CAAA,GAAA,EAAA,gBAAgB,CAA1B,OAAE,CAAA;EAEtB;MACE,OAAA,GAAA,oBAAsB,CAAA,KAAA,CAAA,WAA0B,CAAA,UAAA,WAAA,EAAA;IACjD,OAAA,gBAAA,CAAA,MAAA,CAAA,UAAA,OAAA,EAAA;MAEK,gBAAU,CAAA,YACd,CAAA,GAAM,CAAA,gBACJ,CAAA,GAAA,EAAC,OAAA,CAAA;MACC,WAAO,CAAA,CAAA;MACL;MACA,gBAAW,CAAE,CAAC,EAAA,YAAA;IAAA,OAAA,YAAA,CAAA,GAAA,CAAA,GAAA,CAAA;EAAA,CAAA,EAAA,YAAA;IAAA,OAAA,YAAA,CAAA,GAAA,CAAA,GAAA,CAAA;EAAA,CAAA,CAAA;MAChB,MAAG,GAAA,KAAA,CAAA,OAAA,CAAA;EACL,OACC,KAAA,CAAA,OAAgB,CAAC,YAEpB;IAII,OAAM;MAEL,IAAK,EAAC,MAAO,CAAC,IAAA;MACnB,aAAO,EAAA,MAAA,CAAA,aAAA;MACL,KAAI,EAAE,aAAW,CAAA,MAAA;KACjB;MACA,MAAA,CAAA,CAAA;AACD","sourcesContent":["import * as React from \"react\";\nimport { unwrapQueryRef } from \"../cache/QueryReference.js\";\nimport type { QueryReference } from \"../cache/QueryReference.js\";\nimport { __use } from \"./internal/index.js\";\nimport { toApolloError } from \"./useSuspenseQuery.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\n\nexport function useReadQuery<TData>(queryRef: QueryReference<TData>) {\n  const internalQueryRef = unwrapQueryRef(queryRef);\n  invariant(\n    internalQueryRef.promiseCache,\n    \"It appears that `useReadQuery` was used outside of `useBackgroundQuery`. \" +\n      \"`useReadQuery` is only supported for use with `useBackgroundQuery`. \" +\n      \"Please ensure you are passing the `queryRef` returned from `useBackgroundQuery`.\"\n  );\n\n  const { promiseCache, key } = internalQueryRef;\n\n  if (!promiseCache.has(key)) {\n    promiseCache.set(key, internalQueryRef.promise);\n  }\n\n  const promise = useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        return internalQueryRef.listen((promise) => {\n          internalQueryRef.promiseCache!.set(internalQueryRef.key, promise);\n          forceUpdate();\n        });\n      },\n      [internalQueryRef]\n    ),\n    () => promiseCache.get(key)!,\n    () => promiseCache.get(key)!\n  );\n\n  const result = __use(promise);\n\n  return React.useMemo(() => {\n    return {\n      data: result.data,\n      networkStatus: result.networkStatus,\n      error: toApolloError(result),\n    };\n  }, [result]);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}