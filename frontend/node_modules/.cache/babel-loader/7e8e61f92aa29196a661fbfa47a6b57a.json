{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst wallet_walletconnect_1 = require(\"@celo/wallet-walletconnect\");\nconst react_1 = require(\"react\");\nconst connectors_1 = require(\"../connectors\");\nconst common_1 = require(\"../connectors/common\");\nconst use_celo_1 = require(\"../use-celo\");\nconst logger_1 = require(\"../utils/logger\");\nconst use_wallet_version_1 = require(\"./use-wallet-version\");\nfunction useWalletConnectConnector(onSubmit, autoOpen, walletId, getDeeplinkUrl) {\n  const {\n    dapp,\n    network,\n    feeCurrency,\n    initConnector,\n    resetInitError,\n    initError,\n    disconnect,\n    manualNetworkMode\n  } = (0, use_celo_1.useCeloInternal)();\n  const [uri, setUri] = (0, react_1.useState)(null);\n  const [loading, setLoading] = (0, react_1.useState)(false);\n  const [error, setError] = (0, react_1.useState)(null);\n  const version = (0, use_wallet_version_1.useWalletVersion)(walletId);\n  const [retryValue, setRetry] = (0, react_1.useState)(0);\n  const retry = (0, react_1.useCallback)(() => {\n    setUri(null);\n    setError(null);\n    resetInitError();\n    disconnect;\n    setLoading(false);\n    setRetry(x => x + 1);\n  }, [disconnect, resetInitError]);\n  (0, react_1.useEffect)(() => {\n    let mounted = true;\n    let connector;\n    void (() => __awaiter(this, void 0, void 0, function* () {\n      if (version == null) {\n        (0, logger_1.getApplicationLogger)().debug('[useWalletConnectConnector]', 'Initialization awaiting for registry');\n        return;\n      }\n      if (!dapp.walletConnectProjectId) {\n        const err = 'Missing WalletConnect Project Id, create one here: https://docs.walletconnect.com/2.0/cloud/relay';\n        (0, logger_1.getApplicationLogger)().debug('[useWalletConnectConnector]', err);\n        setError(err);\n        return;\n      }\n      connector = new connectors_1.WalletConnectConnector(network, manualNetworkMode, feeCurrency, {\n        projectId: dapp.walletConnectProjectId,\n        chainId: network.chainId,\n        init: {\n          metadata: Object.assign(Object.assign({}, dapp), {\n            icons: [dapp.icon]\n          })\n        }\n      }, autoOpen, getDeeplinkUrl, version, walletId);\n      connector.on(common_1.ConnectorEvents.WC_URI_RECEIVED, nextURI => {\n        (0, logger_1.getApplicationLogger)().debug('[useWalletConnectConnector]', 'Generated WC URI', nextURI);\n        if (mounted) {\n          setUri(nextURI);\n        }\n      });\n      connector.on(common_1.ConnectorEvents.DISCONNECTED, () => {\n        (0, logger_1.getApplicationLogger)().debug('[useWalletConnectConnector]', 'Lost connection to WC servers');\n        setError('Connection with wallet was closed.');\n        setUri(null);\n      });\n      try {\n        yield initConnector(connector);\n        onSubmit(connector);\n      } catch (reason) {\n        if (reason === wallet_walletconnect_1.CANCELED) {\n          (0, logger_1.getApplicationLogger)().debug('[useWalletConnectConnector]', 'User canceled connection');\n          // disconnect so we dont have open connectors all over the place\n          return disconnect();\n        }\n        (0, logger_1.getApplicationLogger)().debug('[useWalletConnectConnector]', 'WC error', reason);\n        setError(reason.message);\n      }\n    }))();\n    return () => {\n      // This will be called when unmounting the component rendering the qrcode\n      // if initialised is false, it means the connection was canceled or errored.\n      // We should cleanup the state\n      if (!(connector === null || connector === void 0 ? void 0 : connector.initialised)) {\n        // disconnect so we dont have open connectors all over the place\n        void disconnect();\n      }\n      setUri(null);\n      mounted = false;\n    };\n    // adding all deps here causes an infinite loop.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [walletId, network.chainId, retryValue]);\n  return {\n    uri,\n    error: error || (initError === null || initError === void 0 ? void 0 : initError.message),\n    loading,\n    retry\n  };\n}\nexports.default = useWalletConnectConnector;","map":null,"metadata":{},"sourceType":"script"}