{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { isNetworkRequestSettled } from \"../../core/index.js\";\nimport { createFulfilledPromise, createRejectedPromise } from \"../../utilities/index.js\";\nvar QUERY_REFERENCE_SYMBOL = Symbol();\nexport function wrapQueryRef(internalQueryRef) {\n  var _a;\n  return _a = {}, _a[QUERY_REFERENCE_SYMBOL] = internalQueryRef, _a;\n}\nexport function unwrapQueryRef(queryRef) {\n  return queryRef[QUERY_REFERENCE_SYMBOL];\n}\nvar OBSERVED_CHANGED_OPTIONS = [\"canonizeResults\", \"context\", \"errorPolicy\", \"fetchPolicy\", \"refetchWritePolicy\", \"returnPartialData\"];\nvar InternalQueryReference = function () {\n  function InternalQueryReference(observable, options) {\n    var _this = this;\n    this.listeners = new Set();\n    this.status = \"loading\";\n    this.references = 0;\n    this.handleNext = this.handleNext.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.dispose = this.dispose.bind(this);\n    this.observable = observable;\n    this.result = observable.getCurrentResult(false);\n    this.key = options.key;\n    if (options.onDispose) {\n      this.onDispose = options.onDispose;\n    }\n    if (isNetworkRequestSettled(this.result.networkStatus) || this.result.data && (!this.result.partial || this.watchQueryOptions.returnPartialData)) {\n      this.promise = createFulfilledPromise(this.result);\n      this.status = \"idle\";\n    } else {\n      this.promise = new Promise(function (resolve, reject) {\n        _this.resolve = resolve;\n        _this.reject = reject;\n      });\n    }\n    this.subscription = observable.filter(function (_a) {\n      var data = _a.data;\n      return !equal(data, {});\n    }).subscribe({\n      next: this.handleNext,\n      error: this.handleError\n    });\n    var startDisposeTimer = function startDisposeTimer() {\n      var _a;\n      if (!_this.references) {\n        _this.autoDisposeTimeoutId = setTimeout(_this.dispose, (_a = options.autoDisposeTimeoutMs) !== null && _a !== void 0 ? _a : 30000);\n      }\n    };\n    this.promise.then(startDisposeTimer, startDisposeTimer);\n  }\n  Object.defineProperty(InternalQueryReference.prototype, \"watchQueryOptions\", {\n    get: function get() {\n      return this.observable.options;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  InternalQueryReference.prototype.retain = function () {\n    var _this = this;\n    this.references++;\n    clearTimeout(this.autoDisposeTimeoutId);\n    var disposed = false;\n    return function () {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      _this.references--;\n      setTimeout(function () {\n        if (!_this.references) {\n          _this.dispose();\n        }\n      });\n    };\n  };\n  InternalQueryReference.prototype.didChangeOptions = function (watchQueryOptions) {\n    var _this = this;\n    return OBSERVED_CHANGED_OPTIONS.some(function (option) {\n      return !equal(_this.watchQueryOptions[option], watchQueryOptions[option]);\n    });\n  };\n  InternalQueryReference.prototype.applyOptions = function (watchQueryOptions) {\n    var _a = this.watchQueryOptions,\n      currentFetchPolicy = _a.fetchPolicy,\n      currentCanonizeResults = _a.canonizeResults;\n    if (currentFetchPolicy === \"standby\" && currentFetchPolicy !== watchQueryOptions.fetchPolicy) {\n      this.initiateFetch(this.observable.reobserve(watchQueryOptions));\n    } else {\n      this.observable.silentSetOptions(watchQueryOptions);\n      if (currentCanonizeResults !== watchQueryOptions.canonizeResults) {\n        this.result = __assign(__assign({}, this.result), this.observable.getCurrentResult());\n        this.promise = createFulfilledPromise(this.result);\n      }\n    }\n    return this.promise;\n  };\n  InternalQueryReference.prototype.listen = function (listener) {\n    var _this = this;\n    this.listeners.add(listener);\n    return function () {\n      _this.listeners.delete(listener);\n    };\n  };\n  InternalQueryReference.prototype.refetch = function (variables) {\n    return this.initiateFetch(this.observable.refetch(variables));\n  };\n  InternalQueryReference.prototype.fetchMore = function (options) {\n    return this.initiateFetch(this.observable.fetchMore(options));\n  };\n  InternalQueryReference.prototype.dispose = function () {\n    this.subscription.unsubscribe();\n    this.onDispose();\n  };\n  InternalQueryReference.prototype.onDispose = function () {};\n  InternalQueryReference.prototype.handleNext = function (result) {\n    var _a;\n    switch (this.status) {\n      case \"loading\":\n        {\n          if (result.data === void 0) {\n            result.data = this.result.data;\n          }\n          this.status = \"idle\";\n          this.result = result;\n          (_a = this.resolve) === null || _a === void 0 ? void 0 : _a.call(this, result);\n          break;\n        }\n      case \"idle\":\n        {\n          if (result.data === this.result.data) {\n            return;\n          }\n          if (result.data === void 0) {\n            result.data = this.result.data;\n          }\n          this.result = result;\n          this.promise = createFulfilledPromise(result);\n          this.deliver(this.promise);\n          break;\n        }\n    }\n  };\n  InternalQueryReference.prototype.handleError = function (error) {\n    var _a;\n    this.subscription.unsubscribe();\n    this.subscription = this.observable.resubscribeAfterError(this.handleNext, this.handleError);\n    switch (this.status) {\n      case \"loading\":\n        {\n          this.status = \"idle\";\n          (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, error);\n          break;\n        }\n      case \"idle\":\n        {\n          this.promise = createRejectedPromise(error);\n          this.deliver(this.promise);\n        }\n    }\n  };\n  InternalQueryReference.prototype.deliver = function (promise) {\n    this.listeners.forEach(function (listener) {\n      return listener(promise);\n    });\n  };\n  InternalQueryReference.prototype.initiateFetch = function (returnedPromise) {\n    var _this = this;\n    this.status = \"loading\";\n    this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n    this.promise.catch(function () {});\n    returnedPromise.then(function (result) {\n      var _a;\n      if (_this.status === \"loading\") {\n        _this.status = \"idle\";\n        _this.result = result;\n        (_a = _this.resolve) === null || _a === void 0 ? void 0 : _a.call(_this, result);\n      }\n    }).catch(function () {});\n    return returnedPromise;\n  };\n  return InternalQueryReference;\n}();\nexport { InternalQueryReference };","map":{"version":3,"sources":["../../../src/react/cache/QueryReference.ts"],"names":[],"mappings":"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","sourcesContent":["import { equal } from \"@wry/equality\";\nimport type {\n  ApolloError,\n  ApolloQueryResult,\n  ObservableQuery,\n  OperationVariables,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { isNetworkRequestSettled } from \"../../core/index.js\";\nimport type { ObservableSubscription } from \"../../utilities/index.js\";\nimport {\n  createFulfilledPromise,\n  createRejectedPromise,\n} from \"../../utilities/index.js\";\nimport type { CacheKey } from \"./types.js\";\nimport type { useBackgroundQuery, useReadQuery } from \"../hooks/index.js\";\n\ntype Listener<TData> = (promise: Promise<ApolloQueryResult<TData>>) => void;\n\ntype FetchMoreOptions<TData> = Parameters<\n  ObservableQuery<TData>[\"fetchMore\"]\n>[0];\n\nconst QUERY_REFERENCE_SYMBOL: unique symbol = Symbol();\n/**\n * A `QueryReference` is an opaque object returned by {@link useBackgroundQuery}.\n * A child component reading the `QueryReference` via {@link useReadQuery} will\n * suspend until the promise resolves.\n */\nexport interface QueryReference<TData = unknown> {\n  [QUERY_REFERENCE_SYMBOL]: InternalQueryReference<TData>;\n}\n\ninterface InternalQueryReferenceOptions {\n  key: CacheKey;\n  onDispose?: () => void;\n  autoDisposeTimeoutMs?: number;\n}\n\nexport function wrapQueryRef<TData>(\n  internalQueryRef: InternalQueryReference<TData>\n): QueryReference<TData> {\n  return { [QUERY_REFERENCE_SYMBOL]: internalQueryRef };\n}\n\nexport function unwrapQueryRef<TData>(\n  queryRef: QueryReference<TData>\n): InternalQueryReference<TData> {\n  return queryRef[QUERY_REFERENCE_SYMBOL];\n}\n\nconst OBSERVED_CHANGED_OPTIONS = [\n  \"canonizeResults\",\n  \"context\",\n  \"errorPolicy\",\n  \"fetchPolicy\",\n  \"refetchWritePolicy\",\n  \"returnPartialData\",\n] as const;\n\ntype ObservedOptions = Pick<\n  WatchQueryOptions,\n  (typeof OBSERVED_CHANGED_OPTIONS)[number]\n>;\n\nexport class InternalQueryReference<TData = unknown> {\n  public result: ApolloQueryResult<TData>;\n  public readonly key: CacheKey;\n  public readonly observable: ObservableQuery<TData>;\n\n  public promiseCache?: Map<CacheKey, Promise<ApolloQueryResult<TData>>>;\n  public promise: Promise<ApolloQueryResult<TData>>;\n\n  private subscription: ObservableSubscription;\n  private listeners = new Set<Listener<TData>>();\n  private autoDisposeTimeoutId: NodeJS.Timeout;\n  private status: \"idle\" | \"loading\" = \"loading\";\n\n  private resolve: ((result: ApolloQueryResult<TData>) => void) | undefined;\n  private reject: ((error: unknown) => void) | undefined;\n\n  private references = 0;\n\n  constructor(\n    observable: ObservableQuery<TData>,\n    options: InternalQueryReferenceOptions\n  ) {\n    this.handleNext = this.handleNext.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.dispose = this.dispose.bind(this);\n    this.observable = observable;\n    // Don't save this result as last result to prevent delivery of last result\n    // when first subscribing\n    this.result = observable.getCurrentResult(false);\n    this.key = options.key;\n\n    if (options.onDispose) {\n      this.onDispose = options.onDispose;\n    }\n\n    if (\n      isNetworkRequestSettled(this.result.networkStatus) ||\n      (this.result.data &&\n        (!this.result.partial || this.watchQueryOptions.returnPartialData))\n    ) {\n      this.promise = createFulfilledPromise(this.result);\n      this.status = \"idle\";\n    } else {\n      this.promise = new Promise((resolve, reject) => {\n        this.resolve = resolve;\n        this.reject = reject;\n      });\n    }\n\n    this.subscription = observable\n      .filter(({ data }) => !equal(data, {}))\n      .subscribe({\n        next: this.handleNext,\n        error: this.handleError,\n      });\n\n    // Start a timer that will automatically dispose of the query if the\n    // suspended resource does not use this queryRef in the given time. This\n    // helps prevent memory leaks when a component has unmounted before the\n    // query has finished loading.\n    const startDisposeTimer = () => {\n      if (!this.references) {\n        this.autoDisposeTimeoutId = setTimeout(\n          this.dispose,\n          options.autoDisposeTimeoutMs ?? 30_000\n        );\n      }\n    };\n\n    // We wait until the request has settled to ensure we don't dispose of the\n    // query ref before the request finishes, otherwise we would leave the\n    // promise in a pending state rendering the suspense boundary indefinitely.\n    this.promise.then(startDisposeTimer, startDisposeTimer);\n  }\n\n  get watchQueryOptions() {\n    return this.observable.options;\n  }\n\n  retain() {\n    this.references++;\n    clearTimeout(this.autoDisposeTimeoutId);\n    let disposed = false;\n\n    return () => {\n      if (disposed) {\n        return;\n      }\n\n      disposed = true;\n      this.references--;\n\n      // Wait before fully disposing in case the app is running in strict mode.\n      setTimeout(() => {\n        if (!this.references) {\n          this.dispose();\n        }\n      });\n    };\n  }\n\n  didChangeOptions(watchQueryOptions: ObservedOptions) {\n    return OBSERVED_CHANGED_OPTIONS.some(\n      (option) =>\n        !equal(this.watchQueryOptions[option], watchQueryOptions[option])\n    );\n  }\n\n  applyOptions(watchQueryOptions: ObservedOptions) {\n    const {\n      fetchPolicy: currentFetchPolicy,\n      canonizeResults: currentCanonizeResults,\n    } = this.watchQueryOptions;\n\n    // \"standby\" is used when `skip` is set to `true`. Detect when we've\n    // enabled the query (i.e. `skip` is `false`) to execute a network request.\n    if (\n      currentFetchPolicy === \"standby\" &&\n      currentFetchPolicy !== watchQueryOptions.fetchPolicy\n    ) {\n      this.initiateFetch(this.observable.reobserve(watchQueryOptions));\n    } else {\n      this.observable.silentSetOptions(watchQueryOptions);\n\n      if (currentCanonizeResults !== watchQueryOptions.canonizeResults) {\n        this.result = { ...this.result, ...this.observable.getCurrentResult() };\n        this.promise = createFulfilledPromise(this.result);\n      }\n    }\n\n    return this.promise;\n  }\n\n  listen(listener: Listener<TData>) {\n    this.listeners.add(listener);\n\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  refetch(variables: OperationVariables | undefined) {\n    return this.initiateFetch(this.observable.refetch(variables));\n  }\n\n  fetchMore(options: FetchMoreOptions<TData>) {\n    return this.initiateFetch(this.observable.fetchMore<TData>(options));\n  }\n\n  private dispose() {\n    this.subscription.unsubscribe();\n    this.onDispose();\n  }\n\n  private onDispose() {\n    // noop. overridable by options\n  }\n\n  private handleNext(result: ApolloQueryResult<TData>) {\n    switch (this.status) {\n      case \"loading\": {\n        // Maintain the last successful `data` value if the next result does not\n        // have one.\n        if (result.data === void 0) {\n          result.data = this.result.data;\n        }\n        this.status = \"idle\";\n        this.result = result;\n        this.resolve?.(result);\n        break;\n      }\n      case \"idle\": {\n        // This occurs when switching to a result that is fully cached when this\n        // class is instantiated. ObservableQuery will run reobserve when\n        // subscribing, which delivers a result from the cache.\n        if (result.data === this.result.data) {\n          return;\n        }\n\n        // Maintain the last successful `data` value if the next result does not\n        // have one.\n        if (result.data === void 0) {\n          result.data = this.result.data;\n        }\n\n        this.result = result;\n        this.promise = createFulfilledPromise(result);\n        this.deliver(this.promise);\n        break;\n      }\n    }\n  }\n\n  private handleError(error: ApolloError) {\n    this.subscription.unsubscribe();\n    this.subscription = this.observable.resubscribeAfterError(\n      this.handleNext,\n      this.handleError\n    );\n\n    switch (this.status) {\n      case \"loading\": {\n        this.status = \"idle\";\n        this.reject?.(error);\n        break;\n      }\n      case \"idle\": {\n        this.promise = createRejectedPromise(error);\n        this.deliver(this.promise);\n      }\n    }\n  }\n\n  private deliver(promise: Promise<ApolloQueryResult<TData>>) {\n    this.listeners.forEach((listener) => listener(promise));\n  }\n\n  private initiateFetch(returnedPromise: Promise<ApolloQueryResult<TData>>) {\n    this.status = \"loading\";\n\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n\n    this.promise.catch(() => {});\n\n    // If the data returned from the fetch is deeply equal to the data already\n    // in the cache, `handleNext` will not be triggered leaving the promise we\n    // created in a pending state forever. To avoid this situtation, we attempt\n    // to resolve the promise if `handleNext` hasn't been run to ensure the\n    // promise is resolved correctly.\n    returnedPromise\n      .then((result) => {\n        if (this.status === \"loading\") {\n          this.status = \"idle\";\n          this.result = result;\n          this.resolve?.(result);\n        }\n      })\n      .catch(() => {});\n\n    return returnedPromise;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}