{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LedgerSigner = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar sign_typed_data_utils_1 = require(\"@celo/utils/lib/sign-typed-data-utils\");\nvar ethUtil = __importStar(require(\"@ethereumjs/util\"));\nvar errors_1 = require(\"@ledgerhq/errors\");\nvar debug_1 = __importDefault(require(\"debug\"));\nvar ledger_utils_1 = require(\"./ledger-utils\");\nvar ledger_wallet_1 = require(\"./ledger-wallet\");\nvar tokens_1 = require(\"./tokens\");\nvar debug = (0, debug_1.default)('kit:wallet:ledger');\nvar CELO_APP_ACCEPTS_CONTRACT_DATA_FROM_VERSION = '1.0.2';\n/**\n * Signs the EVM transaction with a Ledger device\n */\nvar LedgerSigner = /** @class */function () {\n  function LedgerSigner(ledger, derivationPath, ledgerAddressValidation, appConfiguration) {\n    if (appConfiguration === void 0) {\n      appConfiguration = {\n        arbitraryDataEnabled: 0,\n        version: '0.0.0'\n      };\n    }\n    this.validated = false;\n    this.ledger = ledger;\n    this.derivationPath = derivationPath;\n    this.ledgerAddressValidation = ledgerAddressValidation;\n    this.appConfiguration = appConfiguration;\n  }\n  LedgerSigner.prototype.getNativeKey = function () {\n    return this.derivationPath;\n  };\n  LedgerSigner.prototype.signTransaction = function (addToV, encodedTx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validatedDerivationPath, signature, rv, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 4,, 5]);\n            return [4 /*yield*/, this.getValidatedDerivationPath()];\n          case 1:\n            validatedDerivationPath = _a.sent();\n            return [4 /*yield*/, this.checkForKnownToken(encodedTx)];\n          case 2:\n            _a.sent();\n            return [4 /*yield*/, this.ledger.signTransaction(validatedDerivationPath, (0, address_1.trimLeading0x)(encodedTx.rlpEncode) // the ledger requires the rlpEncode without the leading 0x\n            )\n            // EIP155 support. check/recalc signature v value.\n            ];\n\n          case 3:\n            signature = _a.sent();\n            rv = parseInt(signature.v, 16);\n            // tslint:disable-next-line: no-bitwise\n            if (rv !== addToV && (rv & addToV) !== rv) {\n              addToV += 1; // add signature v bit.\n            }\n\n            signature.v = addToV.toString(10);\n            return [2 /*return*/, {\n              v: signature.v,\n              r: ethUtil.toBuffer((0, address_1.ensureLeading0x)(signature.r)),\n              s: ethUtil.toBuffer((0, address_1.ensureLeading0x)(signature.s))\n            }];\n          case 4:\n            error_1 = _a.sent();\n            if (error_1 instanceof errors_1.TransportStatusError) {\n              // The Ledger fails if it doesn't know the feeCurrency\n              if (error_1.statusCode === 27264 && error_1.statusText === 'INCORRECT_DATA') {\n                debug('Possible invalid feeCurrency field');\n                throw new Error('ledger-signer@signTransaction: Incorrect Data. Verify that the feeCurrency is a valid one');\n              } else {\n                (0, ledger_utils_1.transportErrorFriendlyMessage)(error_1);\n              }\n            }\n            throw error_1;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  LedgerSigner.prototype.signPersonalMessage = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var signature, _a, _b, error_2;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 3,, 4]);\n            _b = (_a = this.ledger).signPersonalMessage;\n            return [4 /*yield*/, this.getValidatedDerivationPath()];\n          case 1:\n            return [4 /*yield*/, _b.apply(_a, [_c.sent(), (0, address_1.trimLeading0x)(data)])];\n          case 2:\n            signature = _c.sent();\n            return [2 /*return*/, {\n              v: signature.v,\n              r: ethUtil.toBuffer((0, address_1.ensureLeading0x)(signature.r)),\n              s: ethUtil.toBuffer((0, address_1.ensureLeading0x)(signature.s))\n            }];\n          case 3:\n            error_2 = _c.sent();\n            if (error_2 instanceof errors_1.TransportStatusError) {\n              (0, ledger_utils_1.transportErrorFriendlyMessage)(error_2);\n            }\n            throw error_2;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  LedgerSigner.prototype.signTypedData = function (typedData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var domainSeparator, hashStructMessage, sig, _a, _b, error_3;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 3,, 4]);\n            domainSeparator = (0, sign_typed_data_utils_1.structHash)('EIP712Domain', typedData.domain, typedData.types);\n            hashStructMessage = (0, sign_typed_data_utils_1.structHash)(typedData.primaryType, typedData.message, typedData.types);\n            _b = (_a = this.ledger).signEIP712HashedMessage;\n            return [4 /*yield*/, this.getValidatedDerivationPath()];\n          case 1:\n            return [4 /*yield*/, _b.apply(_a, [_c.sent(), domainSeparator, hashStructMessage])];\n          case 2:\n            sig = _c.sent();\n            return [2 /*return*/, {\n              v: parseInt(sig.v, 10),\n              r: ethUtil.toBuffer((0, address_1.ensureLeading0x)(sig.r)),\n              s: ethUtil.toBuffer((0, address_1.ensureLeading0x)(sig.s))\n            }];\n          case 3:\n            error_3 = _c.sent();\n            if (error_3 instanceof errors_1.TransportStatusError) {\n              (0, ledger_utils_1.transportErrorFriendlyMessage)(error_3);\n            }\n            throw error_3;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  LedgerSigner.prototype.getValidatedDerivationPath = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.validationRequired()) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.ledger.getAddress(this.derivationPath, true)];\n          case 1:\n            _a.sent();\n            this.validated = true;\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, this.derivationPath];\n        }\n      });\n    });\n  };\n  LedgerSigner.prototype.validationRequired = function () {\n    switch (this.ledgerAddressValidation) {\n      case ledger_wallet_1.AddressValidation.never:\n        {\n          return false;\n        }\n      case ledger_wallet_1.AddressValidation.everyTransaction:\n        {\n          return true;\n        }\n      case ledger_wallet_1.AddressValidation.firstTransactionPerAddress:\n        {\n          return !this.validated;\n        }\n      case ledger_wallet_1.AddressValidation.initializationOnly:\n        {\n          // Already initialized, so no need to validate in this state\n          return false;\n        }\n      default:\n        {\n          throw new Error('ledger-signer@validationRequired: invalid ledgerValidation value');\n        }\n    }\n  };\n  /**\n   * Display ERC20 info on ledger if contract is well known\n   * @param rlpEncoded Encoded transaction\n   */\n  LedgerSigner.prototype.checkForKnownToken = function (rlpEncoded) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenInfo, feeTokenInfo;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!((0, tokens_1.compareLedgerAppVersions)(this.appConfiguration.version, CELO_APP_ACCEPTS_CONTRACT_DATA_FROM_VERSION) >= 0)) return [3 /*break*/, 4];\n            tokenInfo = (0, tokens_1.tokenInfoByAddressAndChainId)(rlpEncoded.transaction.to, rlpEncoded.transaction.chainId);\n            if (!tokenInfo) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.ledger.provideERC20TokenInformation(tokenInfo)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            if (!(rlpEncoded.transaction.feeCurrency && rlpEncoded.transaction.feeCurrency !== '0x')) return [3 /*break*/, 4];\n            feeTokenInfo = (0, tokens_1.tokenInfoByAddressAndChainId)(rlpEncoded.transaction.feeCurrency, rlpEncoded.transaction.chainId);\n            if (!feeTokenInfo) return [3 /*break*/, 4];\n            return [4 /*yield*/, this.ledger.provideERC20TokenInformation(feeTokenInfo)];\n          case 3:\n            _a.sent();\n            _a.label = 4;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  LedgerSigner.prototype.decrypt = function (_ciphertext) {\n    throw new Error('Decryption operation is not supported on this signer');\n    // To make the compiler happy\n    return Promise.resolve(_ciphertext);\n  };\n  LedgerSigner.prototype.computeSharedSecret = function (_publicKey) {\n    throw new Error('Not implemented');\n    return Promise.resolve(Buffer.from([]));\n  };\n  return LedgerSigner;\n}();\nexports.LedgerSigner = LedgerSigner;","map":null,"metadata":{},"sourceType":"script"}