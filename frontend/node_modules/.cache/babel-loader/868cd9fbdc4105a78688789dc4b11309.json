{"ast":null,"code":"import * as React from \"react\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nexport function useReactiveVar(rv) {\n  return useSyncExternalStore(React.useCallback(function (update) {\n    return rv.onNextChange(function onNext() {\n      update();\n      rv.onNextChange(onNext);\n    });\n  }, [rv]), rv, rv);\n}","map":{"version":3,"sources":["../../../src/react/hooks/useReactiveVar.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAE9B,SAAS,oBAAoB,QAAQ,2BAA2B;AAEhE,OAAM,SAAU,cAAc,CAAI,EAAkB,EAAA;EAClD,OAAO,oBAAoB,CACzB,KAAK,CAAC,WAAW,CACf,UAAC,MAAM,EAAA;IAML,OAAO,EAAE,CAAC,YAAY,CAAC,SAAS,MAAM,CAAA,EAAA;MACpC,MAAM,CAAA,CAAE;MACR,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC;IACzB,CAAC,CAAC;EACJ,CAAC,EACD,CAAC,EAAE,CAAC,CACL,EACD,EAAE,EACF,EAAE,CACH;AACH","sourcesContent":["import * as React from \"react\";\nimport type { ReactiveVar } from \"../../core/index.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\n\nexport function useReactiveVar<T>(rv: ReactiveVar<T>): T {\n  return useSyncExternalStore(\n    React.useCallback(\n      (update) => {\n        // By reusing the same onNext function in the nested call to\n        // rv.onNextChange(onNext), we can keep using the initial clean-up function\n        // returned by rv.onNextChange(function onNext(v){...}), without having to\n        // register the new clean-up function (returned by the nested\n        // rv.onNextChange(onNext)) with yet another callback.\n        return rv.onNextChange(function onNext() {\n          update();\n          rv.onNextChange(onNext);\n        });\n      },\n      [rv]\n    ),\n    rv,\n    rv\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}