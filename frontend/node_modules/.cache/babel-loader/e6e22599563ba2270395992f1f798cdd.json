{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FederatedAttestationsWrapper = void 0;\nvar connect_1 = require(\"@celo/connect\");\nvar typed_data_constructors_1 = require(\"@celo/utils/lib/typed-data-constructors\");\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\nvar FederatedAttestationsWrapper = /** @class */function (_super) {\n  __extends(FederatedAttestationsWrapper, _super);\n  function FederatedAttestationsWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * @notice Returns identifiers mapped to `account` by signers of `trustedIssuers`\n     * @param account Address of the account\n     * @param trustedIssuers Array of n issuers whose identifier mappings will be used\n     * @return countsPerIssuer Array of number of identifiers returned per issuer\n     * @return identifiers Array (length == sum([0])) of identifiers\n     * @dev Adds identifier info to the arrays in order of provided trustedIssuers\n     * @dev Expectation that only one attestation exists per (identifier, issuer, account)\n     */\n    _this.lookupIdentifiers = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.lookupIdentifiers);\n    /**\n     * @notice Returns info about attestations for `identifier` produced by\n     *    signers of `trustedIssuers`\n     * @param identifier Hash of the identifier\n     * @param trustedIssuers Array of n issuers whose attestations will be included\n     * @return countsPerIssuer Array of number of attestations returned per issuer\n     *          For m (== sum([0])) found attestations:\n     * @return accounts Array of m accounts\n     * @return signers Array of m signers\n     * @return issuedOns Array of m issuedOns\n     * @return publishedOns Array of m publishedOns\n     * @dev Adds attestation info to the arrays in order of provided trustedIssuers\n     * @dev Expectation that only one attestation exists per (identifier, issuer, account)\n     */\n    _this.lookupAttestations = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.lookupAttestations);\n    /**\n     * @notice Validates the given attestation and signature\n     * @param identifier Hash of the identifier to be attested\n     * @param issuer Address of the attestation issuer\n     * @param account Address of the account being mapped to the identifier\n     * @param issuedOn Time at which the issuer issued the attestation in Unix time\n     * @param signer Address of the signer of the attestation\n     * @param v The recovery id of the incoming ECDSA signature\n     * @param r Output value r of the ECDSA signature\n     * @param s Output value s of the ECDSA signature\n     * @dev Throws if attestation has been revoked\n     * @dev Throws if signer is not an authorized AttestationSigner of the issuer\n     */\n    _this.validateAttestationSig = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.validateAttestationSig);\n    /**\n     * @return keccak 256 of abi encoded parameters\n     */\n    _this.getUniqueAttestationHash = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getUniqueAttestationHash);\n    /**\n     * @notice Registers an attestation directly from the issuer\n     * @param identifier Hash of the identifier to be attested\n     * @param account Address of the account being mapped to the identifier\n     * @param issuedOn Time at which the issuer issued the attestation in Unix time\n     * @dev Attestation signer and issuer in storage is set to msg.sender\n     * @dev Throws if an attestation with the same (identifier, issuer, account) already exists\n     */\n    _this.registerAttestationAsIssuer = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.registerAttestationAsIssuer);\n    /**\n     * @notice Revokes an attestation\n     * @param identifier Hash of the identifier to be revoked\n     * @param issuer Address of the attestation issuer\n     * @param account Address of the account mapped to the identifier\n     * @dev Throws if sender is not the issuer, signer, or account\n     */\n    _this.revokeAttestation = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.revokeAttestation);\n    /**\n     * @notice Revokes attestations [identifiers <-> accounts] from issuer\n     * @param issuer Address of the issuer of all attestations to be revoked\n     * @param identifiers Hash of the identifiers\n     * @param accounts Addresses of the accounts mapped to the identifiers\n     *   at the same indices\n     * @dev Throws if the number of identifiers and accounts is not the same\n     * @dev Throws if sender is not the issuer or currently registered signer of issuer\n     * @dev Throws if an attestation is not found for identifiers[i] <-> accounts[i]\n     */\n    _this.batchRevokeAttestations = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.batchRevokeAttestations);\n    return _this;\n  }\n  /**\n   * @notice Generates a valid signature and registers the attestation\n   * @param identifier Hash of the identifier to be attested\n   * @param issuer Address of the attestation issuer\n   * @param account Address of the account being mapped to the identifier\n   * @param issuedOn Time at which the issuer issued the attestation in Unix time\n   * @param signer Address of the signer of the attestation\n   * @dev Throws if an attestation with the same (identifier, issuer, account) already exists\n   */\n  FederatedAttestationsWrapper.prototype.registerAttestation = function (identifier, issuer, account, signer, issuedOn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var chainId, typedData, sig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.connection.chainId()];\n          case 1:\n            chainId = _a.sent();\n            typedData = (0, typed_data_constructors_1.registerAttestation)(chainId, this.address, {\n              identifier: identifier,\n              issuer: issuer,\n              account: account,\n              signer: signer,\n              issuedOn: issuedOn\n            });\n            return [4 /*yield*/, this.connection.signTypedData(signer, typedData)];\n          case 2:\n            sig = _a.sent();\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.registerAttestation(identifier, issuer, account, signer, issuedOn, sig.v, sig.r, sig.s))];\n        }\n      });\n    });\n  };\n  return FederatedAttestationsWrapper;\n}(BaseWrapper_1.BaseWrapper);\nexports.FederatedAttestationsWrapper = FederatedAttestationsWrapper;","map":null,"metadata":{},"sourceType":"script"}