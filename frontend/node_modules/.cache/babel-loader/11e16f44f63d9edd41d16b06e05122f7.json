{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActionModal = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst react_device_detect_1 = require(\"react-device-detect\");\nconst react_modal_1 = __importDefault(require(\"react-modal\"));\nconst spinner_1 = __importDefault(require(\"../components/spinner\"));\nconst use_theme_1 = __importDefault(require(\"../hooks/use-theme\"));\nconst use_celo_1 = require(\"../use-celo\");\nconst colors_1 = require(\"../utils/colors\");\nconst helpers_1 = require(\"../utils/helpers\");\nconst tailwind_1 = __importDefault(require(\"../utils/tailwind\"));\nconst connect_1 = require(\"./connect\");\nconst styles = (0, tailwind_1.default)(Object.assign(Object.assign({}, connect_1.styles), {\n  actionModalContainer: \"\\n    tw-px-5\\n    tw-py-6\",\n  actionTitle: \"\\n    tw-text-xl\\n    tw-text-center\\n    tw-mb-4\",\n  dappName: \"\",\n  actionDescription: \"\\n    tw-text-sm\\n    tw-text-center\",\n  actionSpinnerContainer: \"\\n    tw-my-8\\n    tw-flex\\n    tw-items-center\\n    tw-justify-center\",\n  contentContainer: \"\\n    tw-max-h-screen\\n  \",\n  content: \"\\n    tw-relative\\n    tw-w-80\\n    md:tw-w-96\\n    \".concat(react_device_detect_1.isMobile ? \"\\n      tw-flex\\n      tw-flex-col\\n      tw-justify-center\\n      tw-self-center\\n      tw-h-screen\\n      tw-mx-auto\\n    \" : '', \"\\n  \")\n}));\nconst DefaultActionModalComponent = _ref => {\n  let {\n    dappName,\n    pendingActionCount,\n    theme\n  } = _ref;\n  return react_1.default.createElement(\"div\", {\n    className: styles.actionModalContainer,\n    style: {\n      color: theme.text\n    }\n  }, react_1.default.createElement(\"div\", {\n    className: styles.actionTitle\n  }, \"Check your wallet\"), react_1.default.createElement(\"p\", {\n    className: styles.actionDescription\n  }, react_1.default.createElement(\"strong\", {\n    style: {\n      color: theme.primary\n    }\n  }, dappName), \" is trying to\", ' ', pendingActionCount > 1 ? \"perform \".concat(pendingActionCount, \" actions\") : 'perform an action', \". Please check your wallet to confirm.\"), react_1.default.createElement(\"div\", {\n    className: styles.actionSpinnerContainer\n  }, react_1.default.createElement(spinner_1.default, null)));\n};\nconst ActionModal = _ref2 => {\n  let {\n    reactModalProps,\n    render = DefaultActionModalComponent\n  } = _ref2;\n  const theme = (0, use_theme_1.default)();\n  const {\n    pendingActionCount,\n    dapp\n  } = (0, use_celo_1.useCeloInternal)();\n  (0, helpers_1.useFixedBody)(pendingActionCount > 0);\n  return react_1.default.createElement(react_modal_1.default, Object.assign({\n    portalClassName: styles.portal,\n    htmlOpenClassName: 'react-celo-modal-open-html',\n    bodyOpenClassName: 'react-celo-modal-open-body',\n    isOpen: pendingActionCount > 0,\n    // isOpen\n    ariaHideApp: false,\n    style: {\n      content: {\n        background: theme.background\n      },\n      overlay: {\n        background: (0, colors_1.hexToRGB)(theme.background, 0.8)\n      }\n    }\n  }, reactModalProps ? reactModalProps : {\n    className: styles.modal,\n    overlayClassName: styles.overlay\n  }), react_1.default.createElement(\"div\", {\n    className: \"react-celo \".concat(styles.contentContainer)\n  }, react_1.default.createElement(\"div\", {\n    className: styles.content\n  }, render({\n    dappName: dapp.name,\n    pendingActionCount,\n    theme\n  }))));\n};\nexports.ActionModal = ActionModal;","map":null,"metadata":{},"sourceType":"script"}