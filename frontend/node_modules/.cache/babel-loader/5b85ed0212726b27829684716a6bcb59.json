{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n  message: _ref => {\n    let {\n      schemaCode\n    } = _ref;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must be multiple of \", \"\"])), schemaCode);\n  },\n  params: _ref2 => {\n    let {\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{multipleOf: \", \"}\"])), schemaCode);\n  }\n};\nconst def = {\n  keyword: \"multipleOf\",\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      gen,\n      data,\n      schemaCode,\n      it\n    } = cxt;\n    // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n    const prec = it.opts.multipleOfPrecision;\n    const res = gen.let(\"res\");\n    const invalid = prec ? (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"Math.abs(Math.round(\", \") - \", \") > 1e-\", \"\"])), res, res, prec) : (0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \" !== parseInt(\", \")\"])), res, res);\n    cxt.fail$data((0, codegen_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"(\", \" === 0 || (\", \" = \", \"/\", \", \", \"))\"])), schemaCode, res, data, schemaCode, invalid));\n  }\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/multipleOf.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AAQA,MAAM,KAAK,GAA2B;EACpC,OAAO,EAAE,IAAA;IAAA,IAAC;MAAC;IAAU,CAAC,GAAA,IAAA;IAAA,QAAK,CAAA,EAAA,SAAA,CAAA,GAAG,EAAA,eAAA,KAAA,eAAA,GAAA,sBAAA,iCAAuB,UAAU;EAAA,CAAE;EACjE,MAAM,EAAE,KAAA;IAAA,IAAC;MAAC;IAAU,CAAC,GAAA,KAAA;IAAA,QAAK,CAAA,EAAA,SAAA,CAAA,CAAC,EAAA,gBAAA,KAAA,gBAAA,GAAA,sBAAA,2BAAgB,UAAU;EAAA;CACtD;AAED,MAAM,GAAG,GAA0B;EACjC,OAAO,EAAE,YAAY;EACrB,IAAI,EAAE,QAAQ;EACd,UAAU,EAAE,QAAQ;EACpB,KAAK,EAAE,IAAI;EACX,KAAK;EACL,IAAI,CAAC,GAAe,EAAA;IAClB,MAAM;MAAC,GAAG;MAAE,IAAI;MAAE,UAAU;MAAE;IAAE,CAAC,GAAG,GAAG;IACvC;IACA,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB;IACxC,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC;IAC1B,MAAM,OAAO,GAAG,IAAI,IAChB,CAAA,EAAA,SAAA,CAAA,CAAC,EAAA,gBAAA,KAAA,gBAAA,GAAA,sBAAA,oDAAuB,GAAG,EAAO,GAAG,EAAU,IAAI,KACnD,CAAA,EAAA,SAAA,CAAA,CAAC,EAAA,gBAAA,KAAA,gBAAA,GAAA,sBAAA,gCAAG,GAAG,EAAiB,GAAG,CAAG;IAClC,GAAG,CAAC,SAAS,EAAC,CAAA,EAAA,SAAA,CAAA,CAAC,EAAA,gBAAA,KAAA,gBAAA,GAAA,sBAAA,iDAAI,UAAU,EAAc,GAAG,EAAM,IAAI,EAAI,UAAU,EAAK,OAAO,CAAI,CAAC;EACzF;CACD;AAED,OAAA,CAAA,OAAA,GAAe,GAAG","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must be multiple of ${schemaCode}`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{multipleOf: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"multipleOf\",\n    type: \"number\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, data, schemaCode, it } = cxt;\n        // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n        const prec = it.opts.multipleOfPrecision;\n        const res = gen.let(\"res\");\n        const invalid = prec\n            ? (0, codegen_1._) `Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`\n            : (0, codegen_1._) `${res} !== parseInt(${res})`;\n        cxt.fail$data((0, codegen_1._) `(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=multipleOf.js.map"]},"metadata":{},"sourceType":"script"}