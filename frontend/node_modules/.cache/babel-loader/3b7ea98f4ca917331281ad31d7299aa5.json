{"ast":null,"code":"import { Price, Route, Trade, TradeType } from '@ubeswap/sdk';\nimport { ROUTER_ADDRESS } from 'constants/index';\nexport const defaultRouter = {\n  routerAddress: ROUTER_ADDRESS\n};\nexport class UbeswapTrade extends Trade {\n  constructor(route, amount, tradeType, router, path) {\n    super(route, amount, tradeType);\n    this.hidePairAnalytics = false;\n    this.router = void 0;\n    this.path = void 0;\n    this.router = router;\n    this.path = path;\n  }\n  static fromInnerTrade(innerTrade, router, path) {\n    return new UbeswapTrade(innerTrade.route, innerTrade.tradeType === TradeType.EXACT_INPUT ? innerTrade.inputAmount : innerTrade.outputAmount, innerTrade.tradeType, router, path);\n  }\n  static fromNormalTrade(trade) {\n    return UbeswapTrade.fromInnerTrade(trade, defaultRouter, trade.route.path);\n  }\n}\nexport class MinimaRouterTrade extends UbeswapTrade {\n  constructor(route, inputAmount, outputAmount, router, priceImpact, path, details, txn) {\n    super(route, inputAmount, 0, router, path);\n    this.txn = txn;\n    /**\n     * The input amount for the trade assuming no slippage.\n     */\n    this.inputAmount = void 0;\n    /**\n     * The output amount for the trade assuming no slippage.\n     */\n    this.outputAmount = void 0;\n    /**\n     * The price expressed in terms of output amount/input amount.\n     */\n    this.executionPrice = void 0;\n    /**\n     * The mid price after the trade executes assuming no slippage.\n     */\n    this.nextMidPrice = void 0;\n    /**\n     * The percent difference between the mid price before the trade and the trade execution price.\n     */\n    this.priceImpact = void 0;\n    /**\n     * Every field that is needed for executing a swap is contained within the details object\n     */\n    this.details = void 0;\n    this.router = router;\n    this.inputAmount = inputAmount;\n    this.outputAmount = outputAmount;\n    this.executionPrice = new Price(inputAmount.token, outputAmount.token, inputAmount.raw, outputAmount.raw);\n    this.nextMidPrice = new Price(inputAmount.token, outputAmount.token, inputAmount.raw, outputAmount.raw);\n    this.priceImpact = priceImpact;\n    this.hidePairAnalytics = true;\n    this.details = details;\n  }\n  static fromMinimaTradePayload(pairs, inputAmount, outputAmount, routerAddress, priceImpact, path, details) {\n    return new MinimaRouterTrade(new Route(pairs, inputAmount.currency), inputAmount, outputAmount, {\n      routerAddress\n    }, priceImpact, path, details);\n  }\n}","map":{"version":3,"names":["Price","Route","Trade","TradeType","ROUTER_ADDRESS","defaultRouter","routerAddress","UbeswapTrade","constructor","route","amount","tradeType","router","path","hidePairAnalytics","fromInnerTrade","innerTrade","EXACT_INPUT","inputAmount","outputAmount","fromNormalTrade","trade","MinimaRouterTrade","priceImpact","details","txn","executionPrice","nextMidPrice","token","raw","fromMinimaTradePayload","pairs","currency"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/components/swap/routing/trade.ts"],"sourcesContent":["import { BigNumberish } from '@ethersproject/bignumber'\nimport { BytesLike } from '@ethersproject/bytes'\nimport { Pair, Percent, Price, Route, Token, TokenAmount, Trade, TradeType } from '@ubeswap/sdk'\nimport { ROUTER_ADDRESS } from 'constants/index'\n\nexport interface TradeRouter {\n  routerAddress?: string\n}\n\nexport const defaultRouter: TradeRouter = {\n  routerAddress: ROUTER_ADDRESS,\n}\n\nexport class UbeswapTrade extends Trade {\n  hidePairAnalytics = false\n  router: TradeRouter\n  readonly path: readonly Token[]\n\n  constructor(route: Route, amount: TokenAmount, tradeType: TradeType, router: TradeRouter, path: readonly Token[]) {\n    super(route, amount, tradeType)\n    this.router = router\n    this.path = path\n  }\n\n  static fromInnerTrade(innerTrade: Trade, router: TradeRouter, path: readonly Token[]) {\n    return new UbeswapTrade(\n      innerTrade.route,\n      innerTrade.tradeType === TradeType.EXACT_INPUT ? innerTrade.inputAmount : innerTrade.outputAmount,\n      innerTrade.tradeType,\n      router,\n      path\n    )\n  }\n\n  static fromNormalTrade(trade: Trade): UbeswapTrade {\n    return UbeswapTrade.fromInnerTrade(trade, defaultRouter, trade.route.path)\n  }\n}\n\nexport interface SwapPayload {\n  path: string[]\n  pairs: string[]\n  extras: BytesLike[]\n  inputAmount: BigNumberish\n  minOutputAmount: BigNumberish\n  expectedOutputAmount: BigNumberish\n  to?: string\n  deadline: BigNumberish\n  partner: BigNumberish\n  sig: BytesLike\n}\n\nexport interface MinimaPayloadDetails {\n  path: string[]\n  pairs: string[]\n  extras: BytesLike[]\n  inputAmount: string\n  expectedOutputAmount: string\n  deadline: string\n  partner: string\n  sig: BytesLike\n}\n\nexport interface MinimaTradePayload {\n  expectedOut: string\n  minimumExpectedOut?: string\n  routerAddress: string\n  priceImpact: {\n    numerator: number\n    denominator: number\n  }\n  details: MinimaPayloadDetails\n  txn?: {\n    data: string\n    to: string\n    gas: string\n    from: string\n  }\n}\n\nexport class MinimaRouterTrade extends UbeswapTrade {\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  inputAmount: TokenAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  outputAmount: TokenAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  priceImpact: Percent\n  /**\n   * Every field that is needed for executing a swap is contained within the details object\n   */\n  details: SwapPayload\n\n  constructor(\n    route: Route,\n    inputAmount: TokenAmount,\n    outputAmount: TokenAmount,\n    router: TradeRouter,\n    priceImpact: Percent,\n    path: readonly Token[],\n    details: SwapPayload,\n    public txn?: { data: string; to: string }\n  ) {\n    super(route, inputAmount, 0, router, path)\n    this.router = router\n    this.inputAmount = inputAmount\n    this.outputAmount = outputAmount\n    this.executionPrice = new Price(inputAmount.token, outputAmount.token, inputAmount.raw, outputAmount.raw)\n    this.nextMidPrice = new Price(inputAmount.token, outputAmount.token, inputAmount.raw, outputAmount.raw)\n    this.priceImpact = priceImpact\n    this.hidePairAnalytics = true\n    this.details = details\n  }\n\n  static fromMinimaTradePayload(\n    pairs: Pair[],\n    inputAmount: TokenAmount,\n    outputAmount: TokenAmount,\n    routerAddress: string,\n    priceImpact: Percent,\n    path: readonly Token[],\n    details: SwapPayload\n  ) {\n    return new MinimaRouterTrade(\n      new Route(pairs, inputAmount.currency),\n      inputAmount,\n      outputAmount,\n      { routerAddress },\n      priceImpact,\n      path,\n      details\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}