{"ast":null,"code":"import{useCelo}from'@celo/react-celo';import{CELO,currencyEquals,cUSD,JSBI,Pair,Price}from'@ubeswap/sdk';import{useTotalSupply}from'data/TotalSupply';import{useToken}from'hooks/Tokens';import{usePairContract}from'hooks/useContract';import{useMemo}from'react';import{useSingleCallResult}from'state/multicall/hooks';import{MCUSD}from'../constants/index';import{usePair,usePairs}from'../data/Reserves';/**\n * Returns the price in cUSD of the input currency\n * @param currency currency to compute the cUSD price of\n */export function useCUSDPrices(tokens){const{network:{chainId}}=useCelo();const CUSD=cUSD[chainId];const celo=CELO[chainId];const tokenPairs=useMemo(()=>tokens===null||tokens===void 0?void 0:tokens.map(token=>[[token&&currencyEquals(token,CUSD)?undefined:token,CUSD],[token&&currencyEquals(token,celo)?undefined:token,celo],[celo,CUSD]]).flat(),[CUSD,celo,tokens]);const thesePairs=usePairs(tokenPairs);return useMemo(()=>{if(!tokens||!chainId){return undefined;}const pairs=thesePairs.map(x=>x[1]);return tokens.map((token,idx)=>{const start=idx*3;const[cUSDPair,celoPair,celoCUSDPair]=[pairs[start],pairs[start+1],pairs[start+2]];// handle cUSD\nif(token.equals(CUSD)){return new Price(CUSD,CUSD,'1','1');}if(cUSDPair){return cUSDPair.priceOf(token);}if(celoPair&&celoCUSDPair){return celoPair.priceOf(token).multiply(celoCUSDPair.priceOf(celo));}return undefined;});},[chainId,tokens,CUSD,celo,thesePairs]);}/**\n * Returns the price in cUSD of the input currency\n * @param token the token to get the cUSD price of\n */export function useCUSDPrice(token){const{network:{chainId}}=useCelo();const CUSD=cUSD[chainId];const celo=CELO[chainId];const mcUSD=MCUSD[chainId];const tokenPairs=useMemo(()=>[[token&&currencyEquals(token,CUSD)?undefined:token,CUSD],[token&&currencyEquals(token,celo)?undefined:token,celo],[token&&mcUSD&&currencyEquals(token,mcUSD)?undefined:token,mcUSD?mcUSD:undefined],[celo,CUSD]],[CUSD,celo,mcUSD,token]);const[[,cUSDPair],[,celoPair],[,mcUSDPair],[,celoCUSDPair]]=usePairs(tokenPairs);const cusdPairAddr=token?currencyEquals(token,CUSD)?undefined:Pair.getAddress(token,CUSD):undefined;const cusdPairTotalSupply=useTotalSupply(useToken(cusdPairAddr)||undefined);const mcusdPairAddr=token&&mcUSD&&token.address!==mcUSD.address?Pair.getAddress(token,mcUSD):undefined;const mcusdPairTotalSupply=useTotalSupply(useToken(mcusdPairAddr)||undefined);return useMemo(()=>{if(!token||!chainId){return undefined;}// handle cUSD\nif(token.equals(CUSD)){return new Price(CUSD,CUSD,'1','1');}if(mcUSDPair&&cUSDPair&&cusdPairTotalSupply&&mcusdPairTotalSupply){try{if(JSBI.greaterThan(mcUSDPair.getLiquidityMinted(mcusdPairTotalSupply,mcUSDPair.reserve0,mcUSDPair.reserve1).raw,cUSDPair.getLiquidityMinted(cusdPairTotalSupply,cUSDPair.reserve0,cUSDPair.reserve1).raw)){return mcUSDPair.priceOf(token);}}catch(e){if(e.message!='Invariant failed: LIQUIDITY'){console.log(e);}}}if(cUSDPair){return cUSDPair.priceOf(token);}if(celoPair&&celoCUSDPair){return celoPair.priceOf(token).multiply(celoCUSDPair.priceOf(celo));}return undefined;},[chainId,token,CUSD,cUSDPair,celo,celoCUSDPair,celoPair,mcUSDPair,cusdPairTotalSupply,mcusdPairTotalSupply]);}/**\n * Returns the price in cUSD of the input currency\n * @param currency currency to compute the cUSD price of\n */export const useCUSDPriceOfULP=stakingToken=>{var _useSingleCallResult,_useSingleCallResult$,_useSingleCallResult2,_useSingleCallResult3;const{network:{chainId}}=useCelo();const pair=usePairContract(stakingToken?stakingToken.address:'');const token0Address=(_useSingleCallResult=useSingleCallResult(pair,'token0',[]))===null||_useSingleCallResult===void 0?void 0:(_useSingleCallResult$=_useSingleCallResult.result)===null||_useSingleCallResult$===void 0?void 0:_useSingleCallResult$[0];const token1Address=(_useSingleCallResult2=useSingleCallResult(pair,'token1',[]))===null||_useSingleCallResult2===void 0?void 0:(_useSingleCallResult3=_useSingleCallResult2.result)===null||_useSingleCallResult3===void 0?void 0:_useSingleCallResult3[0];const totalSupplyOfStakingToken=useTotalSupply(stakingToken);const token0=useToken(token0Address)||undefined;const token1=useToken(token1Address)||undefined;const[,stakingTokenPair]=usePair(token0,token1);const cusdPrice0=useCUSDPrice(stakingTokenPair===null||stakingTokenPair===void 0?void 0:stakingTokenPair.token0);const cusdPrice1=useCUSDPrice(stakingTokenPair===null||stakingTokenPair===void 0?void 0:stakingTokenPair.token1);const CUSD=cUSD[chainId];return useMemo(()=>{if(!stakingToken||!chainId){return undefined;}// handle cUSD\nif(stakingToken.equals(CUSD)){return new Price(CUSD,CUSD,'1','1');}if(stakingToken&&totalSupplyOfStakingToken&&!totalSupplyOfStakingToken.equalTo('0')&&cusdPrice0&&cusdPrice1&&stakingTokenPair&&stakingTokenPair!==null&&stakingTokenPair!==void 0&&stakingTokenPair.reserve0&&stakingTokenPair!==null&&stakingTokenPair!==void 0&&stakingTokenPair.reserve1){const amount0=cusdPrice0.quote(stakingTokenPair.reserve0);const amount1=cusdPrice1.quote(stakingTokenPair.reserve1);const token1CUSDPrice=amount0.divide(totalSupplyOfStakingToken);const token2CUSDPrice=amount1.divide(totalSupplyOfStakingToken);const amount=token1CUSDPrice.add(token2CUSDPrice);return new Price(stakingToken,CUSD,amount.denominator,amount.numerator);}return undefined;},[stakingToken,chainId,CUSD,totalSupplyOfStakingToken,cusdPrice0,cusdPrice1,stakingTokenPair]);};","map":{"version":3,"names":["useCelo","CELO","currencyEquals","cUSD","JSBI","Pair","Price","useTotalSupply","useToken","usePairContract","useMemo","useSingleCallResult","MCUSD","usePair","usePairs","useCUSDPrices","tokens","network","chainId","CUSD","celo","tokenPairs","map","token","undefined","flat","thesePairs","pairs","x","idx","start","cUSDPair","celoPair","celoCUSDPair","equals","priceOf","multiply","useCUSDPrice","mcUSD","mcUSDPair","cusdPairAddr","getAddress","cusdPairTotalSupply","mcusdPairAddr","address","mcusdPairTotalSupply","greaterThan","getLiquidityMinted","reserve0","reserve1","raw","e","message","console","log","useCUSDPriceOfULP","stakingToken","_useSingleCallResult","_useSingleCallResult$","_useSingleCallResult2","_useSingleCallResult3","pair","token0Address","result","token1Address","totalSupplyOfStakingToken","token0","token1","stakingTokenPair","cusdPrice0","cusdPrice1","equalTo","amount0","quote","amount1","token1CUSDPrice","divide","token2CUSDPrice","amount","add","denominator","numerator"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/utils/useCUSDPrice.ts"],"sourcesContent":["import { useCelo } from '@celo/react-celo'\nimport { CELO, ChainId as UbeswapChainId, currencyEquals, cUSD, JSBI, Pair, Price, Token } from '@ubeswap/sdk'\nimport { useTotalSupply } from 'data/TotalSupply'\nimport { useToken } from 'hooks/Tokens'\nimport { usePairContract } from 'hooks/useContract'\nimport { useMemo } from 'react'\nimport { useSingleCallResult } from 'state/multicall/hooks'\n\nimport { MCUSD } from '../constants/index'\nimport { usePair, usePairs } from '../data/Reserves'\n\ntype TokenPair = [Token | undefined, Token | undefined]\n\n/**\n * Returns the price in cUSD of the input currency\n * @param currency currency to compute the cUSD price of\n */\nexport function useCUSDPrices(tokens?: Token[]): (Price | undefined)[] | undefined {\n  const {\n    network: { chainId },\n  } = useCelo()\n  const CUSD = cUSD[chainId as unknown as UbeswapChainId]\n  const celo = CELO[chainId as unknown as UbeswapChainId]\n  const tokenPairs: TokenPair[] = useMemo(\n    () =>\n      tokens\n        ?.map((token) => [\n          [token && currencyEquals(token, CUSD) ? undefined : token, CUSD],\n          [token && currencyEquals(token, celo) ? undefined : token, celo],\n          [celo, CUSD],\n        ])\n        .flat() as TokenPair[],\n    [CUSD, celo, tokens]\n  )\n  const thesePairs = usePairs(tokenPairs)\n\n  return useMemo(() => {\n    if (!tokens || !chainId) {\n      return undefined\n    }\n    const pairs = thesePairs.map((x) => x[1])\n\n    return tokens.map((token, idx) => {\n      const start = idx * 3\n      const [cUSDPair, celoPair, celoCUSDPair] = [pairs[start], pairs[start + 1], pairs[start + 2]]\n\n      // handle cUSD\n      if (token.equals(CUSD)) {\n        return new Price(CUSD, CUSD, '1', '1')\n      }\n\n      if (cUSDPair) {\n        return cUSDPair.priceOf(token)\n      }\n\n      if (celoPair && celoCUSDPair) {\n        return celoPair.priceOf(token).multiply(celoCUSDPair.priceOf(celo))\n      }\n\n      return undefined\n    })\n  }, [chainId, tokens, CUSD, celo, thesePairs])\n}\n\n/**\n * Returns the price in cUSD of the input currency\n * @param token the token to get the cUSD price of\n */\nexport function useCUSDPrice(token?: Token): Price | undefined {\n  const {\n    network: { chainId },\n  } = useCelo()\n  const CUSD = cUSD[chainId as unknown as UbeswapChainId]\n  const celo = CELO[chainId as unknown as UbeswapChainId]\n  const mcUSD = MCUSD[chainId as unknown as UbeswapChainId]\n  const tokenPairs: [Token | undefined, Token | undefined][] = useMemo(\n    () => [\n      [token && currencyEquals(token, CUSD) ? undefined : token, CUSD],\n      [token && currencyEquals(token, celo) ? undefined : token, celo],\n      [token && mcUSD && currencyEquals(token, mcUSD) ? undefined : token, mcUSD ? mcUSD : undefined],\n      [celo, CUSD],\n    ],\n    [CUSD, celo, mcUSD, token]\n  )\n  const [[, cUSDPair], [, celoPair], [, mcUSDPair], [, celoCUSDPair]] = usePairs(tokenPairs)\n  const cusdPairAddr = token ? (currencyEquals(token, CUSD) ? undefined : Pair.getAddress(token, CUSD)) : undefined\n  const cusdPairTotalSupply = useTotalSupply(useToken(cusdPairAddr) || undefined)\n  const mcusdPairAddr = token && mcUSD && token.address !== mcUSD.address ? Pair.getAddress(token, mcUSD) : undefined\n  const mcusdPairTotalSupply = useTotalSupply(useToken(mcusdPairAddr) || undefined)\n\n  return useMemo(() => {\n    if (!token || !chainId) {\n      return undefined\n    }\n\n    // handle cUSD\n    if (token.equals(CUSD)) {\n      return new Price(CUSD, CUSD, '1', '1')\n    }\n\n    if (mcUSDPair && cUSDPair && cusdPairTotalSupply && mcusdPairTotalSupply) {\n      try {\n        if (\n          JSBI.greaterThan(\n            mcUSDPair.getLiquidityMinted(mcusdPairTotalSupply, mcUSDPair.reserve0, mcUSDPair.reserve1).raw,\n            cUSDPair.getLiquidityMinted(cusdPairTotalSupply, cUSDPair.reserve0, cUSDPair.reserve1).raw\n          )\n        ) {\n          return mcUSDPair.priceOf(token)\n        }\n      } catch (e: any) {\n        if (e.message != 'Invariant failed: LIQUIDITY') {\n          console.log(e)\n        }\n      }\n    }\n\n    if (cUSDPair) {\n      return cUSDPair.priceOf(token)\n    }\n\n    if (celoPair && celoCUSDPair) {\n      return celoPair.priceOf(token).multiply(celoCUSDPair.priceOf(celo))\n    }\n\n    return undefined\n  }, [\n    chainId,\n    token,\n    CUSD,\n    cUSDPair,\n    celo,\n    celoCUSDPair,\n    celoPair,\n    mcUSDPair,\n    cusdPairTotalSupply,\n    mcusdPairTotalSupply,\n  ])\n}\n\n/**\n * Returns the price in cUSD of the input currency\n * @param currency currency to compute the cUSD price of\n */\n\nexport const useCUSDPriceOfULP = (stakingToken: Token | undefined): Price | undefined => {\n  const {\n    network: { chainId },\n  } = useCelo()\n  const pair = usePairContract(stakingToken ? stakingToken.address : '')\n  const token0Address = useSingleCallResult(pair, 'token0', [])?.result?.[0]\n  const token1Address = useSingleCallResult(pair, 'token1', [])?.result?.[0]\n  const totalSupplyOfStakingToken = useTotalSupply(stakingToken)\n  const token0 = useToken(token0Address) || undefined\n  const token1 = useToken(token1Address) || undefined\n  const [, stakingTokenPair] = usePair(token0, token1)\n  const cusdPrice0 = useCUSDPrice(stakingTokenPair?.token0)\n  const cusdPrice1 = useCUSDPrice(stakingTokenPair?.token1)\n  const CUSD = cUSD[chainId as unknown as UbeswapChainId]\n\n  return useMemo(() => {\n    if (!stakingToken || !chainId) {\n      return undefined\n    }\n\n    // handle cUSD\n    if (stakingToken.equals(CUSD)) {\n      return new Price(CUSD, CUSD, '1', '1')\n    }\n\n    if (\n      stakingToken &&\n      totalSupplyOfStakingToken &&\n      !totalSupplyOfStakingToken.equalTo('0') &&\n      cusdPrice0 &&\n      cusdPrice1 &&\n      stakingTokenPair &&\n      stakingTokenPair?.reserve0 &&\n      stakingTokenPair?.reserve1\n    ) {\n      const amount0 = cusdPrice0.quote(stakingTokenPair.reserve0)\n      const amount1 = cusdPrice1.quote(stakingTokenPair.reserve1)\n      const token1CUSDPrice = amount0.divide(totalSupplyOfStakingToken)\n      const token2CUSDPrice = amount1.divide(totalSupplyOfStakingToken)\n      const amount = token1CUSDPrice.add(token2CUSDPrice)\n      return new Price(stakingToken, CUSD, amount.denominator, amount.numerator)\n    }\n\n    return undefined\n  }, [stakingToken, chainId, CUSD, totalSupplyOfStakingToken, cusdPrice0, cusdPrice1, stakingTokenPair])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}