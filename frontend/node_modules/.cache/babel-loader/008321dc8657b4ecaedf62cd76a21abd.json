{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compactBytesToNibbles = exports.bytesToNibbles = exports.nibblesToCompactBytes = exports.nibblesToBytes = exports.hasTerminator = void 0;\n// Reference: https://ethereum.org/en/developers/docs/data-structures-and-encoding/patricia-merkle-trie/\n/**\n *\n * @param s byte sequence\n * @returns boolean indicating if input hex nibble sequence has terminator indicating leaf-node\n *          terminator is represented with 16 because a nibble ranges from 0 - 15(f)\n */\nconst hasTerminator = nibbles => {\n  return nibbles.length > 0 && nibbles[nibbles.length - 1] === 16;\n};\nexports.hasTerminator = hasTerminator;\nconst nibblesToBytes = (nibbles, bytes) => {\n  for (let bi = 0, ni = 0; ni < nibbles.length; bi += 1, ni += 2) {\n    bytes[bi] = nibbles[ni] << 4 | nibbles[ni + 1];\n  }\n};\nexports.nibblesToBytes = nibblesToBytes;\nconst nibblesToCompactBytes = nibbles => {\n  let terminator = 0;\n  if ((0, exports.hasTerminator)(nibbles)) {\n    terminator = 1;\n    // Remove the terminator from the sequence\n    nibbles = nibbles.subarray(0, nibbles.length - 1);\n  }\n  const buf = new Uint8Array(nibbles.length / 2 + 1);\n  // Shift the terminator info into the first nibble of buf[0]\n  buf[0] = terminator << 5;\n  // If odd length, then add that flag into the first nibble and put the odd nibble to\n  // second part of buf[0] which otherwise will be left padded with a 0\n  if ((nibbles.length & 1) === 1) {\n    buf[0] |= 1 << 4;\n    buf[0] |= nibbles[0];\n    nibbles = nibbles.subarray(1);\n  }\n  // create bytes out of the rest even nibbles\n  (0, exports.nibblesToBytes)(nibbles, buf.subarray(1));\n  return buf;\n};\nexports.nibblesToCompactBytes = nibblesToCompactBytes;\nconst bytesToNibbles = str => {\n  const l = str.length * 2 + 1;\n  const nibbles = new Uint8Array(l);\n  for (let i = 0; i < str.length; i++) {\n    const b = str[i];\n    nibbles[i * 2] = b / 16;\n    nibbles[i * 2 + 1] = b % 16;\n  }\n  // This will get removed from calling function if the first nibble\n  // indicates that terminator is not present\n  nibbles[l - 1] = 16;\n  return nibbles;\n};\nexports.bytesToNibbles = bytesToNibbles;\nconst compactBytesToNibbles = compact => {\n  if (compact.length === 0) {\n    return compact;\n  }\n  let base = (0, exports.bytesToNibbles)(compact);\n  // delete terminator flag if terminator flag was not in first nibble\n  if (base[0] < 2) {\n    base = base.subarray(0, base.length - 1);\n  }\n  // chop the terminator nibble and the even padding (if there is one)\n  // i.e.  chop 2 left nibbles when even else 1 when odd\n  const chop = 2 - (base[0] & 1);\n  return base.subarray(chop);\n};\nexports.compactBytesToNibbles = compactBytesToNibbles;\n/**\n * A test helper to generates compact path for a subset of key bytes\n *\n * TODO: Commenting the code for now as this seems to be helper function\n * (from geth codebase )\n *\n */\n//\n//\n// export const getPathTo = (tillBytes: number, key: Buffer) => {\n//   const hexNibbles = bytesToNibbles(key).subarray(0, tillBytes)\n//   // Remove the terminator if its there, although it would be there only if tillBytes >= key.length\n//   // This seems to be a test helper to generate paths so correctness of this isn't necessary\n//   hexNibbles[hexNibbles.length - 1] = 0\n//   const compactBytes = nibblesToCompactBytes(hexNibbles)\n//   return [Buffer.from(compactBytes)]\n// }","map":null,"metadata":{},"sourceType":"script"}