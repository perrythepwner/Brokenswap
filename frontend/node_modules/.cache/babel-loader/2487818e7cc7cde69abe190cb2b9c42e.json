{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitArrayTreeViewDU = void 0;\nconst abstract_1 = require(\"./abstract\");\n/**\n * Thin wrapper around BitArray to upstream changes after `this.commit()`\n */\nclass BitArrayTreeViewDU extends abstract_1.TreeViewDU {\n  constructor(type, _rootNode) {\n    super();\n    this.type = type;\n    this._rootNode = _rootNode;\n    /** Cached BitArray instance computed only on demand */\n    this._bitArray = null;\n  }\n  get node() {\n    return this._rootNode;\n  }\n  get cache() {\n    return;\n  }\n  commit() {\n    if (this._bitArray !== null) {\n      this._rootNode = this.type.value_toTree(this._bitArray);\n    }\n  }\n  // Wrapped API from BitArray\n  /** @see BitArray.uint8Array */\n  get uint8Array() {\n    return this.bitArray.uint8Array;\n  }\n  /** @see BitArray.bitLen */\n  get bitLen() {\n    return this.bitArray.bitLen;\n  }\n  /** @see BitArray.get */\n  get(bitIndex) {\n    return this.bitArray.get(bitIndex);\n  }\n  /** @see BitArray.set */\n  set(bitIndex, bit) {\n    this.bitArray.set(bitIndex, bit);\n  }\n  /** @see BitArray.mergeOrWith */\n  mergeOrWith(bitArray2) {\n    this.bitArray.mergeOrWith(bitArray2);\n  }\n  /** @see BitArray.intersectValues */\n  intersectValues(values) {\n    return this.bitArray.intersectValues(values);\n  }\n  /** @see BitArray.getTrueBitIndexes */\n  getTrueBitIndexes() {\n    return this.bitArray.getTrueBitIndexes();\n  }\n  /** @see BitArray.getSingleTrueBit */\n  getSingleTrueBit() {\n    return this.bitArray.getSingleTrueBit();\n  }\n  /** @see BitArray.toBoolArray */\n  toBoolArray() {\n    return this.bitArray.toBoolArray();\n  }\n  /** Lazily computed bitArray instance */\n  get bitArray() {\n    if (this._bitArray === null) {\n      this._bitArray = this.type.tree_toValue(this._rootNode);\n    }\n    return this._bitArray;\n  }\n  clearCache() {\n    this._bitArray = null;\n  }\n}\nexports.BitArrayTreeViewDU = BitArrayTreeViewDU;","map":null,"metadata":{},"sourceType":"script"}