{"ast":null,"code":"import { Percent, Price, TokenAmount, TradeType } from '@ubeswap/sdk';\nimport { UbeswapTrade } from '../trade';\nconst moolaDirectRouter = {};\n\n/**\n * A trade that directly happens with moola.\n */\nexport class MoolaDirectTrade extends UbeswapTrade {\n  isWithdrawal() {\n    var _this$inputAmount$cur, _this$inputAmount$cur2;\n    return (_this$inputAmount$cur = (_this$inputAmount$cur2 = this.inputAmount.currency.symbol) === null || _this$inputAmount$cur2 === void 0 ? void 0 : _this$inputAmount$cur2.startsWith('m')) !== null && _this$inputAmount$cur !== void 0 ? _this$inputAmount$cur : false;\n  }\n  constructor(route, inputAmount, outputAmount, tradeType) {\n    super(route, inputAmount, tradeType, moolaDirectRouter, [inputAmount.token, outputAmount.token]);\n    /**\n     * The input amount for the trade assuming no slippage.\n     */\n    this.inputAmount = void 0;\n    /**\n     * The output amount for the trade assuming no slippage.\n     */\n    this.outputAmount = void 0;\n    /**\n     * The price expressed in terms of output amount/input amount.\n     */\n    this.executionPrice = void 0;\n    /**\n     * The mid price after the trade executes assuming no slippage.\n     */\n    this.nextMidPrice = void 0;\n    /**\n     * The percent difference between the mid price before the trade and the trade execution price.\n     */\n    this.priceImpact = void 0;\n    this.inputAmount = inputAmount;\n    this.outputAmount = outputAmount;\n    this.executionPrice = new Price(inputAmount.token, outputAmount.token, '1', '1');\n    this.nextMidPrice = new Price(inputAmount.token, outputAmount.token, '1', '1');\n    this.priceImpact = new Percent('0');\n    this.hidePairAnalytics = true;\n  }\n  static fromIn(route, inputAmount) {\n    return new MoolaDirectTrade(route, inputAmount, new TokenAmount(route.output, inputAmount.raw), TradeType.EXACT_INPUT);\n  }\n  static fromOut(route, outputAmount) {\n    return new MoolaDirectTrade(route, new TokenAmount(route.output, outputAmount.raw), outputAmount, TradeType.EXACT_OUTPUT);\n  }\n}","map":{"version":3,"names":["Percent","Price","TokenAmount","TradeType","UbeswapTrade","moolaDirectRouter","MoolaDirectTrade","isWithdrawal","_this$inputAmount$cur","_this$inputAmount$cur2","inputAmount","currency","symbol","startsWith","constructor","route","outputAmount","tradeType","token","executionPrice","nextMidPrice","priceImpact","hidePairAnalytics","fromIn","output","raw","EXACT_INPUT","fromOut","EXACT_OUTPUT"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/components/swap/routing/moola/MoolaDirectTrade.ts"],"sourcesContent":["import { Percent, Price, Route, TokenAmount, TradeType } from '@ubeswap/sdk'\n\nimport { TradeRouter, UbeswapTrade } from '../trade'\n\nconst moolaDirectRouter: TradeRouter = {}\n\n/**\n * A trade that directly happens with moola.\n */\nexport class MoolaDirectTrade extends UbeswapTrade {\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  inputAmount: TokenAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  outputAmount: TokenAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  priceImpact: Percent\n\n  isWithdrawal(): boolean {\n    return this.inputAmount.currency.symbol?.startsWith('m') ?? false\n  }\n\n  constructor(route: Route, inputAmount: TokenAmount, outputAmount: TokenAmount, tradeType: TradeType) {\n    super(route, inputAmount, tradeType, moolaDirectRouter, [inputAmount.token, outputAmount.token])\n    this.inputAmount = inputAmount\n    this.outputAmount = outputAmount\n    this.executionPrice = new Price(inputAmount.token, outputAmount.token, '1', '1')\n    this.nextMidPrice = new Price(inputAmount.token, outputAmount.token, '1', '1')\n    this.priceImpact = new Percent('0')\n    this.hidePairAnalytics = true\n  }\n\n  static fromIn(route: Route, inputAmount: TokenAmount): MoolaDirectTrade {\n    return new MoolaDirectTrade(\n      route,\n      inputAmount,\n      new TokenAmount(route.output, inputAmount.raw),\n      TradeType.EXACT_INPUT\n    )\n  }\n\n  static fromOut(route: Route, outputAmount: TokenAmount): MoolaDirectTrade {\n    return new MoolaDirectTrade(\n      route,\n      new TokenAmount(route.output, outputAmount.raw),\n      outputAmount,\n      TradeType.EXACT_OUTPUT\n    )\n  }\n}\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,KAAK,EAASC,WAAW,EAAEC,SAAS,QAAQ,cAAc;AAE5E,SAAsBC,YAAY,QAAQ,UAAU;AAEpD,MAAMC,iBAA8B,GAAG,CAAC,CAAC;;AAEzC;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,SAASF,YAAY,CAAC;EAsBjDG,YAAYA,CAAA,EAAY;IAAA,IAAAC,qBAAA,EAAAC,sBAAA;IACtB,QAAAD,qBAAA,IAAAC,sBAAA,GAAO,IAAI,CAACC,WAAW,CAACC,QAAQ,CAACC,MAAM,cAAAH,sBAAA,uBAAhCA,sBAAA,CAAkCI,UAAU,CAAC,GAAG,CAAC,cAAAL,qBAAA,cAAAA,qBAAA,GAAI,KAAK;EACnE;EAEAM,WAAWA,CAACC,KAAY,EAAEL,WAAwB,EAAEM,YAAyB,EAAEC,SAAoB,EAAE;IACnG,KAAK,CAACF,KAAK,EAAEL,WAAW,EAAEO,SAAS,EAAEZ,iBAAiB,EAAE,CAACK,WAAW,CAACQ,KAAK,EAAEF,YAAY,CAACE,KAAK,CAAC,CAAC;IA1BlG;AACF;AACA;IAFE,KAGAR,WAAW;IACX;AACF;AACA;IAFE,KAGAM,YAAY;IACZ;AACF;AACA;IAFE,KAGAG,cAAc;IACd;AACF;AACA;IAFE,KAGAC,YAAY;IACZ;AACF;AACA;IAFE,KAGAC,WAAW;IAQT,IAAI,CAACX,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACM,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACG,cAAc,GAAG,IAAIlB,KAAK,CAACS,WAAW,CAACQ,KAAK,EAAEF,YAAY,CAACE,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;IAChF,IAAI,CAACE,YAAY,GAAG,IAAInB,KAAK,CAACS,WAAW,CAACQ,KAAK,EAAEF,YAAY,CAACE,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;IAC9E,IAAI,CAACG,WAAW,GAAG,IAAIrB,OAAO,CAAC,GAAG,CAAC;IACnC,IAAI,CAACsB,iBAAiB,GAAG,IAAI;EAC/B;EAEA,OAAOC,MAAMA,CAACR,KAAY,EAAEL,WAAwB,EAAoB;IACtE,OAAO,IAAIJ,gBAAgB,CACzBS,KAAK,EACLL,WAAW,EACX,IAAIR,WAAW,CAACa,KAAK,CAACS,MAAM,EAAEd,WAAW,CAACe,GAAG,CAAC,EAC9CtB,SAAS,CAACuB,WACZ,CAAC;EACH;EAEA,OAAOC,OAAOA,CAACZ,KAAY,EAAEC,YAAyB,EAAoB;IACxE,OAAO,IAAIV,gBAAgB,CACzBS,KAAK,EACL,IAAIb,WAAW,CAACa,KAAK,CAACS,MAAM,EAAER,YAAY,CAACS,GAAG,CAAC,EAC/CT,YAAY,EACZb,SAAS,CAACyB,YACZ,CAAC;EACH;AACF"},"metadata":{},"sourceType":"module"}