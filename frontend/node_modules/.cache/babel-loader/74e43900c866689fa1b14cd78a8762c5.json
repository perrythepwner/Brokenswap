{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { getMainCarrier } from '@sentry/hub';\nimport { dynamicRequire, isNaN, isNodeEnv, loadModule, logger } from '@sentry/utils';\nimport { registerErrorInstrumentation } from './errors';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders() {\n  var scope = this.getScope();\n  if (scope) {\n    var span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent()\n      };\n    }\n  }\n  return {};\n}\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample(transaction, options, samplingContext) {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'explicitly_set'\n      }\n    });\n    return transaction;\n  }\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  var sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_sampler',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate)\n      }\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'inheritance'\n      }\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_rate',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate)\n      }\n    });\n  }\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    IS_DEBUG_BUILD && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    IS_DEBUG_BUILD && logger.log(\"[Tracing] Discarding transaction because \" + (typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'));\n    transaction.sampled = false;\n    return transaction;\n  }\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < sampleRate;\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    IS_DEBUG_BUILD && logger.log(\"[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = \" + Number(sampleRate) + \")\");\n    return transaction;\n  }\n  IS_DEBUG_BUILD && logger.log(\"[Tracing] starting \" + transaction.op + \" transaction - \" + transaction.name);\n  return transaction;\n}\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate) {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    IS_DEBUG_BUILD && logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got \" + JSON.stringify(rate) + \" of type \" + JSON.stringify(typeof rate) + \".\");\n    return false;\n  }\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    IS_DEBUG_BUILD && logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got \" + rate + \".\");\n    return false;\n  }\n  return true;\n}\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(transactionContext, customSamplingContext) {\n  var client = this.getClient();\n  var options = client && client.getOptions() || {};\n  var transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, __assign({\n    parentSampled: transactionContext.parentSampled,\n    transactionContext: transactionContext\n  }, customSamplingContext));\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n  return transaction;\n}\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(hub, transactionContext, idleTimeout, onScope, customSamplingContext) {\n  var client = hub.getClient();\n  var options = client && client.getOptions() || {};\n  var transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  transaction = sample(transaction, options, __assign({\n    parentSampled: transactionContext.parentSampled,\n    transactionContext: transactionContext\n  }, customSamplingContext));\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n  return transaction;\n}\n/**\n * @private\n */\nexport function _addTracingExtensions() {\n  var carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations() {\n  var carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  var packageToIntegrationMapping = {\n    mongodb: function mongodb() {\n      var integration = dynamicRequire(module, './integrations/node/mongo');\n      return new integration.Mongo();\n    },\n    mongoose: function mongoose() {\n      var integration = dynamicRequire(module, './integrations/node/mongo');\n      return new integration.Mongo({\n        mongoose: true\n      });\n    },\n    mysql: function mysql() {\n      var integration = dynamicRequire(module, './integrations/node/mysql');\n      return new integration.Mysql();\n    },\n    pg: function pg() {\n      var integration = dynamicRequire(module, './integrations/node/postgres');\n      return new integration.Postgres();\n    }\n  };\n  var mappedPackages = Object.keys(packageToIntegrationMapping).filter(function (moduleName) {\n    return !!loadModule(moduleName);\n  }).map(function (pkg) {\n    try {\n      return packageToIntegrationMapping[pkg]();\n    } catch (e) {\n      return undefined;\n    }\n  }).filter(function (p) {\n    return p;\n  });\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = __spread(carrier.__SENTRY__.integrations || [], mappedPackages);\n  }\n}\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods() {\n  _addTracingExtensions();\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}","map":null,"metadata":{},"sourceType":"module"}