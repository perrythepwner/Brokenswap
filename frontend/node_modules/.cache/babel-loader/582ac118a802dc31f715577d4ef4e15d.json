{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCelo, useProvider } from '@celo/react-celo';\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\nimport { checkedTransaction, finalizeTransaction } from './actions';\nexport function shouldCheck(lastBlockNumber, tx) {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\nexport default function Updater() {\n  _s();\n  const {\n    network\n  } = useCelo();\n  const chainId = network.chainId;\n  const library = useProvider();\n  const lastBlockNumber = useBlockNumber();\n  const dispatch = useDispatch();\n  const state = useSelector(state => state.transactions);\n  const transactions = useMemo(() => {\n    var _state$chainId;\n    return chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n  }, [chainId, state]);\n\n  // show popup on confirm\n  const addPopup = useAddPopup();\n  useEffect(() => {\n    if (!chainId || !library || !lastBlockNumber) return;\n    Object.keys(transactions).filter(hash => shouldCheck(lastBlockNumber, transactions[hash])).forEach(hash => {\n      library.getTransactionReceipt(hash).then(receipt => {\n        if (receipt) {\n          var _transactions$hash;\n          dispatch(finalizeTransaction({\n            chainId,\n            hash,\n            receipt: {\n              blockHash: receipt.blockHash,\n              blockNumber: receipt.blockNumber,\n              contractAddress: receipt.contractAddress,\n              from: receipt.from,\n              status: receipt.status,\n              to: receipt.to,\n              transactionHash: receipt.transactionHash,\n              transactionIndex: receipt.transactionIndex\n            }\n          }));\n          addPopup({\n            txn: {\n              hash,\n              success: receipt.status === 1,\n              summary: (_transactions$hash = transactions[hash]) === null || _transactions$hash === void 0 ? void 0 : _transactions$hash.summary\n            }\n          }, hash);\n        } else {\n          dispatch(checkedTransaction({\n            chainId,\n            hash,\n            blockNumber: lastBlockNumber\n          }));\n        }\n      }).catch(error => {\n        console.error(\"failed to check transaction hash: \".concat(hash), error);\n      });\n    });\n  }, [chainId, library, transactions, lastBlockNumber, dispatch, addPopup]);\n  return null;\n}\n_s(Updater, \"bz4y8MttTWunableuUREHAlmQhM=\", false, function () {\n  return [useCelo, useProvider, useBlockNumber, useDispatch, useSelector, useAddPopup];\n});\n_c = Updater;\nvar _c;\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"names":["useCelo","useProvider","useEffect","useMemo","useDispatch","useSelector","useAddPopup","useBlockNumber","checkedTransaction","finalizeTransaction","shouldCheck","lastBlockNumber","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","Updater","_s","network","chainId","library","dispatch","state","transactions","_state$chainId","addPopup","Object","keys","filter","hash","forEach","getTransactionReceipt","then","_transactions$hash","blockHash","blockNumber","contractAddress","from","status","to","transactionHash","transactionIndex","txn","success","summary","catch","error","console","concat","_c","$RefreshReg$"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/state/transactions/updater.tsx"],"sourcesContent":["import { useCelo, useProvider } from '@celo/react-celo'\nimport { ChainId } from '@ubeswap/sdk'\nimport { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useAddPopup, useBlockNumber } from '../application/hooks'\nimport { AppDispatch, AppState } from '../index'\nimport { checkedTransaction, finalizeTransaction } from './actions'\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: { addedTime: number; receipt?: unknown; lastCheckedBlockNumber?: number }\n): boolean {\n  if (tx.receipt) return false\n  if (!tx.lastCheckedBlockNumber) return true\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber\n  if (blocksSinceCheck < 1) return false\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2\n  } else {\n    // otherwise every block\n    return true\n  }\n}\n\nexport default function Updater(): null {\n  const { network } = useCelo()\n  const chainId = network.chainId as unknown as ChainId\n  const library = useProvider()\n\n  const lastBlockNumber = useBlockNumber()\n\n  const dispatch = useDispatch<AppDispatch>()\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions)\n\n  const transactions = useMemo(() => (chainId ? state[chainId] ?? {} : {}), [chainId, state])\n\n  // show popup on confirm\n  const addPopup = useAddPopup()\n\n  useEffect(() => {\n    if (!chainId || !library || !lastBlockNumber) return\n\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        library\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                })\n              )\n\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash\n              )\n            } else {\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }))\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error)\n          })\n      })\n  }, [chainId, library, transactions, lastBlockNumber, dispatch, addPopup])\n\n  return null\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}