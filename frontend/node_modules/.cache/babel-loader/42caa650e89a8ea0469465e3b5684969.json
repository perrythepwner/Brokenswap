{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ByteListType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst byteArray_1 = require(\"./byteArray\");\n/**\n * ByteList: Immutable alias of List[byte, N]\n * - Notation: `ByteList[N]`\n * - Value: `Uint8Array`\n * - View: `Uint8Array`\n * - ViewDU: `Uint8Array`\n *\n * ByteList is an immutable value which is represented by a Uint8Array for memory efficiency and performance.\n * Note: Consumers of this type MUST never mutate the `Uint8Array` representation of a ByteList.\n *\n * For a `ByteListType` with mutability, use `ListBasicType(byteType)`\n */\nclass ByteListType extends byteArray_1.ByteArrayType {\n  constructor(limitBytes, opts) {\n    var _opts$typeName;\n    super();\n    this.limitBytes = limitBytes;\n    this.fixedSize = null;\n    this.isList = true;\n    if (limitBytes === 0) throw Error(\"List limit must be > 0\");\n    this.typeName = (_opts$typeName = opts === null || opts === void 0 ? void 0 : opts.typeName) !== null && _opts$typeName !== void 0 ? _opts$typeName : \"ByteList[\".concat(limitBytes, \"]\");\n    this.maxChunkCount = Math.ceil(this.limitBytes / 32);\n    this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n    this.depth = 1 + this.chunkDepth;\n    this.minSize = 0;\n    this.maxSize = this.limitBytes;\n  }\n  static named(limitBits, opts) {\n    return new (named_1.namedClass(ByteListType, opts.typeName))(limitBits, opts);\n  }\n  // Views: inherited from ByteArrayType\n  // Serialization + deserialization\n  value_serializedSize(value) {\n    return value.length;\n  }\n  // value_* inherited from ByteArrayType\n  tree_serializedSize(node) {\n    return arrayBasic_1.getLengthFromRootNode(node);\n  }\n  tree_serializeToBytes(output, offset, node) {\n    const chunksNode = arrayBasic_1.getChunksNodeFromRootNode(node);\n    const byteLen = arrayBasic_1.getLengthFromRootNode(node);\n    const chunkLen = Math.ceil(byteLen / 32);\n    const nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.chunkDepth, 0, chunkLen);\n    persistent_merkle_tree_1.packedNodeRootsToBytes(output.dataView, offset, byteLen, nodes);\n    return offset + byteLen;\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    this.assertValidSize(end - start);\n    const chunksNode = persistent_merkle_tree_1.packedRootsBytesToNode(this.chunkDepth, data.dataView, start, end);\n    return arrayBasic_1.addLengthNode(chunksNode, end - start);\n  }\n  tree_getByteLen(node) {\n    if (!node) throw new Error(\"ByteListType requires a node to get leaves\");\n    return arrayBasic_1.getLengthFromRootNode(node);\n  }\n  // Merkleization: inherited from ByteArrayType\n  hashTreeRoot(value) {\n    return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n  }\n  // Proofs: inherited from BitArrayType\n  // JSON: inherited from ByteArrayType\n  assertValidSize(size) {\n    if (size > this.limitBytes) {\n      throw Error(\"ByteList invalid size \".concat(size, \" limit \").concat(this.limitBytes));\n    }\n  }\n}\nexports.ByteListType = ByteListType;","map":{"version":3,"sources":["../../src/type/byteList.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ByteListType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst byteArray_1 = require(\"./byteArray\");\n/**\n * ByteList: Immutable alias of List[byte, N]\n * - Notation: `ByteList[N]`\n * - Value: `Uint8Array`\n * - View: `Uint8Array`\n * - ViewDU: `Uint8Array`\n *\n * ByteList is an immutable value which is represented by a Uint8Array for memory efficiency and performance.\n * Note: Consumers of this type MUST never mutate the `Uint8Array` representation of a ByteList.\n *\n * For a `ByteListType` with mutability, use `ListBasicType(byteType)`\n */\nclass ByteListType extends byteArray_1.ByteArrayType {\n    constructor(limitBytes, opts) {\n        super();\n        this.limitBytes = limitBytes;\n        this.fixedSize = null;\n        this.isList = true;\n        if (limitBytes === 0)\n            throw Error(\"List limit must be > 0\");\n        this.typeName = opts?.typeName ?? `ByteList[${limitBytes}]`;\n        this.maxChunkCount = Math.ceil(this.limitBytes / 32);\n        this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n        this.depth = 1 + this.chunkDepth;\n        this.minSize = 0;\n        this.maxSize = this.limitBytes;\n    }\n    static named(limitBits, opts) {\n        return new (named_1.namedClass(ByteListType, opts.typeName))(limitBits, opts);\n    }\n    // Views: inherited from ByteArrayType\n    // Serialization + deserialization\n    value_serializedSize(value) {\n        return value.length;\n    }\n    // value_* inherited from ByteArrayType\n    tree_serializedSize(node) {\n        return arrayBasic_1.getLengthFromRootNode(node);\n    }\n    tree_serializeToBytes(output, offset, node) {\n        const chunksNode = arrayBasic_1.getChunksNodeFromRootNode(node);\n        const byteLen = arrayBasic_1.getLengthFromRootNode(node);\n        const chunkLen = Math.ceil(byteLen / 32);\n        const nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.chunkDepth, 0, chunkLen);\n        persistent_merkle_tree_1.packedNodeRootsToBytes(output.dataView, offset, byteLen, nodes);\n        return offset + byteLen;\n    }\n    tree_deserializeFromBytes(data, start, end) {\n        this.assertValidSize(end - start);\n        const chunksNode = persistent_merkle_tree_1.packedRootsBytesToNode(this.chunkDepth, data.dataView, start, end);\n        return arrayBasic_1.addLengthNode(chunksNode, end - start);\n    }\n    tree_getByteLen(node) {\n        if (!node)\n            throw new Error(\"ByteListType requires a node to get leaves\");\n        return arrayBasic_1.getLengthFromRootNode(node);\n    }\n    // Merkleization: inherited from ByteArrayType\n    hashTreeRoot(value) {\n        return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n    }\n    // Proofs: inherited from BitArrayType\n    // JSON: inherited from ByteArrayType\n    assertValidSize(size) {\n        if (size > this.limitBytes) {\n            throw Error(`ByteList invalid size ${size} limit ${this.limitBytes}`);\n        }\n    }\n}\nexports.ByteListType = ByteListType;\n//# sourceMappingURL=byteList.js.map"]},"metadata":{},"sourceType":"script"}