{"ast":null,"code":"\"use strict\";\n\n// These functions were moved from the identity SDK because the protocol package\n// and @celo/phone-utils both need these core identifier generation functions as well.\n// The protocol package cannot depend on the identity SDK as is since this creates\n// a non-trivial dependency cycle (currently, if A->B means \"A depends on B\",\n// identity -> phone-number-privacy-common -> contractkit -> protocol).\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIdentifierHash = exports.getPrefixedIdentifier = exports.IdentifierPrefix = exports.PEPPER_SEPARATOR = void 0;\nexports.PEPPER_SEPARATOR = '__';\n// Docstring is duplicated in @celo/identity; make sure to update in both places.\n/**\n * Standardized prefixes for ODIS identifiers.\n *\n * @remarks These prefixes prevent collisions between off-chain identifiers.\n * i.e. if a user's instagram and twitter handles are the same,\n * these prefixes prevent the ODIS identifers from being the same.\n *\n * If you would like to use a prefix that isn't included, please put up a PR\n * adding it to @celo/base (in celo-monorepo/packages/sdk/base/src/identifier.ts)\n * to ensure interoperability with other projects. When adding new prefixes,\n * please use either the full platform name in all lowercase (e.g. 'facebook')\n * or DID methods https://w3c.github.io/did-spec-registries/#did-methods.\n * Make sure to add the expected value for the unit test case in\n * `celo-monorepo/packages/sdk/base/src/identifier.test.ts`,\n * otherwise the test will fail.\n *\n * The NULL prefix is included to allow projects to use the sdk without selecting\n * a predefined prefix or adding their own. Production use of the NULL prefix is\n * discouraged since identifiers will not be interoperable with other projects.\n * Please think carefully before using the NULL prefix.\n */\nvar IdentifierPrefix;\n(function (IdentifierPrefix) {\n  IdentifierPrefix[\"NULL\"] = \"\";\n  IdentifierPrefix[\"PHONE_NUMBER\"] = \"tel\";\n  IdentifierPrefix[\"EMAIL\"] = \"mailto\";\n  IdentifierPrefix[\"TWITTER\"] = \"twit\";\n  IdentifierPrefix[\"FACEBOOK\"] = \"facebook\";\n  IdentifierPrefix[\"INSTAGRAM\"] = \"instagram\";\n  IdentifierPrefix[\"DISCORD\"] = \"discord\";\n  IdentifierPrefix[\"TELEGRAM\"] = \"telegram\";\n  IdentifierPrefix[\"SIGNAL\"] = \"signal\";\n})(IdentifierPrefix = exports.IdentifierPrefix || (exports.IdentifierPrefix = {}));\n// Docstring is duplicated in @celo/identity; make sure to update in both places.\n/**\n * Concatenates the identifierPrefix and plaintextIdentifier with the separator '://'\n *\n * @param plaintextIdentifier Off-chain identifier, ex: phone number, twitter handle, email, etc.\n * @param identifierPrefix Standardized prefix used to prevent collisions between identifiers\n */\nvar getPrefixedIdentifier = function getPrefixedIdentifier(plaintextIdentifier, identifierPrefix) {\n  return identifierPrefix + '://' + plaintextIdentifier;\n};\nexports.getPrefixedIdentifier = getPrefixedIdentifier;\n/**\n * Helper function for getIdentifierHash in @celo/identity, so that this can\n * be used in protocol tests without dependency issues.\n *\n * @remarks\n * Concatenates the plaintext prefixed identifier with the pepper derived by hashing the unblinded\n * signature returned by ODIS.\n *\n * @param sha3 Hash function (i.e. soliditySha3) to use to generate the identifier\n * @param plaintextIdentifier Off-chain identifier, ex: phone number, twitter handle, email, etc.\n * @param identifierPrefix Standardized prefix used to prevent collisions between identifiers\n * @param pepper Hash of the unblinded signature returned by ODIS\n */\nvar getIdentifierHash = function getIdentifierHash(sha3, plaintextIdentifier, identifierPrefix, pepper) {\n  // hashing the identifier before appending the pepper to avoid domain collisions where the\n  // identifier may contain underscores\n  // not doing this for phone numbers to maintain backwards compatibility\n  var value = identifierPrefix === IdentifierPrefix.PHONE_NUMBER ? (0, exports.getPrefixedIdentifier)(plaintextIdentifier, identifierPrefix) + exports.PEPPER_SEPARATOR + pepper : sha3((0, exports.getPrefixedIdentifier)(plaintextIdentifier, identifierPrefix)) + exports.PEPPER_SEPARATOR + pepper;\n  return sha3(value);\n};\nexports.getIdentifierHash = getIdentifierHash;","map":null,"metadata":{},"sourceType":"script"}