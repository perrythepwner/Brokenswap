{"ast":null,"code":"var _asyncToGenerator = require(\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst BaseFilter = require('./base-filter');\nconst getBlocksForRange = require('./getBlocksForRange');\nconst {\n  incrementHexInt\n} = require('./hexUtils');\nclass TxFilter extends BaseFilter {\n  constructor(_ref) {\n    let {\n      provider\n    } = _ref;\n    super();\n    this.type = 'tx';\n    this.provider = provider;\n  }\n  update(_ref2) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let {\n        oldBlock\n      } = _ref2;\n      const toBlock = oldBlock;\n      const fromBlock = incrementHexInt(oldBlock);\n      const blocks = yield getBlocksForRange({\n        provider: _this.provider,\n        fromBlock,\n        toBlock\n      });\n      const blockTxHashes = [];\n      for (const block of blocks) {\n        blockTxHashes.push(...block.transactions);\n      }\n      // add to results\n      _this.addResults(blockTxHashes);\n    })();\n  }\n}\nmodule.exports = TxFilter;","map":{"version":3,"names":["BaseFilter","require","getBlocksForRange","incrementHexInt","TxFilter","constructor","_ref","provider","type","update","_ref2","_this","_asyncToGenerator","oldBlock","toBlock","fromBlock","blocks","blockTxHashes","block","push","transactions","addResults","module","exports"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/eth-json-rpc-filters/tx-filter.js"],"sourcesContent":["const BaseFilter = require('./base-filter')\nconst getBlocksForRange = require('./getBlocksForRange')\nconst { incrementHexInt } = require('./hexUtils')\n\nclass TxFilter extends BaseFilter {\n\n  constructor ({ provider }) {\n    super()\n    this.type = 'tx'\n    this.provider = provider\n  }\n\n  async update ({ oldBlock }) {\n    const toBlock = oldBlock\n    const fromBlock = incrementHexInt(oldBlock)\n    const blocks = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock })\n    const blockTxHashes = []\n    for (const block of blocks) {\n      blockTxHashes.push(...block.transactions)\n    }\n    // add to results\n    this.addResults(blockTxHashes)\n  }\n\n}\n\nmodule.exports = TxFilter\n"],"mappings":";AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AACxD,MAAM;EAAEE;AAAgB,CAAC,GAAGF,OAAO,CAAC,YAAY,CAAC;AAEjD,MAAMG,QAAQ,SAASJ,UAAU,CAAC;EAEhCK,WAAWA,CAAAC,IAAA,EAAgB;IAAA,IAAd;MAAEC;IAAS,CAAC,GAAAD,IAAA;IACvB,KAAK,CAAC,CAAC;IACP,IAAI,CAACE,IAAI,GAAG,IAAI;IAChB,IAAI,CAACD,QAAQ,GAAGA,QAAQ;EAC1B;EAEME,MAAMA,CAAAC,KAAA,EAAgB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAAA,IAAd;QAAEC;MAAS,CAAC,GAAAH,KAAA;MACxB,MAAMI,OAAO,GAAGD,QAAQ;MACxB,MAAME,SAAS,GAAGZ,eAAe,CAACU,QAAQ,CAAC;MAC3C,MAAMG,MAAM,SAASd,iBAAiB,CAAC;QAAEK,QAAQ,EAAEI,KAAI,CAACJ,QAAQ;QAAEQ,SAAS;QAAED;MAAQ,CAAC,CAAC;MACvF,MAAMG,aAAa,GAAG,EAAE;MACxB,KAAK,MAAMC,KAAK,IAAIF,MAAM,EAAE;QAC1BC,aAAa,CAACE,IAAI,CAAC,GAAGD,KAAK,CAACE,YAAY,CAAC;MAC3C;MACA;MACAT,KAAI,CAACU,UAAU,CAACJ,aAAa,CAAC;IAAA;EAChC;AAEF;AAEAK,MAAM,CAACC,OAAO,GAAGnB,QAAQ"},"metadata":{},"sourceType":"script"}