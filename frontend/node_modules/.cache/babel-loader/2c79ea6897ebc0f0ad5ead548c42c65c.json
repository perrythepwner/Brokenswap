{"ast":null,"code":"\"use strict\";\n\n/**\n  This QRCode generator is inspired from\n  https://github.com/rainbow-me/rainbow-button/blob/master/src/components/qrcode/QRCode.tsx\n  which is registered under the MIT license\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst qrcode_1 = require(\"qrcode\");\nconst react_1 = __importStar(require(\"react\"));\nconst use_theme_1 = __importDefault(require(\"../hooks/use-theme\"));\nconst logger_1 = require(\"../utils/logger\");\nconst tailwind_1 = __importDefault(require(\"../utils/tailwind\"));\n// From https://github.com/soldair/node-qrcode#qr-code-capacity\nconst qrCodeCapacity = [\n// ['H', 1273],\n// ['Q', 1663],\n['M', 2331], ['L', 2953]];\nconst generateMatrix = value => {\n  const bytes = Buffer.from(value).byteLength;\n  let i = 0;\n  while (qrCodeCapacity[i][1] <= bytes) {\n    i++;\n  }\n  const qrcode = (0, qrcode_1.create)(value, {\n    errorCorrectionLevel: qrCodeCapacity[i][0]\n  });\n  const arr = Array.from(qrcode.modules.data);\n  const sqrt = Math.sqrt(arr.length);\n  return arr.reduce((rows, key, index) => {\n    if (index % sqrt === 0) {\n      rows.push([key]);\n    } else {\n      rows[rows.length - 1].push(key);\n    }\n    return rows;\n  }, []);\n};\nconst BORDER_RADIUS = 2;\nconst CORNER_SQUARES = 3;\nconst MASK_SIZE = 7;\nfunction matrixToCorners(matrix, size) {\n  const rects = [];\n  const cellSize = size / matrix.length;\n  const corners = [[0, 0], [1, 0], [0, 1]];\n  for (let index = 0; index < corners.length; index++) {\n    const [x, y] = corners[index];\n    const x1 = (matrix.length - MASK_SIZE) * cellSize * x;\n    const y1 = (matrix.length - MASK_SIZE) * cellSize * y;\n    for (let i = 0; i < CORNER_SQUARES; i++) {\n      rects.push(react_1.default.createElement(\"rect\", {\n        className: i % 2 !== 0 ? 'tw-fill-white' : 'tw-fill-black',\n        height: cellSize * (MASK_SIZE - i * 2),\n        key: \"corner-\".concat(x, \"-\").concat(y, \"-\").concat(i),\n        rx: (i - BORDER_RADIUS - 1) * -BORDER_RADIUS + (i === 0 ? 2 : 0),\n        ry: (i - BORDER_RADIUS - 1) * -BORDER_RADIUS + (i === 0 ? 2 : 0),\n        width: cellSize * (MASK_SIZE - i * 2),\n        x: x1 + cellSize * i,\n        y: y1 + cellSize * i\n      }));\n    }\n  }\n  return rects;\n}\nfunction matrixToDots(matrix, size) {\n  const dots = [];\n  const cellSize = size / matrix.length;\n  const matrixMiddleStart = matrix.length / 2;\n  const matrixMiddleEnd = matrix.length / 2 - 1;\n  for (let i = 0; i < matrix.length; i++) {\n    for (let j = 0; j < matrix[i].length; j++) {\n      const data = matrix[i][j];\n      if (!data) continue;\n      if (!(i < MASK_SIZE && j < MASK_SIZE || i > matrix.length - (MASK_SIZE + 1) && j < MASK_SIZE || i < MASK_SIZE && j > matrix.length - (MASK_SIZE + 1))) {\n        if (!(i > matrixMiddleStart && i < matrixMiddleEnd && j > matrixMiddleStart && j < matrixMiddleEnd && i < j && j < i + 1)) {\n          dots.push(react_1.default.createElement(\"circle\", {\n            cx: i * cellSize + cellSize / 3,\n            cy: j * cellSize + cellSize / 3,\n            className: \"tw-fill-black\",\n            key: \"circle-\".concat(i, \"-\").concat(j),\n            r: cellSize / 3\n          }));\n        }\n      }\n    }\n  }\n  return dots;\n}\nconst styles = (0, tailwind_1.default)({\n  container: \"\\n    tw-border\\n    tw-relative\\n    tw-select-none\\n    tw-p-5\\n    tw-rounded-lg\\n    tw-bg-white\"\n});\nconst PrettyQrCode = _ref => {\n  let {\n    size = 200,\n    value\n  } = _ref;\n  const theme = (0, use_theme_1.default)();\n  const matrix = (0, react_1.useMemo)(() => {\n    const _matrix = generateMatrix(value);\n    (0, logger_1.getApplicationLogger)().debug('[PrettyQrCode]', 'Generated matrix');\n    return _matrix;\n  }, [value]);\n  const corners = (0, react_1.useMemo)(() => matrixToCorners(matrix, size), [size, matrix]);\n  const dots = (0, react_1.useMemo)(() => matrixToDots(matrix, size), [size, matrix]);\n  return react_1.default.createElement(\"div\", {\n    className: styles.container,\n    style: {\n      borderColor: theme.muted\n    }\n  }, react_1.default.createElement(\"svg\", {\n    height: size,\n    style: {\n      all: 'revert'\n    },\n    width: size\n  }, react_1.default.createElement(\"rect\", {\n    fill: \"transparent\",\n    height: size,\n    width: size\n  }), corners, dots));\n};\nexports.default = PrettyQrCode;","map":null,"metadata":{},"sourceType":"script"}