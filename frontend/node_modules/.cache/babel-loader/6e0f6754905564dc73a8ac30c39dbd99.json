{"ast":null,"code":"import _objectSpread from \"/app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { createReducer } from '@reduxjs/toolkit';\nimport { DEFAULT_LIST_OF_LISTS } from '../../constants/lists';\nimport { updateVersion } from '../global/actions';\nimport { DEFAULT_ACTIVE_LIST_URLS } from './../../constants/lists';\nimport { acceptListUpdate, addList, disableList, enableList, fetchTokenList, removeList } from './actions';\nconst NEW_LIST_STATE = {\n  error: null,\n  current: null,\n  loadingRequestId: null,\n  pendingUpdate: null\n};\nconst initialState = {\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\n  byUrl: _objectSpread({}, DEFAULT_LIST_OF_LISTS.reduce((memo, listUrl) => {\n    memo[listUrl] = NEW_LIST_STATE;\n    return memo;\n  }, {})),\n  activeListUrls: DEFAULT_ACTIVE_LIST_URLS\n};\nexport default createReducer(initialState, builder => builder.addCase(fetchTokenList.pending, (state, _ref) => {\n  var _state$byUrl$url, _state$byUrl$url2, _state$byUrl$url3, _state$byUrl$url4;\n  let {\n    payload: {\n      requestId,\n      url\n    }\n  } = _ref;\n  const current = (_state$byUrl$url = state.byUrl[url]) !== null && _state$byUrl$url !== void 0 && _state$byUrl$url.current ? (_state$byUrl$url2 = state.byUrl[url]) === null || _state$byUrl$url2 === void 0 ? void 0 : _state$byUrl$url2.current : null;\n  const pendingUpdate = (_state$byUrl$url3 = state.byUrl[url]) !== null && _state$byUrl$url3 !== void 0 && _state$byUrl$url3.pendingUpdate ? (_state$byUrl$url4 = state.byUrl[url]) === null || _state$byUrl$url4 === void 0 ? void 0 : _state$byUrl$url4.pendingUpdate : null;\n  state.byUrl[url] = _objectSpread(_objectSpread({}, state.byUrl[url]), {}, {\n    current: current,\n    pendingUpdate: pendingUpdate,\n    loadingRequestId: requestId,\n    error: null\n  });\n}).addCase(fetchTokenList.fulfilled, (state, _ref2) => {\n  var _state$byUrl$url5, _state$byUrl$url6;\n  let {\n    payload: {\n      requestId,\n      tokenList,\n      url\n    }\n  } = _ref2;\n  const current = (_state$byUrl$url5 = state.byUrl[url]) === null || _state$byUrl$url5 === void 0 ? void 0 : _state$byUrl$url5.current;\n  const loadingRequestId = (_state$byUrl$url6 = state.byUrl[url]) === null || _state$byUrl$url6 === void 0 ? void 0 : _state$byUrl$url6.loadingRequestId;\n\n  // no-op if update does nothing\n  if (current) {\n    if (loadingRequestId === null || loadingRequestId === requestId) {\n      state.byUrl[url] = _objectSpread(_objectSpread({}, state.byUrl[url]), {}, {\n        loadingRequestId: null,\n        error: null,\n        current: current,\n        pendingUpdate: tokenList\n      });\n    }\n  } else {\n    // activate if on default active\n    if (DEFAULT_ACTIVE_LIST_URLS.includes(url)) {\n      var _state$activeListUrls;\n      (_state$activeListUrls = state.activeListUrls) === null || _state$activeListUrls === void 0 ? void 0 : _state$activeListUrls.push(url);\n    }\n    state.byUrl[url] = _objectSpread(_objectSpread({}, state.byUrl[url]), {}, {\n      loadingRequestId: null,\n      error: null,\n      current: tokenList,\n      pendingUpdate: null\n    });\n  }\n}).addCase(fetchTokenList.rejected, (state, _ref3) => {\n  var _state$byUrl$url7;\n  let {\n    payload: {\n      url,\n      requestId,\n      errorMessage\n    }\n  } = _ref3;\n  if (((_state$byUrl$url7 = state.byUrl[url]) === null || _state$byUrl$url7 === void 0 ? void 0 : _state$byUrl$url7.loadingRequestId) !== requestId) {\n    // no-op since it's not the latest request\n    return;\n  }\n  state.byUrl[url] = _objectSpread(_objectSpread({}, state.byUrl[url]), {}, {\n    loadingRequestId: null,\n    error: errorMessage,\n    current: null,\n    pendingUpdate: null\n  });\n}).addCase(addList, (state, _ref4) => {\n  let {\n    payload: url\n  } = _ref4;\n  if (!state.byUrl[url]) {\n    state.byUrl[url] = NEW_LIST_STATE;\n  }\n}).addCase(removeList, (state, _ref5) => {\n  let {\n    payload: url\n  } = _ref5;\n  if (state.byUrl[url]) {\n    delete state.byUrl[url];\n  }\n  // remove list from active urls if needed\n  if (state.activeListUrls && state.activeListUrls.includes(url)) {\n    state.activeListUrls = state.activeListUrls.filter(u => u !== url);\n  }\n}).addCase(enableList, (state, _ref6) => {\n  let {\n    payload: url\n  } = _ref6;\n  if (!state.byUrl[url]) {\n    state.byUrl[url] = NEW_LIST_STATE;\n  }\n  if (state.activeListUrls && !state.activeListUrls.includes(url)) {\n    state.activeListUrls.push(url);\n  }\n  if (!state.activeListUrls) {\n    state.activeListUrls = [url];\n  }\n}).addCase(disableList, (state, _ref7) => {\n  let {\n    payload: url\n  } = _ref7;\n  if (state.activeListUrls && state.activeListUrls.includes(url)) {\n    state.activeListUrls = state.activeListUrls.filter(u => u !== url);\n  }\n}).addCase(acceptListUpdate, (state, _ref8) => {\n  var _state$byUrl$url8;\n  let {\n    payload: url\n  } = _ref8;\n  if (!((_state$byUrl$url8 = state.byUrl[url]) !== null && _state$byUrl$url8 !== void 0 && _state$byUrl$url8.pendingUpdate)) {\n    throw new Error('accept list update called without pending update');\n  }\n  state.byUrl[url] = _objectSpread(_objectSpread({}, state.byUrl[url]), {}, {\n    pendingUpdate: null,\n    current: state.byUrl[url].pendingUpdate\n  });\n}).addCase(updateVersion, state => {\n  // state loaded from localStorage, but new lists have never been initialized\n  if (!state.lastInitializedDefaultListOfLists) {\n    state.byUrl = initialState.byUrl;\n    state.activeListUrls = initialState.activeListUrls;\n  } else if (state.lastInitializedDefaultListOfLists) {\n    const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce((s, l) => s.add(l), new Set());\n    const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce((s, l) => s.add(l), new Set());\n    DEFAULT_LIST_OF_LISTS.forEach(listUrl => {\n      if (!lastInitializedSet.has(listUrl)) {\n        state.byUrl[listUrl] = NEW_LIST_STATE;\n      }\n    });\n    state.lastInitializedDefaultListOfLists.forEach(listUrl => {\n      if (!newListOfListsSet.has(listUrl)) {\n        delete state.byUrl[listUrl];\n      }\n    });\n  }\n  state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS;\n\n  // if no active lists, activate defaults\n  if (!state.activeListUrls) {\n    state.activeListUrls = DEFAULT_ACTIVE_LIST_URLS;\n\n    // for each list on default list, initialize if needed\n    DEFAULT_ACTIVE_LIST_URLS.map(listUrl => {\n      if (!state.byUrl[listUrl]) {\n        state.byUrl[listUrl] = NEW_LIST_STATE;\n      }\n      return true;\n    });\n  }\n}));","map":{"version":3,"names":["createReducer","DEFAULT_LIST_OF_LISTS","updateVersion","DEFAULT_ACTIVE_LIST_URLS","acceptListUpdate","addList","disableList","enableList","fetchTokenList","removeList","NEW_LIST_STATE","error","current","loadingRequestId","pendingUpdate","initialState","lastInitializedDefaultListOfLists","byUrl","_objectSpread","reduce","memo","listUrl","activeListUrls","builder","addCase","pending","state","_ref","_state$byUrl$url","_state$byUrl$url2","_state$byUrl$url3","_state$byUrl$url4","payload","requestId","url","fulfilled","_ref2","_state$byUrl$url5","_state$byUrl$url6","tokenList","includes","_state$activeListUrls","push","rejected","_ref3","_state$byUrl$url7","errorMessage","_ref4","_ref5","filter","u","_ref6","_ref7","_ref8","_state$byUrl$url8","Error","lastInitializedSet","s","l","add","Set","newListOfListsSet","forEach","has","map"],"sources":["/app/src/state/lists/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\nimport { TokenList } from '@uniswap/token-lists/dist/types'\n\nimport { DEFAULT_LIST_OF_LISTS } from '../../constants/lists'\nimport { updateVersion } from '../global/actions'\nimport { DEFAULT_ACTIVE_LIST_URLS } from './../../constants/lists'\nimport { acceptListUpdate, addList, disableList, enableList, fetchTokenList, removeList } from './actions'\n\nexport interface ListsState {\n  readonly byUrl: {\n    readonly [url: string]: {\n      readonly current: TokenList | null\n      readonly pendingUpdate: TokenList | null\n      readonly loadingRequestId: string | null\n      readonly error: string | null\n    }\n  }\n  // this contains the default list of lists from the last time the updateVersion was called, i.e. the app was reloaded\n  readonly lastInitializedDefaultListOfLists?: string[]\n\n  // currently active lists\n  readonly activeListUrls: string[] | undefined\n}\n\ntype ListState = ListsState['byUrl'][string]\n\nconst NEW_LIST_STATE: ListState = {\n  error: null,\n  current: null,\n  loadingRequestId: null,\n  pendingUpdate: null,\n}\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer U> ? U[] : T[P] }\n\nconst initialState: ListsState = {\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\n  byUrl: {\n    ...DEFAULT_LIST_OF_LISTS.reduce<Mutable<ListsState['byUrl']>>((memo, listUrl) => {\n      memo[listUrl] = NEW_LIST_STATE\n      return memo\n    }, {}),\n  },\n  activeListUrls: DEFAULT_ACTIVE_LIST_URLS,\n}\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(fetchTokenList.pending, (state, { payload: { requestId, url } }) => {\n      const current = state.byUrl[url]?.current ? state.byUrl[url]?.current : null\n      const pendingUpdate = state.byUrl[url]?.pendingUpdate ? state.byUrl[url]?.pendingUpdate : null\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        current: current,\n        pendingUpdate: pendingUpdate,\n        loadingRequestId: requestId,\n        error: null,\n      }\n    })\n    .addCase(fetchTokenList.fulfilled, (state, { payload: { requestId, tokenList, url } }) => {\n      const current = state.byUrl[url]?.current\n      const loadingRequestId = state.byUrl[url]?.loadingRequestId\n\n      // no-op if update does nothing\n      if (current) {\n        if (loadingRequestId === null || loadingRequestId === requestId) {\n          state.byUrl[url] = {\n            ...state.byUrl[url],\n            loadingRequestId: null,\n            error: null,\n            current: current,\n            pendingUpdate: tokenList,\n          }\n        }\n      } else {\n        // activate if on default active\n        if (DEFAULT_ACTIVE_LIST_URLS.includes(url)) {\n          state.activeListUrls?.push(url)\n        }\n\n        state.byUrl[url] = {\n          ...state.byUrl[url],\n          loadingRequestId: null,\n          error: null,\n          current: tokenList,\n          pendingUpdate: null,\n        }\n      }\n    })\n    .addCase(fetchTokenList.rejected, (state, { payload: { url, requestId, errorMessage } }) => {\n      if (state.byUrl[url]?.loadingRequestId !== requestId) {\n        // no-op since it's not the latest request\n        return\n      }\n\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        loadingRequestId: null,\n        error: errorMessage,\n        current: null,\n        pendingUpdate: null,\n      }\n    })\n    .addCase(addList, (state, { payload: url }) => {\n      if (!state.byUrl[url]) {\n        state.byUrl[url] = NEW_LIST_STATE\n      }\n    })\n    .addCase(removeList, (state, { payload: url }) => {\n      if (state.byUrl[url]) {\n        delete state.byUrl[url]\n      }\n      // remove list from active urls if needed\n      if (state.activeListUrls && state.activeListUrls.includes(url)) {\n        state.activeListUrls = state.activeListUrls.filter((u) => u !== url)\n      }\n    })\n    .addCase(enableList, (state, { payload: url }) => {\n      if (!state.byUrl[url]) {\n        state.byUrl[url] = NEW_LIST_STATE\n      }\n\n      if (state.activeListUrls && !state.activeListUrls.includes(url)) {\n        state.activeListUrls.push(url)\n      }\n\n      if (!state.activeListUrls) {\n        state.activeListUrls = [url]\n      }\n    })\n    .addCase(disableList, (state, { payload: url }) => {\n      if (state.activeListUrls && state.activeListUrls.includes(url)) {\n        state.activeListUrls = state.activeListUrls.filter((u) => u !== url)\n      }\n    })\n    .addCase(acceptListUpdate, (state, { payload: url }) => {\n      if (!state.byUrl[url]?.pendingUpdate) {\n        throw new Error('accept list update called without pending update')\n      }\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        pendingUpdate: null,\n        current: state.byUrl[url].pendingUpdate,\n      }\n    })\n    .addCase(updateVersion, (state) => {\n      // state loaded from localStorage, but new lists have never been initialized\n      if (!state.lastInitializedDefaultListOfLists) {\n        state.byUrl = initialState.byUrl\n        state.activeListUrls = initialState.activeListUrls\n      } else if (state.lastInitializedDefaultListOfLists) {\n        const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce<Set<string>>(\n          (s, l) => s.add(l),\n          new Set()\n        )\n        const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce<Set<string>>((s, l) => s.add(l), new Set())\n\n        DEFAULT_LIST_OF_LISTS.forEach((listUrl) => {\n          if (!lastInitializedSet.has(listUrl)) {\n            state.byUrl[listUrl] = NEW_LIST_STATE\n          }\n        })\n\n        state.lastInitializedDefaultListOfLists.forEach((listUrl) => {\n          if (!newListOfListsSet.has(listUrl)) {\n            delete state.byUrl[listUrl]\n          }\n        })\n      }\n\n      state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS\n\n      // if no active lists, activate defaults\n      if (!state.activeListUrls) {\n        state.activeListUrls = DEFAULT_ACTIVE_LIST_URLS\n\n        // for each list on default list, initialize if needed\n        DEFAULT_ACTIVE_LIST_URLS.map((listUrl: string) => {\n          if (!state.byUrl[listUrl]) {\n            state.byUrl[listUrl] = NEW_LIST_STATE\n          }\n          return true\n        })\n      }\n    })\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}