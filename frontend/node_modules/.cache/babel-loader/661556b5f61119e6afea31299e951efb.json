{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timeout = exports.concurrentValuesMap = exports.concurrentMap = exports.retryAsyncWithBackOffAndTimeout = exports.selectiveRetryAsyncWithBackOff = exports.retryAsyncWithBackOff = exports.retryAsync = exports.sleep = void 0;\nvar TAG = 'utils/src/async';\n/** Sleep for a number of milliseconds */\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\nexports.sleep = sleep;\n// Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\nvar retryAsync = function retryAsync(inFunction, tries, params, delay, logger) {\n  if (delay === void 0) {\n    delay = 100;\n  }\n  if (logger === void 0) {\n    logger = null;\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    var saveError, i, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          i = 0;\n          _a.label = 1;\n        case 1:\n          if (!(i < tries)) return [3 /*break*/, 7];\n          _a.label = 2;\n        case 2:\n          _a.trys.push([2, 4,, 6]);\n          return [4 /*yield*/, inFunction.apply(void 0, params)];\n        case 3:\n          // it awaits otherwise it'd always do all the retries\n          return [2 /*return*/, _a.sent()];\n        case 4:\n          error_1 = _a.sent();\n          return [4 /*yield*/, sleep(delay)];\n        case 5:\n          _a.sent();\n          saveError = error_1;\n          if (logger) {\n            logger(\"\".concat(TAG, \"/@retryAsync, Failed to execute function on try #\").concat(i, \":\"), error_1);\n          }\n          return [3 /*break*/, 6];\n        case 6:\n          i++;\n          return [3 /*break*/, 1];\n        case 7:\n          throw saveError;\n      }\n    });\n  });\n};\nexports.retryAsync = retryAsync;\n// Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\nvar retryAsyncWithBackOff = function retryAsyncWithBackOff(inFunction, tries, params, delay, factor, logger) {\n  if (delay === void 0) {\n    delay = 100;\n  }\n  if (factor === void 0) {\n    factor = 1.5;\n  }\n  if (logger === void 0) {\n    logger = null;\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    var saveError, i, error_2;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          i = 0;\n          _a.label = 1;\n        case 1:\n          if (!(i < tries)) return [3 /*break*/, 7];\n          _a.label = 2;\n        case 2:\n          _a.trys.push([2, 4,, 6]);\n          return [4 /*yield*/, inFunction.apply(void 0, params)];\n        case 3:\n          // it awaits otherwise it'd always do all the retries\n          return [2 /*return*/, _a.sent()];\n        case 4:\n          error_2 = _a.sent();\n          return [4 /*yield*/, sleep(Math.pow(factor, i) * delay)];\n        case 5:\n          _a.sent();\n          saveError = error_2;\n          if (logger) {\n            logger(\"\".concat(TAG, \"/@retryAsync, Failed to execute function on try #\").concat(i), error_2);\n          }\n          return [3 /*break*/, 6];\n        case 6:\n          i++;\n          return [3 /*break*/, 1];\n        case 7:\n          throw saveError;\n      }\n    });\n  });\n};\nexports.retryAsyncWithBackOff = retryAsyncWithBackOff;\n// Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\n// throws automatically on specified errors\nvar selectiveRetryAsyncWithBackOff = function selectiveRetryAsyncWithBackOff(inFunction, tries, dontRetry, params, delay, factor, logger) {\n  if (delay === void 0) {\n    delay = 100;\n  }\n  if (factor === void 0) {\n    factor = 1.5;\n  }\n  if (logger === void 0) {\n    logger = null;\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    var saveError, i, error_3;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          i = 0;\n          _a.label = 1;\n        case 1:\n          if (!(i < tries)) return [3 /*break*/, 8];\n          _a.label = 2;\n        case 2:\n          _a.trys.push([2, 4,, 5]);\n          return [4 /*yield*/, inFunction.apply(void 0, params)];\n        case 3:\n          // it awaits otherwise it'd always do all the retries\n          return [2 /*return*/, _a.sent()];\n        case 4:\n          error_3 = _a.sent();\n          if (dontRetry.some(function (msg) {\n            return error_3.message.includes(msg);\n          })) {\n            throw error_3;\n          }\n          saveError = error_3;\n          if (logger) {\n            logger(\"\".concat(TAG, \"/@retryAsync, Failed to execute function on try #\").concat(i), error_3);\n          }\n          return [3 /*break*/, 5];\n        case 5:\n          if (!(i < tries - 1)) return [3 /*break*/, 7];\n          return [4 /*yield*/, sleep(Math.pow(factor, i) * delay)];\n        case 6:\n          _a.sent();\n          _a.label = 7;\n        case 7:\n          i++;\n          return [3 /*break*/, 1];\n        case 8:\n          throw saveError;\n      }\n    });\n  });\n};\nexports.selectiveRetryAsyncWithBackOff = selectiveRetryAsyncWithBackOff;\n// Retries an async function when it raises an exeption\n// Terminates any ongoing request when the timeout is reached\n// if all the tries fail it raises the last thrown exeption\nvar retryAsyncWithBackOffAndTimeout = function retryAsyncWithBackOffAndTimeout(inFunction, tries, params, delayMs, factor, timeoutMs, logger) {\n  if (delayMs === void 0) {\n    delayMs = 100;\n  }\n  if (factor === void 0) {\n    factor = 1.5;\n  }\n  if (timeoutMs === void 0) {\n    timeoutMs = 2000;\n  }\n  if (logger === void 0) {\n    logger = null;\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2 /*return*/, (0, exports.timeout)(exports.retryAsyncWithBackOff, [inFunction, tries, params, delayMs, factor, logger], timeoutMs, new Error(\"Timed out after \".concat(timeoutMs, \"ms\")), \"\".concat(TAG, \"/@retryAsyncWithBackOffAndTimeout, Timed out after \").concat(timeoutMs, \"ms\"), logger)];\n    });\n  });\n};\nexports.retryAsyncWithBackOffAndTimeout = retryAsyncWithBackOffAndTimeout;\n/**\n * Map an async function over a list xs with a given concurrency level\n *\n * @param concurrency number of `mapFn` concurrent executions\n * @param xs list of value\n * @param mapFn mapping function\n */\nfunction concurrentMap(concurrency, xs, mapFn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var res, _loop_1, i;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          res = [];\n          _loop_1 = function _loop_1(i) {\n            var remaining, sliceSize, slice, _b, _c;\n            return __generator(this, function (_d) {\n              switch (_d.label) {\n                case 0:\n                  remaining = xs.length - i;\n                  sliceSize = Math.min(remaining, concurrency);\n                  slice = xs.slice(i, i + sliceSize);\n                  _c = (_b = res).concat;\n                  return [4 /*yield*/, Promise.all(slice.map(function (elem, index) {\n                    return mapFn(elem, i + index);\n                  }))];\n                case 1:\n                  res = _c.apply(_b, [_d.sent()]);\n                  return [2 /*return*/];\n              }\n            });\n          };\n\n          i = 0;\n          _a.label = 1;\n        case 1:\n          if (!(i < xs.length)) return [3 /*break*/, 4];\n          return [5 /*yield**/, _loop_1(i)];\n        case 2:\n          _a.sent();\n          _a.label = 3;\n        case 3:\n          i += concurrency;\n          return [3 /*break*/, 1];\n        case 4:\n          return [2 /*return*/, res];\n      }\n    });\n  });\n}\nexports.concurrentMap = concurrentMap;\n/**\n * Map an async function over the values in Object x with a given concurrency level\n *\n * @param concurrency number of `mapFn` concurrent executions\n * @param x associative array of values\n * @param mapFn mapping function\n */\nfunction concurrentValuesMap(concurrency, x, mapFn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var xk, xv, res;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          xk = Object.keys(x);\n          xv = [];\n          xk.forEach(function (k) {\n            return xv.push(x[k]);\n          });\n          return [4 /*yield*/, concurrentMap(concurrency, xv, function (val, idx) {\n            return mapFn(val, xk[idx]);\n          })];\n        case 1:\n          res = _a.sent();\n          return [2 /*return*/, res.reduce(function (output, value, index) {\n            output[xk[index]] = value;\n            return output;\n          }, {})];\n      }\n    });\n  });\n}\nexports.concurrentValuesMap = concurrentValuesMap;\n/**\n * Wraps an async function in a timeout before calling it.\n *\n * @param inFunction The async function to call\n * @param params The parameters of the async function\n * @param timeoutMs The timeout in milliseconds\n * @param timeoutError The value to which the returned Promise should reject to\n */\nvar timeout = function timeout(inFunction, params, timeoutMs, timeoutError, timeoutLogMsg, logger) {\n  if (timeoutLogMsg === void 0) {\n    timeoutLogMsg = null;\n  }\n  if (logger === void 0) {\n    logger = null;\n  }\n  var timer;\n  return Promise.race([inFunction.apply(void 0, params), new Promise(function (_resolve, reject) {\n    timer = setTimeout(function () {\n      if (logger) {\n        logger(timeoutLogMsg || \"\".concat(TAG, \"/@timeout Timed out after \").concat(timeoutMs, \"ms\"));\n      }\n      reject(timeoutError);\n    }, timeoutMs);\n  })]).finally(function () {\n    clearTimeout(timer);\n  });\n};\nexports.timeout = timeout;","map":{"version":3,"sources":["../src/async.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.timeout = exports.concurrentValuesMap = exports.concurrentMap = exports.retryAsyncWithBackOffAndTimeout = exports.selectiveRetryAsyncWithBackOff = exports.retryAsyncWithBackOff = exports.retryAsync = exports.sleep = void 0;\nvar TAG = 'utils/src/async';\n/** Sleep for a number of milliseconds */\nfunction sleep(ms) {\n    return new Promise(function (resolve) { return setTimeout(resolve, ms); });\n}\nexports.sleep = sleep;\n// Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\nvar retryAsync = function (inFunction, tries, params, delay, logger) {\n    if (delay === void 0) { delay = 100; }\n    if (logger === void 0) { logger = null; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        var saveError, i, error_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    i = 0;\n                    _a.label = 1;\n                case 1:\n                    if (!(i < tries)) return [3 /*break*/, 7];\n                    _a.label = 2;\n                case 2:\n                    _a.trys.push([2, 4, , 6]);\n                    return [4 /*yield*/, inFunction.apply(void 0, params)];\n                case 3: \n                // it awaits otherwise it'd always do all the retries\n                return [2 /*return*/, _a.sent()];\n                case 4:\n                    error_1 = _a.sent();\n                    return [4 /*yield*/, sleep(delay)];\n                case 5:\n                    _a.sent();\n                    saveError = error_1;\n                    if (logger) {\n                        logger(\"\".concat(TAG, \"/@retryAsync, Failed to execute function on try #\").concat(i, \":\"), error_1);\n                    }\n                    return [3 /*break*/, 6];\n                case 6:\n                    i++;\n                    return [3 /*break*/, 1];\n                case 7: throw saveError;\n            }\n        });\n    });\n};\nexports.retryAsync = retryAsync;\n// Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\nvar retryAsyncWithBackOff = function (inFunction, tries, params, delay, factor, logger) {\n    if (delay === void 0) { delay = 100; }\n    if (factor === void 0) { factor = 1.5; }\n    if (logger === void 0) { logger = null; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        var saveError, i, error_2;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    i = 0;\n                    _a.label = 1;\n                case 1:\n                    if (!(i < tries)) return [3 /*break*/, 7];\n                    _a.label = 2;\n                case 2:\n                    _a.trys.push([2, 4, , 6]);\n                    return [4 /*yield*/, inFunction.apply(void 0, params)];\n                case 3: \n                // it awaits otherwise it'd always do all the retries\n                return [2 /*return*/, _a.sent()];\n                case 4:\n                    error_2 = _a.sent();\n                    return [4 /*yield*/, sleep(Math.pow(factor, i) * delay)];\n                case 5:\n                    _a.sent();\n                    saveError = error_2;\n                    if (logger) {\n                        logger(\"\".concat(TAG, \"/@retryAsync, Failed to execute function on try #\").concat(i), error_2);\n                    }\n                    return [3 /*break*/, 6];\n                case 6:\n                    i++;\n                    return [3 /*break*/, 1];\n                case 7: throw saveError;\n            }\n        });\n    });\n};\nexports.retryAsyncWithBackOff = retryAsyncWithBackOff;\n// Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\n// throws automatically on specified errors\nvar selectiveRetryAsyncWithBackOff = function (inFunction, tries, dontRetry, params, delay, factor, logger) {\n    if (delay === void 0) { delay = 100; }\n    if (factor === void 0) { factor = 1.5; }\n    if (logger === void 0) { logger = null; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        var saveError, i, error_3;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    i = 0;\n                    _a.label = 1;\n                case 1:\n                    if (!(i < tries)) return [3 /*break*/, 8];\n                    _a.label = 2;\n                case 2:\n                    _a.trys.push([2, 4, , 5]);\n                    return [4 /*yield*/, inFunction.apply(void 0, params)];\n                case 3: \n                // it awaits otherwise it'd always do all the retries\n                return [2 /*return*/, _a.sent()];\n                case 4:\n                    error_3 = _a.sent();\n                    if (dontRetry.some(function (msg) { return error_3.message.includes(msg); })) {\n                        throw error_3;\n                    }\n                    saveError = error_3;\n                    if (logger) {\n                        logger(\"\".concat(TAG, \"/@retryAsync, Failed to execute function on try #\").concat(i), error_3);\n                    }\n                    return [3 /*break*/, 5];\n                case 5:\n                    if (!(i < tries - 1)) return [3 /*break*/, 7];\n                    return [4 /*yield*/, sleep(Math.pow(factor, i) * delay)];\n                case 6:\n                    _a.sent();\n                    _a.label = 7;\n                case 7:\n                    i++;\n                    return [3 /*break*/, 1];\n                case 8: throw saveError;\n            }\n        });\n    });\n};\nexports.selectiveRetryAsyncWithBackOff = selectiveRetryAsyncWithBackOff;\n// Retries an async function when it raises an exeption\n// Terminates any ongoing request when the timeout is reached\n// if all the tries fail it raises the last thrown exeption\nvar retryAsyncWithBackOffAndTimeout = function (inFunction, tries, params, delayMs, factor, timeoutMs, logger) {\n    if (delayMs === void 0) { delayMs = 100; }\n    if (factor === void 0) { factor = 1.5; }\n    if (timeoutMs === void 0) { timeoutMs = 2000; }\n    if (logger === void 0) { logger = null; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            return [2 /*return*/, (0, exports.timeout)(exports.retryAsyncWithBackOff, [inFunction, tries, params, delayMs, factor, logger], timeoutMs, new Error(\"Timed out after \".concat(timeoutMs, \"ms\")), \"\".concat(TAG, \"/@retryAsyncWithBackOffAndTimeout, Timed out after \").concat(timeoutMs, \"ms\"), logger)];\n        });\n    });\n};\nexports.retryAsyncWithBackOffAndTimeout = retryAsyncWithBackOffAndTimeout;\n/**\n * Map an async function over a list xs with a given concurrency level\n *\n * @param concurrency number of `mapFn` concurrent executions\n * @param xs list of value\n * @param mapFn mapping function\n */\nfunction concurrentMap(concurrency, xs, mapFn) {\n    return __awaiter(this, void 0, void 0, function () {\n        var res, _loop_1, i;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    res = [];\n                    _loop_1 = function (i) {\n                        var remaining, sliceSize, slice, _b, _c;\n                        return __generator(this, function (_d) {\n                            switch (_d.label) {\n                                case 0:\n                                    remaining = xs.length - i;\n                                    sliceSize = Math.min(remaining, concurrency);\n                                    slice = xs.slice(i, i + sliceSize);\n                                    _c = (_b = res).concat;\n                                    return [4 /*yield*/, Promise.all(slice.map(function (elem, index) { return mapFn(elem, i + index); }))];\n                                case 1:\n                                    res = _c.apply(_b, [_d.sent()]);\n                                    return [2 /*return*/];\n                            }\n                        });\n                    };\n                    i = 0;\n                    _a.label = 1;\n                case 1:\n                    if (!(i < xs.length)) return [3 /*break*/, 4];\n                    return [5 /*yield**/, _loop_1(i)];\n                case 2:\n                    _a.sent();\n                    _a.label = 3;\n                case 3:\n                    i += concurrency;\n                    return [3 /*break*/, 1];\n                case 4: return [2 /*return*/, res];\n            }\n        });\n    });\n}\nexports.concurrentMap = concurrentMap;\n/**\n * Map an async function over the values in Object x with a given concurrency level\n *\n * @param concurrency number of `mapFn` concurrent executions\n * @param x associative array of values\n * @param mapFn mapping function\n */\nfunction concurrentValuesMap(concurrency, x, mapFn) {\n    return __awaiter(this, void 0, void 0, function () {\n        var xk, xv, res;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    xk = Object.keys(x);\n                    xv = [];\n                    xk.forEach(function (k) { return xv.push(x[k]); });\n                    return [4 /*yield*/, concurrentMap(concurrency, xv, function (val, idx) { return mapFn(val, xk[idx]); })];\n                case 1:\n                    res = _a.sent();\n                    return [2 /*return*/, res.reduce(function (output, value, index) {\n                            output[xk[index]] = value;\n                            return output;\n                        }, {})];\n            }\n        });\n    });\n}\nexports.concurrentValuesMap = concurrentValuesMap;\n/**\n * Wraps an async function in a timeout before calling it.\n *\n * @param inFunction The async function to call\n * @param params The parameters of the async function\n * @param timeoutMs The timeout in milliseconds\n * @param timeoutError The value to which the returned Promise should reject to\n */\nvar timeout = function (inFunction, params, timeoutMs, timeoutError, timeoutLogMsg, logger) {\n    if (timeoutLogMsg === void 0) { timeoutLogMsg = null; }\n    if (logger === void 0) { logger = null; }\n    var timer;\n    return Promise.race([\n        inFunction.apply(void 0, params),\n        new Promise(function (_resolve, reject) {\n            timer = setTimeout(function () {\n                if (logger) {\n                    logger(timeoutLogMsg || \"\".concat(TAG, \"/@timeout Timed out after \").concat(timeoutMs, \"ms\"));\n                }\n                reject(timeoutError);\n            }, timeoutMs);\n        }),\n    ]).finally(function () {\n        clearTimeout(timer);\n    });\n};\nexports.timeout = timeout;\n//# sourceMappingURL=async.js.map"]},"metadata":{},"sourceType":"script"}