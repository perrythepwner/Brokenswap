{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trimUncompressedPrefix = exports.ensureUncompressed = exports.ensureCompressed = exports.isCompressed = exports.computeSharedSecret = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar crypto_1 = require(\"crypto\");\nfunction computeSharedSecret(privateKey, publicKey) {\n  var ecdh = (0, crypto_1.createECDH)('secp256k1');\n  ecdh.setPrivateKey(Buffer.from((0, address_1.trimLeading0x)(privateKey), 'hex'));\n  return ecdh.computeSecret(Buffer.from(ensureCompressed(publicKey), 'hex'));\n}\nexports.computeSharedSecret = computeSharedSecret;\nfunction isCompressed(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n  if (noLeading0x.length === 64) {\n    return true;\n  }\n  return noLeading0x.length === 66 && (noLeading0x.startsWith('02') || noLeading0x.startsWith('03'));\n}\nexports.isCompressed = isCompressed;\nfunction ensureCompressed(publicKey) {\n  // NOTE: elliptic is disabled elsewhere in this library to prevent\n  // accidental signing of truncated messages.\n  // tslint:disable-next-line:import-blacklist\n  var EC = require('elliptic').ec;\n  var ec = new EC('secp256k1');\n  return ec.keyFromPublic(ensureUncompressedPrefix(publicKey), 'hex').getPublic(true, 'hex');\n}\nexports.ensureCompressed = ensureCompressed;\nfunction ensureUncompressed(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n  // NOTE: elliptic is disabled elsewhere in this library to prevent\n  // accidental signing of truncated messages.\n  // tslint:disable-next-line:import-blacklist\n  var EC = require('elliptic').ec;\n  var ec = new EC('secp256k1');\n  var uncompressed = ec.keyFromPublic(ensureUncompressedPrefix(noLeading0x), 'hex').getPublic(false, 'hex');\n  return uncompressed;\n}\nexports.ensureUncompressed = ensureUncompressed;\nfunction trimUncompressedPrefix(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n  if (noLeading0x.length === 130 && noLeading0x.startsWith('04')) {\n    return noLeading0x.slice(2);\n  }\n  return noLeading0x;\n}\nexports.trimUncompressedPrefix = trimUncompressedPrefix;\nfunction ensureUncompressedPrefix(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n  if (noLeading0x.length === 128) {\n    return \"04\".concat(noLeading0x);\n  }\n  return noLeading0x;\n}","map":{"version":3,"sources":["../src/ecdh.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AAEA,SAAgB,mBAAmB,CAAC,UAAkB,EAAE,SAAiB,EAAA;EACvE,IAAM,IAAI,GAAG,CAAA,CAAA,EAAA,QAAA,CAAA,UAAU,EAAC,WAAW,CAAC;EACpC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA,CAAA,EAAA,SAAA,CAAA,aAAa,EAAC,UAAU,CAAC,EAAE,KAAK,CAAC,CAAC;EACjE,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC,CAAC;AAC5E;AAJA,OAAA,CAAA,mBAAA,GAAA,mBAAA;AAMA,SAAgB,YAAY,CAAC,SAAiB,EAAA;EAC5C,IAAM,WAAW,GAAG,CAAA,CAAA,EAAA,SAAA,CAAA,aAAa,EAAC,SAAS,CAAC;EAC5C,IAAI,WAAW,CAAC,MAAM,KAAK,EAAE,EAAE;IAC7B,OAAO,IAAI;EACZ;EACD,OAAO,WAAW,CAAC,MAAM,KAAK,EAAE,KAAK,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACpG;AANA,OAAA,CAAA,YAAA,GAAA,YAAA;AAQA,SAAgB,gBAAgB,CAAC,SAAiB,EAAA;EAChD;EACA;EACA;EACA,IAAM,EAAE,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE;EACjC,IAAM,EAAE,GAAG,IAAI,EAAE,CAAC,WAAW,CAAC;EAC9B,OAAO,EAAE,CAAC,aAAa,CAAC,wBAAwB,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC;AAC5F;AAPA,OAAA,CAAA,gBAAA,GAAA,gBAAA;AASA,SAAgB,kBAAkB,CAAC,SAAiB,EAAA;EAClD,IAAM,WAAW,GAAG,CAAA,CAAA,EAAA,SAAA,CAAA,aAAa,EAAC,SAAS,CAAC;EAC5C;EACA;EACA;EACA,IAAM,EAAE,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE;EACjC,IAAM,EAAE,GAAG,IAAI,EAAE,CAAC,WAAW,CAAC;EAC9B,IAAM,YAAY,GAAG,EAAE,CACpB,aAAa,CAAC,wBAAwB,CAAC,WAAW,CAAC,EAAE,KAAK,CAAC,CAC3D,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC;EAC1B,OAAO,YAAY;AACrB;AAXA,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAaA,SAAgB,sBAAsB,CAAC,SAAiB,EAAA;EACtD,IAAM,WAAW,GAAG,CAAA,CAAA,EAAA,SAAA,CAAA,aAAa,EAAC,SAAS,CAAC;EAC5C,IAAI,WAAW,CAAC,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;IAC9D,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;EAC5B;EACD,OAAO,WAAW;AACpB;AANA,OAAA,CAAA,sBAAA,GAAA,sBAAA;AAQA,SAAS,wBAAwB,CAAC,SAAiB,EAAA;EACjD,IAAM,WAAW,GAAG,CAAA,CAAA,EAAA,SAAA,CAAA,aAAa,EAAC,SAAS,CAAC;EAC5C,IAAI,WAAW,CAAC,MAAM,KAAK,GAAG,EAAE;IAC9B,OAAO,IAAA,CAAA,MAAA,CAAK,WAAW,CAAE;EAC1B;EACD,OAAO,WAAW;AACpB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.trimUncompressedPrefix = exports.ensureUncompressed = exports.ensureCompressed = exports.isCompressed = exports.computeSharedSecret = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar crypto_1 = require(\"crypto\");\nfunction computeSharedSecret(privateKey, publicKey) {\n    var ecdh = (0, crypto_1.createECDH)('secp256k1');\n    ecdh.setPrivateKey(Buffer.from((0, address_1.trimLeading0x)(privateKey), 'hex'));\n    return ecdh.computeSecret(Buffer.from(ensureCompressed(publicKey), 'hex'));\n}\nexports.computeSharedSecret = computeSharedSecret;\nfunction isCompressed(publicKey) {\n    var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n    if (noLeading0x.length === 64) {\n        return true;\n    }\n    return noLeading0x.length === 66 && (noLeading0x.startsWith('02') || noLeading0x.startsWith('03'));\n}\nexports.isCompressed = isCompressed;\nfunction ensureCompressed(publicKey) {\n    // NOTE: elliptic is disabled elsewhere in this library to prevent\n    // accidental signing of truncated messages.\n    // tslint:disable-next-line:import-blacklist\n    var EC = require('elliptic').ec;\n    var ec = new EC('secp256k1');\n    return ec.keyFromPublic(ensureUncompressedPrefix(publicKey), 'hex').getPublic(true, 'hex');\n}\nexports.ensureCompressed = ensureCompressed;\nfunction ensureUncompressed(publicKey) {\n    var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n    // NOTE: elliptic is disabled elsewhere in this library to prevent\n    // accidental signing of truncated messages.\n    // tslint:disable-next-line:import-blacklist\n    var EC = require('elliptic').ec;\n    var ec = new EC('secp256k1');\n    var uncompressed = ec\n        .keyFromPublic(ensureUncompressedPrefix(noLeading0x), 'hex')\n        .getPublic(false, 'hex');\n    return uncompressed;\n}\nexports.ensureUncompressed = ensureUncompressed;\nfunction trimUncompressedPrefix(publicKey) {\n    var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n    if (noLeading0x.length === 130 && noLeading0x.startsWith('04')) {\n        return noLeading0x.slice(2);\n    }\n    return noLeading0x;\n}\nexports.trimUncompressedPrefix = trimUncompressedPrefix;\nfunction ensureUncompressedPrefix(publicKey) {\n    var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n    if (noLeading0x.length === 128) {\n        return \"04\".concat(noLeading0x);\n    }\n    return noLeading0x;\n}\n//# sourceMappingURL=ecdh.js.map"]},"metadata":{},"sourceType":"script"}