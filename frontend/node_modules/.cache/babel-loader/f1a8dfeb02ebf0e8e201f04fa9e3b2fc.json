{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseDappKitRequestDeeplink = exports.parseDappkitResponseDeeplink = exports.serializeDappKitRequestDeeplink = exports.SignTxRequest = exports.produceResponseDeeplink = exports.SignTxResponseSuccess = exports.AccountAuthResponseSuccess = exports.AccountAuthRequest = exports.DappKitResponseStatus = exports.DappKitRequestTypes = exports.DAPPKIT_BASE_HOST = void 0;\nvar querystring_1 = require(\"querystring\");\nvar url_1 = require(\"url\");\nexports.DAPPKIT_BASE_HOST = 'celo://wallet/dappkit';\nvar DappKitRequestTypes;\n(function (DappKitRequestTypes) {\n  DappKitRequestTypes[\"ACCOUNT_ADDRESS\"] = \"account_address\";\n  DappKitRequestTypes[\"SIGN_TX\"] = \"sign_tx\";\n})(DappKitRequestTypes = exports.DappKitRequestTypes || (exports.DappKitRequestTypes = {}));\nvar DappKitResponseStatus;\n(function (DappKitResponseStatus) {\n  DappKitResponseStatus[\"SUCCESS\"] = \"200\";\n  DappKitResponseStatus[\"UNAUTHORIZED\"] = \"401\";\n})(DappKitResponseStatus = exports.DappKitResponseStatus || (exports.DappKitResponseStatus = {}));\nvar AccountAuthRequest = function AccountAuthRequest(meta) {\n  return __assign({\n    type: DappKitRequestTypes.ACCOUNT_ADDRESS\n  }, meta);\n};\nexports.AccountAuthRequest = AccountAuthRequest;\nvar AccountAuthResponseSuccess = function AccountAuthResponseSuccess(address, phoneNumber, pepper) {\n  return {\n    type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n    status: DappKitResponseStatus.SUCCESS,\n    address: address,\n    phoneNumber: phoneNumber,\n    pepper: pepper\n  };\n};\nexports.AccountAuthResponseSuccess = AccountAuthResponseSuccess;\nvar SignTxResponseSuccess = function SignTxResponseSuccess(rawTxs) {\n  return {\n    type: DappKitRequestTypes.SIGN_TX,\n    status: DappKitResponseStatus.SUCCESS,\n    rawTxs: rawTxs\n  };\n};\nexports.SignTxResponseSuccess = SignTxResponseSuccess;\nfunction produceResponseDeeplink(request, response) {\n  var params = {\n    type: response.type,\n    status: response.status,\n    requestId: request.requestId\n  };\n  switch (response.type) {\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      if (response.status === DappKitResponseStatus.SUCCESS) {\n        params.account = response.address;\n        params.phoneNumber = response.phoneNumber;\n      }\n      break;\n    case DappKitRequestTypes.SIGN_TX:\n      if (response.status === DappKitResponseStatus.SUCCESS) {\n        params.rawTxs = response.rawTxs;\n      }\n    default:\n      break;\n  }\n  return request.callback + '?' + (0, querystring_1.stringify)(params);\n}\nexports.produceResponseDeeplink = produceResponseDeeplink;\nvar SignTxRequest = function SignTxRequest(txs, meta) {\n  return __assign({\n    type: DappKitRequestTypes.SIGN_TX,\n    txs: txs.map(function (tx) {\n      return {\n        txData: tx.txData,\n        estimatedGas: tx.estimatedGas,\n        from: tx.from,\n        to: tx.to,\n        nonce: tx.nonce,\n        feeCurrencyAddress: tx.feeCurrencyAddress,\n        value: tx.value\n      };\n    })\n  }, meta);\n};\nexports.SignTxRequest = SignTxRequest;\nfunction assertString(objectName, key, value) {\n  if (value === undefined) {\n    throw new Error(\"Expected \".concat(objectName, \" to contain \").concat(key));\n  }\n  if (typeof value !== 'string') {\n    throw new Error(\"Expected \".concat(objectName, \"[\").concat(key, \"] to be a string, but is \").concat(typeof value));\n  }\n  return;\n}\nfunction serializeDappKitRequestDeeplink(request) {\n  // TODO: Probably use a proper validation library here\n  assertString('request', 'type', request.type);\n  assertString('request', 'requestId', request.requestId);\n  assertString('request', 'callback', request.callback);\n  assertString('request', 'dappName', request.dappName);\n  var params = {\n    type: request.type,\n    requestId: request.requestId,\n    callback: request.callback,\n    dappName: request.dappName\n  };\n  switch (request.type) {\n    case DappKitRequestTypes.SIGN_TX:\n      params = __assign(__assign({}, params), {\n        txs: Buffer.from(JSON.stringify(request.txs), 'utf8').toString('base64')\n      });\n      break;\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      break;\n    default:\n      throw new Error(\"Invalid DappKitRequest type: \".concat(JSON.stringify(request)));\n  }\n  return exports.DAPPKIT_BASE_HOST + '?' + (0, querystring_1.stringify)(params);\n}\nexports.serializeDappKitRequestDeeplink = serializeDappKitRequestDeeplink;\n// TODO: parsing query params yields broad types\n// once interface stabilizes, properly type the parsing\nfunction parseDappkitResponseDeeplink(url) {\n  var rawParams = (0, url_1.parse)(url, true);\n  if (rawParams.query.type === undefined) {\n    throw new Error('Invalid Deeplink: does not contain type:' + url);\n  }\n  if (rawParams.query.requestId === undefined) {\n    throw new Error('Invalid Deeplink: does not contain requestId');\n  }\n  var requestId = rawParams.query.requestId;\n  var address = rawParams.query.account;\n  var phoneNumber = rawParams.query.phoneNumber;\n  switch (rawParams.query.type) {\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      if (rawParams.query.status === DappKitResponseStatus.SUCCESS) {\n        // @ts-ignore\n        return {\n          type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n          status: DappKitResponseStatus.SUCCESS,\n          address: address,\n          phoneNumber: phoneNumber,\n          requestId: requestId\n        };\n      } else {\n        return {\n          type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n          status: DappKitResponseStatus.UNAUTHORIZED,\n          requestId: requestId\n        };\n      }\n    case DappKitRequestTypes.SIGN_TX:\n      if (rawParams.query.status === DappKitResponseStatus.SUCCESS) {\n        var rawTxs = rawParams.query.rawTxs;\n        if (typeof rawTxs === 'string') {\n          rawTxs = [rawTxs];\n        }\n        // @ts-ignore\n        return {\n          type: DappKitRequestTypes.SIGN_TX,\n          status: DappKitResponseStatus.SUCCESS,\n          rawTxs: rawTxs,\n          requestId: requestId\n        };\n      } else {\n        return {\n          type: DappKitRequestTypes.SIGN_TX,\n          status: DappKitResponseStatus.UNAUTHORIZED,\n          requestId: requestId\n        };\n      }\n    default:\n      throw new Error('Invalid Deeplink: does not match defined requests');\n  }\n}\nexports.parseDappkitResponseDeeplink = parseDappkitResponseDeeplink;\nfunction parseDappKitRequestDeeplink(url) {\n  var rawParams = (0, url_1.parse)(url, true);\n  if (rawParams.query.type === undefined) {\n    throw new Error('Invalid Deeplink: does not contain type:' + url);\n  }\n  if (!rawParams.query.dappName || !rawParams.query.callback || !rawParams.query.requestId) {\n    throw new Error(\"Invalid Deeplink: Does not contain meta parameters: \" + url);\n  }\n  var requestMeta = {\n    // @ts-ignore\n    callback: rawParams.query.callback,\n    // @ts-ignore\n    requestId: rawParams.query.requestId,\n    // @ts-ignore\n    dappName: rawParams.query.dappName\n  };\n  switch (rawParams.query.type) {\n    case DappKitRequestTypes.ACCOUNT_ADDRESS:\n      return (0, exports.AccountAuthRequest)(requestMeta);\n      break;\n    case DappKitRequestTypes.SIGN_TX:\n      // @ts-ignore\n      return __assign({\n        type: DappKitRequestTypes.SIGN_TX,\n        // @ts-ignore\n        txs: JSON.parse(Buffer.from(rawParams.query.txs, 'base64').toString('utf8'))\n      }, requestMeta);\n    default:\n      throw new Error('Invalid Deeplink: does not match defined requests');\n  }\n}\nexports.parseDappKitRequestDeeplink = parseDappKitRequestDeeplink;","map":{"version":3,"sources":["../src/dappkit.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseDappKitRequestDeeplink = exports.parseDappkitResponseDeeplink = exports.serializeDappKitRequestDeeplink = exports.SignTxRequest = exports.produceResponseDeeplink = exports.SignTxResponseSuccess = exports.AccountAuthResponseSuccess = exports.AccountAuthRequest = exports.DappKitResponseStatus = exports.DappKitRequestTypes = exports.DAPPKIT_BASE_HOST = void 0;\nvar querystring_1 = require(\"querystring\");\nvar url_1 = require(\"url\");\nexports.DAPPKIT_BASE_HOST = 'celo://wallet/dappkit';\nvar DappKitRequestTypes;\n(function (DappKitRequestTypes) {\n    DappKitRequestTypes[\"ACCOUNT_ADDRESS\"] = \"account_address\";\n    DappKitRequestTypes[\"SIGN_TX\"] = \"sign_tx\";\n})(DappKitRequestTypes = exports.DappKitRequestTypes || (exports.DappKitRequestTypes = {}));\nvar DappKitResponseStatus;\n(function (DappKitResponseStatus) {\n    DappKitResponseStatus[\"SUCCESS\"] = \"200\";\n    DappKitResponseStatus[\"UNAUTHORIZED\"] = \"401\";\n})(DappKitResponseStatus = exports.DappKitResponseStatus || (exports.DappKitResponseStatus = {}));\nvar AccountAuthRequest = function (meta) { return (__assign({ type: DappKitRequestTypes.ACCOUNT_ADDRESS }, meta)); };\nexports.AccountAuthRequest = AccountAuthRequest;\nvar AccountAuthResponseSuccess = function (address, phoneNumber, pepper) { return ({\n    type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n    status: DappKitResponseStatus.SUCCESS,\n    address: address,\n    phoneNumber: phoneNumber,\n    pepper: pepper,\n}); };\nexports.AccountAuthResponseSuccess = AccountAuthResponseSuccess;\nvar SignTxResponseSuccess = function (rawTxs) { return ({\n    type: DappKitRequestTypes.SIGN_TX,\n    status: DappKitResponseStatus.SUCCESS,\n    rawTxs: rawTxs,\n}); };\nexports.SignTxResponseSuccess = SignTxResponseSuccess;\nfunction produceResponseDeeplink(request, response) {\n    var params = { type: response.type, status: response.status, requestId: request.requestId };\n    switch (response.type) {\n        case DappKitRequestTypes.ACCOUNT_ADDRESS:\n            if (response.status === DappKitResponseStatus.SUCCESS) {\n                params.account = response.address;\n                params.phoneNumber = response.phoneNumber;\n            }\n            break;\n        case DappKitRequestTypes.SIGN_TX:\n            if (response.status === DappKitResponseStatus.SUCCESS) {\n                params.rawTxs = response.rawTxs;\n            }\n        default:\n            break;\n    }\n    return request.callback + '?' + (0, querystring_1.stringify)(params);\n}\nexports.produceResponseDeeplink = produceResponseDeeplink;\nvar SignTxRequest = function (txs, meta) { return (__assign({ type: DappKitRequestTypes.SIGN_TX, txs: txs.map(function (tx) { return ({\n        txData: tx.txData,\n        estimatedGas: tx.estimatedGas,\n        from: tx.from,\n        to: tx.to,\n        nonce: tx.nonce,\n        feeCurrencyAddress: tx.feeCurrencyAddress,\n        value: tx.value,\n    }); }) }, meta)); };\nexports.SignTxRequest = SignTxRequest;\nfunction assertString(objectName, key, value) {\n    if (value === undefined) {\n        throw new Error(\"Expected \".concat(objectName, \" to contain \").concat(key));\n    }\n    if (typeof value !== 'string') {\n        throw new Error(\"Expected \".concat(objectName, \"[\").concat(key, \"] to be a string, but is \").concat(typeof value));\n    }\n    return;\n}\nfunction serializeDappKitRequestDeeplink(request) {\n    // TODO: Probably use a proper validation library here\n    assertString('request', 'type', request.type);\n    assertString('request', 'requestId', request.requestId);\n    assertString('request', 'callback', request.callback);\n    assertString('request', 'dappName', request.dappName);\n    var params = {\n        type: request.type,\n        requestId: request.requestId,\n        callback: request.callback,\n        dappName: request.dappName,\n    };\n    switch (request.type) {\n        case DappKitRequestTypes.SIGN_TX:\n            params = __assign(__assign({}, params), { txs: Buffer.from(JSON.stringify(request.txs), 'utf8').toString('base64') });\n            break;\n        case DappKitRequestTypes.ACCOUNT_ADDRESS:\n            break;\n        default:\n            throw new Error(\"Invalid DappKitRequest type: \".concat(JSON.stringify(request)));\n    }\n    return exports.DAPPKIT_BASE_HOST + '?' + (0, querystring_1.stringify)(params);\n}\nexports.serializeDappKitRequestDeeplink = serializeDappKitRequestDeeplink;\n// TODO: parsing query params yields broad types\n// once interface stabilizes, properly type the parsing\nfunction parseDappkitResponseDeeplink(url) {\n    var rawParams = (0, url_1.parse)(url, true);\n    if (rawParams.query.type === undefined) {\n        throw new Error('Invalid Deeplink: does not contain type:' + url);\n    }\n    if (rawParams.query.requestId === undefined) {\n        throw new Error('Invalid Deeplink: does not contain requestId');\n    }\n    var requestId = rawParams.query.requestId;\n    var address = rawParams.query.account;\n    var phoneNumber = rawParams.query.phoneNumber;\n    switch (rawParams.query.type) {\n        case DappKitRequestTypes.ACCOUNT_ADDRESS:\n            if (rawParams.query.status === DappKitResponseStatus.SUCCESS) {\n                // @ts-ignore\n                return {\n                    type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n                    status: DappKitResponseStatus.SUCCESS,\n                    address: address,\n                    phoneNumber: phoneNumber,\n                    requestId: requestId,\n                };\n            }\n            else {\n                return {\n                    type: DappKitRequestTypes.ACCOUNT_ADDRESS,\n                    status: DappKitResponseStatus.UNAUTHORIZED,\n                    requestId: requestId,\n                };\n            }\n        case DappKitRequestTypes.SIGN_TX:\n            if (rawParams.query.status === DappKitResponseStatus.SUCCESS) {\n                var rawTxs = rawParams.query.rawTxs;\n                if (typeof rawTxs === 'string') {\n                    rawTxs = [rawTxs];\n                }\n                // @ts-ignore\n                return {\n                    type: DappKitRequestTypes.SIGN_TX,\n                    status: DappKitResponseStatus.SUCCESS,\n                    rawTxs: rawTxs,\n                    requestId: requestId,\n                };\n            }\n            else {\n                return {\n                    type: DappKitRequestTypes.SIGN_TX,\n                    status: DappKitResponseStatus.UNAUTHORIZED,\n                    requestId: requestId,\n                };\n            }\n        default:\n            throw new Error('Invalid Deeplink: does not match defined requests');\n    }\n}\nexports.parseDappkitResponseDeeplink = parseDappkitResponseDeeplink;\nfunction parseDappKitRequestDeeplink(url) {\n    var rawParams = (0, url_1.parse)(url, true);\n    if (rawParams.query.type === undefined) {\n        throw new Error('Invalid Deeplink: does not contain type:' + url);\n    }\n    if (!rawParams.query.dappName || !rawParams.query.callback || !rawParams.query.requestId) {\n        throw new Error(\"Invalid Deeplink: Does not contain meta parameters: \" + url);\n    }\n    var requestMeta = {\n        // @ts-ignore\n        callback: rawParams.query.callback,\n        // @ts-ignore\n        requestId: rawParams.query.requestId,\n        // @ts-ignore\n        dappName: rawParams.query.dappName,\n    };\n    switch (rawParams.query.type) {\n        case DappKitRequestTypes.ACCOUNT_ADDRESS:\n            return (0, exports.AccountAuthRequest)(requestMeta);\n            break;\n        case DappKitRequestTypes.SIGN_TX:\n            // @ts-ignore\n            return __assign({ type: DappKitRequestTypes.SIGN_TX, \n                // @ts-ignore\n                txs: JSON.parse(Buffer.from(rawParams.query.txs, 'base64').toString('utf8')) }, requestMeta);\n        default:\n            throw new Error('Invalid Deeplink: does not match defined requests');\n    }\n}\nexports.parseDappKitRequestDeeplink = parseDappKitRequestDeeplink;\n//# sourceMappingURL=dappkit.js.map"]},"metadata":{},"sourceType":"script"}