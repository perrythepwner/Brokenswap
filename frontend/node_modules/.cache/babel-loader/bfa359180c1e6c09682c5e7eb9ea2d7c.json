{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst mini_kit_1 = require(\"@celo/contractkit/lib/mini-kit\");\nconst wallet_walletconnect_1 = require(\"@celo/wallet-walletconnect\");\nconst bignumber_js_1 = require(\"bignumber.js\");\nconst constants_1 = require(\"../constants\");\nconst logger_1 = require(\"../utils/logger\");\nconst common_1 = require(\"./common\");\nclass WalletConnectConnector extends common_1.AbstractConnector {\n  constructor(network, manualNetworkMode, feeCurrency, options) {\n    let autoOpen = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let getDeeplinkUrl = arguments.length > 5 ? arguments[5] : undefined;\n    let version = arguments.length > 6 ? arguments[6] : undefined;\n    let walletId = arguments.length > 7 ? arguments[7] : undefined;\n    super();\n    this.network = network;\n    this.feeCurrency = feeCurrency;\n    this.options = options;\n    this.autoOpen = autoOpen;\n    this.getDeeplinkUrl = getDeeplinkUrl;\n    this.version = version;\n    this.walletId = walletId;\n    this.initialised = false;\n    this.type = constants_1.WalletTypes.WalletConnect;\n    this.onCallRequest = (error, payload) => {\n      (0, logger_1.getApplicationLogger)().debug('wallet-connect', 'onCallRequest', payload, error ? \"Error \".concat(error.name, \" \").concat(error.message) : '');\n      if (error) {\n        (0, logger_1.getApplicationLogger)().debug('wallet-connect', 'on-call-request', payload, error);\n        this.emit(common_1.ConnectorEvents.WC_ERROR, error);\n      }\n    };\n    this.onSessionEvent = (_error, data) => {\n      var _a, _b;\n      (0, logger_1.getApplicationLogger)().debug('wallet-connect', 'on-session-event', (_b = (_a = data === null || data === void 0 ? void 0 : data.params) === null || _a === void 0 ? void 0 : _a.event) === null || _b === void 0 ? void 0 : _b.name, data);\n      if (_error) {\n        this.emit(common_1.ConnectorEvents.WC_ERROR, _error);\n        return;\n      }\n      switch (data === null || data === void 0 ? void 0 : data.params.event.name) {\n        case 'accountsChanged':\n          {\n            if (Array.isArray(data === null || data === void 0 ? void 0 : data.params.event.data) && (data === null || data === void 0 ? void 0 : data.params.event.data[0])) {\n              return this.onAddressChange(data === null || data === void 0 ? void 0 : data.params.event.data[0]);\n            }\n            break;\n          }\n        case 'chainChanged':\n          {\n            // from https://docs.walletconnect.com/2.0/web/web3wallet/wallet-usage#chainchanged\n            const chainId = data.params.chainId.split('eip155:')[1];\n            this.emit(common_1.ConnectorEvents.WALLET_CHAIN_CHANGED, Number(chainId));\n            break;\n          }\n        default:\n          (0, logger_1.getApplicationLogger)().warn('unsupported session_event received', data === null || data === void 0 ? void 0 : data.params.event.name);\n      }\n    };\n    this.onSessionUpdated = (error, data) => __awaiter(this, void 0, void 0, function* () {\n      (0, logger_1.getApplicationLogger)().debug('wallet-connect', 'on-session-update', data);\n      if (error) {\n        this.emit(common_1.ConnectorEvents.WC_ERROR, error);\n      }\n      try {\n        // either there will be data or an error\n        if (data) {\n          // session update is called when the wallet connects to the dapp.\n          // it might also be called to just update the session, however this is fine\n          // since the onConnect event just updates values in reducer and if they are the same\n          // it will not trigger a re-render.\n          yield this.onConnected(data);\n        }\n      } catch (e) {\n        (0, logger_1.getApplicationLogger)().error('wallet-connect', 'on-session-update', e);\n        this.emit(common_1.ConnectorEvents.WC_ERROR, e);\n      }\n    });\n    this.onSessionDeleted = (_error, data) => __awaiter(this, void 0, void 0, function* () {\n      (0, logger_1.getApplicationLogger)().debug('wallet-connect', 'on-session-delete', data, _error);\n      // since dapps send the event both when they initiate disconnection and\n      // when responding to disconnection requests, check if dapp initiated the\n      // connection to avoid closing twice.\n      try {\n        yield this.close();\n      } catch (e) {\n        (0, logger_1.getApplicationLogger)().warn(e);\n      }\n    });\n    this.updateFeeCurrency = common_1.updateFeeCurrency.bind(this);\n    const wallet = new wallet_walletconnect_1.WalletConnectWallet(Object.assign(Object.assign({}, options), {\n      chainId: network.chainId\n    }));\n    this.kit = (0, mini_kit_1.newKit)(network.rpcUrl, wallet);\n  }\n  // this is called automatically and is what gives us the uri for the qr code to be scanned\n  initialise() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.initialised) {\n        return this;\n      }\n      const wallet = this.kit.getWallet();\n      wallet.on('session_update', this.onSessionUpdated);\n      wallet.on('session_event', this.onSessionEvent);\n      wallet.on('session_delete', this.onSessionDeleted);\n      wallet.on('session_request', this.onCallRequest);\n      try {\n        yield this.handleUri(wallet);\n      } catch (e) {\n        (0, logger_1.getApplicationLogger)().error('Error handling uri', e);\n      }\n      try {\n        yield wallet.init();\n      } catch (e) {\n        (0, logger_1.getApplicationLogger)().error('error wallet init', e);\n      }\n      const [address] = wallet.getAccounts();\n      const defaultAccount = yield this.fetchWalletAddressForAccount(address);\n      this.kit.connection.defaultAccount = defaultAccount;\n      this.initialised = true;\n      this.emit(common_1.ConnectorEvents.WC_INITIALISED);\n      return this;\n    });\n  }\n  handleUri(wallet) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const uri = yield wallet.getUri();\n      if (uri) {\n        this.emit(common_1.ConnectorEvents.WC_URI_RECEIVED, uri);\n      }\n      if (uri && this.autoOpen) {\n        const deepLink = this.getDeeplinkUrl ? this.getDeeplinkUrl(uri) : uri;\n        if (deepLink) {\n          location.href = deepLink;\n        }\n      }\n    });\n  }\n  startNetworkChangeFromApp(network) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this.kit.getWallet();\n        const previousAddress = (_a = this.kit.connection.defaultAccount) === null || _a === void 0 ? void 0 : _a.slice();\n        if (this.initialised) {\n          // if not initialised, we don't need to switch networks\n          const success = yield wallet.switchToChain(Object.assign(Object.assign({}, network), {\n            networkId: network.chainId\n          }));\n          (0, logger_1.getApplicationLogger)().debug('[startNetworkChangeFromApp] success?', success);\n        }\n        this.restartKit(network);\n        const newAddress = this.kit.connection.defaultAccount;\n        this.emit(common_1.ConnectorEvents.NETWORK_CHANGED, network.name);\n        // its theoretically possible that a wallet will change address when switching networks\n        if (previousAddress !== newAddress) {\n          this.emit(common_1.ConnectorEvents.ADDRESS_CHANGED, newAddress);\n        }\n      } catch (e) {\n        this.emit(common_1.ConnectorEvents.NETWORK_CHANGE_FAILED, e);\n      }\n    });\n  }\n  restartKit(network) {\n    const wallet = this.kit.getWallet();\n    this.network = network; // must set to prevent loop\n    try {\n      this.kit.connection.stop(); // this blows up if its already stopped\n    } finally {\n      this.kit = (0, mini_kit_1.newKit)(network.rpcUrl, wallet);\n      // ensure we have a default account set\n      this.kit.connection.defaultAccount = wallet.getAccounts()[0];\n    }\n  }\n  // for when the wallet is already on the desired network and the kit / dapp need to catch up.\n  continueNetworkUpdateFromWallet(network) {\n    this.restartKit(network);\n    this.emit(common_1.ConnectorEvents.NETWORK_CHANGED, network.name);\n  }\n  supportsFeeCurrency() {\n    // If on WC 1 it will not work due to fields being dropped\n    if (!this.version || this.version === 1) {\n      return false;\n    }\n    // TODO when V2 is used again check based on wallet?\n    return true;\n  }\n  onAddressChange(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.kit.connection.defaultAccount = yield this.fetchWalletAddressForAccount(address);\n      this.emit(common_1.ConnectorEvents.ADDRESS_CHANGED, address);\n    });\n  }\n  onConnected(data) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      // first look for an account on the current chain if not found use the first one\n      const accountForChain = data.params.namespaces.eip155.accounts.find(eipChainAccount => {\n        return eipChainAccount.split(':')[1] === this.network.chainId.toString();\n      }) || data.params.namespaces.eip155.accounts[0];\n      const [_eip, chainId, account] = (_a = accountForChain === null || accountForChain === void 0 ? void 0 : accountForChain.split(':')) !== null && _a !== void 0 ? _a : [];\n      const walletAddress = yield this.fetchWalletAddressForAccount(account);\n      if (!walletAddress) {\n        this.emit(common_1.ConnectorEvents.WC_ERROR, new Error('No account found'));\n        return; // in rare case that no account is found\n      }\n\n      if (this.kit.connection.defaultAccount !== walletAddress) {\n        this.kit.connection.defaultAccount = walletAddress;\n      }\n      this.emit(common_1.ConnectorEvents.CONNECTED, {\n        walletType: this.type,\n        walletId: this.walletId,\n        walletChainId: parseInt(chainId),\n        networkName: this.network.name,\n        address: walletAddress\n      });\n    });\n  }\n  fetchWalletAddressForAccount(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!address) {\n        return undefined;\n      }\n      const accounts = yield this.kit.contracts.getAccounts();\n      const walletAddress = yield accounts.getWalletAddress(address);\n      return new bignumber_js_1.BigNumber(walletAddress).isZero() ? address : walletAddress;\n    });\n  }\n  close(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      (0, logger_1.getApplicationLogger)().log('wallet-connect', 'close', message);\n      try {\n        this.initialised = false;\n        const wallet = this.kit.getWallet();\n        yield wallet.close();\n        this.kit.connection.stop();\n      } finally {\n        this.disconnect();\n      }\n    });\n  }\n}\nexports.default = WalletConnectConnector;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","mini_kit_1","require","wallet_walletconnect_1","bignumber_js_1","constants_1","logger_1","common_1","WalletConnectConnector","AbstractConnector","constructor","network","manualNetworkMode","feeCurrency","options","autoOpen","arguments","length","undefined","getDeeplinkUrl","version","walletId","initialised","type","WalletTypes","WalletConnect","onCallRequest","error","payload","getApplicationLogger","debug","concat","name","message","emit","ConnectorEvents","WC_ERROR","onSessionEvent","_error","data","_a","_b","params","event","Array","isArray","onAddressChange","chainId","split","WALLET_CHAIN_CHANGED","Number","warn","onSessionUpdated","onConnected","onSessionDeleted","close","updateFeeCurrency","bind","wallet","WalletConnectWallet","assign","kit","newKit","rpcUrl","initialise","getWallet","on","handleUri","init","address","getAccounts","defaultAccount","fetchWalletAddressForAccount","connection","WC_INITIALISED","uri","getUri","WC_URI_RECEIVED","deepLink","location","href","startNetworkChangeFromApp","previousAddress","slice","success","switchToChain","networkId","restartKit","newAddress","NETWORK_CHANGED","ADDRESS_CHANGED","NETWORK_CHANGE_FAILED","stop","continueNetworkUpdateFromWallet","supportsFeeCurrency","accountForChain","namespaces","eip155","accounts","find","eipChainAccount","toString","_eip","account","walletAddress","Error","CONNECTED","walletType","walletChainId","parseInt","networkName","contracts","getWalletAddress","BigNumber","isZero","log","disconnect","default"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@celo/react-celo/lib/connectors/wallet-connect.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mini_kit_1 = require(\"@celo/contractkit/lib/mini-kit\");\nconst wallet_walletconnect_1 = require(\"@celo/wallet-walletconnect\");\nconst bignumber_js_1 = require(\"bignumber.js\");\nconst constants_1 = require(\"../constants\");\nconst logger_1 = require(\"../utils/logger\");\nconst common_1 = require(\"./common\");\nclass WalletConnectConnector extends common_1.AbstractConnector {\n    constructor(network, manualNetworkMode, feeCurrency, options, autoOpen = false, getDeeplinkUrl, version, walletId) {\n        super();\n        this.network = network;\n        this.feeCurrency = feeCurrency;\n        this.options = options;\n        this.autoOpen = autoOpen;\n        this.getDeeplinkUrl = getDeeplinkUrl;\n        this.version = version;\n        this.walletId = walletId;\n        this.initialised = false;\n        this.type = constants_1.WalletTypes.WalletConnect;\n        this.onCallRequest = (error, payload) => {\n            (0, logger_1.getApplicationLogger)().debug('wallet-connect', 'onCallRequest', payload, error ? `Error ${error.name} ${error.message}` : '');\n            if (error) {\n                (0, logger_1.getApplicationLogger)().debug('wallet-connect', 'on-call-request', payload, error);\n                this.emit(common_1.ConnectorEvents.WC_ERROR, error);\n            }\n        };\n        this.onSessionEvent = (_error, data) => {\n            var _a, _b;\n            (0, logger_1.getApplicationLogger)().debug('wallet-connect', 'on-session-event', (_b = (_a = data === null || data === void 0 ? void 0 : data.params) === null || _a === void 0 ? void 0 : _a.event) === null || _b === void 0 ? void 0 : _b.name, data);\n            if (_error) {\n                this.emit(common_1.ConnectorEvents.WC_ERROR, _error);\n                return;\n            }\n            switch (data === null || data === void 0 ? void 0 : data.params.event.name) {\n                case 'accountsChanged': {\n                    if (Array.isArray(data === null || data === void 0 ? void 0 : data.params.event.data) &&\n                        (data === null || data === void 0 ? void 0 : data.params.event.data[0])) {\n                        return this.onAddressChange(data === null || data === void 0 ? void 0 : data.params.event.data[0]);\n                    }\n                    break;\n                }\n                case 'chainChanged': {\n                    // from https://docs.walletconnect.com/2.0/web/web3wallet/wallet-usage#chainchanged\n                    const chainId = data.params.chainId.split('eip155:')[1];\n                    this.emit(common_1.ConnectorEvents.WALLET_CHAIN_CHANGED, Number(chainId));\n                    break;\n                }\n                default:\n                    (0, logger_1.getApplicationLogger)().warn('unsupported session_event received', data === null || data === void 0 ? void 0 : data.params.event.name);\n            }\n        };\n        this.onSessionUpdated = (error, data) => __awaiter(this, void 0, void 0, function* () {\n            (0, logger_1.getApplicationLogger)().debug('wallet-connect', 'on-session-update', data);\n            if (error) {\n                this.emit(common_1.ConnectorEvents.WC_ERROR, error);\n            }\n            try {\n                // either there will be data or an error\n                if (data) {\n                    // session update is called when the wallet connects to the dapp.\n                    // it might also be called to just update the session, however this is fine\n                    // since the onConnect event just updates values in reducer and if they are the same\n                    // it will not trigger a re-render.\n                    yield this.onConnected(data);\n                }\n            }\n            catch (e) {\n                (0, logger_1.getApplicationLogger)().error('wallet-connect', 'on-session-update', e);\n                this.emit(common_1.ConnectorEvents.WC_ERROR, e);\n            }\n        });\n        this.onSessionDeleted = (_error, data) => __awaiter(this, void 0, void 0, function* () {\n            (0, logger_1.getApplicationLogger)().debug('wallet-connect', 'on-session-delete', data, _error);\n            // since dapps send the event both when they initiate disconnection and\n            // when responding to disconnection requests, check if dapp initiated the\n            // connection to avoid closing twice.\n            try {\n                yield this.close();\n            }\n            catch (e) {\n                (0, logger_1.getApplicationLogger)().warn(e);\n            }\n        });\n        this.updateFeeCurrency = common_1.updateFeeCurrency.bind(this);\n        const wallet = new wallet_walletconnect_1.WalletConnectWallet(Object.assign(Object.assign({}, options), { chainId: network.chainId }));\n        this.kit = (0, mini_kit_1.newKit)(network.rpcUrl, wallet);\n    }\n    // this is called automatically and is what gives us the uri for the qr code to be scanned\n    initialise() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.initialised) {\n                return this;\n            }\n            const wallet = this.kit.getWallet();\n            wallet.on('session_update', this.onSessionUpdated);\n            wallet.on('session_event', this.onSessionEvent);\n            wallet.on('session_delete', this.onSessionDeleted);\n            wallet.on('session_request', this.onCallRequest);\n            try {\n                yield this.handleUri(wallet);\n            }\n            catch (e) {\n                (0, logger_1.getApplicationLogger)().error('Error handling uri', e);\n            }\n            try {\n                yield wallet.init();\n            }\n            catch (e) {\n                (0, logger_1.getApplicationLogger)().error('error wallet init', e);\n            }\n            const [address] = wallet.getAccounts();\n            const defaultAccount = yield this.fetchWalletAddressForAccount(address);\n            this.kit.connection.defaultAccount = defaultAccount;\n            this.initialised = true;\n            this.emit(common_1.ConnectorEvents.WC_INITIALISED);\n            return this;\n        });\n    }\n    handleUri(wallet) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const uri = yield wallet.getUri();\n            if (uri) {\n                this.emit(common_1.ConnectorEvents.WC_URI_RECEIVED, uri);\n            }\n            if (uri && this.autoOpen) {\n                const deepLink = this.getDeeplinkUrl ? this.getDeeplinkUrl(uri) : uri;\n                if (deepLink) {\n                    location.href = deepLink;\n                }\n            }\n        });\n    }\n    startNetworkChangeFromApp(network) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const wallet = this.kit.getWallet();\n                const previousAddress = (_a = this.kit.connection.defaultAccount) === null || _a === void 0 ? void 0 : _a.slice();\n                if (this.initialised) {\n                    // if not initialised, we don't need to switch networks\n                    const success = yield wallet.switchToChain(Object.assign(Object.assign({}, network), { networkId: network.chainId }));\n                    (0, logger_1.getApplicationLogger)().debug('[startNetworkChangeFromApp] success?', success);\n                }\n                this.restartKit(network);\n                const newAddress = this.kit.connection.defaultAccount;\n                this.emit(common_1.ConnectorEvents.NETWORK_CHANGED, network.name);\n                // its theoretically possible that a wallet will change address when switching networks\n                if (previousAddress !== newAddress) {\n                    this.emit(common_1.ConnectorEvents.ADDRESS_CHANGED, newAddress);\n                }\n            }\n            catch (e) {\n                this.emit(common_1.ConnectorEvents.NETWORK_CHANGE_FAILED, e);\n            }\n        });\n    }\n    restartKit(network) {\n        const wallet = this.kit.getWallet();\n        this.network = network; // must set to prevent loop\n        try {\n            this.kit.connection.stop(); // this blows up if its already stopped\n        }\n        finally {\n            this.kit = (0, mini_kit_1.newKit)(network.rpcUrl, wallet);\n            // ensure we have a default account set\n            this.kit.connection.defaultAccount = wallet.getAccounts()[0];\n        }\n    }\n    // for when the wallet is already on the desired network and the kit / dapp need to catch up.\n    continueNetworkUpdateFromWallet(network) {\n        this.restartKit(network);\n        this.emit(common_1.ConnectorEvents.NETWORK_CHANGED, network.name);\n    }\n    supportsFeeCurrency() {\n        // If on WC 1 it will not work due to fields being dropped\n        if (!this.version || this.version === 1) {\n            return false;\n        }\n        // TODO when V2 is used again check based on wallet?\n        return true;\n    }\n    onAddressChange(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.kit.connection.defaultAccount =\n                yield this.fetchWalletAddressForAccount(address);\n            this.emit(common_1.ConnectorEvents.ADDRESS_CHANGED, address);\n        });\n    }\n    onConnected(data) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            // first look for an account on the current chain if not found use the first one\n            const accountForChain = data.params.namespaces.eip155.accounts.find((eipChainAccount) => {\n                return (eipChainAccount.split(':')[1] === this.network.chainId.toString());\n            }) || data.params.namespaces.eip155.accounts[0];\n            const [_eip, chainId, account] = (_a = accountForChain === null || accountForChain === void 0 ? void 0 : accountForChain.split(':')) !== null && _a !== void 0 ? _a : [];\n            const walletAddress = yield this.fetchWalletAddressForAccount(account);\n            if (!walletAddress) {\n                this.emit(common_1.ConnectorEvents.WC_ERROR, new Error('No account found'));\n                return; // in rare case that no account is found\n            }\n            if (this.kit.connection.defaultAccount !== walletAddress) {\n                this.kit.connection.defaultAccount = walletAddress;\n            }\n            this.emit(common_1.ConnectorEvents.CONNECTED, {\n                walletType: this.type,\n                walletId: this.walletId,\n                walletChainId: parseInt(chainId),\n                networkName: this.network.name,\n                address: walletAddress,\n            });\n        });\n    }\n    fetchWalletAddressForAccount(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!address) {\n                return undefined;\n            }\n            const accounts = yield this.kit.contracts.getAccounts();\n            const walletAddress = yield accounts.getWalletAddress(address);\n            return new bignumber_js_1.BigNumber(walletAddress).isZero() ? address : walletAddress;\n        });\n    }\n    close(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            (0, logger_1.getApplicationLogger)().log('wallet-connect', 'close', message);\n            try {\n                this.initialised = false;\n                const wallet = this.kit.getWallet();\n                yield wallet.close();\n                this.kit.connection.stop();\n            }\n            finally {\n                this.disconnect();\n            }\n        });\n    }\n}\nexports.default = WalletConnectConnector;\n//# sourceMappingURL=wallet-connect.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}