{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletConnectSigner = void 0;\nconst ethUtil = __importStar(require(\"ethereumjs-util\"));\nconst types_1 = require(\"./types\");\n/**\n * Implements the signer interface on top of the WalletConnect interface.\n */\nclass WalletConnectSigner {\n  /**\n   * Construct a new instance of a WalletConnectSigner\n   */\n  constructor(client, session, account, chainId) {\n    this.client = client;\n    this.session = session;\n    this.account = account;\n    this.chainId = chainId;\n    this.getNativeKey = () => this.account;\n  }\n  signTransaction() {\n    throw new Error('signTransaction unimplemented; use signRawTransaction');\n  }\n  request(method, params) {\n    return this.client.request({\n      topic: this.session.topic,\n      chainId: \"eip155:\".concat(this.chainId),\n      request: {\n        method,\n        params\n      }\n    });\n  }\n  // is this misnamed its not raw ? https://docs.walletconnect.com/2.0/advanced/rpc-reference/ethereum-rpc#eth_sendrawtransaction\n  signRawTransaction(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.request(types_1.SupportedMethods.signTransaction, [tx]);\n      // Note: this change was added because wallets can either return an\n      // EncodedTransaction object or just the raw signed tx.\n      // Both should work.\n      if (typeof result === 'string') {\n        return {\n          raw: result\n        };\n      }\n      return result;\n    });\n  }\n  signTypedData(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.request(types_1.SupportedMethods.signTypedData, [this.account, JSON.stringify(data)]);\n      return ethUtil.fromRpcSig(result);\n    });\n  }\n  signPersonalMessage(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.request(types_1.SupportedMethods.personalSign, [data, this.account]);\n      return ethUtil.fromRpcSig(result);\n    });\n  }\n  decrypt(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.request(types_1.SupportedMethods.decrypt, [this.account, data]);\n      return Buffer.from(result, 'hex');\n    });\n  }\n  computeSharedSecret(publicKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.request(types_1.SupportedMethods.computeSharedSecret, [this.account, publicKey]);\n      return Buffer.from(result, 'hex');\n    });\n  }\n}\nexports.WalletConnectSigner = WalletConnectSigner;","map":null,"metadata":{},"sourceType":"script"}