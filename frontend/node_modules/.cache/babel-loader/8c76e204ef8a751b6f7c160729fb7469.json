{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SubscribeBlockTracker = void 0;\nconst json_rpc_random_id_1 = __importDefault(require(\"json-rpc-random-id\"));\nconst BaseBlockTracker_1 = require(\"./BaseBlockTracker\");\nconst createRandomId = (0, json_rpc_random_id_1.default)();\nclass SubscribeBlockTracker extends BaseBlockTracker_1.BaseBlockTracker {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // parse + validate args\n    if (!opts.provider) {\n      throw new Error('SubscribeBlockTracker - no provider specified.');\n    }\n    // BaseBlockTracker constructor\n    super(opts);\n    // config\n    this._provider = opts.provider;\n    this._subscriptionId = null;\n  }\n  checkForLatestBlock() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return yield _this.getLatestBlock();\n    })();\n  }\n  _start() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2._subscriptionId === undefined || _this2._subscriptionId === null) {\n        try {\n          const blockNumber = yield _this2._call('eth_blockNumber');\n          _this2._subscriptionId = yield _this2._call('eth_subscribe', 'newHeads');\n          _this2._provider.on('data', _this2._handleSubData.bind(_this2));\n          _this2._newPotentialLatest(blockNumber);\n        } catch (e) {\n          _this2.emit('error', e);\n        }\n      }\n    })();\n  }\n  _end() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3._subscriptionId !== null && _this3._subscriptionId !== undefined) {\n        try {\n          yield _this3._call('eth_unsubscribe', _this3._subscriptionId);\n          _this3._subscriptionId = null;\n        } catch (e) {\n          _this3.emit('error', e);\n        }\n      }\n    })();\n  }\n  _call(method) {\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n    return new Promise((resolve, reject) => {\n      this._provider.sendAsync({\n        id: createRandomId(),\n        method,\n        params,\n        jsonrpc: '2.0'\n      }, (err, res) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(res.result);\n        }\n      });\n    });\n  }\n  _handleSubData(_, response) {\n    var _a;\n    if (response.method === 'eth_subscription' && ((_a = response.params) === null || _a === void 0 ? void 0 : _a.subscription) === this._subscriptionId) {\n      this._newPotentialLatest(response.params.result.number);\n    }\n  }\n}\nexports.SubscribeBlockTracker = SubscribeBlockTracker;","map":null,"metadata":{},"sourceType":"script"}