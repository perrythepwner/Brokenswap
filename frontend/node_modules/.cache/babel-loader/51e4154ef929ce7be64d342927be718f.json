{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timeSince = exports.inMilliseconds = exports.Duration = void 0;\n/**\n * Common duration constants, in milliseconds.\n */\nvar Duration;\n(function (Duration) {\n  /**\n   * A millisecond.\n   */\n  Duration[Duration[\"Millisecond\"] = 1] = \"Millisecond\";\n  /**\n   * A second, in milliseconds.\n   */\n  Duration[Duration[\"Second\"] = 1000] = \"Second\";\n  /**\n   * A minute, in milliseconds.\n   */\n  Duration[Duration[\"Minute\"] = 60000] = \"Minute\";\n  /**\n   * An hour, in milliseconds.\n   */\n  Duration[Duration[\"Hour\"] = 3600000] = \"Hour\";\n  /**\n   * A day, in milliseconds.\n   */\n  Duration[Duration[\"Day\"] = 86400000] = \"Day\";\n  /**\n   * A week, in milliseconds.\n   */\n  Duration[Duration[\"Week\"] = 604800000] = \"Week\";\n  /**\n   * A year, in milliseconds.\n   */\n  Duration[Duration[\"Year\"] = 31536000000] = \"Year\";\n})(Duration = exports.Duration || (exports.Duration = {}));\nconst isNonNegativeInteger = number => Number.isInteger(number) && number >= 0;\nconst assertIsNonNegativeInteger = (number, name) => {\n  if (!isNonNegativeInteger(number)) {\n    throw new Error(\"\\\"\".concat(name, \"\\\" must be a non-negative integer. Received: \\\"\").concat(number, \"\\\".\"));\n  }\n};\n/**\n * Calculates the millisecond value of the specified number of units of time.\n *\n * @param count - The number of units of time.\n * @param duration - The unit of time to count.\n * @returns The count multiplied by the specified duration.\n */\nfunction inMilliseconds(count, duration) {\n  assertIsNonNegativeInteger(count, 'count');\n  return count * duration;\n}\nexports.inMilliseconds = inMilliseconds;\n/**\n * Gets the milliseconds since a particular Unix epoch timestamp.\n *\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */\nfunction timeSince(timestamp) {\n  assertIsNonNegativeInteger(timestamp, 'timestamp');\n  return Date.now() - timestamp;\n}\nexports.timeSince = timeSince;","map":{"version":3,"sources":["../src/time.ts"],"names":[],"mappings":";;;;;;AAAA;;AAEG;AACH,IAAY,QAmCX;AAnCD,CAAA,UAAY,QAAQ,EAAA;EAClB;;AAEG;EACH,QAAA,CAAA,QAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAe;EAEf;;AAEG;EACH,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,GAAA,IAAA,CAAA,GAAA,QAAa;EAEb;;AAEG;EACH,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAe;EAEf;;AAEG;EACH,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,OAAA,CAAA,GAAA,MAAgB;EAEhB;;AAEG;EACH,QAAA,CAAA,QAAA,CAAA,KAAA,CAAA,GAAA,QAAA,CAAA,GAAA,KAAgB;EAEhB;;AAEG;EACH,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,SAAA,CAAA,GAAA,MAAkB;EAElB;;AAEG;EACH,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,WAAA,CAAA,GAAA,MAAqB;AACvB,CAAC,EAnCW,QAAQ,GAAR,OAAA,CAAA,QAAQ,KAAR,OAAA,CAAA,QAAQ,GAAA,CAAA,CAAA,CAAA,CAAA;AAqCpB,MAAM,oBAAoB,GAAI,MAAc,IAC1C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,MAAM,IAAI,CAAC;AAEzC,MAAM,0BAA0B,GAAG,CAAC,MAAc,EAAE,IAAY,KAAI;EAClE,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE;IACjC,MAAM,IAAI,KAAK,MAAA,MAAA,CACT,IAAI,qDAAA,MAAA,CAAgD,MAAM,QAAI,CACnE;EACF;AACH,CAAC;AAED;;;;;;AAMG;AACH,SAAgB,cAAc,CAAC,KAAa,EAAE,QAAkB,EAAA;EAC9D,0BAA0B,CAAC,KAAK,EAAE,OAAO,CAAC;EAC1C,OAAO,KAAK,GAAG,QAAQ;AACzB;AAHA,OAAA,CAAA,cAAA,GAAA,cAAA;AAKA;;;;;AAKG;AACH,SAAgB,SAAS,CAAC,SAAiB,EAAA;EACzC,0BAA0B,CAAC,SAAS,EAAE,WAAW,CAAC;EAClD,OAAO,IAAI,CAAC,GAAG,CAAA,CAAE,GAAG,SAAS;AAC/B;AAHA,OAAA,CAAA,SAAA,GAAA,SAAA","sourcesContent":["/**\n * Common duration constants, in milliseconds.\n */\nexport enum Duration {\n  /**\n   * A millisecond.\n   */\n  Millisecond = 1,\n\n  /**\n   * A second, in milliseconds.\n   */\n  Second = 1000, // Millisecond * 1000\n\n  /**\n   * A minute, in milliseconds.\n   */\n  Minute = 60_000, // Second * 60\n\n  /**\n   * An hour, in milliseconds.\n   */\n  Hour = 3_600_000, // Minute * 60\n\n  /**\n   * A day, in milliseconds.\n   */\n  Day = 86_400_000, // Hour * 24\n\n  /**\n   * A week, in milliseconds.\n   */\n  Week = 604_800_000, // Day * 7\n\n  /**\n   * A year, in milliseconds.\n   */\n  Year = 31_536_000_000, // Day * 365\n}\n\nconst isNonNegativeInteger = (number: number) =>\n  Number.isInteger(number) && number >= 0;\n\nconst assertIsNonNegativeInteger = (number: number, name: string) => {\n  if (!isNonNegativeInteger(number)) {\n    throw new Error(\n      `\"${name}\" must be a non-negative integer. Received: \"${number}\".`,\n    );\n  }\n};\n\n/**\n * Calculates the millisecond value of the specified number of units of time.\n *\n * @param count - The number of units of time.\n * @param duration - The unit of time to count.\n * @returns The count multiplied by the specified duration.\n */\nexport function inMilliseconds(count: number, duration: Duration): number {\n  assertIsNonNegativeInteger(count, 'count');\n  return count * duration;\n}\n\n/**\n * Gets the milliseconds since a particular Unix epoch timestamp.\n *\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */\nexport function timeSince(timestamp: number): number {\n  assertIsNonNegativeInteger(timestamp, 'timestamp');\n  return Date.now() - timestamp;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}