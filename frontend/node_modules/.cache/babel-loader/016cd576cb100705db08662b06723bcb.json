{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Package int provides helper functions for integerss.\n */\n// Shim using 16-bit pieces.\nfunction imulShim(a, b) {\n  var ah = a >>> 16 & 0xffff,\n    al = a & 0xffff;\n  var bh = b >>> 16 & 0xffff,\n    bl = b & 0xffff;\n  return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;\n}\n/** 32-bit integer multiplication.  */\n// Use system Math.imul if available, otherwise use our shim.\nexports.mul = Math.imul || imulShim;\n/** 32-bit integer addition.  */\nfunction add(a, b) {\n  return a + b | 0;\n}\nexports.add = add;\n/**  32-bit integer subtraction.  */\nfunction sub(a, b) {\n  return a - b | 0;\n}\nexports.sub = sub;\n/** 32-bit integer left rotation */\nfunction rotl(x, n) {\n  return x << n | x >>> 32 - n;\n}\nexports.rotl = rotl;\n/** 32-bit integer left rotation */\nfunction rotr(x, n) {\n  return x << 32 - n | x >>> n;\n}\nexports.rotr = rotr;\nfunction isIntegerShim(n) {\n  return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n;\n}\n/**\n * Returns true if the argument is an integer number.\n *\n * In ES2015, Number.isInteger.\n */\nexports.isInteger = Number.isInteger || isIntegerShim;\n/**\n *  Math.pow(2, 53) - 1\n *\n *  In ES2015 Number.MAX_SAFE_INTEGER.\n */\nexports.MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Returns true if the argument is a safe integer number\n * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)\n *\n * In ES2015, Number.isSafeInteger.\n */\nexports.isSafeInteger = function (n) {\n  return exports.isInteger(n) && n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER;\n};","map":{"version":3,"sources":["../int.ts"],"names":[],"mappings":";;AAAA;AACA;;;;AAEA;;AAEG;AAEH;AACA,SAAS,QAAQ,CAAC,CAAS,EAAE,CAAS,EAAA;EAClC,IAAM,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,MAAM;IAAE,EAAE,GAAG,CAAC,GAAG,MAAM;EAC/C,IAAM,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,MAAM;IAAE,EAAE,GAAG,CAAC,GAAG,MAAM;EAC/C,OAAS,EAAE,GAAG,EAAE,IAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAK,EAAE,KAAM,CAAC,CAAC,GAAG,CAAC;AAC/D;AAEA;AACA;AACa,OAAA,CAAA,GAAG,GAAI,IAAgD,CAAC,IAAI,IAAI,QAAQ;AAErF;AACA,SAAgB,GAAG,CAAC,CAAS,EAAE,CAAS,EAAA;EACpC,OAAQ,CAAC,GAAG,CAAC,GAAI,CAAC;AACtB;AAFA,OAAA,CAAA,GAAA,GAAA,GAAA;AAIA;AACA,SAAgB,GAAG,CAAC,CAAS,EAAE,CAAS,EAAA;EACpC,OAAQ,CAAC,GAAG,CAAC,GAAI,CAAC;AACtB;AAFA,OAAA,CAAA,GAAA,GAAA,GAAA;AAIA;AACA,SAAgB,IAAI,CAAC,CAAS,EAAE,CAAS,EAAA;EACrC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAM,EAAE,GAAG,CAAE;AAClC;AAFA,OAAA,CAAA,IAAA,GAAA,IAAA;AAIA;AACA,SAAgB,IAAI,CAAC,CAAS,EAAE,CAAS,EAAA;EACrC,OAAO,CAAC,IAAK,EAAE,GAAG,CAAE,GAAG,CAAC,KAAK,CAAC;AAClC;AAFA,OAAA,CAAA,IAAA,GAAA,IAAA;AAIA,SAAS,aAAa,CAAC,CAAS,EAAA;EAC5B,OAAO,OAAO,CAAC,KAAK,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;AACtE;AAEA;;;;AAIG;AACU,OAAA,CAAA,SAAS,GAAI,MAA6C,CAAC,SAAS,IAAI,aAAa;AAElG;;;;AAIG;AACU,OAAA,CAAA,gBAAgB,GAAG,gBAAgB;AAEhD;;;;;AAKG;AACU,OAAA,CAAA,aAAa,GAAG,UAAC,CAAS,EAAA;EACnC,OAAA,OAAA,CAAA,SAAS,CAAC,CAAC,CAAC,IAAK,CAAC,IAAI,CAAC,OAAA,CAAA,gBAAgB,IAAI,CAAC,IAAI,OAAA,CAAA,gBAAiB;AAAjE,CAAiE","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package int provides helper functions for integerss.\n */\n// Shim using 16-bit pieces.\nfunction imulShim(a, b) {\n    var ah = (a >>> 16) & 0xffff, al = a & 0xffff;\n    var bh = (b >>> 16) & 0xffff, bl = b & 0xffff;\n    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);\n}\n/** 32-bit integer multiplication.  */\n// Use system Math.imul if available, otherwise use our shim.\nexports.mul = Math.imul || imulShim;\n/** 32-bit integer addition.  */\nfunction add(a, b) {\n    return (a + b) | 0;\n}\nexports.add = add;\n/**  32-bit integer subtraction.  */\nfunction sub(a, b) {\n    return (a - b) | 0;\n}\nexports.sub = sub;\n/** 32-bit integer left rotation */\nfunction rotl(x, n) {\n    return x << n | x >>> (32 - n);\n}\nexports.rotl = rotl;\n/** 32-bit integer left rotation */\nfunction rotr(x, n) {\n    return x << (32 - n) | x >>> n;\n}\nexports.rotr = rotr;\nfunction isIntegerShim(n) {\n    return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n;\n}\n/**\n * Returns true if the argument is an integer number.\n *\n * In ES2015, Number.isInteger.\n */\nexports.isInteger = Number.isInteger || isIntegerShim;\n/**\n *  Math.pow(2, 53) - 1\n *\n *  In ES2015 Number.MAX_SAFE_INTEGER.\n */\nexports.MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Returns true if the argument is a safe integer number\n * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)\n *\n * In ES2015, Number.isSafeInteger.\n */\nexports.isSafeInteger = function (n) {\n    return exports.isInteger(n) && (n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER);\n};\n//# sourceMappingURL=int.js.map"]},"metadata":{},"sourceType":"script"}