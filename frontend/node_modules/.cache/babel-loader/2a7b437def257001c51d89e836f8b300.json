{"ast":null,"code":"import _asyncToGenerator from \"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport EventEmitter from \"events\";\nimport { TransportRaceCondition, TransportError, StatusCodes, getAltStatusMessage, TransportStatusError } from \"@ledgerhq/errors\";\nexport { TransportError, TransportStatusError, StatusCodes, getAltStatusMessage };\n/**\n */\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\nexport default class Transport {\n  constructor() {\n    var _this = this;\n    this.exchangeTimeout = 30000;\n    this.unresponsiveTimeout = 15000;\n    this.deviceModel = null;\n    this._events = new EventEmitter();\n    this.send = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (cla, ins, p1, p2) {\n        let data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Buffer.alloc(0);\n        let statusList = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [StatusCodes.OK];\n        if (data.length >= 256) {\n          throw new TransportError(\"data.length exceed 256 bytes limit. Got: \" + data.length, \"DataLengthTooBig\");\n        }\n        const response = yield _this.exchange(Buffer.concat([Buffer.from([cla, ins, p1, p2]), Buffer.from([data.length]), data]));\n        const sw = response.readUInt16BE(response.length - 2);\n        if (!statusList.some(s => s === sw)) {\n          throw new TransportStatusError(sw);\n        }\n        return response;\n      });\n      return function (_x, _x2, _x3, _x4) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    this.exchangeBusyPromise = void 0;\n    this.exchangeAtomicImpl = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (f) {\n        if (_this.exchangeBusyPromise) {\n          throw new TransportRaceCondition(\"An action was already pending on the Ledger device. Please deny or reconnect.\");\n        }\n        let resolveBusy;\n        const busyPromise = new Promise(r => {\n          resolveBusy = r;\n        });\n        _this.exchangeBusyPromise = busyPromise;\n        let unresponsiveReached = false;\n        const timeout = setTimeout(() => {\n          unresponsiveReached = true;\n          _this.emit(\"unresponsive\");\n        }, _this.unresponsiveTimeout);\n        try {\n          const res = yield f();\n          if (unresponsiveReached) {\n            _this.emit(\"responsive\");\n          }\n          return res;\n        } finally {\n          clearTimeout(timeout);\n          if (resolveBusy) resolveBusy();\n          _this.exchangeBusyPromise = null;\n        }\n      });\n      return function (_x5) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    this._appAPIlock = null;\n  }\n\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n  exchange(_apdu) {\n    throw new Error(\"exchange not implemented\");\n  }\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n\n  setScrambleKey(_key) {}\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n\n  close() {\n    return Promise.resolve();\n  }\n\n  /**\n   * Listen to an event on an instance of transport.\n   * Transport implementation can have specific events. Here is the common events:\n   * * `\"disconnect\"` : triggered if Transport is disconnected\n   */\n  on(eventName, cb) {\n    this._events.on(eventName, cb);\n  }\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n\n  off(eventName, cb) {\n    this._events.removeListener(eventName, cb);\n  }\n  emit(event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    this._events.emit(event, ...args);\n  }\n  /**\n   * Enable or not logs of the binary exchange\n   */\n\n  setDebugMode() {\n    console.warn(\"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\");\n  }\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n\n  setExchangeTimeout(exchangeTimeout) {\n    this.exchangeTimeout = exchangeTimeout;\n  }\n  /**\n   * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n   */\n\n  setExchangeUnresponsiveTimeout(unresponsiveTimeout) {\n    this.unresponsiveTimeout = unresponsiveTimeout;\n  }\n  /**\n   * wrapper on top of exchange to simplify work of the implementation.\n   * @param cla\n   * @param ins\n   * @param p1\n   * @param p2\n   * @param data\n   * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n   * @return a Promise of response buffer\n   */\n\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\n  TransportFoo.create().then(transport => ...)\n   */\n  static create() {\n    let openTimeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;\n    let listenTimeout = arguments.length > 1 ? arguments[1] : undefined;\n    return new Promise((resolve, reject) => {\n      let found = false;\n      const sub = this.listen({\n        next: e => {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: e => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: () => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          if (!found) {\n            reject(new TransportError(this.ErrorMessage_NoDeviceFound, \"NoDeviceFound\"));\n          }\n        }\n      });\n      const listenTimeoutId = listenTimeout ? setTimeout(() => {\n        sub.unsubscribe();\n        reject(new TransportError(this.ErrorMessage_ListenTimeout, \"ListenTimeout\"));\n      }, listenTimeout) : null;\n    });\n  }\n  decorateAppAPIMethods(self, methods, scrambleKey) {\n    for (let methodName of methods) {\n      self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);\n    }\n  }\n  decorateAppAPIMethod(methodName, f, ctx, scrambleKey) {\n    var _this2 = this;\n    return /*#__PURE__*/_asyncToGenerator(function* () {\n      const {\n        _appAPIlock\n      } = _this2;\n      if (_appAPIlock) {\n        return Promise.reject(new TransportError(\"Ledger Device is busy (lock \" + _appAPIlock + \")\", \"TransportLocked\"));\n      }\n      try {\n        _this2._appAPIlock = methodName;\n        _this2.setScrambleKey(scrambleKey);\n        for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n        return yield f.apply(ctx, args);\n      } finally {\n        _this2._appAPIlock = null;\n      }\n    });\n  }\n}\nTransport.isSupported = void 0;\nTransport.list = void 0;\nTransport.listen = void 0;\nTransport.open = void 0;\nTransport.ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\nTransport.ErrorMessage_NoDeviceFound = \"No Ledger device found\";","map":{"version":3,"sources":["../src/Transport.js"],"names":["EventEmitter","TransportRaceCondition","TransportError","StatusCodes","getAltStatusMessage","TransportStatusError","Transport","exchangeTimeout","unresponsiveTimeout","deviceModel","isSupported","list","listen","open","exchange","_apdu","Error","setScrambleKey","_key","close","Promise","resolve","_events","on","eventName","cb","off","removeListener","emit","event","args","setDebugMode","console","warn","setExchangeTimeout","setExchangeUnresponsiveTimeout","send","cla","ins","p1","p2","data","Buffer","alloc","statusList","OK","length","response","concat","from","sw","readUInt16BE","some","s","create","openTimeout","listenTimeout","reject","found","sub","next","e","unsubscribe","listenTimeoutId","clearTimeout","descriptor","then","error","complete","ErrorMessage_NoDeviceFound","setTimeout","ErrorMessage_ListenTimeout","exchangeBusyPromise","exchangeAtomicImpl","f","resolveBusy","busyPromise","r","unresponsiveReached","timeout","res","decorateAppAPIMethods","self","methods","scrambleKey","methodName","decorateAppAPIMethod","_appAPIlock","ctx","apply"],"mappings":"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","sourcesContent":["//@flow\n\nimport EventEmitter from \"events\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport {\n  TransportRaceCondition,\n  TransportError,\n  StatusCodes,\n  getAltStatusMessage,\n  TransportStatusError,\n} from \"@ledgerhq/errors\";\n\nexport {\n  TransportError,\n  TransportStatusError,\n  StatusCodes,\n  getAltStatusMessage,\n};\n\n/**\n */\nexport type Subscription = { unsubscribe: () => void };\n\n/**\n */\nexport type Device = Object;\n\n/**\n * type: add or remove event\n * descriptor: a parameter that can be passed to open(descriptor)\n * deviceModel: device info on the model (is it a nano s, nano x, ...)\n * device: transport specific device info\n */\nexport type DescriptorEvent<Descriptor> = {\n  type: \"add\" | \"remove\",\n  descriptor: Descriptor,\n  deviceModel?: ?DeviceModel,\n  device?: Device,\n};\n/**\n */\nexport type Observer<Ev> = $ReadOnly<{\n  next: (event: Ev) => mixed,\n  error: (e: any) => mixed,\n  complete: () => mixed,\n}>;\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\nexport default class Transport<Descriptor> {\n  exchangeTimeout: number = 30000;\n  unresponsiveTimeout: number = 15000;\n  deviceModel: ?DeviceModel = null;\n\n  /**\n   * Statically check if a transport is supported on the user's platform/browser.\n   */\n  static +isSupported: () => Promise<boolean>;\n\n  /**\n   * List once all available descriptors. For a better granularity, checkout `listen()`.\n   * @return a promise of descriptors\n   * @example\n   * TransportFoo.list().then(descriptors => ...)\n   */\n  static +list: () => Promise<Array<Descriptor>>;\n\n  /**\n   * Listen all device events for a given Transport. The method takes an Obverver of DescriptorEvent and returns a Subscription (according to Observable paradigm https://github.com/tc39/proposal-observable )\n   * a DescriptorEvent is a `{ descriptor, type }` object. type can be `\"add\"` or `\"remove\"` and descriptor is a value you can pass to `open(descriptor)`.\n   * each listen() call will first emit all potential device already connected and then will emit events can come over times,\n   * for instance if you plug a USB device after listen() or a bluetooth device become discoverable.\n   * @param observer is an object with a next, error and complete function (compatible with observer pattern)\n   * @return a Subscription object on which you can `.unsubscribe()` to stop listening descriptors.\n   * @example\nconst sub = TransportFoo.listen({\n  next: e => {\n    if (e.type===\"add\") {\n      sub.unsubscribe();\n      const transport = await TransportFoo.open(e.descriptor);\n      ...\n    }\n  },\n  error: error => {},\n  complete: () => {}\n})\n   */\n  static +listen: (\n    observer: Observer<DescriptorEvent<Descriptor>>\n  ) => Subscription;\n\n  /**\n   * attempt to create a Transport instance with potentially a descriptor.\n   * @param descriptor: the descriptor to open the transport with.\n   * @param timeout: an optional timeout\n   * @return a Promise of Transport instance\n   * @example\nTransportFoo.open(descriptor).then(transport => ...)\n   */\n  static +open: (\n    descriptor: Descriptor,\n    timeout?: number\n  ) => Promise<Transport<Descriptor>>;\n\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n  exchange(_apdu: Buffer): Promise<Buffer> {\n    throw new Error(\"exchange not implemented\");\n  }\n\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n  setScrambleKey(_key: string) {}\n\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n  close(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  _events = new EventEmitter();\n\n  /**\n   * Listen to an event on an instance of transport.\n   * Transport implementation can have specific events. Here is the common events:\n   * * `\"disconnect\"` : triggered if Transport is disconnected\n   */\n  on(eventName: string, cb: Function) {\n    this._events.on(eventName, cb);\n  }\n\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n  off(eventName: string, cb: Function) {\n    this._events.removeListener(eventName, cb);\n  }\n\n  emit(event: string, ...args: *) {\n    this._events.emit(event, ...args);\n  }\n\n  /**\n   * Enable or not logs of the binary exchange\n   */\n  setDebugMode() {\n    console.warn(\n      \"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\"\n    );\n  }\n\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n  setExchangeTimeout(exchangeTimeout: number) {\n    this.exchangeTimeout = exchangeTimeout;\n  }\n\n  /**\n   * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n   */\n  setExchangeUnresponsiveTimeout(unresponsiveTimeout: number) {\n    this.unresponsiveTimeout = unresponsiveTimeout;\n  }\n\n  /**\n   * wrapper on top of exchange to simplify work of the implementation.\n   * @param cla\n   * @param ins\n   * @param p1\n   * @param p2\n   * @param data\n   * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n   * @return a Promise of response buffer\n   */\n  send = async (\n    cla: number,\n    ins: number,\n    p1: number,\n    p2: number,\n    data: Buffer = Buffer.alloc(0),\n    statusList: Array<number> = [StatusCodes.OK]\n  ): Promise<Buffer> => {\n    if (data.length >= 256) {\n      throw new TransportError(\n        \"data.length exceed 256 bytes limit. Got: \" + data.length,\n        \"DataLengthTooBig\"\n      );\n    }\n    const response = await this.exchange(\n      Buffer.concat([\n        Buffer.from([cla, ins, p1, p2]),\n        Buffer.from([data.length]),\n        data,\n      ])\n    );\n    const sw = response.readUInt16BE(response.length - 2);\n    if (!statusList.some((s) => s === sw)) {\n      throw new TransportStatusError(sw);\n    }\n    return response;\n  };\n\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\nTransportFoo.create().then(transport => ...)\n   */\n  static create(\n    openTimeout?: number = 3000,\n    listenTimeout?: number\n  ): Promise<Transport<Descriptor>> {\n    return new Promise((resolve, reject) => {\n      let found = false;\n      const sub = this.listen({\n        next: (e) => {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: (e) => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: () => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          if (!found) {\n            reject(\n              new TransportError(\n                this.ErrorMessage_NoDeviceFound,\n                \"NoDeviceFound\"\n              )\n            );\n          }\n        },\n      });\n      const listenTimeoutId = listenTimeout\n        ? setTimeout(() => {\n            sub.unsubscribe();\n            reject(\n              new TransportError(\n                this.ErrorMessage_ListenTimeout,\n                \"ListenTimeout\"\n              )\n            );\n          }, listenTimeout)\n        : null;\n    });\n  }\n\n  exchangeBusyPromise: ?Promise<void>;\n\n  // $FlowFixMe\n  exchangeAtomicImpl = async (f) => {\n    if (this.exchangeBusyPromise) {\n      throw new TransportRaceCondition(\n        \"An action was already pending on the Ledger device. Please deny or reconnect.\"\n      );\n    }\n    let resolveBusy;\n    const busyPromise = new Promise((r) => {\n      resolveBusy = r;\n    });\n    this.exchangeBusyPromise = busyPromise;\n    let unresponsiveReached = false;\n    const timeout = setTimeout(() => {\n      unresponsiveReached = true;\n      this.emit(\"unresponsive\");\n    }, this.unresponsiveTimeout);\n    try {\n      const res = await f();\n      if (unresponsiveReached) {\n        this.emit(\"responsive\");\n      }\n      return res;\n    } finally {\n      clearTimeout(timeout);\n      if (resolveBusy) resolveBusy();\n      this.exchangeBusyPromise = null;\n    }\n  };\n\n  decorateAppAPIMethods(\n    self: Object,\n    methods: Array<string>,\n    scrambleKey: string\n  ) {\n    for (let methodName of methods) {\n      self[methodName] = this.decorateAppAPIMethod(\n        methodName,\n        self[methodName],\n        self,\n        scrambleKey\n      );\n    }\n  }\n\n  _appAPIlock = null;\n  decorateAppAPIMethod<R, A: any[]>(\n    methodName: string,\n    f: (...args: A) => Promise<R>,\n    ctx: *,\n    scrambleKey: string\n  ): (...args: A) => Promise<R> {\n    return async (...args) => {\n      const { _appAPIlock } = this;\n      if (_appAPIlock) {\n        return Promise.reject(\n          new TransportError(\n            \"Ledger Device is busy (lock \" + _appAPIlock + \")\",\n            \"TransportLocked\"\n          )\n        );\n      }\n      try {\n        this._appAPIlock = methodName;\n        this.setScrambleKey(scrambleKey);\n        return await f.apply(ctx, args);\n      } finally {\n        this._appAPIlock = null;\n      }\n    };\n  }\n\n  static ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\n  static ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n}\n"]},"metadata":{},"sourceType":"module"}