{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TxParamsNormalizer = void 0;\nfunction isEmpty(value) {\n  return value === undefined || value === null || value === '0' || value.toLowerCase() === '0x' || value.toLowerCase() === '0x0';\n}\nvar TxParamsNormalizer = /** @class */function () {\n  function TxParamsNormalizer(connection) {\n    this.connection = connection;\n    this.chainId = null;\n    this.gatewayFeeRecipient = null;\n  }\n  TxParamsNormalizer.prototype.populate = function (celoTxParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var txParams, _a, _b, _c, _d;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            txParams = __assign({}, celoTxParams);\n            if (!(txParams.chainId == null)) return [3 /*break*/, 2];\n            _a = txParams;\n            return [4 /*yield*/, this.getChainId()];\n          case 1:\n            _a.chainId = _e.sent();\n            _e.label = 2;\n          case 2:\n            if (!(txParams.nonce == null)) return [3 /*break*/, 4];\n            _b = txParams;\n            return [4 /*yield*/, this.connection.nonce(txParams.from.toString())];\n          case 3:\n            _b.nonce = _e.sent();\n            _e.label = 4;\n          case 4:\n            if (!(!txParams.gas || isEmpty(txParams.gas.toString()))) return [3 /*break*/, 6];\n            _c = txParams;\n            return [4 /*yield*/, this.connection.estimateGas(txParams)];\n          case 5:\n            _c.gas = _e.sent();\n            _e.label = 6;\n          case 6:\n            if (!(!txParams.gasPrice || isEmpty(txParams.gasPrice.toString()))) return [3 /*break*/, 8];\n            _d = txParams;\n            return [4 /*yield*/, this.connection.gasPrice(txParams.feeCurrency)];\n          case 7:\n            _d.gasPrice = _e.sent();\n            _e.label = 8;\n          case 8:\n            return [2 /*return*/, txParams];\n        }\n      });\n    });\n  };\n  TxParamsNormalizer.prototype.getChainId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(this.chainId === null)) return [3 /*break*/, 2];\n            _a = this;\n            return [4 /*yield*/, this.connection.chainId()];\n          case 1:\n            _a.chainId = _b.sent();\n            _b.label = 2;\n          case 2:\n            return [2 /*return*/, this.chainId];\n        }\n      });\n    });\n  };\n  // Right now, Forno does not expose a node's coinbase so we can't\n  // set the gatewayFeeRecipient. Once that is fixed, we can reenable\n  // this.\n  // @ts-ignore - see comment above\n  TxParamsNormalizer.prototype.getCoinbase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(this.gatewayFeeRecipient === null)) return [3 /*break*/, 2];\n            _a = this;\n            return [4 /*yield*/, this.connection.coinbase()];\n          case 1:\n            _a.gatewayFeeRecipient = _b.sent();\n            _b.label = 2;\n          case 2:\n            if (this.gatewayFeeRecipient == null) {\n              throw new Error('missing-tx-params-populator@getCoinbase: Coinbase is null, we are not connected to a full ' + 'node, cannot sign transactions locally');\n            }\n            return [2 /*return*/, this.gatewayFeeRecipient];\n        }\n      });\n    });\n  };\n  return TxParamsNormalizer;\n}();\nexports.TxParamsNormalizer = TxParamsNormalizer;","map":null,"metadata":{},"sourceType":"script"}