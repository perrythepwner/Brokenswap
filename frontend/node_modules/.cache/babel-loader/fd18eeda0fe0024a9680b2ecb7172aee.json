{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContainerTreeViewDUClass = void 0;\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\nclass ContainerTreeViewDU extends abstract_1.TreeViewDU {\n  constructor(type, node) {\n    super();\n    this.type = type;\n    this.valueChanged = null;\n    this._rootNode = node;\n  }\n  get node() {\n    return this._rootNode;\n  }\n  get cache() {\n    return;\n  }\n  commit() {\n    if (this.valueChanged === null) {\n      return;\n    }\n    const value = this.valueChanged;\n    this.valueChanged = null;\n    this._rootNode = this.type.value_toTree(value);\n  }\n  clearCache() {\n    this.valueChanged = null;\n  }\n}\nfunction getContainerTreeViewDUClass(type) {\n  class CustomContainerTreeViewDU extends ContainerTreeViewDU {}\n  // Dynamically define prototype methods\n  for (let index = 0; index < type.fieldsEntries.length; index++) {\n    const {\n      fieldName,\n      fieldType\n    } = type.fieldsEntries[index];\n    // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n    // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n    // and use the cached views array to store the new node.\n    if (fieldType.isBasic) {\n      Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // TODO: Review the memory cost of this closures\n        get: function get() {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n          return (this.valueChanged || this._rootNode.value)[fieldName];\n        },\n        set: function set(value) {\n          if (this.valueChanged === null) {\n            this.valueChanged = this.type.clone(this._rootNode.value);\n          }\n          this.valueChanged[fieldName] = value;\n        }\n      });\n    }\n    // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n    // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n    // set it to the parent tree in the field gindex.\n    else if (composite_1.isCompositeType(fieldType)) {\n      Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // Returns TreeViewDU of fieldName\n        get: function get() {\n          const value = this.valueChanged || this._rootNode.value;\n          return fieldType.toViewDU(value[fieldName]);\n        },\n        // Expects TreeViewDU of fieldName\n        set: function set(view) {\n          if (this.valueChanged === null) {\n            this.valueChanged = this.type.clone(this._rootNode.value);\n          }\n          const value = fieldType.toValueFromViewDU(view);\n          this.valueChanged[fieldName] = value;\n        }\n      });\n    }\n    // Should never happen\n    else {\n      /* istanbul ignore next - unreachable code */\n      throw Error(\"Unknown fieldType \".concat(fieldType.typeName, \" for fieldName \").concat(fieldName));\n    }\n  }\n  // Change class name\n  Object.defineProperty(CustomContainerTreeViewDU, \"name\", {\n    value: type.typeName,\n    writable: false\n  });\n  return CustomContainerTreeViewDU;\n}\nexports.getContainerTreeViewDUClass = getContainerTreeViewDUClass;","map":null,"metadata":{},"sourceType":"script"}