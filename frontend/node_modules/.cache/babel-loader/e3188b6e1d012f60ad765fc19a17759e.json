{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nconst bytes_1 = require(\"./bytes\");\nconst constants_1 = require(\"./constants\");\nconst helpers_1 = require(\"./helpers\");\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\nfunction ecsign(msgHash, privateKey, chainId) {\n  const sig = secp256k1_1.secp256k1.sign(msgHash, privateKey);\n  const buf = sig.toCompactRawBytes();\n  const r = Buffer.from(buf.slice(0, 32));\n  const s = Buffer.from(buf.slice(32, 64));\n  const v = chainId === undefined ? BigInt(sig.recovery + 27) : BigInt(sig.recovery + 35) + BigInt(chainId) * BigInt(2);\n  return {\n    r,\n    s,\n    v\n  };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n  if (v === BigInt(0) || v === BigInt(1)) return v;\n  if (chainId === undefined) {\n    return v - BigInt(27);\n  }\n  return v - (chainId * BigInt(2) + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n  return recovery === BigInt(0) || recovery === BigInt(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nconst ecrecover = function ecrecover(msgHash, v, r, s, chainId) {\n  const signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  const sig = secp256k1_1.secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery));\n  const senderPubKey = sig.recoverPublicKey(msgHash);\n  return Buffer.from(senderPubKey.toRawBytes(false).slice(1));\n};\nexports.ecrecover = ecrecover;\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toRpcSig = function toRpcSig(v, r, s, chainId) {\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));\n};\nexports.toRpcSig = toRpcSig;\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toCompactSig = function toCompactSig(v, r, s, chainId) {\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  let ss = s;\n  if (v > BigInt(28) && v % BigInt(2) === BigInt(1) || v === BigInt(1) || v === BigInt(28)) {\n    ss = Buffer.from(s);\n    ss[0] |= 0x80;\n  }\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));\n};\nexports.toCompactSig = toCompactSig;\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nconst fromRpcSig = function fromRpcSig(sig) {\n  const buf = (0, bytes_1.toBuffer)(sig);\n  let r;\n  let s;\n  let v;\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = (0, bytes_1.bufferToBigInt)(buf.slice(64));\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = BigInt((0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7);\n    s[0] &= 0x7f;\n  } else {\n    throw new Error('Invalid signature length');\n  }\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v = v + BigInt(27);\n  }\n  return {\n    v,\n    r,\n    s\n  };\n};\nexports.fromRpcSig = fromRpcSig;\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nconst isValidSignature = function isValidSignature(v, r, s) {\n  let homesteadOrLater = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  let chainId = arguments.length > 4 ? arguments[4] : undefined;\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n  const rBigInt = (0, bytes_1.bufferToBigInt)(r);\n  const sBigInt = (0, bytes_1.bufferToBigInt)(s);\n  if (rBigInt === BigInt(0) || rBigInt >= constants_1.SECP256K1_ORDER || sBigInt === BigInt(0) || sBigInt >= constants_1.SECP256K1_ORDER) {\n    return false;\n  }\n  if (homesteadOrLater && sBigInt >= constants_1.SECP256K1_ORDER_DIV_2) {\n    return false;\n  }\n  return true;\n};\nexports.isValidSignature = isValidSignature;\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nconst hashPersonalMessage = function hashPersonalMessage(message) {\n  (0, helpers_1.assertIsBuffer)(message);\n  const prefix = Buffer.from(\"\\x19Ethereum Signed Message:\\n\".concat(message.length), 'utf-8');\n  return Buffer.from((0, keccak_1.keccak256)(Buffer.concat([prefix, message])));\n};\nexports.hashPersonalMessage = hashPersonalMessage;","map":{"version":3,"sources":["../src/signature.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nconst bytes_1 = require(\"./bytes\");\nconst constants_1 = require(\"./constants\");\nconst helpers_1 = require(\"./helpers\");\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\nfunction ecsign(msgHash, privateKey, chainId) {\n    const sig = secp256k1_1.secp256k1.sign(msgHash, privateKey);\n    const buf = sig.toCompactRawBytes();\n    const r = Buffer.from(buf.slice(0, 32));\n    const s = Buffer.from(buf.slice(32, 64));\n    const v = chainId === undefined\n        ? BigInt(sig.recovery + 27)\n        : BigInt(sig.recovery + 35) + BigInt(chainId) * BigInt(2);\n    return { r, s, v };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n    if (v === BigInt(0) || v === BigInt(1))\n        return v;\n    if (chainId === undefined) {\n        return v - BigInt(27);\n    }\n    return v - (chainId * BigInt(2) + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === BigInt(0) || recovery === BigInt(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nconst ecrecover = function (msgHash, v, r, s, chainId) {\n    const signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    const sig = secp256k1_1.secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery));\n    const senderPubKey = sig.recoverPublicKey(msgHash);\n    return Buffer.from(senderPubKey.toRawBytes(false).slice(1));\n};\nexports.ecrecover = ecrecover;\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toRpcSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));\n};\nexports.toRpcSig = toRpcSig;\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toCompactSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    let ss = s;\n    if ((v > BigInt(28) && v % BigInt(2) === BigInt(1)) || v === BigInt(1) || v === BigInt(28)) {\n        ss = Buffer.from(s);\n        ss[0] |= 0x80;\n    }\n    return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));\n};\nexports.toCompactSig = toCompactSig;\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nconst fromRpcSig = function (sig) {\n    const buf = (0, bytes_1.toBuffer)(sig);\n    let r;\n    let s;\n    let v;\n    if (buf.length >= 65) {\n        r = buf.slice(0, 32);\n        s = buf.slice(32, 64);\n        v = (0, bytes_1.bufferToBigInt)(buf.slice(64));\n    }\n    else if (buf.length === 64) {\n        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n        r = buf.slice(0, 32);\n        s = buf.slice(32, 64);\n        v = BigInt((0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7);\n        s[0] &= 0x7f;\n    }\n    else {\n        throw new Error('Invalid signature length');\n    }\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v = v + BigInt(27);\n    }\n    return {\n        v,\n        r,\n        s,\n    };\n};\nexports.fromRpcSig = fromRpcSig;\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nconst isValidSignature = function (v, r, s, homesteadOrLater = true, chainId) {\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    const rBigInt = (0, bytes_1.bufferToBigInt)(r);\n    const sBigInt = (0, bytes_1.bufferToBigInt)(s);\n    if (rBigInt === BigInt(0) ||\n        rBigInt >= constants_1.SECP256K1_ORDER ||\n        sBigInt === BigInt(0) ||\n        sBigInt >= constants_1.SECP256K1_ORDER) {\n        return false;\n    }\n    if (homesteadOrLater && sBigInt >= constants_1.SECP256K1_ORDER_DIV_2) {\n        return false;\n    }\n    return true;\n};\nexports.isValidSignature = isValidSignature;\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nconst hashPersonalMessage = function (message) {\n    (0, helpers_1.assertIsBuffer)(message);\n    const prefix = Buffer.from(`\\u0019Ethereum Signed Message:\\n${message.length}`, 'utf-8');\n    return Buffer.from((0, keccak_1.keccak256)(Buffer.concat([prefix, message])));\n};\nexports.hashPersonalMessage = hashPersonalMessage;\n//# sourceMappingURL=signature.js.map"]},"metadata":{},"sourceType":"script"}