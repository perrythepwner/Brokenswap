{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, fixObservableSubclass, getQueryDefinition } from \"../utilities/index.js\";\nimport { equalByQuery } from \"./equalByQuery.js\";\nvar assign = Object.assign,\n  hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n      queryInfo = _a.queryInfo,\n      options = _a.options;\n    var _this = _super.call(this, function (observer) {\n      try {\n        var subObserver = observer._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch (_a) {}\n      var first = !_this.observers.size;\n      _this.observers.add(observer);\n      var last = _this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n      if (first) {\n        _this.reobserve().catch(function () {});\n      }\n      return function () {\n        if (_this.observers.delete(observer) && !_this.observers.size) {\n          _this.tearDownQuery();\n        }\n      };\n    }) || this;\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.queryInfo = queryInfo;\n    _this.queryManager = queryManager;\n    _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    _this.isTornDown = false;\n    var _b = queryManager.defaultOptions.watchQuery,\n      _c = _b === void 0 ? {} : _b,\n      _d = _c.fetchPolicy,\n      defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n    var _e = options.fetchPolicy,\n      fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e,\n      _f = options.initialFetchPolicy,\n      initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n    _this.options = __assign(__assign({}, options), {\n      initialFetchPolicy: initialFetchPolicy,\n      fetchPolicy: fetchPolicy\n    });\n    _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n    var opDef = getOperationDefinition(_this.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    return _this;\n  }\n  Object.defineProperty(ObservableQuery.prototype, \"query\", {\n    get: function get() {\n      return this.lastQuery || this.options.query;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n    get: function get() {\n      return this.options.variables;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function next(result) {\n          resolve(result);\n          _this.observers.delete(observer);\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n      var subscription = _this.subscribe(observer);\n    });\n  };\n  ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n    if (saveAsLastResult === void 0) {\n      saveAsLastResult = true;\n    }\n    var lastResult = this.getLastResult(true);\n    var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || NetworkStatus.ready;\n    var result = __assign(__assign({}, lastResult), {\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    });\n    var _a = this.options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n    if (skipCacheDataFor(fetchPolicy) || this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {} else if (this.waitForOwnResult) {\n      this.queryInfo[\"updateWatch\"]();\n    } else {\n      var diff = this.queryInfo.getDiff();\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n      if (equal(result.data, {})) {\n        result.data = void 0;\n      }\n      if (diff.complete) {\n        delete result.partial;\n        if (diff.complete && result.networkStatus === NetworkStatus.loading && (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n      if (globalThis.__DEV__ !== false && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n    return result;\n  };\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n    if (!this.last) {\n      return true;\n    }\n    var resultIsDifferent = this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective ? !equalByQuery(this.query, this.last.result, newResult, this.variables) : !equal(this.last.result, newResult);\n    return resultIsDifferent || variables && !equal(this.last.variables, variables);\n  };\n  ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n    var last = this.last;\n    if (last && last[key] && (!variablesMustMatch || equal(last.variables, this.variables))) {\n      return last[key];\n    }\n  };\n  ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n    return this.getLast(\"result\", variablesMustMatch);\n  };\n  ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n    return this.getLast(\"error\", variablesMustMatch);\n  };\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.last;\n    this.isTornDown = false;\n  };\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    this.queryManager.resetErrors(this.queryId);\n  };\n  ObservableQuery.prototype.refetch = function (variables) {\n    var _a;\n    var reobserveOptions = {\n      pollInterval: 0\n    };\n    var fetchPolicy = this.options.fetchPolicy;\n    if (fetchPolicy === \"cache-and-network\") {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === \"no-cache\") {\n      reobserveOptions.fetchPolicy = \"no-cache\";\n    } else {\n      reobserveOptions.fetchPolicy = \"network-only\";\n    }\n    if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, \"variables\")) {\n      var queryDef = getQueryDefinition(this.query);\n      var vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(function (v) {\n        return v.variable.name.value === \"variables\";\n      })) {\n        globalThis.__DEV__ !== false && invariant.warn(20, variables, ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef);\n      }\n    }\n    if (variables && !equal(this.options.variables, variables)) {\n      reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n    }\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  };\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign(__assign({}, this.options), {\n      query: this.options.query\n    }), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: \"no-cache\"\n    });\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n    var qid = this.queryManager.generateQueryId();\n    this.lastQuery = fetchMoreOptions.query ? this.transformDocument(this.options.query) : combinedOptions.query;\n    var queryInfo = this.queryInfo;\n    var originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n    var updatedQuerySet = new Set();\n    return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n      _this.queryManager.removeQuery(qid);\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n      _this.queryManager.cache.batch({\n        update: function update(cache) {\n          var updateQuery = fetchMoreOptions.updateQuery;\n          if (updateQuery) {\n            cache.updateQuery({\n              query: _this.query,\n              variables: _this.variables,\n              returnPartialData: true,\n              optimistic: false\n            }, function (previous) {\n              return updateQuery(previous, {\n                fetchMoreResult: fetchMoreResult.data,\n                variables: combinedOptions.variables\n              });\n            });\n          } else {\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data\n            });\n          }\n        },\n        onWatchUpdated: function onWatchUpdated(watch) {\n          updatedQuerySet.add(watch.query);\n        }\n      });\n      return fetchMoreResult;\n    }).finally(function () {\n      if (!updatedQuerySet.has(_this.query)) {\n        reobserveCacheFirst(_this);\n      }\n    });\n  };\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables,\n      context: options.context\n    }).subscribe({\n      next: function next(subscriptionData) {\n        var updateQuery = options.updateQuery;\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function error(err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n        globalThis.__DEV__ !== false && invariant.error(21, err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n  ObservableQuery.prototype.setOptions = function (newOptions) {\n    return this.reobserve(newOptions);\n  };\n  ObservableQuery.prototype.silentSetOptions = function (newOptions) {\n    var mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n  };\n  ObservableQuery.prototype.setVariables = function (variables) {\n    if (equal(this.variables, variables)) {\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n    this.options.variables = variables;\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n    return this.reobserve({\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables: variables\n    }, NetworkStatus.setVariables);\n  };\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n    var result = queryManager.cache.diff({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n    var newResult = mapFn(result, {\n      variables: this.variables\n    });\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  };\n  ObservableQuery.prototype.stopPolling = function () {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  };\n  ObservableQuery.prototype.applyNextFetchPolicy = function (reason, options) {\n    if (options.nextFetchPolicy) {\n      var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n        _b = options.initialFetchPolicy,\n        initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n      if (fetchPolicy === \"standby\") {} else if (typeof options.nextFetchPolicy === \"function\") {\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason: reason,\n          options: options,\n          observable: this,\n          initialFetchPolicy: initialFetchPolicy\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n    return options.fetchPolicy;\n  };\n  ObservableQuery.prototype.fetch = function (options, newNetworkStatus, query) {\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager[\"fetchConcastWithInfo\"](this.queryId, options, newNetworkStatus, query);\n  };\n  ObservableQuery.prototype.updatePolling = function () {\n    var _this = this;\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n    var _a = this,\n      pollingInfo = _a.pollingInfo,\n      pollInterval = _a.options.pollInterval;\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n    invariant(pollInterval, 22);\n    var info = pollingInfo || (this.pollingInfo = {});\n    info.interval = pollInterval;\n    var maybeFetch = function maybeFetch() {\n      if (_this.pollingInfo) {\n        if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus)) {\n          _this.reobserve({\n            fetchPolicy: _this.options.initialFetchPolicy === \"no-cache\" ? \"no-cache\" : \"network-only\"\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n    };\n    var poll = function poll() {\n      var info = _this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n    poll();\n  };\n  ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    var error = this.getLastError();\n    if (error && this.last && !equal(variables, this.last.variables)) {\n      error = void 0;\n    }\n    return this.last = __assign({\n      result: this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult),\n      variables: variables\n    }, error ? {\n      error: error\n    } : null);\n  };\n  ObservableQuery.prototype.reobserveAsConcast = function (newOptions, newNetworkStatus) {\n    var _this = this;\n    this.isTornDown = false;\n    var useDisposableConcast = newNetworkStatus === NetworkStatus.refetch || newNetworkStatus === NetworkStatus.fetchMore || newNetworkStatus === NetworkStatus.poll;\n    var oldVariables = this.options.variables;\n    var oldFetchPolicy = this.options.fetchPolicy;\n    var mergedOptions = compact(this.options, newOptions || {});\n    var options = useDisposableConcast ? mergedOptions : assign(this.options, mergedOptions);\n    var query = this.transformDocument(options.query);\n    this.lastQuery = query;\n    if (!useDisposableConcast) {\n      this.updatePolling();\n      if (newOptions && newOptions.variables && !equal(newOptions.variables, oldVariables) && options.fetchPolicy !== \"standby\" && options.fetchPolicy === oldFetchPolicy) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n    this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n    var finishWaitingForOwnResult = function finishWaitingForOwnResult() {\n      if (_this.concast === concast) {\n        _this.waitForOwnResult = false;\n      }\n    };\n    var variables = options.variables && __assign({}, options.variables);\n    var _a = this.fetch(options, newNetworkStatus, query),\n      concast = _a.concast,\n      fromLink = _a.fromLink;\n    var observer = {\n      next: function next(result) {\n        finishWaitingForOwnResult();\n        _this.reportResult(result, variables);\n      },\n      error: function error(_error) {\n        finishWaitingForOwnResult();\n        _this.reportError(_error, variables);\n      }\n    };\n    if (!useDisposableConcast && (fromLink || !this.concast)) {\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n      this.concast = concast;\n      this.observer = observer;\n    }\n    concast.addObserver(observer);\n    return concast;\n  };\n  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n  };\n  ObservableQuery.prototype.resubscribeAfterError = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var last = this.last;\n    this.resetLastResults();\n    var subscription = this.subscribe.apply(this, args);\n    this.last = last;\n    return subscription;\n  };\n  ObservableQuery.prototype.observe = function () {\n    this.reportResult(this.getCurrentResult(false), this.variables);\n  };\n  ObservableQuery.prototype.reportResult = function (result, variables) {\n    var lastError = this.getLastError();\n    var isDifferent = this.isDifferentFromLastResult(result, variables);\n    if (lastError || !result.partial || this.options.returnPartialData) {\n      this.updateLastResult(result, variables);\n    }\n    if (lastError || isDifferent) {\n      iterateObserversSafely(this.observers, \"next\", result);\n    }\n  };\n  ObservableQuery.prototype.reportError = function (error, variables) {\n    var errorResult = __assign(__assign({}, this.getLastResult()), {\n      error: error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false\n    });\n    this.updateLastResult(errorResult, variables);\n    iterateObserversSafely(this.observers, \"error\", this.last.error = error);\n  };\n  ObservableQuery.prototype.hasObservers = function () {\n    return this.observers.size > 0;\n  };\n  ObservableQuery.prototype.tearDownQuery = function () {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n    this.stopPolling();\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  };\n  ObservableQuery.prototype.transformDocument = function (document) {\n    return this.queryManager.transform(document);\n  };\n  return ObservableQuery;\n}(Observable);\nexport { ObservableQuery };\nfixObservableSubclass(ObservableQuery);\nexport function reobserveCacheFirst(obsQuery) {\n  var _a = obsQuery.options,\n    fetchPolicy = _a.fetchPolicy,\n    _nextFetchPolicy = _a.nextFetchPolicy;\n  if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      nextFetchPolicy: function nextFetchPolicy() {\n        this.nextFetchPolicy = _nextFetchPolicy;\n        if (typeof _nextFetchPolicy === \"function\") {\n          return _nextFetchPolicy.apply(this, arguments);\n        }\n        return fetchPolicy;\n      }\n    });\n  }\n  return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  globalThis.__DEV__ !== false && invariant.error(23, error.message, error.stack);\n}\nexport function logMissingFieldErrors(missing) {\n  if (globalThis.__DEV__ !== false && missing) {\n    globalThis.__DEV__ !== false && invariant.debug(24, missing);\n  }\n}\nfunction skipCacheDataFor(fetchPolicy) {\n  return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n}","map":{"version":3,"sources":["../../src/core/ObservableQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from \"../utilities/globals/index.js\";\nimport type { DocumentNode } from \"graphql\";\nimport { equal } from \"@wry/equality\";\n\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport type {\n  Concast,\n  Observer,\n  ObservableSubscription,\n} from \"../utilities/index.js\";\nimport {\n  cloneDeep,\n  compact,\n  getOperationDefinition,\n  Observable,\n  iterateObserversSafely,\n  fixObservableSubclass,\n  getQueryDefinition,\n} from \"../utilities/index.js\";\nimport type { ApolloError } from \"../errors/index.js\";\nimport type { QueryManager } from \"./QueryManager.js\";\nimport type {\n  ApolloQueryResult,\n  OperationVariables,\n  TypedDocumentNode,\n} from \"./types.js\";\nimport type {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  NextFetchPolicyContext,\n  WatchQueryFetchPolicy,\n} from \"./watchQueryOptions.js\";\nimport type { QueryInfo } from \"./QueryInfo.js\";\nimport type { MissingFieldError } from \"../cache/index.js\";\nimport type { MissingTree } from \"../cache/core/types/common.js\";\nimport { equalByQuery } from \"./equalByQuery.js\";\n\nconst { assign, hasOwnProperty } = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables,\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    }\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n> extends Observable<ApolloQueryResult<TData>> {\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  // The `query` computed property will always reflect the document transformed\n  // by the last run query. `this.options.query` will always reflect the raw\n  // untransformed query to ensure document transforms with runtime conditionals\n  // are run on the original document.\n  public get query(): TypedDocumentNode<TData, TVariables> {\n    return this.lastQuery || this.options.query;\n  }\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private waitForOwnResult: boolean;\n  private last?: Last<TData, TVariables>;\n  private lastQuery?: DocumentNode;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) => {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    // related classes\n    this.queryInfo = queryInfo;\n    this.queryManager = queryManager;\n\n    // active state\n    this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    this.isTornDown = false;\n\n    const {\n      watchQuery: { fetchPolicy: defaultFetchPolicy = \"cache-first\" } = {},\n    } = queryManager.defaultOptions;\n\n    const {\n      fetchPolicy = defaultFetchPolicy,\n      // Make sure we don't store \"standby\" as the initialFetchPolicy.\n      initialFetchPolicy = fetchPolicy === \"standby\"\n        ? defaultFetchPolicy\n        : fetchPolicy,\n    } = options;\n\n    this.options = {\n      ...options,\n\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy,\n\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy,\n    };\n\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(this.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesn’t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  public getCurrentResult(saveAsLastResult = true): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = this.getLastResult(true);\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      skipCacheDataFor(fetchPolicy) ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.getDocumentInfo(this.query).hasForcedResolvers\n    ) {\n      // Fall through.\n    } else if (this.waitForOwnResult) {\n      // This would usually be a part of `QueryInfo.getDiff()`.\n      // which we skip in the waitForOwnResult case since we are not\n      // interested in the diff.\n      this.queryInfo[\"updateWatch\"]();\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables?: TVariables\n  ) {\n    if (!this.last) {\n      return true;\n    }\n\n    const resultIsDifferent = this.queryManager.getDocumentInfo(this.query)\n      .hasNonreactiveDirective\n      ? !equalByQuery(this.query, this.last.result, newResult, this.variables)\n      : !equal(this.last.result, newResult);\n\n    return (\n      resultIsDifferent || (variables && !equal(this.last.variables, variables))\n    );\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  public getLastResult(\n    variablesMustMatch?: boolean\n  ): ApolloQueryResult<TData> | undefined {\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  public resetLastResults(): void {\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(\n    variables?: Partial<TVariables>\n  ): Promise<ApolloQueryResult<TData>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === \"cache-and-network\") {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === \"no-cache\") {\n      reobserveOptions.fetchPolicy = \"no-cache\";\n    } else {\n      reobserveOptions.fetchPolicy = \"network-only\";\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some((v) => v.variable.name.value === \"variables\")) {\n        invariant.warn(\n          `Called refetch(%o) for query %o, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`,\n          variables,\n          queryDef.name?.value || queryDef\n        );\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars extends OperationVariables = TVariables,\n  >(\n    fetchMoreOptions: FetchMoreQueryOptions<TFetchVars, TFetchData> & {\n      updateQuery?: (\n        previousQueryResult: TData,\n        options: {\n          fetchMoreResult: TFetchData;\n          variables: TFetchVars;\n        }\n      ) => TData;\n    }\n  ): Promise<ApolloQueryResult<TFetchData>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query\n        ? fetchMoreOptions\n        : {\n            ...this.options,\n            query: this.options.query,\n            ...fetchMoreOptions,\n            variables: {\n              ...this.options.variables,\n              ...fetchMoreOptions.variables,\n            },\n          }),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions<TFetchVars, TFetchData>;\n\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n\n    const qid = this.queryManager.generateQueryId();\n\n    // If a temporary query is passed to `fetchMore`, we don't want to store\n    // it as the last query result since it may be an optimized query for\n    // pagination. We will however run the transforms on the original document\n    // as well as the document passed in `fetchMoreOptions` to ensure the cache\n    // uses the most up-to-date document which may rely on runtime conditionals.\n    this.lastQuery = fetchMoreOptions.query\n      ? this.transformDocument(this.options.query)\n      : combinedOptions.query;\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    const { queryInfo } = this;\n    const originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    const updatedQuerySet = new Set<DocumentNode>();\n\n    return this.queryManager\n      .fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore)\n      .then((fetchMoreResult) => {\n        this.queryManager.removeQuery(qid);\n\n        if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n          queryInfo.networkStatus = originalNetworkStatus;\n        }\n\n        // Performing this cache update inside a cache.batch transaction ensures\n        // any affected cache.watch watchers are notified at most once about any\n        // updates. Most watchers will be using the QueryInfo class, which\n        // responds to notifications by calling reobserveCacheFirst to deliver\n        // fetchMore cache results back to this ObservableQuery.\n        this.queryManager.cache.batch({\n          update: (cache) => {\n            const { updateQuery } = fetchMoreOptions;\n            if (updateQuery) {\n              cache.updateQuery(\n                {\n                  query: this.query,\n                  variables: this.variables,\n                  returnPartialData: true,\n                  optimistic: false,\n                },\n                (previous) =>\n                  updateQuery(previous!, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables as TFetchVars,\n                  })\n              );\n            } else {\n              // If we're using a field policy instead of updateQuery, the only\n              // thing we need to do is write the new data to the cache using\n              // combinedOptions.variables (instead of this.variables, which is\n              // what this.updateQuery uses, because it works by abusing the\n              // original field value, keyed by the original variables).\n              cache.writeQuery({\n                query: combinedOptions.query,\n                variables: combinedOptions.variables,\n                data: fetchMoreResult.data,\n              });\n            }\n          },\n\n          onWatchUpdated: (watch) => {\n            // Record the DocumentNode associated with any watched query whose\n            // data were updated by the cache writes above.\n            updatedQuerySet.add(watch.query);\n          },\n        });\n\n        return fetchMoreResult;\n      })\n      .finally(() => {\n        // In case the cache writes above did not generate a broadcast\n        // notification (which would have been intercepted by onWatchUpdated),\n        // likely because the written data were the same as what was already in\n        // the cache, we still want fetchMore to deliver its final loading:false\n        // result with the unchanged data.\n        if (!updatedQuerySet.has(this.query)) {\n          reobserveCacheFirst(this);\n        }\n      });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables extends OperationVariables = TVariables,\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                })\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error(\"Unhandled GraphQL subscription error\", err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.reobserve(newOptions);\n  }\n\n  public silentSetOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>\n  ) {\n    const mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. Most users should prefer `refetch` instead of\n   * `setVariables` in order to to be properly notified of results even when\n   * they come from the cache.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables\n  ): Promise<ApolloQueryResult<TData> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve(\n      {\n        // Reset options.fetchPolicy to its original value.\n        fetchPolicy: this.options.initialFetchPolicy,\n        variables,\n      },\n      NetworkStatus.setVariables\n    );\n  }\n\n  public updateQuery<TVars extends OperationVariables = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: Pick<WatchQueryOptions<TVars, TData>, \"variables\">\n    ) => TData\n  ): void {\n    const { queryManager } = this;\n    const { result } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(result!, {\n      variables: (this as any).variables,\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  private applyNextFetchPolicy(\n    reason: NextFetchPolicyContext<TData, TVariables>[\"reason\"],\n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options: WatchQueryOptions<TVariables, TData>\n  ) {\n    if (options.nextFetchPolicy) {\n      const { fetchPolicy = \"cache-first\", initialFetchPolicy = fetchPolicy } =\n        options;\n\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason,\n          options,\n          observable: this,\n          initialFetchPolicy,\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n    query?: DocumentNode\n  ) {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager[\"fetchConcastWithInfo\"](\n      this.queryId,\n      options,\n      newNetworkStatus,\n      query\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: { pollInterval },\n    } = this;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      \"Attempted to start a polling query without a polling interval.\"\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (!isNetworkRequestInFlight(this.queryInfo.networkStatus)) {\n          this.reobserve(\n            {\n              // Most fetchPolicy options don't make sense to use in a polling context, as\n              // users wouldn't want to be polling the cache directly. However, network-only and\n              // no-cache are both useful for when the user wants to control whether or not the\n              // polled results are written to the cache.\n              fetchPolicy:\n                this.options.initialFetchPolicy === \"no-cache\"\n                  ? \"no-cache\"\n                  : \"network-only\",\n            },\n            NetworkStatus.poll\n          ).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables\n  ) {\n    let error: ApolloError | undefined = this.getLastError();\n    // Preserve this.last.error unless the variables have changed.\n    if (error && this.last && !equal(variables, this.last.variables)) {\n      error = void 0;\n    }\n    return (this.last = {\n      result: this.queryManager.assumeImmutableResults\n        ? newResult\n        : cloneDeep(newResult),\n      variables,\n      ...(error ? { error } : null),\n    });\n  }\n\n  public reobserveAsConcast(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus\n  ): Concast<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n    const oldFetchPolicy = this.options.fetchPolicy;\n\n    const mergedOptions = compact(this.options, newOptions || {});\n    const options = useDisposableConcast\n      ? // Disposable Concast fetches receive a shallow copy of this.options\n        // (merged with newOptions), leaving this.options unmodified.\n        mergedOptions\n      : assign(this.options, mergedOptions);\n\n    // Don't update options.query with the transformed query to avoid\n    // overwriting this.options.query when we aren't using a disposable concast.\n    // We want to ensure we can re-run the custom document transforms the next\n    // time a request is made against the original query.\n    const query = this.transformDocument(options.query);\n\n    this.lastQuery = query;\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !equal(newOptions.variables, oldVariables) &&\n        // Don't mess with the fetchPolicy if it's currently \"standby\".\n        options.fetchPolicy !== \"standby\" &&\n        // If we're changing the fetchPolicy anyway, don't try to change it here\n        // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n        options.fetchPolicy === oldFetchPolicy\n      ) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    this.waitForOwnResult &&= skipCacheDataFor(options.fetchPolicy);\n    const finishWaitingForOwnResult = () => {\n      if (this.concast === concast) {\n        this.waitForOwnResult = false;\n      }\n    };\n\n    const variables = options.variables && { ...options.variables };\n    const { concast, fromLink } = this.fetch(options, newNetworkStatus, query);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: (result) => {\n        finishWaitingForOwnResult();\n        this.reportResult(result, variables);\n      },\n      error: (error) => {\n        finishWaitingForOwnResult();\n        this.reportError(error, variables);\n      },\n    };\n\n    if (!useDisposableConcast && (fromLink || !this.concast)) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus\n  ) {\n    return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n  }\n\n  public resubscribeAfterError(\n    onNext: (value: ApolloQueryResult<TData>) => void,\n    onError?: (error: any) => void,\n    onComplete?: () => void\n  ): ObservableSubscription;\n\n  public resubscribeAfterError(\n    observer: Observer<ApolloQueryResult<TData>>\n  ): ObservableSubscription;\n\n  public resubscribeAfterError(...args: [any, any?, any?]) {\n    // If `lastError` is set in the current when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore the last value afterwards so that the\n    // subscription has a chance to stay open.\n    const last = this.last;\n    this.resetLastResults();\n\n    const subscription = this.subscribe(...args);\n    this.last = last;\n\n    return subscription;\n  }\n\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  private observe() {\n    this.reportResult(\n      // Passing false is important so that this.getCurrentResult doesn't\n      // save the fetchMore result as this.lastResult, causing it to be\n      // ignored due to the this.isDifferentFromLastResult check in\n      // this.reportResult.\n      this.getCurrentResult(false),\n      this.variables\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined\n  ) {\n    const lastError = this.getLastError();\n    const isDifferent = this.isDifferentFromLastResult(result, variables);\n    // Update the last result even when isDifferentFromLastResult returns false,\n    // because the query may be using the @nonreactive directive, and we want to\n    // save the the latest version of any nonreactive subtrees (in case\n    // getCurrentResult is called), even though we skip broadcasting changes.\n    if (lastError || !result.partial || this.options.returnPartialData) {\n      this.updateLastResult(result, variables);\n    }\n    if (lastError || isDifferent) {\n      iterateObserversSafely(this.observers, \"next\", result);\n    }\n  }\n\n  private reportError(error: ApolloError, variables: TVariables | undefined) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...this.getLastResult(),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, \"error\", (this.last!.error = error));\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach((sub) => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n\n  private transformDocument(document: DocumentNode) {\n    return this.queryManager.transform(document);\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst<TData, TVars extends OperationVariables>(\n  obsQuery: ObservableQuery<TData, TVars>\n) {\n  const { fetchPolicy, nextFetchPolicy } = obsQuery.options;\n\n  if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      // Use a temporary nextFetchPolicy function that replaces itself with the\n      // previous nextFetchPolicy value and returns the original fetchPolicy.\n      nextFetchPolicy(this: WatchQueryOptions<TVars, TData>) {\n        // Replace this nextFetchPolicy function in the options object with the\n        // original this.options.nextFetchPolicy value.\n        this.nextFetchPolicy = nextFetchPolicy;\n        // If the original nextFetchPolicy value was a function, give it a\n        // chance to decide what happens here.\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n        // Otherwise go back to the original this.options.fetchPolicy.\n        return fetchPolicy!;\n      },\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error(\"Unhandled error\", error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: %o`, missing);\n  }\n}\n\nfunction skipCacheDataFor(\n  fetchPolicy?: WatchQueryFetchPolicy /* `undefined` would mean `\"cache-first\"` */\n) {\n  return (\n    fetchPolicy === \"network-only\" ||\n    fetchPolicy === \"no-cache\" ||\n    fetchPolicy === \"standby\"\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}