{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getInitialNetwork = void 0;\nconst logger_1 = require(\"./logger\");\n// will look for a network searching first in local storage, then based on what was given.\nfunction getInitialNetwork(networks, defaultNetwork, passedNetwork, storedNetwork) {\n  if (process.env.NODE_ENV !== 'production' && passedNetwork) {\n    (0, logger_1.getApplicationLogger)().warn('The `network` prop on CeloProvider has been deprecated, use `defaultNetwork`');\n  }\n  const network = networks.find(net => {\n    if (storedNetwork) {\n      net.name === storedNetwork;\n    }\n    // TODO:#246 remove when network prop is removed\n    if (passedNetwork) {\n      return net.name === passedNetwork.name;\n    } else {\n      return net.name === defaultNetwork;\n    }\n  });\n  if (!network) {\n    const name = defaultNetwork || (passedNetwork === null || passedNetwork === void 0 ? void 0 : passedNetwork.name) || 'unknown';\n    throw new Error(\"[react-celo] Could not find 'defaultNetwork' (\".concat(name, \") in 'networks'. 'defaultNetwork' must equal 'network.name' on one of the 'networks' passed to CeloProvider.\"));\n  }\n  // ensure for now that we return the original\n  if (network.name === (passedNetwork === null || passedNetwork === void 0 ? void 0 : passedNetwork.name)) {\n    return passedNetwork;\n  }\n  return network;\n}\nexports.getInitialNetwork = getInitialNetwork;","map":null,"metadata":{},"sourceType":"script"}