{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useCelo } from '@celo/react-celo';\nimport { JSBI, Percent, TokenAmount } from '@ubeswap/sdk';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { usePair } from '../../data/Reserves';\nimport { useTotalSupply } from '../../data/TotalSupply';\nimport { tryParseAmount } from '../swap/hooks';\nimport { useTokenBalances } from '../wallet/hooks';\nimport { Field, typeInput } from './actions';\nexport function useBurnState() {\n  _s();\n  return useSelector(state => state.burn);\n}\n_s(useBurnState, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\nexport function useDerivedBurnInfo(currencyA, currencyB) {\n  _s2();\n  var _pair$liquidityToken$, _pair$liquidityToken;\n  const {\n    address: account\n  } = useCelo();\n  const {\n    independentField,\n    typedValue\n  } = useBurnState();\n\n  // pair + totalsupply\n  const [, pair] = usePair(currencyA, currencyB);\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account !== null && account !== void 0 ? account : undefined, [pair === null || pair === void 0 ? void 0 : pair.liquidityToken]);\n  const userLiquidity = relevantTokenBalances === null || relevantTokenBalances === void 0 ? void 0 : relevantTokenBalances[(_pair$liquidityToken$ = pair === null || pair === void 0 ? void 0 : (_pair$liquidityToken = pair.liquidityToken) === null || _pair$liquidityToken === void 0 ? void 0 : _pair$liquidityToken.address) !== null && _pair$liquidityToken$ !== void 0 ? _pair$liquidityToken$ : ''];\n  const [tokenA, tokenB] = [currencyA, currencyB];\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair === null || pair === void 0 ? void 0 : pair.liquidityToken\n  };\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair === null || pair === void 0 ? void 0 : pair.liquidityToken);\n  const liquidityValueA = pair && totalSupply && userLiquidity && tokenA &&\n  // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw) ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw) : undefined;\n  const liquidityValueB = pair && totalSupply && userLiquidity && tokenB &&\n  // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw) ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw) : undefined;\n  const liquidityValues = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB\n  };\n  let percentToRemove = new Percent('0', '100');\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100');\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair !== null && pair !== void 0 && pair.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken);\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw);\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else {\n    if (tokens[independentField]) {\n      const independentAmount = tryParseAmount(typedValue, tokens[independentField]);\n      const liquidityValue = liquidityValues[independentField];\n      if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n        percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw);\n      }\n    }\n  }\n  const parsedAmounts = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]: userLiquidity && percentToRemove && percentToRemove.greaterThan('0') ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient) : undefined,\n    [Field.CURRENCY_A]: tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient) : undefined,\n    [Field.CURRENCY_B]: tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient) : undefined\n  };\n  let error;\n  if (!account) {\n    error = 'Connect Wallet';\n  }\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    var _error;\n    error = (_error = error) !== null && _error !== void 0 ? _error : 'Enter an amount';\n  }\n  return {\n    pair,\n    parsedAmounts,\n    error\n  };\n}\n_s2(useDerivedBurnInfo, \"13otdrM2I//Rx741FWs1lRAaGiw=\", false, function () {\n  return [useCelo, useBurnState, usePair, useTokenBalances, useTotalSupply];\n});\nexport function useBurnActionHandlers() {\n  _s3();\n  const dispatch = useDispatch();\n  const onUserInput = useCallback((field, typedValue) => {\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  return {\n    onUserInput\n  };\n}\n_s3(useBurnActionHandlers, \"lEPT7YuAO+/A5u9H2YSu9Ik8G/0=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"names":["useCelo","JSBI","Percent","TokenAmount","useCallback","useDispatch","useSelector","usePair","useTotalSupply","tryParseAmount","useTokenBalances","Field","typeInput","useBurnState","_s","state","burn","useDerivedBurnInfo","currencyA","currencyB","_s2","_pair$liquidityToken$","_pair$liquidityToken","address","account","independentField","typedValue","pair","relevantTokenBalances","undefined","liquidityToken","userLiquidity","tokenA","tokenB","tokens","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","liquidityValueA","greaterThanOrEqual","raw","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","LIQUIDITY_PERCENT","independentAmount","greaterThan","liquidityValue","parsedAmounts","token","multiply","quotient","error","_error","useBurnActionHandlers","_s3","dispatch","onUserInput","field"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/state/burn/hooks.ts"],"sourcesContent":["import { useCelo } from '@celo/react-celo'\nimport { JSBI, Pair, Percent, Token, TokenAmount } from '@ubeswap/sdk'\nimport { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { usePair } from '../../data/Reserves'\nimport { useTotalSupply } from '../../data/TotalSupply'\nimport { AppDispatch, AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useTokenBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nexport function useBurnState(): AppState['burn'] {\n  return useSelector<AppState, AppState['burn']>((state) => state.burn)\n}\n\nexport function useDerivedBurnInfo(\n  currencyA: Token | undefined,\n  currencyB: Token | undefined\n): {\n  pair?: Pair | null\n  parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: TokenAmount\n    [Field.CURRENCY_A]?: TokenAmount\n    [Field.CURRENCY_B]?: TokenAmount\n  }\n  error?: string\n} {\n  const { address: account } = useCelo()\n\n  const { independentField, typedValue } = useBurnState()\n\n  // pair + totalsupply\n  const [, pair] = usePair(currencyA, currencyB)\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\n  const userLiquidity: undefined | TokenAmount = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\n\n  const [tokenA, tokenB] = [currencyA as Token, currencyB as Token]\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair?.liquidityToken,\n  }\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n  const liquidityValueA =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenA &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw)\n      : undefined\n  const liquidityValueB =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenB &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw)\n      : undefined\n  const liquidityValues: { [Field.CURRENCY_A]?: TokenAmount; [Field.CURRENCY_B]?: TokenAmount } = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB,\n  }\n\n  let percentToRemove: Percent = new Percent('0', '100')\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100')\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair?.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw)\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else {\n    if (tokens[independentField]) {\n      const independentAmount = tryParseAmount(typedValue, tokens[independentField])\n      const liquidityValue = liquidityValues[independentField]\n      if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n        percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw)\n      }\n    }\n  }\n\n  const parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: TokenAmount\n    [Field.CURRENCY_A]?: TokenAmount\n    [Field.CURRENCY_B]?: TokenAmount\n  } = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]:\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\n        ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient)\n        : undefined,\n    [Field.CURRENCY_A]:\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\n        ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient)\n        : undefined,\n    [Field.CURRENCY_B]:\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\n        ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient)\n        : undefined,\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = 'Connect Wallet'\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? 'Enter an amount'\n  }\n\n  return { pair, parsedAmounts, error }\n}\n\nexport function useBurnActionHandlers(): {\n  onUserInput: (field: Field, typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onUserInput,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}