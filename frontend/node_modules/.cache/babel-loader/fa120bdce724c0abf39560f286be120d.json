{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AttestationServiceStatusState = exports.AttestationsWrapper = exports.AttestationState = exports.getSecurityCodePrefix = void 0;\nvar base_1 = require(\"@celo/base\");\nvar address_1 = require(\"@celo/base/lib/address\");\nvar async_1 = require(\"@celo/base/lib/async\");\nvar collections_1 = require(\"@celo/base/lib/collections\");\nvar parsing_1 = require(\"@celo/base/lib/parsing\");\nvar string_1 = require(\"@celo/base/lib/string\");\nvar connect_1 = require(\"@celo/connect\");\nvar lib_1 = require(\"@celo/utils/lib\");\nvar typed_data_constructors_1 = require(\"@celo/utils/lib/typed-data-constructors\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar cross_fetch_1 = __importDefault(require(\"cross-fetch\"));\nvar identity_1 = require(\"../identity\");\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\nfunction hashAddressToSingleDigit(address) {\n  return new bignumber_js_1.default(address.toLowerCase()).modulo(10).toNumber();\n}\nfunction getSecurityCodePrefix(issuerAddress) {\n  return \"\".concat(hashAddressToSingleDigit(issuerAddress));\n}\nexports.getSecurityCodePrefix = getSecurityCodePrefix;\n/**\n * Contract for managing identities\n */\nvar AttestationState;\n(function (AttestationState) {\n  AttestationState[AttestationState[\"None\"] = 0] = \"None\";\n  AttestationState[AttestationState[\"Incomplete\"] = 1] = \"Incomplete\";\n  AttestationState[AttestationState[\"Complete\"] = 2] = \"Complete\";\n})(AttestationState = exports.AttestationState || (exports.AttestationState = {}));\nfunction parseGetCompletableAttestations(response) {\n  var metadataURLs = (0, parsing_1.parseSolidityStringArray)(response[2].map(BaseWrapper_1.valueToInt), response[3]);\n  return (0, collections_1.zip3)(response[0].map(BaseWrapper_1.valueToInt), response[1], metadataURLs).map(function (_a) {\n    var blockNumber = _a[0],\n      issuer = _a[1],\n      metadataURL = _a[2];\n    return {\n      blockNumber: blockNumber,\n      issuer: issuer,\n      metadataURL: metadataURL\n    };\n  });\n}\nvar AttestationsWrapper = /** @class */function (_super) {\n  __extends(AttestationsWrapper, _super);\n  function AttestationsWrapper(connection, contract, contracts) {\n    var _this = _super.call(this, connection, contract) || this;\n    _this.connection = connection;\n    _this.contract = contract;\n    _this.contracts = contracts;\n    /**\n     *  Returns the time an attestation can be completable before it is considered expired\n     */\n    _this.attestationExpiryBlocks = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.attestationExpiryBlocks, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * Returns the attestation request fee in a given currency.\n     * @param address Token address.\n     * @returns The fee as big number.\n     */\n    _this.attestationRequestFees = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.attestationRequestFees, undefined, BaseWrapper_1.valueToBigNumber);\n    _this.selectIssuersWaitBlocks = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.selectIssuersWaitBlocks, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * @notice Returns the unselected attestation request for an identifier/account pair, if any.\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    _this.getUnselectedRequest = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getUnselectedRequest, undefined, function (res) {\n      return {\n        blockNumber: (0, BaseWrapper_1.valueToInt)(res[0]),\n        attestationsRequested: (0, BaseWrapper_1.valueToInt)(res[1]),\n        attestationRequestFeeToken: res[2]\n      };\n    });\n    /**\n     * @notice Checks if attestation request is expired.\n     * @param attestationRequestBlockNumber Attestation Request Block Number to be checked\n     */\n    _this.isAttestationExpired = function (attestationRequestBlockNumber) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var attestationExpiryBlocks, blockNumber;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.attestationExpiryBlocks()];\n            case 1:\n              attestationExpiryBlocks = _a.sent();\n              return [4 /*yield*/, this.connection.getBlockNumber()];\n            case 2:\n              blockNumber = _a.sent();\n              return [2 /*return*/, blockNumber >= attestationRequestBlockNumber + attestationExpiryBlocks];\n          }\n        });\n      });\n    };\n    /**\n     * @notice Waits for appropriate block numbers for before issuer can be selected\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    _this.waitForSelectingIssuers = function (identifier, account, timeoutSeconds, pollDurationSeconds) {\n      if (timeoutSeconds === void 0) {\n        timeoutSeconds = 120;\n      }\n      if (pollDurationSeconds === void 0) {\n        pollDurationSeconds = 1;\n      }\n      return __awaiter(_this, void 0, void 0, function () {\n        var startTime, unselectedRequest, waitBlocks, blockNumber;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              startTime = Date.now();\n              return [4 /*yield*/, this.getUnselectedRequest(identifier, account)];\n            case 1:\n              unselectedRequest = _a.sent();\n              return [4 /*yield*/, this.selectIssuersWaitBlocks()];\n            case 2:\n              waitBlocks = _a.sent();\n              if (unselectedRequest.blockNumber === 0) {\n                throw new Error('No unselectedRequest to wait for');\n              }\n              _a.label = 3;\n            case 3:\n              if (!(Date.now() - startTime < timeoutSeconds * 1000)) return [3 /*break*/, 6];\n              return [4 /*yield*/, this.connection.getBlockNumber()];\n            case 4:\n              blockNumber = _a.sent();\n              if (blockNumber >= unselectedRequest.blockNumber + waitBlocks) {\n                return [2 /*return*/];\n              }\n\n              return [4 /*yield*/, (0, async_1.sleep)(pollDurationSeconds * 1000)];\n            case 5:\n              _a.sent();\n              return [3 /*break*/, 3];\n            case 6:\n              throw new Error('Timeout while waiting for selecting issuers');\n          }\n        });\n      });\n    };\n    /**\n     * Returns the issuers of attestations for a phoneNumber/account combo\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    _this.getAttestationIssuers = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationIssuers);\n    /**\n     * Returns the attestation state of a phone number/account/issuer tuple\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    _this.getAttestationState = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationState, undefined, function (state) {\n      return {\n        attestationState: (0, BaseWrapper_1.valueToInt)(state[0])\n      };\n    });\n    /**\n     * Returns the attestation stats of a identifer/account pair\n     * @param identifier Attestation identifier (e.g. phone hash)\n     * @param account Address of the account\n     */\n    _this.getAttestationStat = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationStats, undefined, function (stat) {\n      return {\n        completed: (0, BaseWrapper_1.valueToInt)(stat[0]),\n        total: (0, BaseWrapper_1.valueToInt)(stat[1])\n      };\n    });\n    _this.makeIsIssuerRunningAttestationService = function (tries) {\n      if (tries === void 0) {\n        tries = 3;\n      }\n      return function (arg) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var metadata, _a, _b, attestationServiceURLClaim, nameClaim, resp, _c, status_1, version, error_1;\n          return __generator(this, function (_d) {\n            switch (_d.label) {\n              case 0:\n                _d.trys.push([0, 5,, 6]);\n                _b = (_a = identity_1.IdentityMetadataWrapper).fetchFromURL;\n                return [4 /*yield*/, this.contracts.getAccounts()];\n              case 1:\n                return [4 /*yield*/, _b.apply(_a, [_d.sent(), arg.metadataURL, tries])];\n              case 2:\n                metadata = _d.sent();\n                attestationServiceURLClaim = metadata.findClaim(identity_1.ClaimTypes.ATTESTATION_SERVICE_URL);\n                if (attestationServiceURLClaim === undefined) {\n                  throw new Error(\"No attestation service URL registered for \".concat(arg.issuer));\n                }\n                nameClaim = metadata.findClaim(identity_1.ClaimTypes.NAME);\n                return [4 /*yield*/, (0, cross_fetch_1.default)(\"\".concat(attestationServiceURLClaim.url).concat(attestationServiceURLClaim.url.substr(-1) === '/' ? '' : '/', \"status\"))];\n              case 3:\n                resp = _d.sent();\n                if (!resp.ok) {\n                  throw new Error(\"Request failed with status \".concat(resp.status));\n                }\n                return [4 /*yield*/, resp.json()];\n              case 4:\n                _c = _d.sent(), status_1 = _c.status, version = _c.version;\n                if (status_1 !== 'ok') {\n                  return [2 /*return*/, {\n                    isValid: false,\n                    issuer: arg.issuer\n                  }];\n                }\n                return [2 /*return*/, {\n                  isValid: true,\n                  result: {\n                    blockNumber: arg.blockNumber,\n                    issuer: arg.issuer,\n                    attestationServiceURL: attestationServiceURLClaim.url,\n                    name: nameClaim ? nameClaim.name : undefined,\n                    version: version\n                  }\n                }];\n              case 5:\n                error_1 = _d.sent();\n                return [2 /*return*/, {\n                  isValid: false,\n                  issuer: arg.issuer\n                }];\n              case 6:\n                return [2 /*return*/];\n            }\n          });\n        });\n      };\n    };\n    /**\n     * Returns the attestation signer for the specified account.\n     * @param account The address of token rewards are accumulated in.\n     * @param account The address of the account.\n     * @return The reward amount.\n     */\n    _this.getPendingWithdrawals = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.pendingWithdrawals, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Allows issuers to withdraw accumulated attestation rewards\n     * @param address The address of the token that will be withdrawn\n     */\n    _this.withdraw = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.withdraw);\n    /**\n     * Returns the list of accounts associated with an identifier.\n     * @param identifier Attestation identifier (e.g. phone hash)\n     */\n    _this.lookupAccountsForIdentifier = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.lookupAccountsForIdentifier);\n    /**\n     * Updates sender's approval status on whether to allow an attestation identifier\n     * mapping to be transfered from one address to another.\n     * @param identifier The identifier for this attestation.\n     * @param index The index of the account in the accounts array.\n     * @param from The current attestation address to which the identifier is mapped.\n     * @param to The new address to map to identifier.\n     * @param status The approval status\n     */\n    _this.approveTransfer = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.approveTransfer);\n    return _this;\n  }\n  /**\n   * Returns the verified status of an identifier/account pair indicating whether the attestation\n   * stats for a given pair are completed beyond a certain threshold of confidence (aka \"verified\")\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   * @param numAttestationsRequired Optional number of attestations required.  Will default to\n   *  hardcoded value if absent.\n   * @param attestationThreshold Optional threshold for fraction attestations completed. Will\n   *  default to hardcoded value if absent.\n   */\n  AttestationsWrapper.prototype.getVerifiedStatus = function (identifier, account, numAttestationsRequired, attestationThreshold) {\n    return __awaiter(this, void 0, void 0, function () {\n      var attestationStats;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getAttestationStat(identifier, account)];\n          case 1:\n            attestationStats = _a.sent();\n            return [2 /*return*/, lib_1.AttestationUtils.isAccountConsideredVerified(attestationStats, numAttestationsRequired, attestationThreshold)];\n        }\n      });\n    });\n  };\n  /**\n   * Calculates the amount of StableToken required to request Attestations\n   * @param attestationsRequested  The number of attestations to request\n   */\n  AttestationsWrapper.prototype.getAttestationFeeRequired = function (attestationsRequested) {\n    return __awaiter(this, void 0, void 0, function () {\n      var contract, attestationFee;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getStableToken(base_1.StableToken.cUSD)];\n          case 1:\n            contract = _a.sent();\n            return [4 /*yield*/, this.contract.methods.getAttestationRequestFee(contract.address).call()];\n          case 2:\n            attestationFee = _a.sent();\n            return [2 /*return*/, new bignumber_js_1.default(attestationFee).times(attestationsRequested)];\n        }\n      });\n    });\n  };\n  /**\n   * Approves the necessary amount of StableToken to request Attestations\n   * @param attestationsRequested The number of attestations to request\n   */\n  AttestationsWrapper.prototype.approveAttestationFee = function (attestationsRequested) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenContract, fee;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getStableToken(base_1.StableToken.cUSD)];\n          case 1:\n            tokenContract = _a.sent();\n            return [4 /*yield*/, this.getAttestationFeeRequired(attestationsRequested)];\n          case 2:\n            fee = _a.sent();\n            return [2 /*return*/, tokenContract.approve(this.address, fee.toFixed())];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an array of attestations that can be completed, along with the issuers' attestation\n   * service urls\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   */\n  AttestationsWrapper.prototype.getActionableAttestations = function (identifier, account, tries) {\n    if (tries === void 0) {\n      tries = 3;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var result, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getCompletableAttestations(identifier, account).call()];\n          case 1:\n            result = _a.sent();\n            return [4 /*yield*/, (0, async_1.concurrentMap)(5, parseGetCompletableAttestations(result), this.makeIsIssuerRunningAttestationService(tries))];\n          case 2:\n            results = _a.sent();\n            return [2 /*return*/, results.map(function (_) {\n              return _.isValid ? _.result : null;\n            }).filter(collections_1.notEmpty)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an array of issuer addresses that were found to not run the attestation service\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   */\n  AttestationsWrapper.prototype.getNonCompliantIssuers = function (identifier, account, tries) {\n    if (tries === void 0) {\n      tries = 3;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var result, withAttestationServiceURLs;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.getCompletableAttestations(identifier, account).call()];\n          case 1:\n            result = _a.sent();\n            return [4 /*yield*/, (0, async_1.concurrentMap)(5, parseGetCompletableAttestations(result), this.makeIsIssuerRunningAttestationService(tries))];\n          case 2:\n            withAttestationServiceURLs = _a.sent();\n            return [2 /*return*/, withAttestationServiceURLs.map(function (_) {\n              return _.isValid ? null : _.issuer;\n            }).filter(collections_1.notEmpty)];\n        }\n      });\n    });\n  };\n  /**\n   * Completes an attestation with the corresponding code\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   * @param issuer The issuer of the attestation\n   * @param code The code received by the validator\n   */\n  AttestationsWrapper.prototype.complete = function (identifier, account, issuer, code) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, attestationSigner, expectedSourceMessage, _a, r, s, v;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getAccounts()];\n          case 1:\n            accounts = _b.sent();\n            return [4 /*yield*/, accounts.getAttestationSigner(issuer)];\n          case 2:\n            attestationSigner = _b.sent();\n            expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n            _a = lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner), r = _a.r, s = _a.s, v = _a.v;\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.complete(identifier, v, r, s))];\n        }\n      });\n    });\n  };\n  /**\n   * Given a list of issuers, finds the matching issuer for a given code\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   * @param code The code received by the validator\n   * @param issuers The list of potential issuers\n   */\n  AttestationsWrapper.prototype.findMatchingIssuer = function (identifier, account, code, issuers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, expectedSourceMessage, _i, issuers_1, issuer, attestationSigner;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getAccounts()];\n          case 1:\n            accounts = _a.sent();\n            expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n            _i = 0, issuers_1 = issuers;\n            _a.label = 2;\n          case 2:\n            if (!(_i < issuers_1.length)) return [3 /*break*/, 5];\n            issuer = issuers_1[_i];\n            return [4 /*yield*/, accounts.getAttestationSigner(issuer)];\n          case 3:\n            attestationSigner = _a.sent();\n            try {\n              lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner);\n              return [2 /*return*/, issuer];\n            } catch (error) {\n              return [3 /*break*/, 4];\n            }\n            _a.label = 4;\n          case 4:\n            _i++;\n            return [3 /*break*/, 2];\n          case 5:\n            return [2 /*return*/, null];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current configuration parameters for the contract.\n   * @param tokens List of tokens used for attestation fees. use CeloTokens.getAddresses() to get\n   * @return AttestationsConfig object\n   */\n  AttestationsWrapper.prototype.getConfig = function (tokens) {\n    return __awaiter(this, void 0, void 0, function () {\n      var feeTokens, fees;\n      var _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            feeTokens = tokens;\n            return [4 /*yield*/, Promise.all(feeTokens.map(function (token) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var fee;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4 /*yield*/, this.attestationRequestFees(token)];\n                    case 1:\n                      fee = _a.sent();\n                      return [2 /*return*/, {\n                        fee: fee,\n                        address: token\n                      }];\n                  }\n                });\n              });\n            }))];\n          case 1:\n            fees = _b.sent();\n            _a = {};\n            return [4 /*yield*/, this.attestationExpiryBlocks()];\n          case 2:\n            return [2 /*return*/, (_a.attestationExpiryBlocks = _b.sent(), _a.attestationRequestFees = fees, _a)];\n        }\n      });\n    });\n  };\n  /**\n   * @dev Returns human readable configuration of the attestations contract\n   * @param tokens List of tokens used for attestation fees. use CeloTokens.getAddresses() to get\n   * @return AttestationsConfig object\n   */\n  AttestationsWrapper.prototype.getHumanReadableConfig = function (tokens) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getConfig(tokens)];\n          case 1:\n            config = _a.sent();\n            return [2 /*return*/, {\n              attestationRequestFees: config.attestationRequestFees,\n              attestationExpiry: (0, BaseWrapper_1.blocksToDurationString)(config.attestationExpiryBlocks)\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Lookup mapped wallet addresses for a given list of identifiers\n   * @param identifiers Attestation identifiers (e.g. phone hashes)\n   */\n  AttestationsWrapper.prototype.lookupIdentifiers = function (identifiers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stats, matches, addresses, completed, total, result, rIndex, pIndex, pHash, numberOfMatches, matchingAddresses, mIndex, matchingAddress;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contract.methods.batchGetAttestationStats(identifiers).call()];\n          case 1:\n            stats = _a.sent();\n            matches = stats[0].map(BaseWrapper_1.valueToInt);\n            addresses = stats[1];\n            completed = stats[2].map(BaseWrapper_1.valueToInt);\n            total = stats[3].map(BaseWrapper_1.valueToInt);\n            result = {};\n            rIndex = 0;\n            for (pIndex = 0; pIndex < identifiers.length; pIndex++) {\n              pHash = identifiers[pIndex];\n              numberOfMatches = matches[pIndex];\n              if (numberOfMatches === 0) {\n                continue;\n              }\n              matchingAddresses = {};\n              for (mIndex = 0; mIndex < numberOfMatches; mIndex++) {\n                matchingAddress = addresses[rIndex];\n                matchingAddresses[matchingAddress] = {\n                  completed: completed[rIndex],\n                  total: total[rIndex]\n                };\n                rIndex++;\n              }\n              result[pHash] = matchingAddresses;\n            }\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  /**\n   * Requests a new attestation\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param attestationsRequested The number of attestations to request\n   */\n  AttestationsWrapper.prototype.request = function (identifier, attestationsRequested) {\n    return __awaiter(this, void 0, void 0, function () {\n      var contract;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getStableToken(base_1.StableToken.cUSD)];\n          case 1:\n            contract = _a.sent();\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.request(identifier, attestationsRequested, contract.address))];\n        }\n      });\n    });\n  };\n  /**\n   * Selects the issuers for previously requested attestations for a phone number\n   * @param identifier Attestation identifier (e.g. phone hash)\n   */\n  AttestationsWrapper.prototype.selectIssuers = function (identifier) {\n    return (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.selectIssuers(identifier));\n  };\n  /**\n   * Waits appropriate number of blocks, then selects issuers for previously requested phone number attestations\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account Address of the account\n   */\n  AttestationsWrapper.prototype.selectIssuersAfterWait = function (identifier, account, timeoutSeconds, pollDurationSeconds) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.waitForSelectingIssuers(identifier, account, timeoutSeconds, pollDurationSeconds)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, this.selectIssuers(identifier)];\n        }\n      });\n    });\n  };\n  /**\n   * Reveal phone number to issuer\n   * @param serviceURL: validator's attestation service URL\n   * @param body\n   */\n  AttestationsWrapper.prototype.revealPhoneNumberToIssuer = function (serviceURL, requestBody) {\n    return (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'attestations'), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n  };\n  /**\n   * Returns reveal status from validator's attestation service\n   * @param phoneNumber: attestation's phone number\n   * @param account: attestation's account\n   * @param issuer: validator's address\n   * @param serviceURL: validator's attestation service URL\n   * @param pepper: phone number privacy pepper\n   */\n  AttestationsWrapper.prototype.getRevealStatus = function (phoneNumber, account, issuer, serviceURL, pepper) {\n    var urlParams = new URLSearchParams({\n      phoneNumber: phoneNumber,\n      salt: pepper !== null && pepper !== void 0 ? pepper : '',\n      issuer: issuer,\n      account: account\n    });\n    return (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'get_attestations') + '?' + urlParams, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  };\n  /**\n   * Returns attestation code for provided security code from validator's attestation service\n   * @param serviceURL: validator's attestation service URL\n   * @param body\n   */\n  AttestationsWrapper.prototype.getAttestationForSecurityCode = function (serviceURL, requestBody, signer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var urlParams, additionalHeaders, signature, response, ok, status, body, _a, _b, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            urlParams = new URLSearchParams({\n              phoneNumber: requestBody.phoneNumber,\n              account: requestBody.account,\n              issuer: requestBody.issuer\n            });\n            additionalHeaders = {};\n            if (requestBody.salt) {\n              urlParams.set('salt', requestBody.salt);\n            }\n            if (!requestBody.securityCode) return [3 /*break*/, 2];\n            urlParams.set('securityCode', requestBody.securityCode);\n            return [4 /*yield*/, this.connection.signTypedData(signer, (0, typed_data_constructors_1.attestationSecurityCode)(requestBody.securityCode))];\n          case 1:\n            signature = _d.sent();\n            additionalHeaders = {\n              Authentication: lib_1.SignatureUtils.serializeSignature(signature)\n            };\n            _d.label = 2;\n          case 2:\n            return [4 /*yield*/, (0, cross_fetch_1.default)((0, string_1.appendPath)(serviceURL, 'get_attestations') + '?' + urlParams, {\n              method: 'GET',\n              headers: __assign({\n                'Content-Type': 'application/json'\n              }, additionalHeaders)\n            })];\n          case 3:\n            response = _d.sent();\n            ok = response.ok, status = response.status;\n            if (!ok) return [3 /*break*/, 5];\n            return [4 /*yield*/, response.json()];\n          case 4:\n            body = _d.sent();\n            if (body.attestationCode) {\n              return [2 /*return*/, body.attestationCode];\n            }\n            _d.label = 5;\n          case 5:\n            _a = Error.bind;\n            _c = (_b = \"Error getting security code for \".concat(requestBody.issuer, \". \").concat(status, \": \")).concat;\n            return [4 /*yield*/, response.text()];\n          case 6:\n            throw new (_a.apply(Error, [void 0, _c.apply(_b, [_d.sent()])]))();\n        }\n      });\n    });\n  };\n  /**\n   * Validates a given code by the issuer on-chain\n   * @param identifier Attestation identifier (e.g. phone hash)\n   * @param account The address of the account which requested attestation\n   * @param issuer The address of the issuer of the attestation\n   * @param code The code send by the issuer\n   */\n  AttestationsWrapper.prototype.validateAttestationCode = function (identifier, account, issuer, code) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, attestationSigner, expectedSourceMessage, _a, r, s, v, result;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getAccounts()];\n          case 1:\n            accounts = _b.sent();\n            return [4 /*yield*/, accounts.getAttestationSigner(issuer)];\n          case 2:\n            attestationSigner = _b.sent();\n            expectedSourceMessage = lib_1.AttestationUtils.getAttestationMessageToSignFromIdentifier(identifier, account);\n            _a = lib_1.SignatureUtils.parseSignature(expectedSourceMessage, code, attestationSigner), r = _a.r, s = _a.s, v = _a.v;\n            return [4 /*yield*/, this.contract.methods.validateAttestationCode(identifier, account, v, r, s).call()];\n          case 3:\n            result = _b.sent();\n            return [2 /*return*/, result.toLowerCase() !== address_1.NULL_ADDRESS];\n        }\n      });\n    });\n  };\n  /**\n   * Gets the relevant attestation service status for a validator\n   * @param validator Validator to get the attestation service status for\n   */\n  AttestationsWrapper.prototype.getAttestationServiceStatus = function (validator) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, hasAttestationSigner, attestationSigner, attestationServiceURL, ret, metadataURL, metadata, _a, _b, attestationServiceURLClaim, error_2, statusResponse, statusResponseBody, healthzResponse, healthzResponseBody, error_3, error_4;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this.contracts.getAccounts()];\n          case 1:\n            accounts = _c.sent();\n            return [4 /*yield*/, accounts.hasAuthorizedAttestationSigner(validator.address)];\n          case 2:\n            hasAttestationSigner = _c.sent();\n            return [4 /*yield*/, accounts.getAttestationSigner(validator.address)];\n          case 3:\n            attestationSigner = _c.sent();\n            ret = __assign(__assign({}, validator), {\n              hasAttestationSigner: hasAttestationSigner,\n              attestationSigner: attestationSigner,\n              attestationServiceURL: null,\n              okStatus: false,\n              error: null,\n              smsProviders: [],\n              blacklistedRegionCodes: [],\n              rightAccount: false,\n              metadataURL: null,\n              state: AttestationServiceStatusState.NoAttestationSigner,\n              version: null,\n              ageOfLatestBlock: null,\n              smsProvidersRandomized: null,\n              maxDeliveryAttempts: null,\n              maxRerequestMins: null,\n              twilioVerifySidProvided: null\n            });\n            if (!hasAttestationSigner) {\n              return [2 /*return*/, ret];\n            }\n            return [4 /*yield*/, accounts.getMetadataURL(validator.address)];\n          case 4:\n            metadataURL = _c.sent();\n            ret.metadataURL = metadataURL;\n            if (!metadataURL) {\n              ret.state = AttestationServiceStatusState.NoMetadataURL;\n              return [2 /*return*/, ret];\n            }\n            if (metadataURL.startsWith('http://')) {\n              ret.state = AttestationServiceStatusState.InvalidAttestationServiceURL;\n              return [2 /*return*/, ret];\n            }\n            _c.label = 5;\n          case 5:\n            _c.trys.push([5, 8,, 9]);\n            _b = (_a = identity_1.IdentityMetadataWrapper).fetchFromURL;\n            return [4 /*yield*/, this.contracts.getAccounts()];\n          case 6:\n            return [4 /*yield*/, _b.apply(_a, [_c.sent(), metadataURL])];\n          case 7:\n            metadata = _c.sent();\n            attestationServiceURLClaim = metadata.findClaim(identity_1.ClaimTypes.ATTESTATION_SERVICE_URL);\n            if (!attestationServiceURLClaim) {\n              ret.state = AttestationServiceStatusState.NoAttestationServiceURL;\n              return [2 /*return*/, ret];\n            }\n            attestationServiceURL = attestationServiceURLClaim.url;\n            return [3 /*break*/, 9];\n          case 8:\n            error_2 = _c.sent();\n            ret.state = error_2.type === 'system' ? AttestationServiceStatusState.MetadataTimeout : AttestationServiceStatusState.InvalidMetadata;\n            ret.error = error_2;\n            return [2 /*return*/, ret];\n          case 9:\n            ret.attestationServiceURL = attestationServiceURL;\n            _c.label = 10;\n          case 10:\n            _c.trys.push([10, 20,, 21]);\n            return [4 /*yield*/, (0, cross_fetch_1.default)((0, string_1.appendPath)(attestationServiceURL, 'status'))];\n          case 11:\n            statusResponse = _c.sent();\n            if (!statusResponse.ok) {\n              ret.state = AttestationServiceStatusState.UnreachableAttestationService;\n              return [2 /*return*/, ret];\n            }\n            ret.okStatus = true;\n            return [4 /*yield*/, statusResponse.json()];\n          case 12:\n            statusResponseBody = _c.sent();\n            ret.smsProviders = statusResponseBody.smsProviders;\n            ret.rightAccount = (0, address_1.eqAddress)(validator.address, statusResponseBody.accountAddress);\n            ret.state = ret.rightAccount ? AttestationServiceStatusState.Valid : AttestationServiceStatusState.WrongAccount;\n            ret.ageOfLatestBlock = statusResponseBody.ageOfLatestBlock;\n            ret.smsProvidersRandomized = statusResponseBody.smsProvidersRandomized;\n            ret.maxDeliveryAttempts = statusResponseBody.maxDeliveryAttempts;\n            ret.maxRerequestMins = statusResponseBody.maxRerequestMins;\n            ret.twilioVerifySidProvided = statusResponseBody.twilioVerifySidProvided;\n            if (!statusResponseBody.version) return [3 /*break*/, 18];\n            ret.version = statusResponseBody.version;\n            _c.label = 13;\n          case 13:\n            _c.trys.push([13, 16,, 17]);\n            return [4 /*yield*/, (0, cross_fetch_1.default)((0, string_1.appendPath)(attestationServiceURL, 'healthz'))];\n          case 14:\n            healthzResponse = _c.sent();\n            return [4 /*yield*/, healthzResponse.json()];\n          case 15:\n            healthzResponseBody = _c.sent();\n            if (!healthzResponse.ok) {\n              ret.state = AttestationServiceStatusState.Unhealthy;\n              if (healthzResponseBody.error) {\n                ret.error = healthzResponseBody.error;\n              }\n            }\n            return [3 /*break*/, 17];\n          case 16:\n            error_3 = _c.sent();\n            ret.state = AttestationServiceStatusState.UnreachableHealthz;\n            return [3 /*break*/, 17];\n          case 17:\n            // Whether or not health check is reachable, also check full node status\n            // (overrides UnreachableHealthz status)\n            if (statusResponseBody.ageOfLatestBlock !== null && statusResponseBody.ageOfLatestBlock > 10 || statusResponseBody.isNodeSyncing === true) {\n              ret.state = AttestationServiceStatusState.Unhealthy;\n            }\n            return [3 /*break*/, 19];\n          case 18:\n            // No version implies 1.0.0\n            ret.version = '1.0.0';\n            _c.label = 19;\n          case 19:\n            return [3 /*break*/, 21];\n          case 20:\n            error_4 = _c.sent();\n            ret.state = AttestationServiceStatusState.UnreachableAttestationService;\n            ret.error = error_4;\n            return [3 /*break*/, 21];\n          case 21:\n            return [2 /*return*/, ret];\n        }\n      });\n    });\n  };\n  AttestationsWrapper.prototype.revoke = function (identifer, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, idx;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.lookupAccountsForIdentifier(identifer)];\n          case 1:\n            accounts = _a.sent();\n            idx = accounts.findIndex(function (acc) {\n              return (0, address_1.eqAddress)(acc, account);\n            });\n            if (idx < 0) {\n              throw new Error(\"Account not found in identifier's accounts\");\n            }\n            return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.revoke(identifer, idx))];\n        }\n      });\n    });\n  };\n  return AttestationsWrapper;\n}(BaseWrapper_1.BaseWrapper);\nexports.AttestationsWrapper = AttestationsWrapper;\nvar AttestationServiceStatusState;\n(function (AttestationServiceStatusState) {\n  AttestationServiceStatusState[\"NoAttestationSigner\"] = \"NoAttestationSigner\";\n  AttestationServiceStatusState[\"NoMetadataURL\"] = \"NoMetadataURL\";\n  AttestationServiceStatusState[\"InvalidMetadata\"] = \"InvalidMetadata\";\n  AttestationServiceStatusState[\"NoAttestationServiceURL\"] = \"NoAttestationServiceURL\";\n  AttestationServiceStatusState[\"InvalidAttestationServiceURL\"] = \"InvalidAttestationServiceURL\";\n  AttestationServiceStatusState[\"UnreachableAttestationService\"] = \"UnreachableAttestationService\";\n  AttestationServiceStatusState[\"Valid\"] = \"Valid\";\n  AttestationServiceStatusState[\"UnreachableHealthz\"] = \"UnreachableHealthz\";\n  AttestationServiceStatusState[\"Unhealthy\"] = \"Unhealthy\";\n  AttestationServiceStatusState[\"WrongAccount\"] = \"WrongAccount\";\n  AttestationServiceStatusState[\"MetadataTimeout\"] = \"MetadataTimeout\";\n})(AttestationServiceStatusState = exports.AttestationServiceStatusState || (exports.AttestationServiceStatusState = {}));","map":null,"metadata":{},"sourceType":"script"}