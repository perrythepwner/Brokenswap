{"ast":null,"code":"import _asyncToGenerator from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{useCelo,useProvider}from'@celo/react-celo';import IUniswapV2PairABI from'@ubeswap/core/build/abi/IUniswapV2Pair.json';import{JSBI,Token,TokenAmount}from'@ubeswap/sdk';import ERC20_ABI from'constants/abis/erc20';import MOOLA_STAKING_ABI from'constants/abis/moola/MoolaStakingRewards.json';import{ethers}from'ethers';import{useAllTokens,useToken}from'hooks/Tokens';import{useMultiStakingContract,useStakingContract}from'hooks/useContract';import useCurrentBlockTimestamp from'hooks/useCurrentBlockTimestamp';import{useEffect,useMemo,useState}from'react';import{useSingleCallResult}from'state/multicall/hooks';import{getProviderOrSigner}from'utils';import{isAddress}from'web3-utils';import{BIG_INT_SECONDS_IN_YEAR}from'./../../constants/index';import{useCUSDPrice,useCUSDPriceOfULP,useCUSDPrices}from'./../../utils/useCUSDPrice';export const useCustomStakingInfo=farmAddress=>{var _useSingleCallResult,_useSingleCallResult$,_useSingleCallResult2,_useSingleCallResult3,_useSingleCallResult4,_useSingleCallResult5,_useSingleCallResult6,_useSingleCallResult7,_useSingleCallResult8,_useSingleCallResult9,_useSingleCallResult10,_useSingleCallResult11,_useSingleCallResult12;const{address:account,network}=useCelo();const{chainId}=network;const library=useProvider();const provider=getProviderOrSigner(library,account||undefined);const tokens=useAllTokens();const stakingContract=useStakingContract(isAddress(farmAddress)?farmAddress:'');const multiStakingContract=useMultiStakingContract(isAddress(farmAddress)?farmAddress:'');const[externalRewardsTokens,setExternalRewardsTokens]=useState([]);const[externalRewardsRates,setExternalRewardsRates]=useState([]);const[externalEarnedAmounts,setExternalEarnedAmounts]=useState([]);const[fetchingMultiStaking,setFetchingMultiStaking]=useState(false);const[pairToken,setPairToken]=useState(undefined);const currentBlockTimestamp=useCurrentBlockTimestamp();useEffect(()=>{const fetchMultiStaking=/*#__PURE__*/function(){var _ref=_asyncToGenerator(function*(){if(fetchingMultiStaking||!multiStakingContract){return;}const externalRewardsTokens=[];const rates=[];const amounts=[];try{setFetchingMultiStaking(true);const externalInfo=yield Promise.all([multiStakingContract.externalStakingRewards(),multiStakingContract.callStatic.earnedExternal(account!==null&&account!==void 0?account:'')]);let stakingRewardsAddress=externalInfo[0];const externalEarned=externalInfo[1];if(externalEarned.length){externalEarned.map(earned=>amounts.push(earned));}for(let i=0;i<externalEarned.length;i+=1){const moolaStaking=new ethers.Contract(stakingRewardsAddress,MOOLA_STAKING_ABI,provider);const[rewardsTokenAddress,rewardRate]=yield Promise.all([moolaStaking.rewardsToken(),moolaStaking.rewardRate()]);const token=rewardsTokenAddress?tokens[rewardsTokenAddress]:undefined;if(token){externalRewardsTokens.push(token);}else{const tokenContract=new ethers.Contract(rewardsTokenAddress,ERC20_ABI,provider);const[tokenName,symbol,decimals]=yield Promise.all([tokenContract.name(),tokenContract.symbol(),tokenContract.decimals()]);externalRewardsTokens.push(new Token(chainId,rewardsTokenAddress,decimals,symbol,tokenName));}rates.push(rewardRate);if(i<externalEarned.length-1)stakingRewardsAddress=yield moolaStaking.externalStakingRewards();}}catch(err){console.error(err);}setFetchingMultiStaking(false);setExternalRewardsTokens(externalRewardsTokens);setExternalRewardsRates(rates);setExternalEarnedAmounts(amounts);});return function fetchMultiStaking(){return _ref.apply(this,arguments);};}();fetchMultiStaking();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[account,multiStakingContract]);const balanceOf=(_useSingleCallResult=useSingleCallResult(stakingContract,'balanceOf',[account||undefined]))===null||_useSingleCallResult===void 0?void 0:(_useSingleCallResult$=_useSingleCallResult.result)===null||_useSingleCallResult$===void 0?void 0:_useSingleCallResult$[0];const periodFinish=(_useSingleCallResult2=useSingleCallResult(stakingContract,'periodFinish',[]))===null||_useSingleCallResult2===void 0?void 0:(_useSingleCallResult3=_useSingleCallResult2.result)===null||_useSingleCallResult3===void 0?void 0:_useSingleCallResult3[0];const periodFinishSeconds=periodFinish===null||periodFinish===void 0?void 0:periodFinish.toNumber();const active=periodFinishSeconds&&currentBlockTimestamp?periodFinishSeconds>currentBlockTimestamp.toNumber():false;const rewardTokenAddress=(_useSingleCallResult4=useSingleCallResult(stakingContract,'rewardsToken',[]))===null||_useSingleCallResult4===void 0?void 0:(_useSingleCallResult5=_useSingleCallResult4.result)===null||_useSingleCallResult5===void 0?void 0:_useSingleCallResult5[0];const rewardToken=useToken(rewardTokenAddress);let rewardRates=(_useSingleCallResult6=useSingleCallResult(stakingContract,'rewardRate',[]))===null||_useSingleCallResult6===void 0?void 0:_useSingleCallResult6.result;rewardRates=rewardRates?[...rewardRates,...externalRewardsRates]:externalRewardsRates;const earnedAmount=(_useSingleCallResult7=useSingleCallResult(stakingContract,'earned',[account||undefined]))===null||_useSingleCallResult7===void 0?void 0:(_useSingleCallResult8=_useSingleCallResult7.result)===null||_useSingleCallResult8===void 0?void 0:_useSingleCallResult8[0];const earnedAmountsAll=earnedAmount?[earnedAmount,...externalEarnedAmounts]:externalEarnedAmounts;const totalSupply=(_useSingleCallResult9=useSingleCallResult(stakingContract,'totalSupply',[]))===null||_useSingleCallResult9===void 0?void 0:(_useSingleCallResult10=_useSingleCallResult9.result)===null||_useSingleCallResult10===void 0?void 0:_useSingleCallResult10[0];const stakingTokenAddress=(_useSingleCallResult11=useSingleCallResult(stakingContract,'stakingToken',[]))===null||_useSingleCallResult11===void 0?void 0:(_useSingleCallResult12=_useSingleCallResult11.result)===null||_useSingleCallResult12===void 0?void 0:_useSingleCallResult12[0];const stakingToken=useToken(stakingTokenAddress);const stakedAmount=stakingToken?new TokenAmount(stakingToken,JSBI.BigInt(balanceOf!==null&&balanceOf!==void 0?balanceOf:0)):undefined;const pair=useMemo(()=>{return stakingTokenAddress?new ethers.Contract(stakingTokenAddress,IUniswapV2PairABI,provider):undefined;},[provider,stakingTokenAddress]);useEffect(()=>{const getPairToken=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(function*(pair){let token0Address=undefined;let token1Address=undefined;try{const tokens=yield Promise.all([pair.token0(),pair.token1()]);token0Address=tokens[0];token1Address=tokens[1];}catch(err){console.error(err);}setPairToken(token0Address&&token1Address?{token0Address,token1Address}:undefined);});return function getPairToken(_x){return _ref2.apply(this,arguments);};}();if(pair&&!pairToken){getPairToken(pair);}},[pair,pairToken]);const token0=useToken(pairToken?pairToken.token0Address:undefined);const token1=useToken(pairToken?pairToken.token1Address:undefined);const cusdPriceOfULP0=useCUSDPrice(stakingToken!==null&&stakingToken!==void 0?stakingToken:undefined);const cusdPriceOfULP1=useCUSDPriceOfULP(pairToken&&stakingToken?stakingToken:undefined);const lpPrice=cusdPriceOfULP1?cusdPriceOfULP1:cusdPriceOfULP0;const rewardTokens=rewardToken&&isAddress(farmAddress)?[rewardToken,...externalRewardsTokens]:[];const cusdPriceOfRewardTokens=useCUSDPrices(rewardTokens);const earnedAmounts=rewardTokens&&isAddress(farmAddress)?rewardTokens===null||rewardTokens===void 0?void 0:rewardTokens.map((rewardsToken,index)=>{var _earnedAmountsAll$ind;return new TokenAmount(rewardsToken,JSBI.BigInt((_earnedAmountsAll$ind=earnedAmountsAll[index])!==null&&_earnedAmountsAll$ind!==void 0?_earnedAmountsAll$ind:0));}):[];const totalRewardRates=rewardTokens&&isAddress(farmAddress)?rewardTokens.map((rewardsToken,i)=>new TokenAmount(rewardsToken,rewardRates&&rewardRates[i]?rewardRates[i]:JSBI.BigInt(0))):[];const totalStakedAmount=stakingToken&&totalSupply?new TokenAmount(stakingToken,JSBI.BigInt(totalSupply)):undefined;const tvlUSD=totalStakedAmount&&lpPrice?lpPrice.quote(totalStakedAmount).toSignificant(6):undefined;const userValueCUSD=stakedAmount&&lpPrice?lpPrice.quote(stakedAmount).toExact():undefined;const rewardsUSDPerYear=cusdPriceOfRewardTokens?totalRewardRates.reduce((totalRewardsUSDPerYear,rewardRate,index)=>{var _cusdPriceOfRewardTok,_cusdPriceOfRewardTok2;return JSBI.add(JSBI.BigInt(totalRewardsUSDPerYear),JSBI.multiply((_cusdPriceOfRewardTok=(_cusdPriceOfRewardTok2=cusdPriceOfRewardTokens[index])===null||_cusdPriceOfRewardTok2===void 0?void 0:_cusdPriceOfRewardTok2.quote(rewardRate).raw)!==null&&_cusdPriceOfRewardTok!==void 0?_cusdPriceOfRewardTok:JSBI.BigInt(0),JSBI.BigInt(BIG_INT_SECONDS_IN_YEAR))).toString();},'0'):'0';const getHypotheticalRewardRate=(_stakedAmount,_totalStakedAmount,_totalRewardRates)=>{return rewardTokens&&rewardTokens.length>0?rewardTokens.map((rewardToken,index)=>new TokenAmount(rewardToken,JSBI.greaterThan(_totalStakedAmount.raw,JSBI.BigInt(0))?JSBI.divide(JSBI.multiply(_totalRewardRates[index].raw,_stakedAmount.raw),_totalStakedAmount.raw):JSBI.BigInt(0))):[];};const userRewardRates=rewardTokens&&rewardTokens.length>0&&totalStakedAmount&&stakedAmount?rewardTokens.map((rewardToken,index)=>new TokenAmount(rewardToken,JSBI.greaterThan(totalStakedAmount.raw,JSBI.BigInt(0))?JSBI.divide(JSBI.multiply(totalRewardRates[index].raw,stakedAmount.raw),totalStakedAmount.raw):JSBI.BigInt(0))):[];return{totalStakedAmount,stakingToken,rewardTokens,totalRewardRates,stakedAmount,userValueCUSD,valueOfTotalStakedAmountInCUSD:Number(tvlUSD)<1?'0':tvlUSD,active,stakingRewardAddress:farmAddress,getHypotheticalRewardRate,tokens:pairToken&&token0&&token1?[token0,token1]:stakingToken?[stakingToken,stakingToken]:undefined,earnedAmounts,rewardRates:userRewardRates,rewardsUSDPerYear};};","map":{"version":3,"names":["useCelo","useProvider","IUniswapV2PairABI","JSBI","Token","TokenAmount","ERC20_ABI","MOOLA_STAKING_ABI","ethers","useAllTokens","useToken","useMultiStakingContract","useStakingContract","useCurrentBlockTimestamp","useEffect","useMemo","useState","useSingleCallResult","getProviderOrSigner","isAddress","BIG_INT_SECONDS_IN_YEAR","useCUSDPrice","useCUSDPriceOfULP","useCUSDPrices","useCustomStakingInfo","farmAddress","_useSingleCallResult","_useSingleCallResult$","_useSingleCallResult2","_useSingleCallResult3","_useSingleCallResult4","_useSingleCallResult5","_useSingleCallResult6","_useSingleCallResult7","_useSingleCallResult8","_useSingleCallResult9","_useSingleCallResult10","_useSingleCallResult11","_useSingleCallResult12","address","account","network","chainId","library","provider","undefined","tokens","stakingContract","multiStakingContract","externalRewardsTokens","setExternalRewardsTokens","externalRewardsRates","setExternalRewardsRates","externalEarnedAmounts","setExternalEarnedAmounts","fetchingMultiStaking","setFetchingMultiStaking","pairToken","setPairToken","currentBlockTimestamp","fetchMultiStaking","_ref","_asyncToGenerator","rates","amounts","externalInfo","Promise","all","externalStakingRewards","callStatic","earnedExternal","stakingRewardsAddress","externalEarned","length","map","earned","push","i","moolaStaking","Contract","rewardsTokenAddress","rewardRate","rewardsToken","token","tokenContract","tokenName","symbol","decimals","name","err","console","error","apply","arguments","balanceOf","result","periodFinish","periodFinishSeconds","toNumber","active","rewardTokenAddress","rewardToken","rewardRates","earnedAmount","earnedAmountsAll","totalSupply","stakingTokenAddress","stakingToken","stakedAmount","BigInt","pair","getPairToken","_ref2","token0Address","token1Address","token0","token1","_x","cusdPriceOfULP0","cusdPriceOfULP1","lpPrice","rewardTokens","cusdPriceOfRewardTokens","earnedAmounts","index","_earnedAmountsAll$ind","totalRewardRates","totalStakedAmount","tvlUSD","quote","toSignificant","userValueCUSD","toExact","rewardsUSDPerYear","reduce","totalRewardsUSDPerYear","_cusdPriceOfRewardTok","_cusdPriceOfRewardTok2","add","multiply","raw","toString","getHypotheticalRewardRate","_stakedAmount","_totalStakedAmount","_totalRewardRates","greaterThan","divide","userRewardRates","valueOfTotalStakedAmountInCUSD","Number","stakingRewardAddress"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/pages/Earn/useCustomStakingInfo.ts"],"sourcesContent":["import { useCelo, useProvider } from '@celo/react-celo'\nimport IUniswapV2PairABI from '@ubeswap/core/build/abi/IUniswapV2Pair.json'\nimport { JSBI, Token, TokenAmount } from '@ubeswap/sdk'\nimport ERC20_ABI from 'constants/abis/erc20'\nimport MOOLA_STAKING_ABI from 'constants/abis/moola/MoolaStakingRewards.json'\nimport { BigNumber, ContractInterface, ethers } from 'ethers'\nimport { Erc20, MoolaStakingRewards } from 'generated'\nimport { useAllTokens, useToken } from 'hooks/Tokens'\nimport { useMultiStakingContract, useStakingContract } from 'hooks/useContract'\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useSingleCallResult } from 'state/multicall/hooks'\nimport { getProviderOrSigner } from 'utils'\nimport { isAddress } from 'web3-utils'\n\nimport { BIG_INT_SECONDS_IN_YEAR } from './../../constants/index'\nimport { useCUSDPrice, useCUSDPriceOfULP, useCUSDPrices } from './../../utils/useCUSDPrice'\n\ntype PairToken = {\n  token0Address: string\n  token1Address: string\n}\nexport interface CustomStakingInfo {\n  totalStakedAmount: TokenAmount | undefined\n  stakingToken: Token | null | undefined\n  rewardTokens: Token[]\n  earnedAmounts: TokenAmount[]\n  totalRewardRates: TokenAmount[]\n  stakedAmount: TokenAmount | undefined\n  userValueCUSD: string | undefined\n  valueOfTotalStakedAmountInCUSD: string | undefined\n  stakingRewardAddress: string\n  active: boolean\n  readonly getHypotheticalRewardRate: (\n    stakedAmount: TokenAmount,\n    totalStakedAmount: TokenAmount,\n    totalRewardRates: TokenAmount[]\n  ) => TokenAmount[]\n  tokens: Token[] | undefined\n  rewardRates: TokenAmount[]\n  rewardsUSDPerYear: string\n}\n\nexport const useCustomStakingInfo = (farmAddress: string): CustomStakingInfo => {\n  const { address: account, network } = useCelo()\n  const { chainId } = network\n  const library = useProvider()\n  const provider = getProviderOrSigner(library, account || undefined)\n  const tokens = useAllTokens()\n\n  const stakingContract = useStakingContract(isAddress(farmAddress) ? farmAddress : '')\n  const multiStakingContract = useMultiStakingContract(isAddress(farmAddress) ? farmAddress : '')\n  const [externalRewardsTokens, setExternalRewardsTokens] = useState<Array<Token>>([])\n  const [externalRewardsRates, setExternalRewardsRates] = useState<Array<BigNumber>>([])\n  const [externalEarnedAmounts, setExternalEarnedAmounts] = useState<Array<BigNumber>>([])\n  const [fetchingMultiStaking, setFetchingMultiStaking] = useState<boolean>(false)\n  const [pairToken, setPairToken] = useState<PairToken | undefined>(undefined)\n  const currentBlockTimestamp = useCurrentBlockTimestamp()\n\n  useEffect(() => {\n    const fetchMultiStaking = async () => {\n      if (fetchingMultiStaking || !multiStakingContract) {\n        return\n      }\n      const externalRewardsTokens = []\n      const rates = []\n      const amounts: BigNumber[] = []\n      try {\n        setFetchingMultiStaking(true)\n        const externalInfo = await Promise.all([\n          multiStakingContract.externalStakingRewards(),\n          multiStakingContract.callStatic.earnedExternal(account ?? ''),\n        ])\n        let stakingRewardsAddress = externalInfo[0]\n        const externalEarned = externalInfo[1]\n        if (externalEarned.length) {\n          externalEarned.map((earned) => amounts.push(earned))\n        }\n        for (let i = 0; i < externalEarned.length; i += 1) {\n          const moolaStaking = new ethers.Contract(\n            stakingRewardsAddress,\n            MOOLA_STAKING_ABI as ContractInterface,\n            provider\n          ) as unknown as MoolaStakingRewards\n          const [rewardsTokenAddress, rewardRate] = await Promise.all([\n            moolaStaking.rewardsToken(),\n            moolaStaking.rewardRate(),\n          ])\n          const token: Token | undefined = rewardsTokenAddress ? tokens[rewardsTokenAddress] : undefined\n          if (token) {\n            externalRewardsTokens.push(token)\n          } else {\n            const tokenContract = new ethers.Contract(\n              rewardsTokenAddress,\n              ERC20_ABI as ContractInterface,\n              provider\n            ) as unknown as Erc20\n            const [tokenName, symbol, decimals] = await Promise.all([\n              tokenContract.name(),\n              tokenContract.symbol(),\n              tokenContract.decimals(),\n            ])\n            externalRewardsTokens.push(new Token(chainId as number, rewardsTokenAddress, decimals, symbol, tokenName))\n          }\n          rates.push(rewardRate)\n          if (i < externalEarned.length - 1) stakingRewardsAddress = await moolaStaking.externalStakingRewards()\n        }\n      } catch (err) {\n        console.error(err)\n      }\n      setFetchingMultiStaking(false)\n      setExternalRewardsTokens(externalRewardsTokens)\n      setExternalRewardsRates(rates)\n      setExternalEarnedAmounts(amounts)\n    }\n    fetchMultiStaking()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, multiStakingContract])\n\n  const balanceOf = useSingleCallResult(stakingContract, 'balanceOf', [account || undefined])?.result?.[0]\n\n  const periodFinish = useSingleCallResult(stakingContract, 'periodFinish', [])?.result?.[0]\n  const periodFinishSeconds = periodFinish?.toNumber()\n  const active =\n    periodFinishSeconds && currentBlockTimestamp ? periodFinishSeconds > currentBlockTimestamp.toNumber() : false\n\n  const rewardTokenAddress = useSingleCallResult(stakingContract, 'rewardsToken', [])?.result?.[0]\n  const rewardToken = useToken(rewardTokenAddress)\n\n  let rewardRates: any = useSingleCallResult(stakingContract, 'rewardRate', [])?.result\n  rewardRates = rewardRates ? [...rewardRates, ...externalRewardsRates] : externalRewardsRates\n\n  const earnedAmount = useSingleCallResult(stakingContract, 'earned', [account || undefined])?.result?.[0]\n  const earnedAmountsAll: BigNumber[] = earnedAmount ? [earnedAmount, ...externalEarnedAmounts] : externalEarnedAmounts\n  const totalSupply = useSingleCallResult(stakingContract, 'totalSupply', [])?.result?.[0]\n\n  const stakingTokenAddress = useSingleCallResult(stakingContract, 'stakingToken', [])?.result?.[0]\n  const stakingToken = useToken(stakingTokenAddress)\n  const stakedAmount = stakingToken ? new TokenAmount(stakingToken, JSBI.BigInt(balanceOf ?? 0)) : undefined\n\n  const pair = useMemo(() => {\n    return stakingTokenAddress\n      ? new ethers.Contract(stakingTokenAddress, IUniswapV2PairABI as ContractInterface, provider)\n      : undefined\n  }, [provider, stakingTokenAddress])\n\n  useEffect(() => {\n    const getPairToken = async (pair: ethers.Contract) => {\n      let token0Address: string | undefined = undefined\n      let token1Address: string | undefined = undefined\n      try {\n        const tokens = await Promise.all([pair.token0(), pair.token1()])\n        token0Address = tokens[0]\n        token1Address = tokens[1]\n      } catch (err) {\n        console.error(err)\n      }\n      setPairToken(token0Address && token1Address ? { token0Address, token1Address } : undefined)\n    }\n    if (pair && !pairToken) {\n      getPairToken(pair)\n    }\n  }, [pair, pairToken])\n\n  const token0 = useToken(pairToken ? pairToken.token0Address : undefined)\n  const token1 = useToken(pairToken ? pairToken.token1Address : undefined)\n  const cusdPriceOfULP0 = useCUSDPrice(stakingToken ?? undefined)\n  const cusdPriceOfULP1 = useCUSDPriceOfULP(pairToken && stakingToken ? stakingToken : undefined)\n\n  const lpPrice = cusdPriceOfULP1 ? cusdPriceOfULP1 : cusdPriceOfULP0\n\n  const rewardTokens: Token[] = rewardToken && isAddress(farmAddress) ? [rewardToken, ...externalRewardsTokens] : []\n\n  const cusdPriceOfRewardTokens = useCUSDPrices(rewardTokens)\n  const earnedAmounts: TokenAmount[] =\n    rewardTokens && isAddress(farmAddress)\n      ? rewardTokens?.map(\n          (rewardsToken, index) => new TokenAmount(rewardsToken, JSBI.BigInt(earnedAmountsAll[index] ?? 0))\n        )\n      : []\n\n  const totalRewardRates =\n    rewardTokens && isAddress(farmAddress)\n      ? rewardTokens.map(\n          (rewardsToken, i) =>\n            new TokenAmount(rewardsToken, rewardRates && rewardRates[i] ? rewardRates[i] : JSBI.BigInt(0))\n        )\n      : []\n\n  const totalStakedAmount =\n    stakingToken && totalSupply ? new TokenAmount(stakingToken, JSBI.BigInt(totalSupply)) : undefined\n\n  const tvlUSD = totalStakedAmount && lpPrice ? lpPrice.quote(totalStakedAmount).toSignificant(6) : undefined\n  const userValueCUSD = stakedAmount && lpPrice ? lpPrice.quote(stakedAmount).toExact() : undefined\n  const rewardsUSDPerYear = cusdPriceOfRewardTokens\n    ? totalRewardRates.reduce((totalRewardsUSDPerYear: string, rewardRate, index) => {\n        return JSBI.add(\n          JSBI.BigInt(totalRewardsUSDPerYear),\n          JSBI.multiply(\n            cusdPriceOfRewardTokens[index]?.quote(rewardRate).raw ?? JSBI.BigInt(0),\n            JSBI.BigInt(BIG_INT_SECONDS_IN_YEAR)\n          )\n        ).toString()\n      }, '0')\n    : '0'\n\n  const getHypotheticalRewardRate = (\n    _stakedAmount: TokenAmount,\n    _totalStakedAmount: TokenAmount,\n    _totalRewardRates: TokenAmount[]\n  ): TokenAmount[] => {\n    return rewardTokens && rewardTokens.length > 0\n      ? rewardTokens.map(\n          (rewardToken, index) =>\n            new TokenAmount(\n              rewardToken,\n              JSBI.greaterThan(_totalStakedAmount.raw, JSBI.BigInt(0))\n                ? JSBI.divide(JSBI.multiply(_totalRewardRates[index].raw, _stakedAmount.raw), _totalStakedAmount.raw)\n                : JSBI.BigInt(0)\n            )\n        )\n      : []\n  }\n\n  const userRewardRates =\n    rewardTokens && rewardTokens.length > 0 && totalStakedAmount && stakedAmount\n      ? rewardTokens.map(\n          (rewardToken, index) =>\n            new TokenAmount(\n              rewardToken,\n              JSBI.greaterThan(totalStakedAmount.raw, JSBI.BigInt(0))\n                ? JSBI.divide(JSBI.multiply(totalRewardRates[index].raw, stakedAmount.raw), totalStakedAmount.raw)\n                : JSBI.BigInt(0)\n            )\n        )\n      : []\n\n  return {\n    totalStakedAmount,\n    stakingToken,\n    rewardTokens,\n    totalRewardRates,\n    stakedAmount,\n    userValueCUSD,\n    valueOfTotalStakedAmountInCUSD: Number(tvlUSD) < 1 ? '0' : tvlUSD,\n    active,\n    stakingRewardAddress: farmAddress,\n    getHypotheticalRewardRate,\n    tokens: pairToken && token0 && token1 ? [token0, token1] : stakingToken ? [stakingToken, stakingToken] : undefined,\n    earnedAmounts,\n    rewardRates: userRewardRates,\n    rewardsUSDPerYear,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}