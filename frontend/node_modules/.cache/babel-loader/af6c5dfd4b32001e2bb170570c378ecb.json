{"ast":null,"code":"import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet } from \"../common/canUse.js\";\nimport { checkDocument } from \"./getFromAST.js\";\nimport { invariant } from \"../globals/index.js\";\nfunction identity(document) {\n  return document;\n}\nvar DocumentTransform = function () {\n  function DocumentTransform(transform, options) {\n    if (options === void 0) {\n      options = Object.create(null);\n    }\n    this.resultCache = canUseWeakSet ? new WeakSet() : new Set();\n    this.transform = transform;\n    if (options.getCacheKey) {\n      this.getCacheKey = options.getCacheKey;\n    }\n    if (options.cache !== false) {\n      this.stableCacheKeys = new Trie(canUseWeakMap, function (key) {\n        return {\n          key: key\n        };\n      });\n    }\n  }\n  DocumentTransform.prototype.getCacheKey = function (document) {\n    return [document];\n  };\n  DocumentTransform.identity = function () {\n    return new DocumentTransform(identity, {\n      cache: false\n    });\n  };\n  DocumentTransform.split = function (predicate, left, right) {\n    if (right === void 0) {\n      right = DocumentTransform.identity();\n    }\n    return new DocumentTransform(function (document) {\n      var documentTransform = predicate(document) ? left : right;\n      return documentTransform.transformDocument(document);\n    }, {\n      cache: false\n    });\n  };\n  DocumentTransform.prototype.transformDocument = function (document) {\n    if (this.resultCache.has(document)) {\n      return document;\n    }\n    var cacheEntry = this.getStableCacheEntry(document);\n    if (cacheEntry && cacheEntry.value) {\n      return cacheEntry.value;\n    }\n    checkDocument(document);\n    var transformedDocument = this.transform(document);\n    this.resultCache.add(transformedDocument);\n    if (cacheEntry) {\n      cacheEntry.value = transformedDocument;\n    }\n    return transformedDocument;\n  };\n  DocumentTransform.prototype.concat = function (otherTransform) {\n    var _this = this;\n    return new DocumentTransform(function (document) {\n      return otherTransform.transformDocument(_this.transformDocument(document));\n    }, {\n      cache: false\n    });\n  };\n  DocumentTransform.prototype.getStableCacheEntry = function (document) {\n    if (!this.stableCacheKeys) return;\n    var cacheKeys = this.getCacheKey(document);\n    if (cacheKeys) {\n      invariant(Array.isArray(cacheKeys), 65);\n      return this.stableCacheKeys.lookupArray(cacheKeys);\n    }\n  };\n  return DocumentTransform;\n}();\nexport { DocumentTransform };","map":{"version":3,"sources":["../../../src/utilities/graphql/DocumentTransform.ts"],"names":[],"mappings":"AAAA,SAAS,IAAI,QAAQ,WAAW;AAChC,SAAS,aAAa,EAAE,aAAa,QAAQ,qBAAqB;AAClE,SAAS,aAAa,QAAQ,iBAAiB;AAC/C,SAAS,SAAS,QAAQ,qBAAqB;AAc/C,SAAS,QAAQ,CAAC,QAAsB,EAAA;EACtC,OAAO,QAAQ;AACjB;AAEA,IAAA,iBAAA,GAAA,YAAA;EA6CE,SAAA,iBAAA,CACE,SAAsB,EACtB,OAAuD,EAAA;IAAvD,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;MAAA,OAAA,GAAoC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;IAAA;IA5CxC,IAAA,CAAA,WAAW,GAAG,aAAa,GACxC,IAAI,OAAO,CAAA,CAAgB,GAC3B,IAAI,GAAG,CAAA,CAAgB;IA4CzB,IAAI,CAAC,SAAS,GAAG,SAAS;IAE1B,IAAI,OAAO,CAAC,WAAW,EAAE;MAEvB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW;IACvC;IAED,IAAI,OAAO,CAAC,KAAK,KAAK,KAAK,EAAE;MAC3B,IAAI,CAAC,eAAe,GAAG,IAAI,IAAI,CAAC,aAAa,EAAE,UAAC,GAAG,EAAA;QAAK,OAAC;UAAE,GAAG,EAAA;QAAA,CAAE;MAAR,CAAS,CAAC;IACnE;EACH;EA3CQ,iBAAA,CAAA,SAAA,CAAA,WAAW,GAAnB,UACE,QAAsB,EAAA;IAEtB,OAAO,CAAC,QAAQ,CAAC;EACnB,CAAC;EAEM,iBAAA,CAAA,QAAQ,GAAf,YAAA;IAIE,OAAO,IAAI,iBAAiB,CAAC,QAAQ,EAAE;MAAE,KAAK,EAAE;IAAK,CAAE,CAAC;EAC1D,CAAC;EAEM,iBAAA,CAAA,KAAK,GAAZ,UACE,SAA8C,EAC9C,IAAuB,EACvB,KAAuD,EAAA;IAAvD,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA;MAAA,KAAA,GAA2B,iBAAiB,CAAC,QAAQ,CAAA,CAAE;IAAA;IAEvD,OAAO,IAAI,iBAAiB,CAC1B,UAAC,QAAQ,EAAA;MACP,IAAM,iBAAiB,GAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAI,GAAG,KAAK;MAE5D,OAAO,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,CAAC;IACtD,CAAC,EAED;MAAE,KAAK,EAAE;IAAK,CAAE,CACjB;EACH,CAAC;EAkBD,iBAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UAAkB,QAAsB,EAAA;IAGtC,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;MAClC,OAAO,QAAQ;IAChB;IAED,IAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC;IAErD,IAAI,UAAU,IAAI,UAAU,CAAC,KAAK,EAAE;MAClC,OAAO,UAAU,CAAC,KAAK;IACxB;IAED,aAAa,CAAC,QAAQ,CAAC;IAEvB,IAAM,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;IAEpD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,mBAAmB,CAAC;IAEzC,IAAI,UAAU,EAAE;MACd,UAAU,CAAC,KAAK,GAAG,mBAAmB;IACvC;IAED,OAAO,mBAAmB;EAC5B,CAAC;EAED,iBAAA,CAAA,SAAA,CAAA,MAAM,GAAN,UAAO,cAAiC,EAAA;IAAxC,IAAA,KAAA,GAAA,IAAA;IACE,OAAO,IAAI,iBAAiB,CAC1B,UAAC,QAAQ,EAAA;MACP,OAAO,cAAc,CAAC,iBAAiB,CACrC,KAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CACjC;IACH,CAAC,EAED;MAAE,KAAK,EAAE;IAAK,CAAE,CACjB;EACH,CAAC;EAED,iBAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,UAAoB,QAAsB,EAAA;IACxC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;IAC3B,IAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;IAC5C,IAAI,SAAS,EAAE;MACb,SAAS,CACP,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EACxB,EAAA,CAAA;MAEF,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,SAAS,CAAC;IACnD;EACH,CAAC;EACH,OAAA,iBAAC;AAAD,CAAC,CAAA,CAAA","sourcesContent":["import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap, canUseWeakSet } from \"../common/canUse.js\";\nimport { checkDocument } from \"./getFromAST.js\";\nimport { invariant } from \"../globals/index.js\";\nimport type { DocumentNode } from \"graphql\";\n\nexport type DocumentTransformCacheKey = ReadonlyArray<unknown>;\n\ntype TransformFn = (document: DocumentNode) => DocumentNode;\n\ninterface DocumentTransformOptions {\n  cache?: boolean;\n  getCacheKey?: (\n    document: DocumentNode\n  ) => DocumentTransformCacheKey | undefined;\n}\n\nfunction identity(document: DocumentNode) {\n  return document;\n}\n\nexport class DocumentTransform {\n  private readonly transform: TransformFn;\n\n  private readonly resultCache = canUseWeakSet\n    ? new WeakSet<DocumentNode>()\n    : new Set<DocumentNode>();\n\n  private stableCacheKeys:\n    | Trie<{ key: DocumentTransformCacheKey; value?: DocumentNode }>\n    | undefined;\n\n  // This default implementation of getCacheKey can be overridden by providing\n  // options.getCacheKey to the DocumentTransform constructor. In general, a\n  // getCacheKey function may either return an array of keys (often including\n  // the document) to be used as a cache key, or undefined to indicate the\n  // transform for this document should not be cached.\n  private getCacheKey(\n    document: DocumentNode\n  ): DocumentTransformCacheKey | undefined {\n    return [document];\n  }\n\n  static identity() {\n    // No need to cache this transform since it just returns the document\n    // unchanged. This should save a bit of memory that would otherwise be\n    // needed to populate the `documentCache` of this transform.\n    return new DocumentTransform(identity, { cache: false });\n  }\n\n  static split(\n    predicate: (document: DocumentNode) => boolean,\n    left: DocumentTransform,\n    right: DocumentTransform = DocumentTransform.identity()\n  ) {\n    return new DocumentTransform(\n      (document) => {\n        const documentTransform = predicate(document) ? left : right;\n\n        return documentTransform.transformDocument(document);\n      },\n      // Reasonably assume both `left` and `right` transforms handle their own caching\n      { cache: false }\n    );\n  }\n\n  constructor(\n    transform: TransformFn,\n    options: DocumentTransformOptions = Object.create(null)\n  ) {\n    this.transform = transform;\n\n    if (options.getCacheKey) {\n      // Override default `getCacheKey` function, which returns [document].\n      this.getCacheKey = options.getCacheKey;\n    }\n\n    if (options.cache !== false) {\n      this.stableCacheKeys = new Trie(canUseWeakMap, (key) => ({ key }));\n    }\n  }\n\n  transformDocument(document: DocumentNode) {\n    // If a user passes an already transformed result back to this function,\n    // immediately return it.\n    if (this.resultCache.has(document)) {\n      return document;\n    }\n\n    const cacheEntry = this.getStableCacheEntry(document);\n\n    if (cacheEntry && cacheEntry.value) {\n      return cacheEntry.value;\n    }\n\n    checkDocument(document);\n\n    const transformedDocument = this.transform(document);\n\n    this.resultCache.add(transformedDocument);\n\n    if (cacheEntry) {\n      cacheEntry.value = transformedDocument;\n    }\n\n    return transformedDocument;\n  }\n\n  concat(otherTransform: DocumentTransform) {\n    return new DocumentTransform(\n      (document) => {\n        return otherTransform.transformDocument(\n          this.transformDocument(document)\n        );\n      },\n      // Reasonably assume both transforms handle their own caching\n      { cache: false }\n    );\n  }\n\n  getStableCacheEntry(document: DocumentNode) {\n    if (!this.stableCacheKeys) return;\n    const cacheKeys = this.getCacheKey(document);\n    if (cacheKeys) {\n      invariant(\n        Array.isArray(cacheKeys),\n        \"`getCacheKey` must return an array or undefined\"\n      );\n      return this.stableCacheKeys.lookupArray(cacheKeys);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}