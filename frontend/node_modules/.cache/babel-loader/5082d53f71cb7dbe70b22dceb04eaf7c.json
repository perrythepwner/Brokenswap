{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IstanbulUtils = exports.bitIsSet = exports.parseBlockExtraData = void 0;\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar rlp = __importStar(require(\"rlp\"));\n// This file contains utilities that help with istanbul-specific block information.\n// See https://github.com/celo-org/celo-blockchain/blob/master/core/types/istanbul.go\nvar ISTANBUL_EXTRA_VANITY_BYTES = 32;\nfunction bigNumberFromBuffer(data) {\n  return new bignumber_js_1.default('0x' + (data.toString('hex') || '0'), 16);\n}\nfunction sealFromBuffers(data) {\n  return {\n    bitmap: bigNumberFromBuffer(data[0]),\n    signature: '0x' + data[1].toString('hex'),\n    round: bigNumberFromBuffer(data[2])\n  };\n}\n// Parse RLP encoded block extra data into an IstanbulExtra object.\nfunction parseBlockExtraData(data) {\n  var buffer = Buffer.from(data.replace(/^0x/, ''), 'hex');\n  var decode = rlp.decode('0x' + buffer.slice(ISTANBUL_EXTRA_VANITY_BYTES).toString('hex'));\n  return {\n    addedValidators: decode[0].map(function (addr) {\n      return (0, ethereumjs_util_1.toChecksumAddress)(addr.toString('hex'));\n    }),\n    addedValidatorsPublicKeys: decode[1].map(function (key) {\n      return '0x' + key.toString('hex');\n    }),\n    removedValidators: bigNumberFromBuffer(decode[2]),\n    seal: '0x' + decode[3].toString('hex'),\n    aggregatedSeal: sealFromBuffers(decode[4]),\n    parentAggregatedSeal: sealFromBuffers(decode[5])\n  };\n}\nexports.parseBlockExtraData = parseBlockExtraData;\nfunction bitIsSet(bitmap, index) {\n  if (index < 0) {\n    throw new Error(\"bit index must be greater than zero: got \".concat(index));\n  }\n  return bitmap.idiv('1' + '0'.repeat(index), 2).mod(2).gt(0);\n}\nexports.bitIsSet = bitIsSet;\nexports.IstanbulUtils = {\n  parseBlockExtraData: parseBlockExtraData,\n  bitIsSet: bitIsSet\n};","map":null,"metadata":{},"sourceType":"script"}