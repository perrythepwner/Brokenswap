{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBasicType = exports.BasicType = void 0;\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * Represents a basic type as defined in the spec:\n * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#basic-types\n */\nclass BasicType extends abstract_1.Type {\n  constructor() {\n    super(...arguments);\n    this.isBasic = true;\n    // Basic types merkleize to exactly one chunk, thus depth of 0\n    this.depth = 0;\n    // Basic types merkleize to exactly one chunk\n    this.maxChunkCount = 1;\n  }\n  value_serializedSize() {\n    return this.byteLength;\n  }\n  tree_serializedSize() {\n    return this.byteLength;\n  }\n  assertValidSize(size) {\n    if (size !== this.byteLength) {\n      throw Error(\"BasicType invalid size \".concat(size, \" expected \").concat(this.byteLength));\n    }\n  }\n  hashTreeRoot(value) {\n    // TODO: Optimize\n    const uint8Array = new Uint8Array(32);\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    this.value_serializeToBytes({\n      uint8Array,\n      dataView\n    }, 0, value);\n    return uint8Array;\n  }\n  clone(value) {\n    // All basic types are represented by primitive Javascript types, don't require clone\n    return value;\n  }\n  equals(a, b) {\n    // All basic types are represented by primitive Javascript types, the operator === is sufficient\n    return a === b;\n  }\n}\nexports.BasicType = BasicType;\nfunction isBasicType(type) {\n  return type.isBasic;\n}\nexports.isBasicType = isBasicType;","map":{"version":3,"sources":["../../src/type/basic.ts"],"names":[],"mappings":";;;;;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;AAEA;;;AAGG;AACH,MAAsB,SAAa,SAAQ,UAAA,CAAA,IAAO,CAAA;EAAlD,WAAA,CAAA,EAAA;;IACW,IAAA,CAAA,OAAO,GAAG,IAAI;IACvB;IACS,IAAA,CAAA,KAAK,GAAG,CAAC;IAClB;IACS,IAAA,CAAA,aAAa,GAAG,CAAC;EA2C5B;EAxCE,oBAAoB,CAAA,EAAA;IAClB,OAAO,IAAI,CAAC,UAAU;EACxB;EAEA,mBAAmB,CAAA,EAAA;IACjB,OAAO,IAAI,CAAC,UAAU;EACxB;EAEU,eAAe,CAAC,IAAY,EAAA;IACpC,IAAI,IAAI,KAAK,IAAI,CAAC,UAAU,EAAE;MAC5B,MAAM,KAAK,2BAAA,MAAA,CAA2B,IAAI,gBAAA,MAAA,CAAa,IAAI,CAAC,UAAU,CAAE,CAAC;IAC1E;EACH;EAEA,YAAY,CAAC,KAAQ,EAAA;IACnB;IACA,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC;IACrC,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,UAAU,CAAC;IAC9F,IAAI,CAAC,sBAAsB,CAAC;MAAC,UAAU;MAAE;IAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;IAC7D,OAAO,UAAU;EACnB;EAEA,KAAK,CAAC,KAAQ,EAAA;IACZ;IACA,OAAO,KAAK;EACd;EAEA,MAAM,CAAC,CAAI,EAAE,CAAI,EAAA;IACf;IACA,OAAO,CAAC,KAAK,CAAC;EAChB;AAUD;AAhDD,OAAA,CAAA,SAAA,GAAA,SAAA;AAkDA,SAAgB,WAAW,CAAI,IAAa,EAAA;EAC1C,OAAO,IAAI,CAAC,OAAO;AACrB;AAFA,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isBasicType = exports.BasicType = void 0;\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * Represents a basic type as defined in the spec:\n * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#basic-types\n */\nclass BasicType extends abstract_1.Type {\n    constructor() {\n        super(...arguments);\n        this.isBasic = true;\n        // Basic types merkleize to exactly one chunk, thus depth of 0\n        this.depth = 0;\n        // Basic types merkleize to exactly one chunk\n        this.maxChunkCount = 1;\n    }\n    value_serializedSize() {\n        return this.byteLength;\n    }\n    tree_serializedSize() {\n        return this.byteLength;\n    }\n    assertValidSize(size) {\n        if (size !== this.byteLength) {\n            throw Error(`BasicType invalid size ${size} expected ${this.byteLength}`);\n        }\n    }\n    hashTreeRoot(value) {\n        // TODO: Optimize\n        const uint8Array = new Uint8Array(32);\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n        this.value_serializeToBytes({ uint8Array, dataView }, 0, value);\n        return uint8Array;\n    }\n    clone(value) {\n        // All basic types are represented by primitive Javascript types, don't require clone\n        return value;\n    }\n    equals(a, b) {\n        // All basic types are represented by primitive Javascript types, the operator === is sufficient\n        return a === b;\n    }\n}\nexports.BasicType = BasicType;\nfunction isBasicType(type) {\n    return type.isBasic;\n}\nexports.isBasicType = isBasicType;\n//# sourceMappingURL=basic.js.map"]},"metadata":{},"sourceType":"script"}