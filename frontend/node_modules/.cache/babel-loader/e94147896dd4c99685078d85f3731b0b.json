{"ast":null,"code":"import{Percent,Price,TokenAmount,TradeType}from'@ubeswap/sdk';import{UbeswapTrade}from'../trade';const moolaDirectRouter={};/**\n * A trade that directly happens with moola.\n */export class MoolaDirectTrade extends UbeswapTrade{isWithdrawal(){var _this$inputAmount$cur,_this$inputAmount$cur2;return(_this$inputAmount$cur=(_this$inputAmount$cur2=this.inputAmount.currency.symbol)===null||_this$inputAmount$cur2===void 0?void 0:_this$inputAmount$cur2.startsWith('m'))!==null&&_this$inputAmount$cur!==void 0?_this$inputAmount$cur:false;}constructor(route,inputAmount,outputAmount,tradeType){super(route,inputAmount,tradeType,moolaDirectRouter,[inputAmount.token,outputAmount.token]);/**\n   * The input amount for the trade assuming no slippage.\n   */this.inputAmount=void 0;/**\n   * The output amount for the trade assuming no slippage.\n   */this.outputAmount=void 0;/**\n   * The price expressed in terms of output amount/input amount.\n   */this.executionPrice=void 0;/**\n   * The mid price after the trade executes assuming no slippage.\n   */this.nextMidPrice=void 0;/**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */this.priceImpact=void 0;this.inputAmount=inputAmount;this.outputAmount=outputAmount;this.executionPrice=new Price(inputAmount.token,outputAmount.token,'1','1');this.nextMidPrice=new Price(inputAmount.token,outputAmount.token,'1','1');this.priceImpact=new Percent('0');this.hidePairAnalytics=true;}static fromIn(route,inputAmount){return new MoolaDirectTrade(route,inputAmount,new TokenAmount(route.output,inputAmount.raw),TradeType.EXACT_INPUT);}static fromOut(route,outputAmount){return new MoolaDirectTrade(route,new TokenAmount(route.output,outputAmount.raw),outputAmount,TradeType.EXACT_OUTPUT);}}","map":{"version":3,"names":["Percent","Price","TokenAmount","TradeType","UbeswapTrade","moolaDirectRouter","MoolaDirectTrade","isWithdrawal","_this$inputAmount$cur","_this$inputAmount$cur2","inputAmount","currency","symbol","startsWith","constructor","route","outputAmount","tradeType","token","executionPrice","nextMidPrice","priceImpact","hidePairAnalytics","fromIn","output","raw","EXACT_INPUT","fromOut","EXACT_OUTPUT"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/components/swap/routing/moola/MoolaDirectTrade.ts"],"sourcesContent":["import { Percent, Price, Route, TokenAmount, TradeType } from '@ubeswap/sdk'\n\nimport { TradeRouter, UbeswapTrade } from '../trade'\n\nconst moolaDirectRouter: TradeRouter = {}\n\n/**\n * A trade that directly happens with moola.\n */\nexport class MoolaDirectTrade extends UbeswapTrade {\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  inputAmount: TokenAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  outputAmount: TokenAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  priceImpact: Percent\n\n  isWithdrawal(): boolean {\n    return this.inputAmount.currency.symbol?.startsWith('m') ?? false\n  }\n\n  constructor(route: Route, inputAmount: TokenAmount, outputAmount: TokenAmount, tradeType: TradeType) {\n    super(route, inputAmount, tradeType, moolaDirectRouter, [inputAmount.token, outputAmount.token])\n    this.inputAmount = inputAmount\n    this.outputAmount = outputAmount\n    this.executionPrice = new Price(inputAmount.token, outputAmount.token, '1', '1')\n    this.nextMidPrice = new Price(inputAmount.token, outputAmount.token, '1', '1')\n    this.priceImpact = new Percent('0')\n    this.hidePairAnalytics = true\n  }\n\n  static fromIn(route: Route, inputAmount: TokenAmount): MoolaDirectTrade {\n    return new MoolaDirectTrade(\n      route,\n      inputAmount,\n      new TokenAmount(route.output, inputAmount.raw),\n      TradeType.EXACT_INPUT\n    )\n  }\n\n  static fromOut(route: Route, outputAmount: TokenAmount): MoolaDirectTrade {\n    return new MoolaDirectTrade(\n      route,\n      new TokenAmount(route.output, outputAmount.raw),\n      outputAmount,\n      TradeType.EXACT_OUTPUT\n    )\n  }\n}\n"],"mappings":"AAAA,OAASA,OAAO,CAAEC,KAAK,CAASC,WAAW,CAAEC,SAAS,KAAQ,cAAc,CAE5E,OAAsBC,YAAY,KAAQ,UAAU,CAEpD,KAAM,CAAAC,iBAA8B,CAAG,CAAC,CAAC,CAEzC;AACA;AACA,GACA,MAAO,MAAM,CAAAC,gBAAgB,QAAS,CAAAF,YAAa,CAsBjDG,YAAYA,CAAA,CAAY,KAAAC,qBAAA,CAAAC,sBAAA,CACtB,OAAAD,qBAAA,EAAAC,sBAAA,CAAO,IAAI,CAACC,WAAW,CAACC,QAAQ,CAACC,MAAM,UAAAH,sBAAA,iBAAhCA,sBAAA,CAAkCI,UAAU,CAAC,GAAG,CAAC,UAAAL,qBAAA,UAAAA,qBAAA,CAAI,KAAK,CACnE,CAEAM,WAAWA,CAACC,KAAY,CAAEL,WAAwB,CAAEM,YAAyB,CAAEC,SAAoB,CAAE,CACnG,KAAK,CAACF,KAAK,CAAEL,WAAW,CAAEO,SAAS,CAAEZ,iBAAiB,CAAE,CAACK,WAAW,CAACQ,KAAK,CAAEF,YAAY,CAACE,KAAK,CAAC,CAAC,CA1BlG;AACF;AACA,KAFE,KAGAR,WAAW,QACX;AACF;AACA,KAFE,KAGAM,YAAY,QACZ;AACF;AACA,KAFE,KAGAG,cAAc,QACd;AACF;AACA,KAFE,KAGAC,YAAY,QACZ;AACF;AACA,KAFE,KAGAC,WAAW,QAQT,IAAI,CAACX,WAAW,CAAGA,WAAW,CAC9B,IAAI,CAACM,YAAY,CAAGA,YAAY,CAChC,IAAI,CAACG,cAAc,CAAG,GAAI,CAAAlB,KAAK,CAACS,WAAW,CAACQ,KAAK,CAAEF,YAAY,CAACE,KAAK,CAAE,GAAG,CAAE,GAAG,CAAC,CAChF,IAAI,CAACE,YAAY,CAAG,GAAI,CAAAnB,KAAK,CAACS,WAAW,CAACQ,KAAK,CAAEF,YAAY,CAACE,KAAK,CAAE,GAAG,CAAE,GAAG,CAAC,CAC9E,IAAI,CAACG,WAAW,CAAG,GAAI,CAAArB,OAAO,CAAC,GAAG,CAAC,CACnC,IAAI,CAACsB,iBAAiB,CAAG,IAAI,CAC/B,CAEA,MAAO,CAAAC,MAAMA,CAACR,KAAY,CAAEL,WAAwB,CAAoB,CACtE,MAAO,IAAI,CAAAJ,gBAAgB,CACzBS,KAAK,CACLL,WAAW,CACX,GAAI,CAAAR,WAAW,CAACa,KAAK,CAACS,MAAM,CAAEd,WAAW,CAACe,GAAG,CAAC,CAC9CtB,SAAS,CAACuB,WACZ,CAAC,CACH,CAEA,MAAO,CAAAC,OAAOA,CAACZ,KAAY,CAAEC,YAAyB,CAAoB,CACxE,MAAO,IAAI,CAAAV,gBAAgB,CACzBS,KAAK,CACL,GAAI,CAAAb,WAAW,CAACa,KAAK,CAACS,MAAM,CAAER,YAAY,CAACS,GAAG,CAAC,CAC/CT,YAAY,CACZb,SAAS,CAACyB,YACZ,CAAC,CACH,CACF"},"metadata":{},"sourceType":"module"}