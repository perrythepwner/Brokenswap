{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.proxySend = exports.proxyCall = exports.tupleParser = exports.stringIdentity = exports.identity = exports.solidityBytesToString = exports.bufferToSolidityBytes = exports.stringToSolidityBytes = exports.unixSecondsTimestampToDateString = exports.blocksToDurationString = exports.secondsToDurationString = exports.valueToFrac = exports.valueToInt = exports.valueToFixidityString = exports.valueToString = exports.fixidityValueToBigNumber = exports.valueToBigNumber = exports.BaseWrapper = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar collections_1 = require(\"@celo/base/lib/collections\");\nvar connect_1 = require(\"@celo/connect\");\nvar fixidity_1 = require(\"@celo/utils/lib/fixidity\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar versions_1 = require(\"../versions\");\n/**\n * @internal -- use its children\n */\nvar BaseWrapper = /** @class */function () {\n  function BaseWrapper(connection, contract) {\n    var _this = this;\n    this.connection = connection;\n    this.contract = contract;\n    this.events = this.contract.events;\n    this.eventTypes = Object.keys(this.events).reduce(function (acc, key) {\n      var _a;\n      return __assign(__assign({}, acc), (_a = {}, _a[key] = key, _a));\n    }, {});\n    this.methodIds = Object.keys(this.contract.methods).reduce(function (acc, method) {\n      var methodABI = _this.contract.options.jsonInterface.find(function (item) {\n        return item.name === method;\n      });\n      acc[method] = methodABI === undefined ? '0x' : _this.connection.getAbiCoder().encodeFunctionSignature(methodABI);\n      return acc;\n    }, {});\n  }\n  Object.defineProperty(BaseWrapper.prototype, \"address\", {\n    /** Contract address */\n    get: function get() {\n      return this.contract.options.address;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  BaseWrapper.prototype.version = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var raw;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this._version) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.contract.methods.getVersionNumber().call()\n            // @ts-ignore conditional type\n            ];\n\n          case 1:\n            raw = _a.sent();\n            // @ts-ignore conditional type\n            this._version = versions_1.ContractVersion.fromRaw(raw);\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, this._version];\n        }\n      });\n    });\n  };\n  BaseWrapper.prototype.onlyVersionOrGreater = function (version) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.version()];\n          case 1:\n            if (!_a.sent().isAtLeast(version)) {\n              throw new Error(\"Bytecode version \".concat(this._version, \" is not compatible with \").concat(version, \" yet\"));\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /** Contract getPastEvents */\n  BaseWrapper.prototype.getPastEvents = function (event, options) {\n    return this.contract.getPastEvents(event, options);\n  };\n  return BaseWrapper;\n}();\nexports.BaseWrapper = BaseWrapper;\nvar valueToBigNumber = function valueToBigNumber(input) {\n  return new bignumber_js_1.default(input);\n};\nexports.valueToBigNumber = valueToBigNumber;\nvar fixidityValueToBigNumber = function fixidityValueToBigNumber(input) {\n  return (0, fixidity_1.fromFixed)(new bignumber_js_1.default(input));\n};\nexports.fixidityValueToBigNumber = fixidityValueToBigNumber;\nvar valueToString = function valueToString(input) {\n  return (0, exports.valueToBigNumber)(input).toFixed();\n};\nexports.valueToString = valueToString;\nvar valueToFixidityString = function valueToFixidityString(input) {\n  return (0, fixidity_1.toFixed)((0, exports.valueToBigNumber)(input)).toFixed();\n};\nexports.valueToFixidityString = valueToFixidityString;\nvar valueToInt = function valueToInt(input) {\n  return (0, exports.valueToBigNumber)(input).integerValue().toNumber();\n};\nexports.valueToInt = valueToInt;\nvar valueToFrac = function valueToFrac(numerator, denominator) {\n  return (0, exports.valueToBigNumber)(numerator).div((0, exports.valueToBigNumber)(denominator));\n};\nexports.valueToFrac = valueToFrac;\nvar TimeDurations;\n(function (TimeDurations) {\n  TimeDurations[TimeDurations[\"millennium\"] = 31536000000000] = \"millennium\";\n  TimeDurations[TimeDurations[\"century\"] = 3153600000000] = \"century\";\n  TimeDurations[TimeDurations[\"decade\"] = 315360000000] = \"decade\";\n  TimeDurations[TimeDurations[\"year\"] = 31536000000] = \"year\";\n  TimeDurations[TimeDurations[\"quarter\"] = 7776000000] = \"quarter\";\n  TimeDurations[TimeDurations[\"month\"] = 2592000000] = \"month\";\n  TimeDurations[TimeDurations[\"week\"] = 604800000] = \"week\";\n  TimeDurations[TimeDurations[\"day\"] = 86400000] = \"day\";\n  TimeDurations[TimeDurations[\"hour\"] = 3600000] = \"hour\";\n  TimeDurations[TimeDurations[\"minute\"] = 60000] = \"minute\";\n  TimeDurations[TimeDurations[\"second\"] = 1000] = \"second\";\n  TimeDurations[TimeDurations[\"millisecond\"] = 1] = \"millisecond\";\n})(TimeDurations || (TimeDurations = {}));\n// taken mostly from https://gist.github.com/RienNeVaPlus/024de3431ae95546d60f2acce128a7e2\nfunction secondsToDurationString(durationSeconds, outputUnits) {\n  if (outputUnits === void 0) {\n    outputUnits = ['year', 'month', 'week', 'day', 'hour', 'minute', 'second'];\n  }\n  var durationMilliseconds = (0, exports.valueToBigNumber)(durationSeconds).times(TimeDurations.second).toNumber();\n  if (durationMilliseconds <= 0) {\n    return 'past';\n  }\n  var durations = outputUnits.reduce(function (res, key) {\n    var unitDuration = TimeDurations[key];\n    var value = Math.floor(durationMilliseconds / unitDuration);\n    durationMilliseconds -= value * unitDuration;\n    return res.set(key, value);\n  }, new Map());\n  var s = '';\n  durations.forEach(function (value, unit) {\n    if (value > 0) {\n      s += s !== '' ? ', ' : '';\n      s += \"\".concat(value, \" \").concat(unit).concat(value > 1 ? 's' : '');\n    }\n  });\n  return s;\n}\nexports.secondsToDurationString = secondsToDurationString;\nvar blocksToDurationString = function blocksToDurationString(input) {\n  return secondsToDurationString((0, exports.valueToBigNumber)(input).times(5));\n}; // TODO: fetch blocktime\nexports.blocksToDurationString = blocksToDurationString;\nvar DATE_TIME_OPTIONS = {\n  year: 'numeric',\n  month: 'short',\n  weekday: 'short',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  timeZoneName: 'short'\n};\nvar unixSecondsTimestampToDateString = function unixSecondsTimestampToDateString(input) {\n  var date = new Date((0, exports.valueToInt)(input) * TimeDurations.second);\n  return Intl.DateTimeFormat('default', DATE_TIME_OPTIONS).format(date);\n};\nexports.unixSecondsTimestampToDateString = unixSecondsTimestampToDateString;\nvar stringToSolidityBytes = function stringToSolidityBytes(input) {\n  return (0, address_1.ensureLeading0x)(input);\n};\nexports.stringToSolidityBytes = stringToSolidityBytes;\nvar bufferToSolidityBytes = function bufferToSolidityBytes(input) {\n  return (0, exports.stringToSolidityBytes)((0, address_1.bufferToHex)(input));\n};\nexports.bufferToSolidityBytes = bufferToSolidityBytes;\nvar solidityBytesToString = function solidityBytesToString(input) {\n  if (input === null || input === undefined || typeof input === 'string') {\n    return input;\n  } else if (Array.isArray(input)) {\n    var hexString = input.reduce(function (acc, num) {\n      return acc + num.toString(16).padStart(2, '0');\n    }, '');\n    return (0, address_1.ensureLeading0x)(hexString);\n  } else {\n    throw new Error('Unexpected input type for solidity bytes');\n  }\n};\nexports.solidityBytesToString = solidityBytesToString;\n/** Identity Parser */\nvar identity = function identity(a) {\n  return a;\n};\nexports.identity = identity;\nvar stringIdentity = function stringIdentity(x) {\n  return x;\n};\nexports.stringIdentity = stringIdentity;\nfunction tupleParser() {\n  var parsers = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    parsers[_i] = arguments[_i];\n  }\n  return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return (0, collections_1.zip)(function (parser, input) {\n      return parser(input);\n    }, parsers, args);\n  };\n}\nexports.tupleParser = tupleParser;\nfunction proxyCall() {\n  var callArgs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    callArgs[_i] = arguments[_i];\n  }\n  if (callArgs.length === 3 && callArgs[1] != null) {\n    var methodFn_1 = callArgs[0];\n    var parseInputArgs_1 = callArgs[1];\n    var parseOutput_1 = callArgs[2];\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return methodFn_1.apply(void 0, parseInputArgs_1.apply(void 0, args)).call().then(parseOutput_1);\n    };\n  } else if (callArgs.length === 3) {\n    var methodFn_2 = callArgs[0];\n    var parseOutput_2 = callArgs[2];\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return methodFn_2.apply(void 0, args).call().then(parseOutput_2);\n    };\n  } else if (callArgs.length === 2) {\n    var methodFn_3 = callArgs[0];\n    var parseInputArgs_2 = callArgs[1];\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return methodFn_3.apply(void 0, parseInputArgs_2.apply(void 0, args)).call();\n    };\n  } else {\n    var methodFn_4 = callArgs[0];\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return methodFn_4.apply(void 0, args).call();\n    };\n  }\n}\nexports.proxyCall = proxyCall;\n/**\n * Creates a proxy to send a tx on a web3 native contract method.\n *\n * There are 2 cases:\n *  - call methodFn (no pre or post parsing)\n *  - preParse arguments & call methodFn\n *\n * @param methodFn Web3 methods function\n * @param preParse [optional] preParse function, tranforms arguments into `methodFn` expected inputs\n */\nfunction proxySend(connection) {\n  var sendArgs = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    sendArgs[_i - 1] = arguments[_i];\n  }\n  if (sendArgs.length === 2) {\n    var methodFn_5 = sendArgs[0];\n    var preParse_1 = sendArgs[1];\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return (0, connect_1.toTransactionObject)(connection, methodFn_5.apply(void 0, preParse_1.apply(void 0, args)));\n    };\n  } else {\n    var methodFn_6 = sendArgs[0];\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return (0, connect_1.toTransactionObject)(connection, methodFn_6.apply(void 0, args));\n    };\n  }\n}\nexports.proxySend = proxySend;","map":null,"metadata":{},"sourceType":"script"}