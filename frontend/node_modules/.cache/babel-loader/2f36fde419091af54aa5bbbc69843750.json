{"ast":null,"code":"// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n// Useful for processing arguments objects as well as arrays.\nconst {\n  forEach,\n  slice\n} = Array.prototype;\nconst {\n  hasOwnProperty\n} = Object.prototype;\nexport class Trie {\n  constructor() {\n    let weakness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let makeData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMakeData;\n    this.weakness = weakness;\n    this.makeData = makeData;\n  }\n  lookup() {\n    for (var _len = arguments.length, array = new Array(_len), _key = 0; _key < _len; _key++) {\n      array[_key] = arguments[_key];\n    }\n    return this.lookupArray(array);\n  }\n  lookupArray(array) {\n    let node = this;\n    forEach.call(array, key => node = node.getChildTrie(key));\n    return hasOwnProperty.call(node, \"data\") ? node.data : node.data = this.makeData(slice.call(array));\n  }\n  peek() {\n    for (var _len2 = arguments.length, array = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      array[_key2] = arguments[_key2];\n    }\n    return this.peekArray(array);\n  }\n  peekArray(array) {\n    let node = this;\n    for (let i = 0, len = array.length; node && i < len; ++i) {\n      const map = this.weakness && isObjRef(array[i]) ? node.weak : node.strong;\n      node = map && map.get(array[i]);\n    }\n    return node && node.data;\n  }\n  getChildTrie(key) {\n    const map = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new Trie(this.weakness, this.makeData));\n    return child;\n  }\n}\nfunction isObjRef(value) {\n  switch (typeof value) {\n    case \"object\":\n      if (value === null) break;\n    // Fall through to return true...\n    case \"function\":\n      return true;\n  }\n  return false;\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n// Useful for processing arguments objects as well as arrays.\nconst { forEach, slice } = Array.prototype;\nconst { hasOwnProperty } = Object.prototype;\nexport class Trie {\n    constructor(weakness = true, makeData = defaultMakeData) {\n        this.weakness = weakness;\n        this.makeData = makeData;\n    }\n    lookup(...array) {\n        return this.lookupArray(array);\n    }\n    lookupArray(array) {\n        let node = this;\n        forEach.call(array, key => node = node.getChildTrie(key));\n        return hasOwnProperty.call(node, \"data\")\n            ? node.data\n            : node.data = this.makeData(slice.call(array));\n    }\n    peek(...array) {\n        return this.peekArray(array);\n    }\n    peekArray(array) {\n        let node = this;\n        for (let i = 0, len = array.length; node && i < len; ++i) {\n            const map = this.weakness && isObjRef(array[i]) ? node.weak : node.strong;\n            node = map && map.get(array[i]);\n        }\n        return node && node.data;\n    }\n    getChildTrie(key) {\n        const map = this.weakness && isObjRef(key)\n            ? this.weak || (this.weak = new WeakMap())\n            : this.strong || (this.strong = new Map());\n        let child = map.get(key);\n        if (!child)\n            map.set(key, child = new Trie(this.weakness, this.makeData));\n        return child;\n    }\n}\nfunction isObjRef(value) {\n    switch (typeof value) {\n        case \"object\":\n            if (value === null)\n                break;\n        // Fall through to return true...\n        case \"function\":\n            return true;\n    }\n    return false;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}