{"ast":null,"code":"import _asyncToGenerator from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{useCelo,useProvider}from'@celo/react-celo';import IUniswapV2PairABI from'@ubeswap/core/build/abi/IUniswapV2Pair.json';import{JSBI,Token,TokenAmount}from'@ubeswap/sdk';import ERC20_ABI from'constants/abis/erc20';import MOOLA_STAKING_ABI from'constants/abis/moola/MoolaStakingRewards.json';import{ethers}from'ethers';import{useAllTokens,useToken}from'hooks/Tokens';import{useMultiStakingContract,useStakingContract}from'hooks/useContract';import useCurrentBlockTimestamp from'hooks/useCurrentBlockTimestamp';import{useEffect,useMemo,useState}from'react';import{useSingleCallResult}from'state/multicall/hooks';import{getProviderOrSigner}from'utils';import{isAddress}from'web3-utils';import{BIG_INT_SECONDS_IN_YEAR}from'./../../constants/index';import{useCUSDPrice,useCUSDPriceOfULP,useCUSDPrices}from'./../../utils/useCUSDPrice';export const useCustomStakingInfo=farmAddress=>{var _useSingleCallResult,_useSingleCallResult$,_useSingleCallResult2,_useSingleCallResult3,_useSingleCallResult4,_useSingleCallResult5,_useSingleCallResult6,_useSingleCallResult7,_useSingleCallResult8,_useSingleCallResult9,_useSingleCallResult10,_useSingleCallResult11,_useSingleCallResult12;const{address:account,network}=useCelo();const{chainId}=network;const library=useProvider();const provider=getProviderOrSigner(library,account||undefined);const tokens=useAllTokens();const stakingContract=useStakingContract(isAddress(farmAddress)?farmAddress:'');const multiStakingContract=useMultiStakingContract(isAddress(farmAddress)?farmAddress:'');const[externalRewardsTokens,setExternalRewardsTokens]=useState([]);const[externalRewardsRates,setExternalRewardsRates]=useState([]);const[externalEarnedAmounts,setExternalEarnedAmounts]=useState([]);const[fetchingMultiStaking,setFetchingMultiStaking]=useState(false);const[pairToken,setPairToken]=useState(undefined);const currentBlockTimestamp=useCurrentBlockTimestamp();useEffect(()=>{const fetchMultiStaking=/*#__PURE__*/function(){var _ref=_asyncToGenerator(function*(){if(fetchingMultiStaking||!multiStakingContract){return;}const externalRewardsTokens=[];const rates=[];const amounts=[];try{setFetchingMultiStaking(true);const externalInfo=yield Promise.all([multiStakingContract.externalStakingRewards(),multiStakingContract.callStatic.earnedExternal(account!==null&&account!==void 0?account:'')]);let stakingRewardsAddress=externalInfo[0];const externalEarned=externalInfo[1];if(externalEarned.length){externalEarned.map(earned=>amounts.push(earned));}for(let i=0;i<externalEarned.length;i+=1){const moolaStaking=new ethers.Contract(stakingRewardsAddress,MOOLA_STAKING_ABI,provider);const[rewardsTokenAddress,rewardRate]=yield Promise.all([moolaStaking.rewardsToken(),moolaStaking.rewardRate()]);const token=rewardsTokenAddress?tokens[rewardsTokenAddress]:undefined;if(token){externalRewardsTokens.push(token);}else{const tokenContract=new ethers.Contract(rewardsTokenAddress,ERC20_ABI,provider);const[tokenName,symbol,decimals]=yield Promise.all([tokenContract.name(),tokenContract.symbol(),tokenContract.decimals()]);externalRewardsTokens.push(new Token(chainId,rewardsTokenAddress,decimals,symbol,tokenName));}rates.push(rewardRate);if(i<externalEarned.length-1)stakingRewardsAddress=yield moolaStaking.externalStakingRewards();}}catch(err){console.error(err);}setFetchingMultiStaking(false);setExternalRewardsTokens(externalRewardsTokens);setExternalRewardsRates(rates);setExternalEarnedAmounts(amounts);});return function fetchMultiStaking(){return _ref.apply(this,arguments);};}();fetchMultiStaking();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[account,multiStakingContract]);const balanceOf=(_useSingleCallResult=useSingleCallResult(stakingContract,'balanceOf',[account||undefined]))===null||_useSingleCallResult===void 0?void 0:(_useSingleCallResult$=_useSingleCallResult.result)===null||_useSingleCallResult$===void 0?void 0:_useSingleCallResult$[0];const periodFinish=(_useSingleCallResult2=useSingleCallResult(stakingContract,'periodFinish',[]))===null||_useSingleCallResult2===void 0?void 0:(_useSingleCallResult3=_useSingleCallResult2.result)===null||_useSingleCallResult3===void 0?void 0:_useSingleCallResult3[0];const periodFinishSeconds=periodFinish===null||periodFinish===void 0?void 0:periodFinish.toNumber();const active=periodFinishSeconds&&currentBlockTimestamp?periodFinishSeconds>currentBlockTimestamp.toNumber():false;const rewardTokenAddress=(_useSingleCallResult4=useSingleCallResult(stakingContract,'rewardsToken',[]))===null||_useSingleCallResult4===void 0?void 0:(_useSingleCallResult5=_useSingleCallResult4.result)===null||_useSingleCallResult5===void 0?void 0:_useSingleCallResult5[0];const rewardToken=useToken(rewardTokenAddress);let rewardRates=(_useSingleCallResult6=useSingleCallResult(stakingContract,'rewardRate',[]))===null||_useSingleCallResult6===void 0?void 0:_useSingleCallResult6.result;rewardRates=rewardRates?[...rewardRates,...externalRewardsRates]:externalRewardsRates;const earnedAmount=(_useSingleCallResult7=useSingleCallResult(stakingContract,'earned',[account||undefined]))===null||_useSingleCallResult7===void 0?void 0:(_useSingleCallResult8=_useSingleCallResult7.result)===null||_useSingleCallResult8===void 0?void 0:_useSingleCallResult8[0];const earnedAmountsAll=earnedAmount?[earnedAmount,...externalEarnedAmounts]:externalEarnedAmounts;const totalSupply=(_useSingleCallResult9=useSingleCallResult(stakingContract,'totalSupply',[]))===null||_useSingleCallResult9===void 0?void 0:(_useSingleCallResult10=_useSingleCallResult9.result)===null||_useSingleCallResult10===void 0?void 0:_useSingleCallResult10[0];const stakingTokenAddress=(_useSingleCallResult11=useSingleCallResult(stakingContract,'stakingToken',[]))===null||_useSingleCallResult11===void 0?void 0:(_useSingleCallResult12=_useSingleCallResult11.result)===null||_useSingleCallResult12===void 0?void 0:_useSingleCallResult12[0];const stakingToken=useToken(stakingTokenAddress);const stakedAmount=stakingToken?new TokenAmount(stakingToken,JSBI.BigInt(balanceOf!==null&&balanceOf!==void 0?balanceOf:0)):undefined;const pair=useMemo(()=>{return stakingTokenAddress?new ethers.Contract(stakingTokenAddress,IUniswapV2PairABI,provider):undefined;},[provider,stakingTokenAddress]);useEffect(()=>{const getPairToken=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(function*(pair){let token0Address=undefined;let token1Address=undefined;try{const tokens=yield Promise.all([pair.token0(),pair.token1()]);token0Address=tokens[0];token1Address=tokens[1];}catch(err){console.error(err);}setPairToken(token0Address&&token1Address?{token0Address,token1Address}:undefined);});return function getPairToken(_x){return _ref2.apply(this,arguments);};}();if(pair&&!pairToken){getPairToken(pair);}},[pair,pairToken]);const token0=useToken(pairToken?pairToken.token0Address:undefined);const token1=useToken(pairToken?pairToken.token1Address:undefined);const cusdPriceOfULP0=useCUSDPrice(stakingToken!==null&&stakingToken!==void 0?stakingToken:undefined);const cusdPriceOfULP1=useCUSDPriceOfULP(pairToken&&stakingToken?stakingToken:undefined);const lpPrice=cusdPriceOfULP1?cusdPriceOfULP1:cusdPriceOfULP0;const rewardTokens=rewardToken&&isAddress(farmAddress)?[rewardToken,...externalRewardsTokens]:[];const cusdPriceOfRewardTokens=useCUSDPrices(rewardTokens);const earnedAmounts=rewardTokens&&isAddress(farmAddress)?rewardTokens===null||rewardTokens===void 0?void 0:rewardTokens.map((rewardsToken,index)=>{var _earnedAmountsAll$ind;return new TokenAmount(rewardsToken,JSBI.BigInt((_earnedAmountsAll$ind=earnedAmountsAll[index])!==null&&_earnedAmountsAll$ind!==void 0?_earnedAmountsAll$ind:0));}):[];const totalRewardRates=rewardTokens&&isAddress(farmAddress)?rewardTokens.map((rewardsToken,i)=>new TokenAmount(rewardsToken,rewardRates&&rewardRates[i]?rewardRates[i]:JSBI.BigInt(0))):[];const totalStakedAmount=stakingToken&&totalSupply?new TokenAmount(stakingToken,JSBI.BigInt(totalSupply)):undefined;const tvlUSD=totalStakedAmount&&lpPrice?lpPrice.quote(totalStakedAmount).toSignificant(6):undefined;const userValueCUSD=stakedAmount&&lpPrice?lpPrice.quote(stakedAmount).toExact():undefined;const rewardsUSDPerYear=cusdPriceOfRewardTokens?totalRewardRates.reduce((totalRewardsUSDPerYear,rewardRate,index)=>{var _cusdPriceOfRewardTok,_cusdPriceOfRewardTok2;return JSBI.add(JSBI.BigInt(totalRewardsUSDPerYear),JSBI.multiply((_cusdPriceOfRewardTok=(_cusdPriceOfRewardTok2=cusdPriceOfRewardTokens[index])===null||_cusdPriceOfRewardTok2===void 0?void 0:_cusdPriceOfRewardTok2.quote(rewardRate).raw)!==null&&_cusdPriceOfRewardTok!==void 0?_cusdPriceOfRewardTok:JSBI.BigInt(0),JSBI.BigInt(BIG_INT_SECONDS_IN_YEAR))).toString();},'0'):'0';const getHypotheticalRewardRate=(_stakedAmount,_totalStakedAmount,_totalRewardRates)=>{return rewardTokens&&rewardTokens.length>0?rewardTokens.map((rewardToken,index)=>new TokenAmount(rewardToken,JSBI.greaterThan(_totalStakedAmount.raw,JSBI.BigInt(0))?JSBI.divide(JSBI.multiply(_totalRewardRates[index].raw,_stakedAmount.raw),_totalStakedAmount.raw):JSBI.BigInt(0))):[];};const userRewardRates=rewardTokens&&rewardTokens.length>0&&totalStakedAmount&&stakedAmount?rewardTokens.map((rewardToken,index)=>new TokenAmount(rewardToken,JSBI.greaterThan(totalStakedAmount.raw,JSBI.BigInt(0))?JSBI.divide(JSBI.multiply(totalRewardRates[index].raw,stakedAmount.raw),totalStakedAmount.raw):JSBI.BigInt(0))):[];return{totalStakedAmount,stakingToken,rewardTokens,totalRewardRates,stakedAmount,userValueCUSD,valueOfTotalStakedAmountInCUSD:Number(tvlUSD)<1?'0':tvlUSD,active,stakingRewardAddress:farmAddress,getHypotheticalRewardRate,tokens:pairToken&&token0&&token1?[token0,token1]:stakingToken?[stakingToken,stakingToken]:undefined,earnedAmounts,rewardRates:userRewardRates,rewardsUSDPerYear};};","map":null,"metadata":{},"sourceType":"module"}