{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;\nclass _CodeOrName {}\nexports._CodeOrName = _CodeOrName;\nexports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;\nclass Name extends _CodeOrName {\n  constructor(s) {\n    super();\n    if (!exports.IDENTIFIER.test(s)) throw new Error(\"CodeGen: name must be a valid identifier\");\n    this.str = s;\n  }\n  toString() {\n    return this.str;\n  }\n  emptyStr() {\n    return false;\n  }\n  get names() {\n    return {\n      [this.str]: 1\n    };\n  }\n}\nexports.Name = Name;\nclass _Code extends _CodeOrName {\n  constructor(code) {\n    super();\n    this._items = typeof code === \"string\" ? [code] : code;\n  }\n  toString() {\n    return this.str;\n  }\n  emptyStr() {\n    if (this._items.length > 1) return false;\n    const item = this._items[0];\n    return item === \"\" || item === '\"\"';\n  }\n  get str() {\n    var _a;\n    return (_a = this._str) !== null && _a !== void 0 ? _a : this._str = this._items.reduce((s, c) => \"\".concat(s).concat(c), \"\");\n  }\n  get names() {\n    var _a;\n    return (_a = this._names) !== null && _a !== void 0 ? _a : this._names = this._items.reduce((names, c) => {\n      if (c instanceof Name) names[c.str] = (names[c.str] || 0) + 1;\n      return names;\n    }, {});\n  }\n}\nexports._Code = _Code;\nexports.nil = new _Code(\"\");\nfunction _(strs) {\n  const code = [strs[0]];\n  let i = 0;\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  while (i < args.length) {\n    addCodeArg(code, args[i]);\n    code.push(strs[++i]);\n  }\n  return new _Code(code);\n}\nexports._ = _;\nconst plus = new _Code(\"+\");\nfunction str(strs) {\n  const expr = [safeStringify(strs[0])];\n  let i = 0;\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n  while (i < args.length) {\n    expr.push(plus);\n    addCodeArg(expr, args[i]);\n    expr.push(plus, safeStringify(strs[++i]));\n  }\n  optimize(expr);\n  return new _Code(expr);\n}\nexports.str = str;\nfunction addCodeArg(code, arg) {\n  if (arg instanceof _Code) code.push(...arg._items);else if (arg instanceof Name) code.push(arg);else code.push(interpolate(arg));\n}\nexports.addCodeArg = addCodeArg;\nfunction optimize(expr) {\n  let i = 1;\n  while (i < expr.length - 1) {\n    if (expr[i] === plus) {\n      const res = mergeExprItems(expr[i - 1], expr[i + 1]);\n      if (res !== undefined) {\n        expr.splice(i - 1, 3, res);\n        continue;\n      }\n      expr[i++] = \"+\";\n    }\n    i++;\n  }\n}\nfunction mergeExprItems(a, b) {\n  if (b === '\"\"') return a;\n  if (a === '\"\"') return b;\n  if (typeof a == \"string\") {\n    if (b instanceof Name || a[a.length - 1] !== '\"') return;\n    if (typeof b != \"string\") return \"\".concat(a.slice(0, -1)).concat(b, \"\\\"\");\n    if (b[0] === '\"') return a.slice(0, -1) + b.slice(1);\n    return;\n  }\n  if (typeof b == \"string\" && b[0] === '\"' && !(a instanceof Name)) return \"\\\"\".concat(a).concat(b.slice(1));\n  return;\n}\nfunction strConcat(c1, c2) {\n  return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\", \"\", \"\"])), c1, c2);\n}\nexports.strConcat = strConcat;\n// TODO do not allow arrays here\nfunction interpolate(x) {\n  return typeof x == \"number\" || typeof x == \"boolean\" || x === null ? x : safeStringify(Array.isArray(x) ? x.join(\",\") : x);\n}\nfunction stringify(x) {\n  return new _Code(safeStringify(x));\n}\nexports.stringify = stringify;\nfunction safeStringify(x) {\n  return JSON.stringify(x).replace(/\\u2028/g, \"\\\\u2028\").replace(/\\u2029/g, \"\\\\u2029\");\n}\nexports.safeStringify = safeStringify;\nfunction getProperty(key) {\n  return typeof key == \"string\" && exports.IDENTIFIER.test(key) ? new _Code(\".\".concat(key)) : _(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"[\", \"]\"])), key);\n}\nexports.getProperty = getProperty;\n//Does best effort to format the name properly\nfunction getEsmExportName(key) {\n  if (typeof key == \"string\" && exports.IDENTIFIER.test(key)) {\n    return new _Code(\"\".concat(key));\n  }\n  throw new Error(\"CodeGen: invalid export name: \".concat(key, \", use explicit $id name mapping\"));\n}\nexports.getEsmExportName = getEsmExportName;\nfunction regexpCode(rx) {\n  return new _Code(rx.toString());\n}\nexports.regexpCode = regexpCode;","map":null,"metadata":{},"sourceType":"script"}