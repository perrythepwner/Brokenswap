{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst validate_1 = require(\"../../compile/validate\");\nconst code_1 = require(\"../code\");\nconst util_1 = require(\"../../compile/util\");\nconst additionalProperties_1 = require(\"./additionalProperties\");\nconst def = {\n  keyword: \"properties\",\n  type: \"object\",\n  schemaType: \"object\",\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      parentSchema,\n      data,\n      it\n    } = cxt;\n    if (it.opts.removeAdditional === \"all\" && parentSchema.additionalProperties === undefined) {\n      additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, \"additionalProperties\"));\n    }\n    const allProps = (0, code_1.allSchemaProperties)(schema);\n    for (const prop of allProps) {\n      it.definedProperties.add(prop);\n    }\n    if (it.opts.unevaluated && allProps.length && it.props !== true) {\n      it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);\n    }\n    const properties = allProps.filter(p => !(0, util_1.alwaysValidSchema)(it, schema[p]));\n    if (properties.length === 0) return;\n    const valid = gen.name(\"valid\");\n    for (const prop of properties) {\n      if (hasDefault(prop)) {\n        applyPropertySchema(prop);\n      } else {\n        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));\n        applyPropertySchema(prop);\n        if (!it.allErrors) gen.else().var(valid, true);\n        gen.endIf();\n      }\n      cxt.it.definedProperties.add(prop);\n      cxt.ok(valid);\n    }\n    function hasDefault(prop) {\n      return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;\n    }\n    function applyPropertySchema(prop) {\n      cxt.subschema({\n        keyword: \"properties\",\n        schemaProp: prop,\n        dataProp: prop\n      }, valid);\n    }\n  }\n};\nexports.default = def;","map":null,"metadata":{},"sourceType":"script"}