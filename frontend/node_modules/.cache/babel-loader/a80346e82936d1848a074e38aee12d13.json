{"ast":null,"code":"import _objectSpread from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _taggedTemplateLiteral from\"/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject;import{gql,useApolloClient,useQuery}from'@apollo/client';import{useCelo}from'@celo/react-celo';import{BigNumber}from'@ethersproject/bignumber';import{formatEther,parseEther}from'@ethersproject/units';import{Percent}from'@ubeswap/sdk';import{ethers}from'ethers';import React,{useEffect}from'react';import farmRegistryAbi from'../../constants/abis/FarmRegistry.json';import{CACHED_FARM_INFO_BLOCK,cachedFarmInfoEvents,cachedLpInfoEvents}from'./cachedFarmInfo';import{useCustomStakingInfo}from'./useCustomStakingInfo';const blacklist={'0x4488682fd16562a68ea0d0f898413e075f42e6da':true,'0xC245976Db329Bb0414253376246a367B7c96C762':true};const featuredPoolWhitelist={'0x6F11B6eA70DEe4f167b1A4ED1F01C903f6781960':false,// PACT\n'0xEfe2f9d62E45815837b4f20c1F44F0A83605B540':false,// ARI\n'0x155DA6F164D925E3a91F510B50DEC08aA03B4071':false,// IMMO\n'0x3c8e2eB988f0890B68b5667C2FB867249E68E3C7':false// CELO-SYMM\n};const pairDataGql=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  query getPairHourData($id: String!) {\\n    pair(id: $id) {\\n      pairHourData(first: 24, orderBy: hourStartUnix, orderDirection: desc) {\\n        hourStartUnix\\n        hourlyVolumeUSD\\n      }\\n    }\\n  }\\n\"])));const COMPOUNDS_PER_YEAR=2;const CREATION_BLOCK=9840049;const LAST_N_BLOCKS=5760;// Last 8 hours\nexport const useFarmRegistry=()=>{const{kit}=useCelo();const client=useApolloClient();const[farmSummaries,setFarmSummaries]=React.useState([]);const call=React.useCallback(/*#__PURE__*/_asyncToGenerator(function*(){const farmRegistry=new kit.connection.web3.eth.Contract(farmRegistryAbi,'0xa2bf67e12EeEDA23C7cA1e5a34ae2441a17789Ec');const lastBlock=yield kit.connection.web3.eth.getBlockNumber();const[farmInfoEvents,lpInfoEvents,farmDataEvents]=yield Promise.all([farmRegistry.getPastEvents('FarmInfo',{fromBlock:CACHED_FARM_INFO_BLOCK,toBlock:lastBlock}).then(events=>events.concat(cachedFarmInfoEvents)),farmRegistry.getPastEvents('LPInfo',{fromBlock:CACHED_FARM_INFO_BLOCK,toBlock:lastBlock}).then(events=>events.concat(cachedLpInfoEvents)),farmRegistry.getPastEvents('FarmData',{fromBlock:lastBlock-LAST_N_BLOCKS,toBlock:lastBlock})]);const lps={};lpInfoEvents.forEach(e=>{lps[e.returnValues.lpAddress]=[e.returnValues.token0Address,e.returnValues.token1Address];});const farmData={};farmDataEvents.forEach(e=>{farmData[e.returnValues.stakingAddress]={tvlUSD:e.returnValues.tvlUSD,rewardsUSDPerYear:e.returnValues.rewardsUSDPerYear};});const farmSummaries=[];farmInfoEvents.filter(e=>!blacklist[e.returnValues.stakingAddress.toLowerCase()]).forEach(e=>{// sometimes there is no farm data for the staking address return early to avoid crash\nif(!farmData[e.returnValues.stakingAddress]){return;}farmSummaries.push({farmName:ethers.utils.parseBytes32String(e.returnValues.farmName),stakingAddress:e.returnValues.stakingAddress,lpAddress:e.returnValues.lpAddress,token0Address:lps[e.returnValues.lpAddress][0],token1Address:lps[e.returnValues.lpAddress][1],tvlUSD:BigNumber.from(farmData[e.returnValues.stakingAddress].tvlUSD),rewardsUSDPerYear:BigNumber.from(farmData[e.returnValues.stakingAddress].rewardsUSDPerYear),isFeatured:!!featuredPoolWhitelist[e.returnValues.stakingAddress],isImported:false});});farmSummaries.sort((a,b)=>Number(formatEther(b.rewardsUSDPerYear.sub(a.rewardsUSDPerYear)))).sort((a,b)=>Number(a.tvlUSD&&b.tvlUSD?formatEther(b.tvlUSD.sub(a.tvlUSD)):0));const results=yield Promise.all(farmSummaries.map(summary=>{return client.query({query:pairDataGql,variables:{id:summary.lpAddress.toLowerCase()}});}));const farmInfos=results.map((result,index)=>calcAPR(result,farmSummaries[index]));setFarmSummaries(farmSummaries.map((summary,index)=>_objectSpread(_objectSpread({},summary),farmInfos[index])));}),[kit.connection.web3.eth,client]);useEffect(()=>{call();},[call]);return farmSummaries;};export const useImportedFarmRegistry=farmAddress=>{const{stakingToken,totalRewardRates,valueOfTotalStakedAmountInCUSD,tokens,rewardsUSDPerYear,totalStakedAmount}=useCustomStakingInfo(farmAddress);const result=useQuery(pairDataGql,{variables:{id:stakingToken===null||stakingToken===void 0?void 0:stakingToken.address.toLowerCase()}});if(stakingToken&&totalRewardRates&&tokens){const farmSummary={farmName:'',stakingAddress:farmAddress,lpAddress:stakingToken===null||stakingToken===void 0?void 0:stakingToken.address,token0Address:tokens[0].address,token1Address:tokens[1].address,isFeatured:false,tvlUSD:valueOfTotalStakedAmountInCUSD?parseEther(valueOfTotalStakedAmountInCUSD):undefined,totalStakedAmount:totalStakedAmount,rewardsUSDPerYear:BigNumber.from(rewardsUSDPerYear),isImported:true,totalRewardRates};const farmInfo=calcAPR(result,farmSummary);return _objectSpread(_objectSpread({},farmSummary),farmInfo);}return undefined;};export const useUniqueBestFarms=()=>{const farmSummaries=useFarmRegistry();const farmsUniqueByBestFarm=farmSummaries.reduce((prev,current)=>{if(!prev[current.lpAddress]){prev[current.lpAddress]=current;}else if(current.rewardsUSDPerYear.gt(prev[current.lpAddress].rewardsUSDPerYear)){prev[current.lpAddress]=current;}return prev;},{});return farmsUniqueByBestFarm;};// formula is 1 + ((nom/compoundsPerYear)^compoundsPerYear) - 1\nfunction annualizedPercentageYield(nominal,compounds){const ONE=1;const divideNominalByNAddOne=Number(nominal.divide(BigInt(compounds)).add(BigInt(ONE)).toFixed(10));// multiply 100 to turn decimal into percent, to fixed since we only display integer\nreturn((divideNominalByNAddOne**compounds-ONE)*100).toFixed(0);}// calculate rewardAPR, swapAPR, APY & APR from a farmSummary\nfunction calcAPR(result,summary){var _summary$tvlUSD,_summary$tvlUSD2,_summary$tvlUSD3,_summary$tvlUSD4;let swapRewardsUSDPerYear=BigNumber.from(0);const{loading,error,data}=result;if(!loading&&!error&&data!==null&&data!==void 0&&data.pair){const lastDayVolumeUsd=data.pair.pairHourData.reduce((acc,curr)=>acc+Number(curr.hourlyVolumeUSD),0);swapRewardsUSDPerYear=parseEther(Math.floor(lastDayVolumeUsd*365*0.0025).toString());}const rewardApr=new Percent(summary.rewardsUSDPerYear.toString(),(_summary$tvlUSD=summary.tvlUSD)===null||_summary$tvlUSD===void 0?void 0:_summary$tvlUSD.toString());const swapApr=new Percent(swapRewardsUSDPerYear.toString(),(_summary$tvlUSD2=summary.tvlUSD)===null||_summary$tvlUSD2===void 0?void 0:_summary$tvlUSD2.toString());const apr=new Percent(swapRewardsUSDPerYear.add(summary.rewardsUSDPerYear).toString(),(_summary$tvlUSD3=summary.tvlUSD)===null||_summary$tvlUSD3===void 0?void 0:_summary$tvlUSD3.toString());let apy='0';if((_summary$tvlUSD4=summary.tvlUSD)!==null&&_summary$tvlUSD4!==void 0&&_summary$tvlUSD4.gt(0)){try{apy=annualizedPercentageYield(apr,COMPOUNDS_PER_YEAR);}catch(e){console.error('apy calc overflow',summary.farmName,e);}}return{rewardApr,swapApr,apr,apy};}","map":{"version":3,"names":["gql","useApolloClient","useQuery","useCelo","BigNumber","formatEther","parseEther","Percent","ethers","React","useEffect","farmRegistryAbi","CACHED_FARM_INFO_BLOCK","cachedFarmInfoEvents","cachedLpInfoEvents","useCustomStakingInfo","blacklist","featuredPoolWhitelist","pairDataGql","_templateObject","_taggedTemplateLiteral","COMPOUNDS_PER_YEAR","CREATION_BLOCK","LAST_N_BLOCKS","useFarmRegistry","kit","client","farmSummaries","setFarmSummaries","useState","call","useCallback","_asyncToGenerator","farmRegistry","connection","web3","eth","Contract","lastBlock","getBlockNumber","farmInfoEvents","lpInfoEvents","farmDataEvents","Promise","all","getPastEvents","fromBlock","toBlock","then","events","concat","lps","forEach","e","returnValues","lpAddress","token0Address","token1Address","farmData","stakingAddress","tvlUSD","rewardsUSDPerYear","filter","toLowerCase","push","farmName","utils","parseBytes32String","from","isFeatured","isImported","sort","a","b","Number","sub","results","map","summary","query","variables","id","farmInfos","result","index","calcAPR","_objectSpread","useImportedFarmRegistry","farmAddress","stakingToken","totalRewardRates","valueOfTotalStakedAmountInCUSD","tokens","totalStakedAmount","address","farmSummary","undefined","farmInfo","useUniqueBestFarms","farmsUniqueByBestFarm","reduce","prev","current","gt","annualizedPercentageYield","nominal","compounds","ONE","divideNominalByNAddOne","divide","BigInt","add","toFixed","_summary$tvlUSD","_summary$tvlUSD2","_summary$tvlUSD3","_summary$tvlUSD4","swapRewardsUSDPerYear","loading","error","data","pair","lastDayVolumeUsd","pairHourData","acc","curr","hourlyVolumeUSD","Math","floor","toString","rewardApr","swapApr","apr","apy","console"],"sources":["/home/simone/Scrivania/progetti/HTB_challs/HackTheBoo_23/VeryEasy2/Brokenswap/frontend/src/pages/Earn/useFarmRegistry.ts"],"sourcesContent":["import { ApolloQueryResult, gql, useApolloClient, useQuery } from '@apollo/client'\nimport { useCelo } from '@celo/react-celo'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther, parseEther } from '@ethersproject/units'\nimport { Percent, TokenAmount } from '@ubeswap/sdk'\nimport { ethers } from 'ethers'\nimport React, { useEffect } from 'react'\nimport { AbiItem } from 'web3-utils'\n\nimport farmRegistryAbi from '../../constants/abis/FarmRegistry.json'\nimport { CACHED_FARM_INFO_BLOCK, cachedFarmInfoEvents, cachedLpInfoEvents } from './cachedFarmInfo'\nimport { useCustomStakingInfo } from './useCustomStakingInfo'\n\ntype FarmData = {\n  tvlUSD: string\n  rewardsUSDPerYear: string\n}\n\nexport type FarmSummary = {\n  farmName: string\n  stakingAddress: string\n  lpAddress: string\n  rewardsUSDPerYear: BigNumber\n  tvlUSD: BigNumber | undefined\n  totalStakedAmount?: TokenAmount | undefined\n  token0Address: string\n  token1Address: string\n  isFeatured: boolean\n  rewardApr?: Percent\n  swapApr?: Percent\n  apr?: Percent\n  apy?: string\n  isImported: boolean\n  totalRewardRates?: TokenAmount[]\n}\n\nconst blacklist: Record<string, boolean> = {\n  '0x4488682fd16562a68ea0d0f898413e075f42e6da': true,\n  '0xC245976Db329Bb0414253376246a367B7c96C762': true,\n}\n\nconst featuredPoolWhitelist: Record<string, boolean> = {\n  '0x6F11B6eA70DEe4f167b1A4ED1F01C903f6781960': false, // PACT\n  '0xEfe2f9d62E45815837b4f20c1F44F0A83605B540': false, // ARI\n  '0x155DA6F164D925E3a91F510B50DEC08aA03B4071': false, // IMMO\n  '0x3c8e2eB988f0890B68b5667C2FB867249E68E3C7': false, // CELO-SYMM\n}\n\nconst pairDataGql = gql`\n  query getPairHourData($id: String!) {\n    pair(id: $id) {\n      pairHourData(first: 24, orderBy: hourStartUnix, orderDirection: desc) {\n        hourStartUnix\n        hourlyVolumeUSD\n      }\n    }\n  }\n`\nconst COMPOUNDS_PER_YEAR = 2\nconst CREATION_BLOCK = 9840049\nconst LAST_N_BLOCKS = 5760 // Last 8 hours\n\nexport interface WarningInfo {\n  poolName: string\n  link: string\n}\n\nexport const useFarmRegistry = () => {\n  const { kit } = useCelo()\n  const client = useApolloClient()\n  const [farmSummaries, setFarmSummaries] = React.useState<FarmSummary[]>([])\n  const call = React.useCallback(async () => {\n    const farmRegistry = new kit.connection.web3.eth.Contract(\n      farmRegistryAbi as AbiItem[],\n      '0xa2bf67e12EeEDA23C7cA1e5a34ae2441a17789Ec'\n    )\n    const lastBlock = await kit.connection.web3.eth.getBlockNumber()\n    const [farmInfoEvents, lpInfoEvents, farmDataEvents] = await Promise.all([\n      farmRegistry\n        .getPastEvents('FarmInfo', {\n          fromBlock: CACHED_FARM_INFO_BLOCK,\n          toBlock: lastBlock,\n        })\n        .then((events) => events.concat(cachedFarmInfoEvents)),\n      farmRegistry\n        .getPastEvents('LPInfo', { fromBlock: CACHED_FARM_INFO_BLOCK, toBlock: lastBlock })\n        .then((events) => events.concat(cachedLpInfoEvents)),\n      farmRegistry.getPastEvents('FarmData', {\n        fromBlock: lastBlock - LAST_N_BLOCKS,\n        toBlock: lastBlock,\n      }),\n    ])\n\n    const lps: Record<string, [string, string]> = {}\n    lpInfoEvents.forEach((e) => {\n      lps[e.returnValues.lpAddress] = [e.returnValues.token0Address, e.returnValues.token1Address]\n    })\n    const farmData: Record<string, FarmData> = {}\n    farmDataEvents.forEach((e) => {\n      farmData[e.returnValues.stakingAddress] = {\n        tvlUSD: e.returnValues.tvlUSD,\n        rewardsUSDPerYear: e.returnValues.rewardsUSDPerYear,\n      }\n    })\n    const farmSummaries: FarmSummary[] = []\n    farmInfoEvents\n      .filter((e) => !blacklist[e.returnValues.stakingAddress.toLowerCase()])\n      .forEach((e) => {\n        // sometimes there is no farm data for the staking address return early to avoid crash\n        if (!farmData[e.returnValues.stakingAddress]) {\n          return\n        }\n        farmSummaries.push({\n          farmName: ethers.utils.parseBytes32String(e.returnValues.farmName),\n          stakingAddress: e.returnValues.stakingAddress,\n          lpAddress: e.returnValues.lpAddress,\n          token0Address: lps[e.returnValues.lpAddress][0],\n          token1Address: lps[e.returnValues.lpAddress][1],\n          tvlUSD: BigNumber.from(farmData[e.returnValues.stakingAddress].tvlUSD),\n          rewardsUSDPerYear: BigNumber.from(farmData[e.returnValues.stakingAddress].rewardsUSDPerYear),\n          isFeatured: !!featuredPoolWhitelist[e.returnValues.stakingAddress],\n          isImported: false,\n        })\n      })\n\n    farmSummaries\n      .sort((a, b) => Number(formatEther(b.rewardsUSDPerYear.sub(a.rewardsUSDPerYear))))\n      .sort((a, b) => Number(a.tvlUSD && b.tvlUSD ? formatEther(b.tvlUSD.sub(a.tvlUSD)) : 0))\n\n    const results = await Promise.all(\n      farmSummaries.map((summary) => {\n        return client.query({ query: pairDataGql, variables: { id: summary.lpAddress.toLowerCase() } })\n      })\n    )\n    const farmInfos = results.map((result: ApolloQueryResult<any>, index) => calcAPR(result, farmSummaries[index]))\n    setFarmSummaries(\n      farmSummaries.map((summary, index) => ({\n        ...summary,\n        ...farmInfos[index],\n      }))\n    )\n  }, [kit.connection.web3.eth, client])\n\n  useEffect(() => {\n    call()\n  }, [call])\n\n  return farmSummaries\n}\n\nexport const useImportedFarmRegistry = (farmAddress: string): FarmSummary | undefined => {\n  const {\n    stakingToken,\n    totalRewardRates,\n    valueOfTotalStakedAmountInCUSD,\n    tokens,\n    rewardsUSDPerYear,\n    totalStakedAmount,\n  } = useCustomStakingInfo(farmAddress)\n\n  const result = useQuery(pairDataGql, {\n    variables: { id: stakingToken?.address.toLowerCase() },\n  })\n\n  if (stakingToken && totalRewardRates && tokens) {\n    const farmSummary: FarmSummary = {\n      farmName: '',\n      stakingAddress: farmAddress,\n      lpAddress: stakingToken?.address,\n      token0Address: tokens[0].address,\n      token1Address: tokens[1].address,\n      isFeatured: false,\n      tvlUSD: valueOfTotalStakedAmountInCUSD ? parseEther(valueOfTotalStakedAmountInCUSD) : undefined,\n      totalStakedAmount: totalStakedAmount,\n      rewardsUSDPerYear: BigNumber.from(rewardsUSDPerYear),\n      isImported: true,\n      totalRewardRates,\n    }\n    const farmInfo = calcAPR(result, farmSummary)\n    return { ...farmSummary, ...farmInfo }\n  }\n  return undefined\n}\n\nexport const useUniqueBestFarms = () => {\n  const farmSummaries = useFarmRegistry()\n  const farmsUniqueByBestFarm = farmSummaries.reduce((prev: Record<string, FarmSummary>, current) => {\n    if (!prev[current.lpAddress]) {\n      prev[current.lpAddress] = current\n    } else if (current.rewardsUSDPerYear.gt(prev[current.lpAddress].rewardsUSDPerYear)) {\n      prev[current.lpAddress] = current\n    }\n    return prev\n  }, {})\n\n  return farmsUniqueByBestFarm\n}\n\n// formula is 1 + ((nom/compoundsPerYear)^compoundsPerYear) - 1\nfunction annualizedPercentageYield(nominal: Percent, compounds: number) {\n  const ONE = 1\n\n  const divideNominalByNAddOne = Number(nominal.divide(BigInt(compounds)).add(BigInt(ONE)).toFixed(10))\n\n  // multiply 100 to turn decimal into percent, to fixed since we only display integer\n  return ((divideNominalByNAddOne ** compounds - ONE) * 100).toFixed(0)\n}\n\n// calculate rewardAPR, swapAPR, APY & APR from a farmSummary\nfunction calcAPR(\n  result: ApolloQueryResult<any>,\n  summary: FarmSummary\n): {\n  rewardApr: Percent\n  swapApr: Percent\n  apr: Percent\n  apy: string\n} {\n  let swapRewardsUSDPerYear: BigNumber = BigNumber.from(0)\n  const { loading, error, data } = result\n  if (!loading && !error && data?.pair) {\n    const lastDayVolumeUsd = data.pair.pairHourData.reduce(\n      (acc: number, curr: { hourlyVolumeUSD: string }) => acc + Number(curr.hourlyVolumeUSD),\n      0\n    )\n    swapRewardsUSDPerYear = parseEther(Math.floor(lastDayVolumeUsd * 365 * 0.0025).toString())\n  }\n  const rewardApr = new Percent(summary.rewardsUSDPerYear.toString(), summary.tvlUSD?.toString())\n  const swapApr = new Percent(swapRewardsUSDPerYear.toString(), summary.tvlUSD?.toString())\n  const apr = new Percent(swapRewardsUSDPerYear.add(summary.rewardsUSDPerYear).toString(), summary.tvlUSD?.toString())\n  let apy = '0'\n  if (summary.tvlUSD?.gt(0)) {\n    try {\n      apy = annualizedPercentageYield(apr, COMPOUNDS_PER_YEAR)\n    } catch (e) {\n      console.error('apy calc overflow', summary.farmName, e)\n    }\n  }\n  return {\n    rewardApr,\n    swapApr,\n    apr,\n    apy,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}