"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.urlWithoutTrailingSlash = exports.concatRelativePath = exports.isHtmlElement = exports.determineWidgetVariant = exports.initEventListenersDict = exports.normalizeConfigAndLogErrorsOnInvalidFields = exports.minWidgetMobileHeight = exports.minWidgetMobileWidth = exports.widgetDesktopHeight = exports.widgetDesktopWidth = exports.getRandomIntString = void 0;
var types_1 = require("./types");
function getRandomIntString() {
    try {
        return String(crypto.getRandomValues(new Uint32Array(1))[0]);
    }
    catch (_a) {
        // if `crypto` is not supported, fall back to Math.random
        // tslint:disable-next-line:no-magic-numbers
        return String(Math.floor(Math.random() * 10000000));
    }
}
exports.getRandomIntString = getRandomIntString;
exports.widgetDesktopWidth = 895;
exports.widgetDesktopHeight = 590;
exports.minWidgetMobileWidth = 320;
exports.minWidgetMobileHeight = 667;
function normalizeConfigAndLogErrorsOnInvalidFields(config) {
    var errors = [];
    var configCopy = __assign({}, config);
    if (![
        'desktop',
        'mobile',
        'hosted-desktop',
        'hosted-mobile',
        'hosted-auto',
        'auto',
        'embedded-desktop',
        'embedded-mobile',
    ].includes(config.variant)) {
        configCopy.variant = 'desktop';
        errors.push({
            fieldName: 'variant',
            description: 'Invalid value for `variant` config field ',
            exampleValue: "'desktop'",
            severity: types_1.EventSeverity.WARNING,
        });
    }
    if (config.variant === 'embedded-desktop' || config.variant === 'embedded-mobile') {
        validateContainerNode(config.containerNode, config.variant);
    }
    if (!['embedded-desktop', 'embedded-mobile'].includes(configCopy.variant)) {
        delete configCopy.containerNode;
    }
    logErrors(errors);
    return configCopy;
}
exports.normalizeConfigAndLogErrorsOnInvalidFields = normalizeConfigAndLogErrorsOnInvalidFields;
function logErrors(errors) {
    if (!errors.length) {
        return;
    }
    // tslint:disable:no-console
    console.group('Config errors');
    errors.forEach(function (error) {
        console.group(error.fieldName);
        console.log(error.description);
        console.log("Example expected value: ".concat(error.exampleValue));
        console.log("Severity: ".concat(error.severity));
        console.groupEnd();
    });
    console.groupEnd();
    // tslint:enable:no-console
}
function initEventListenersDict() {
    var widgetEventTypes = Array.from(Object.values(types_1.WidgetEventTypes));
    var internalEventTypes = Array.from(Object.values(types_1.InternalEventTypes));
    return __spreadArray(__spreadArray([], widgetEventTypes, true), internalEventTypes, true).reduce(function (listenersDict, eventType) {
        listenersDict[eventType] = [];
        return listenersDict;
    }, {});
}
exports.initEventListenersDict = initEventListenersDict;
function determineWidgetVariant(config) {
    var _a;
    var mediaQuery = '(min-width: 920px) and (min-height: 630px)';
    var variant = (_a = config.variant) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase();
    if (variant === 'mobile' ||
        variant === 'desktop' ||
        variant === 'hosted-mobile' ||
        variant === 'hosted-desktop' ||
        variant === 'embedded-desktop' ||
        variant === 'embedded-mobile') {
        return variant;
    }
    var isDesktop = window.matchMedia(mediaQuery).matches;
    if (variant === 'hosted-auto') {
        return isDesktop ? 'hosted-desktop' : 'hosted-mobile';
    }
    return isDesktop ? 'desktop' : 'mobile';
}
exports.determineWidgetVariant = determineWidgetVariant;
function isHtmlElement(element) {
    return typeof element.blur === 'function';
}
exports.isHtmlElement = isHtmlElement;
function validateContainerNode(containerNode, variant) {
    if (!document.body) {
        throw new Error("Couldn't find <body> element.");
    }
    if (!(containerNode instanceof HTMLElement)) {
        throw new Error('Container node has to be a proper HTML element.');
    }
    if (!document.body.contains(containerNode)) {
        throw new Error('Container node must be attached to the document.');
    }
    var _a = containerNode.getBoundingClientRect(), width = _a.width, height = _a.height;
    if (variant === 'embedded-desktop') {
        if (width + 1 < exports.widgetDesktopWidth) {
            throw new Error("Container node must be at least ".concat(exports.widgetDesktopWidth, "px wide."));
        }
        if (height + 1 < exports.widgetDesktopHeight) {
            throw new Error("Container node must be at least ".concat(exports.widgetDesktopHeight, "px tall."));
        }
    }
    else if (variant === 'embedded-mobile') {
        if (width + 1 < exports.minWidgetMobileWidth) {
            throw new Error("Container node must be at least ".concat(exports.minWidgetMobileWidth, "px wide."));
        }
        if (height + 1 < exports.minWidgetMobileHeight) {
            throw new Error("Container node must be at least ".concat(exports.minWidgetMobileHeight, "px tall."));
        }
    }
}
/**
 * Concatenates `base` with `path`, always treating `path` as a relative path. Ignores:
 *   - trailing slash in `base`
 *   - leading slash in `path`
 * @param base base URL, e.g.: 'http://example.com/api' or 'http://example.com/service/api/'
 * @param path path to append, e.g.: 'user/getByEmail' or '/swap'
 */
function concatRelativePath(base, path) {
    var normalizedBase = urlWithoutTrailingSlash(base instanceof URL ? base.href : base);
    var normalizedPath = path.startsWith('/') ? path.substr(1) : path;
    return new URL("".concat(normalizedBase, "/").concat(normalizedPath));
}
exports.concatRelativePath = concatRelativePath;
function urlWithoutTrailingSlash(url) {
    return url.endsWith('/') ? url.slice(0, -1) : url;
}
exports.urlWithoutTrailingSlash = urlWithoutTrailingSlash;
//# sourceMappingURL=utils.js.map